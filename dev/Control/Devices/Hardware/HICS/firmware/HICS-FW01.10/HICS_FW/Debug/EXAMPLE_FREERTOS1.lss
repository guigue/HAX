
EXAMPLE_FREERTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001444c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041444c  0041444c  0002444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000aa8  20000000  00414454  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00012a24  20000aa8  00414f00  00030aa8  2**3
                  ALLOC
  4 .stack        00003004  200134cc  00427924  00030aa8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030ad6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00049145  00000000  00000000  00030b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008f1d  00000000  00000000  00079c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001a64d  00000000  00000000  00082b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001750  00000000  00000000  0009d1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002158  00000000  00000000  0009e92e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00015f97  00000000  00000000  000a0a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025390  00000000  00000000  000b6a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007c835  00000000  00000000  000dbdad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000051b4  00000000  00000000  001585e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 64 01 20 71 3d 40 00 6d 3d 40 00 6d 3d 40 00     .d. q=@.m=@.m=@.
  400010:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 00 00 00 00     m=@.m=@.m=@.....
	...
  40002c:	f1 9e 40 00 6d 3d 40 00 00 00 00 00 51 9f 40 00     ..@.m=@.....Q.@.
  40003c:	95 9f 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     ..@.m=@.m=@.m=@.
  40004c:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  40005c:	6d 3d 40 00 6d 3d 40 00 f5 1f 40 00 09 20 40 00     m=@.m=@...@.. @.
  40006c:	1d 20 40 00 31 20 40 00 45 20 40 00 6d 3d 40 00     . @.1 @.E @.m=@.
  40007c:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  40008c:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  40009c:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  4000ac:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  4000bc:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  4000cc:	11 2b 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     .+@.m=@.m=@.m=@.
  4000dc:	6d 3d 40 00 6d 3d 40 00 6d 3d 40 00 6d 3d 40 00     m=@.m=@.m=@.m=@.
  4000ec:	6d 3d 40 00 f5 a6 40 00 6d 3d 40 00                 m=@...@.m=@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000aa8 	.word	0x20000aa8
  400114:	00000000 	.word	0x00000000
  400118:	00414454 	.word	0x00414454

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00414454 	.word	0x00414454
  400158:	20000aac 	.word	0x20000aac
  40015c:	00414454 	.word	0x00414454
  400160:	00000000 	.word	0x00000000

00400164 <ui_init>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400164:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400168:	4b01      	ldr	r3, [pc, #4]	; (400170 <ui_init+0xc>)
  40016a:	635a      	str	r2, [r3, #52]	; 0x34
  40016c:	4770      	bx	lr
  40016e:	bf00      	nop
  400170:	400e1400 	.word	0x400e1400

00400174 <ui_powerdown>:
{
	LED_On(LED0);
}

void ui_powerdown(void)
{
  400174:	4770      	bx	lr

00400176 <ui_wakeup>:
	// MZ_TESTE LED_Off(LED0);
}

void ui_wakeup(void)
{
  400176:	4770      	bx	lr

00400178 <ui_start_read>:
	// MZ_TESTE LED_On(LED0);
}

void ui_start_read(void)
{
  400178:	4770      	bx	lr

0040017a <ui_stop_read>:
}

void ui_stop_read(void)
{
  40017a:	4770      	bx	lr

0040017c <ui_start_write>:
}

void ui_start_write(void)
{
  40017c:	4770      	bx	lr

0040017e <ui_stop_write>:
}

void ui_stop_write(void)
{
  40017e:	4770      	bx	lr

00400180 <ui_process>:
}

void ui_process(uint16_t framenumber)
{
  400180:	4770      	bx	lr
	...

00400184 <virtual_usb_trans>:
	}
#else
	uint8_t *ptr_cram;
	uint8_t nb_sector_trans;

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
  400184:	2830      	cmp	r0, #48	; 0x30
  400186:	d822      	bhi.n	4001ce <virtual_usb_trans+0x4a>
{
  400188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40018c:	460d      	mov	r5, r1
  40018e:	4690      	mov	r8, r2
	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
  400190:	180b      	adds	r3, r1, r0
  400192:	2b30      	cmp	r3, #48	; 0x30
  400194:	d81d      	bhi.n	4001d2 <virtual_usb_trans+0x4e>
		return CTRL_FAIL;
	}

	while (nb_sector) {
  400196:	b1f9      	cbz	r1, 4001d8 <virtual_usb_trans+0x54>
  400198:	4e12      	ldr	r6, [pc, #72]	; (4001e4 <virtual_usb_trans+0x60>)
  40019a:	eb06 2640 	add.w	r6, r6, r0, lsl #9
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
		if (!udi_msc_trans_block( b_read, ptr_cram,
  40019e:	f04f 0900 	mov.w	r9, #0
  4001a2:	4f11      	ldr	r7, [pc, #68]	; (4001e8 <virtual_usb_trans+0x64>)
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
  4001a4:	2d7f      	cmp	r5, #127	; 0x7f
  4001a6:	bf94      	ite	ls
  4001a8:	462c      	movls	r4, r5
  4001aa:	2480      	movhi	r4, #128	; 0x80
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
  4001ac:	b2e2      	uxtb	r2, r4
		if (!udi_msc_trans_block( b_read, ptr_cram,
  4001ae:	464b      	mov	r3, r9
  4001b0:	0252      	lsls	r2, r2, #9
  4001b2:	4631      	mov	r1, r6
  4001b4:	4640      	mov	r0, r8
  4001b6:	47b8      	blx	r7
  4001b8:	b188      	cbz	r0, 4001de <virtual_usb_trans+0x5a>
			return CTRL_FAIL; // transfer aborted
		}
		nb_sector -= nb_sector_trans;
  4001ba:	b2e4      	uxtb	r4, r4
  4001bc:	1b2c      	subs	r4, r5, r4
  4001be:	b2a5      	uxth	r5, r4
  4001c0:	f506 7600 	add.w	r6, r6, #512	; 0x200
	while (nb_sector) {
  4001c4:	2d00      	cmp	r5, #0
  4001c6:	d1ed      	bne.n	4001a4 <virtual_usb_trans+0x20>
	}
#endif

	return CTRL_GOOD;
  4001c8:	2000      	movs	r0, #0
  4001ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return CTRL_FAIL;
  4001ce:	2001      	movs	r0, #1
  4001d0:	4770      	bx	lr
  4001d2:	2001      	movs	r0, #1
  4001d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return CTRL_GOOD;
  4001d8:	2000      	movs	r0, #0
  4001da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return CTRL_FAIL; // transfer aborted
  4001de:	2001      	movs	r0, #1
}
  4001e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4001e4:	20000ac8 	.word	0x20000ac8
  4001e8:	00400e5d 	.word	0x00400e5d

004001ec <virtual_test_unit_ready>:
	return b_vmem_unloaded ? CTRL_NO_PRESENT : CTRL_GOOD;
  4001ec:	4b03      	ldr	r3, [pc, #12]	; (4001fc <virtual_test_unit_ready+0x10>)
  4001ee:	781b      	ldrb	r3, [r3, #0]
  4001f0:	2b00      	cmp	r3, #0
}
  4001f2:	bf14      	ite	ne
  4001f4:	2002      	movne	r0, #2
  4001f6:	2000      	moveq	r0, #0
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	20000ac4 	.word	0x20000ac4

00400200 <virtual_read_capacity>:
	if (b_vmem_unloaded) {
  400200:	4b04      	ldr	r3, [pc, #16]	; (400214 <virtual_read_capacity+0x14>)
  400202:	781b      	ldrb	r3, [r3, #0]
  400204:	b10b      	cbz	r3, 40020a <virtual_read_capacity+0xa>
		return CTRL_NO_PRESENT;
  400206:	2002      	movs	r0, #2
}
  400208:	4770      	bx	lr
		*uint32_t_nb_sector = VMEM_NB_SECTOR- 1;
  40020a:	232f      	movs	r3, #47	; 0x2f
  40020c:	6003      	str	r3, [r0, #0]
	return CTRL_GOOD;
  40020e:	2000      	movs	r0, #0
  400210:	4770      	bx	lr
  400212:	bf00      	nop
  400214:	20000ac4 	.word	0x20000ac4

00400218 <virtual_wr_protect>:
}
  400218:	2000      	movs	r0, #0
  40021a:	4770      	bx	lr

0040021c <virtual_removal>:
}
  40021c:	2001      	movs	r0, #1
  40021e:	4770      	bx	lr

00400220 <virtual_unload>:
	b_vmem_unloaded = unload;
  400220:	4b01      	ldr	r3, [pc, #4]	; (400228 <virtual_unload+0x8>)
  400222:	7018      	strb	r0, [r3, #0]
}
  400224:	2001      	movs	r0, #1
  400226:	4770      	bx	lr
  400228:	20000ac4 	.word	0x20000ac4

0040022c <virtual_usb_read_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
  40022c:	b508      	push	{r3, lr}
	return virtual_usb_trans(addr, nb_sector, true);
  40022e:	2201      	movs	r2, #1
  400230:	4b01      	ldr	r3, [pc, #4]	; (400238 <virtual_usb_read_10+0xc>)
  400232:	4798      	blx	r3
}
  400234:	bd08      	pop	{r3, pc}
  400236:	bf00      	nop
  400238:	00400185 	.word	0x00400185

0040023c <virtual_usb_write_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
  40023c:	b508      	push	{r3, lr}
	return virtual_usb_trans(addr, nb_sector, false);
  40023e:	2200      	movs	r2, #0
  400240:	4b01      	ldr	r3, [pc, #4]	; (400248 <virtual_usb_write_10+0xc>)
  400242:	4798      	blx	r3
}
  400244:	bd08      	pop	{r3, pc}
  400246:	bf00      	nop
  400248:	00400185 	.word	0x00400185

0040024c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  40024c:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40024e:	213e      	movs	r1, #62	; 0x3e
  400250:	2000      	movs	r0, #0
  400252:	4b0a      	ldr	r3, [pc, #40]	; (40027c <sysclk_enable_usb+0x30>)
  400254:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400256:	4c0a      	ldr	r4, [pc, #40]	; (400280 <sysclk_enable_usb+0x34>)
  400258:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40025a:	2800      	cmp	r0, #0
  40025c:	d0fc      	beq.n	400258 <sysclk_enable_usb+0xc>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40025e:	4b09      	ldr	r3, [pc, #36]	; (400284 <sysclk_enable_usb+0x38>)
  400260:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400262:	4a09      	ldr	r2, [pc, #36]	; (400288 <sysclk_enable_usb+0x3c>)
  400264:	4b09      	ldr	r3, [pc, #36]	; (40028c <sysclk_enable_usb+0x40>)
  400266:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400268:	4c09      	ldr	r4, [pc, #36]	; (400290 <sysclk_enable_usb+0x44>)
  40026a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40026c:	2800      	cmp	r0, #0
  40026e:	d0fc      	beq.n	40026a <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_udpck_to_pllack(CONFIG_USBCLK_DIV - 1);
  400270:	2003      	movs	r0, #3
  400272:	4b08      	ldr	r3, [pc, #32]	; (400294 <sysclk_enable_usb+0x48>)
  400274:	4798      	blx	r3
		pmc_enable_udpck();
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <sysclk_enable_usb+0x4c>)
  400278:	4798      	blx	r3
  40027a:	bd10      	pop	{r4, pc}
  40027c:	004020bd 	.word	0x004020bd
  400280:	00402111 	.word	0x00402111
  400284:	00402121 	.word	0x00402121
  400288:	200f3f01 	.word	0x200f3f01
  40028c:	400e0400 	.word	0x400e0400
  400290:	00402131 	.word	0x00402131
  400294:	004021e9 	.word	0x004021e9
  400298:	004021f9 	.word	0x004021f9

0040029c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40029c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40029e:	480e      	ldr	r0, [pc, #56]	; (4002d8 <sysclk_init+0x3c>)
  4002a0:	4b0e      	ldr	r3, [pc, #56]	; (4002dc <sysclk_init+0x40>)
  4002a2:	4798      	blx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4002a4:	213e      	movs	r1, #62	; 0x3e
  4002a6:	2000      	movs	r0, #0
  4002a8:	4b0d      	ldr	r3, [pc, #52]	; (4002e0 <sysclk_init+0x44>)
  4002aa:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  4002ac:	4c0d      	ldr	r4, [pc, #52]	; (4002e4 <sysclk_init+0x48>)
  4002ae:	47a0      	blx	r4
  4002b0:	2800      	cmp	r0, #0
  4002b2:	d0fc      	beq.n	4002ae <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  4002b4:	4b0c      	ldr	r3, [pc, #48]	; (4002e8 <sysclk_init+0x4c>)
  4002b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4002b8:	4a0c      	ldr	r2, [pc, #48]	; (4002ec <sysclk_init+0x50>)
  4002ba:	4b0d      	ldr	r3, [pc, #52]	; (4002f0 <sysclk_init+0x54>)
  4002bc:	629a      	str	r2, [r3, #40]	; 0x28
	return pmc_is_locked_pllack();
  4002be:	4c0d      	ldr	r4, [pc, #52]	; (4002f4 <sysclk_init+0x58>)
  4002c0:	47a0      	blx	r4
  4002c2:	2800      	cmp	r0, #0
  4002c4:	d0fc      	beq.n	4002c0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4002c6:	2010      	movs	r0, #16
  4002c8:	4b0b      	ldr	r3, [pc, #44]	; (4002f8 <sysclk_init+0x5c>)
  4002ca:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4002cc:	4b0b      	ldr	r3, [pc, #44]	; (4002fc <sysclk_init+0x60>)
  4002ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4002d0:	480b      	ldr	r0, [pc, #44]	; (400300 <sysclk_init+0x64>)
  4002d2:	4b02      	ldr	r3, [pc, #8]	; (4002dc <sysclk_init+0x40>)
  4002d4:	4798      	blx	r3
  4002d6:	bd10      	pop	{r4, pc}
  4002d8:	07270e00 	.word	0x07270e00
  4002dc:	00403f45 	.word	0x00403f45
  4002e0:	004020bd 	.word	0x004020bd
  4002e4:	00402111 	.word	0x00402111
  4002e8:	00402121 	.word	0x00402121
  4002ec:	200f3f01 	.word	0x200f3f01
  4002f0:	400e0400 	.word	0x400e0400
  4002f4:	00402131 	.word	0x00402131
  4002f8:	00402059 	.word	0x00402059
  4002fc:	00403e39 	.word	0x00403e39
  400300:	05b8d800 	.word	0x05b8d800

00400304 <ctrl_access_lock>:
 * \return \c true if the access was successfully locked, else \c false.
 */
static bool ctrl_access_lock(void)
{
  // If the semaphore could not be created, there is no backup solution.
  if (!ctrl_access_semphr) return false;
  400304:	4b08      	ldr	r3, [pc, #32]	; (400328 <ctrl_access_lock+0x24>)
  400306:	681b      	ldr	r3, [r3, #0]
  400308:	b15b      	cbz	r3, 400322 <ctrl_access_lock+0x1e>
{
  40030a:	b570      	push	{r4, r5, r6, lr}

  // Wait for the semaphore.
  while (!xSemaphoreTake(ctrl_access_semphr, portMAX_DELAY));
  40030c:	4e06      	ldr	r6, [pc, #24]	; (400328 <ctrl_access_lock+0x24>)
  40030e:	f04f 35ff 	mov.w	r5, #4294967295
  400312:	4c06      	ldr	r4, [pc, #24]	; (40032c <ctrl_access_lock+0x28>)
  400314:	4629      	mov	r1, r5
  400316:	6830      	ldr	r0, [r6, #0]
  400318:	47a0      	blx	r4
  40031a:	2800      	cmp	r0, #0
  40031c:	d0fa      	beq.n	400314 <ctrl_access_lock+0x10>

  return true;
  40031e:	2001      	movs	r0, #1
  400320:	bd70      	pop	{r4, r5, r6, pc}
  if (!ctrl_access_semphr) return false;
  400322:	2000      	movs	r0, #0
  400324:	4770      	bx	lr
  400326:	bf00      	nop
  400328:	20006ac8 	.word	0x20006ac8
  40032c:	0040b14d 	.word	0x0040b14d

00400330 <ctrl_access_init>:
  if (!ctrl_access_semphr)
  400330:	4b0c      	ldr	r3, [pc, #48]	; (400364 <ctrl_access_init+0x34>)
  400332:	681b      	ldr	r3, [r3, #0]
  400334:	b10b      	cbz	r3, 40033a <ctrl_access_init+0xa>
  return true;
  400336:	2001      	movs	r0, #1
  400338:	4770      	bx	lr
{
  40033a:	b510      	push	{r4, lr}
    vSemaphoreCreateBinary(ctrl_access_semphr);
  40033c:	2203      	movs	r2, #3
  40033e:	2100      	movs	r1, #0
  400340:	2001      	movs	r0, #1
  400342:	4b09      	ldr	r3, [pc, #36]	; (400368 <ctrl_access_init+0x38>)
  400344:	4798      	blx	r3
  400346:	4b07      	ldr	r3, [pc, #28]	; (400364 <ctrl_access_init+0x34>)
  400348:	6018      	str	r0, [r3, #0]
  40034a:	b120      	cbz	r0, 400356 <ctrl_access_init+0x26>
  40034c:	2300      	movs	r3, #0
  40034e:	461a      	mov	r2, r3
  400350:	4619      	mov	r1, r3
  400352:	4c06      	ldr	r4, [pc, #24]	; (40036c <ctrl_access_init+0x3c>)
  400354:	47a0      	blx	r4
    if (!ctrl_access_semphr) return false;
  400356:	4b03      	ldr	r3, [pc, #12]	; (400364 <ctrl_access_init+0x34>)
  400358:	6818      	ldr	r0, [r3, #0]
  40035a:	3000      	adds	r0, #0
  40035c:	bf18      	it	ne
  40035e:	2001      	movne	r0, #1
  400360:	bd10      	pop	{r4, pc}
  400362:	bf00      	nop
  400364:	20006ac8 	.word	0x20006ac8
  400368:	0040ad89 	.word	0x0040ad89
  40036c:	0040addd 	.word	0x0040addd

00400370 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
  400370:	2001      	movs	r0, #1
  400372:	4770      	bx	lr

00400374 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  400374:	b538      	push	{r3, r4, r5, lr}
  400376:	4604      	mov	r4, r0
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;
  400378:	4b09      	ldr	r3, [pc, #36]	; (4003a0 <mem_test_unit_ready+0x2c>)
  40037a:	4798      	blx	r3
  40037c:	b170      	cbz	r0, 40039c <mem_test_unit_ready+0x28>

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40037e:	b14c      	cbz	r4, 400394 <mem_test_unit_ready+0x20>
  400380:	2401      	movs	r4, #1
                             Lun_usb_test_unit_ready(lun - LUN_ID_USB);
#else
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();
  400382:	2300      	movs	r3, #0
  400384:	461a      	mov	r2, r3
  400386:	4619      	mov	r1, r3
  400388:	4806      	ldr	r0, [pc, #24]	; (4003a4 <mem_test_unit_ready+0x30>)
  40038a:	6800      	ldr	r0, [r0, #0]
  40038c:	4d06      	ldr	r5, [pc, #24]	; (4003a8 <mem_test_unit_ready+0x34>)
  40038e:	47a8      	blx	r5

  return status;
}
  400390:	4620      	mov	r0, r4
  400392:	bd38      	pop	{r3, r4, r5, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  400394:	4b05      	ldr	r3, [pc, #20]	; (4003ac <mem_test_unit_ready+0x38>)
  400396:	4798      	blx	r3
  400398:	4604      	mov	r4, r0
  40039a:	e7f2      	b.n	400382 <mem_test_unit_ready+0xe>
  if (!Ctrl_access_lock()) return CTRL_FAIL;
  40039c:	2401      	movs	r4, #1
  40039e:	e7f7      	b.n	400390 <mem_test_unit_ready+0x1c>
  4003a0:	00400305 	.word	0x00400305
  4003a4:	20006ac8 	.word	0x20006ac8
  4003a8:	0040addd 	.word	0x0040addd
  4003ac:	004001ed 	.word	0x004001ed

004003b0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  4003b0:	b538      	push	{r3, r4, r5, lr}
  4003b2:	4604      	mov	r4, r0
  4003b4:	460d      	mov	r5, r1
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;
  4003b6:	4b0a      	ldr	r3, [pc, #40]	; (4003e0 <mem_read_capacity+0x30>)
  4003b8:	4798      	blx	r3
  4003ba:	b178      	cbz	r0, 4003dc <mem_read_capacity+0x2c>

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4003bc:	b14c      	cbz	r4, 4003d2 <mem_read_capacity+0x22>
  4003be:	2401      	movs	r4, #1
                             Lun_usb_read_capacity(lun - LUN_ID_USB, u32_nb_sector);
#else
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();
  4003c0:	2300      	movs	r3, #0
  4003c2:	461a      	mov	r2, r3
  4003c4:	4619      	mov	r1, r3
  4003c6:	4807      	ldr	r0, [pc, #28]	; (4003e4 <mem_read_capacity+0x34>)
  4003c8:	6800      	ldr	r0, [r0, #0]
  4003ca:	4d07      	ldr	r5, [pc, #28]	; (4003e8 <mem_read_capacity+0x38>)
  4003cc:	47a8      	blx	r5

  return status;
}
  4003ce:	4620      	mov	r0, r4
  4003d0:	bd38      	pop	{r3, r4, r5, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4003d2:	4628      	mov	r0, r5
  4003d4:	4b05      	ldr	r3, [pc, #20]	; (4003ec <mem_read_capacity+0x3c>)
  4003d6:	4798      	blx	r3
  4003d8:	4604      	mov	r4, r0
  4003da:	e7f1      	b.n	4003c0 <mem_read_capacity+0x10>
  if (!Ctrl_access_lock()) return CTRL_FAIL;
  4003dc:	2401      	movs	r4, #1
  4003de:	e7f6      	b.n	4003ce <mem_read_capacity+0x1e>
  4003e0:	00400305 	.word	0x00400305
  4003e4:	20006ac8 	.word	0x20006ac8
  4003e8:	0040addd 	.word	0x0040addd
  4003ec:	00400201 	.word	0x00400201

004003f0 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4605      	mov	r5, r0
  4003f4:	460e      	mov	r6, r1
  bool unloaded;
#if !MAX_LUN || !defined(Lun_usb_unload)
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return false;
  4003f6:	4b0a      	ldr	r3, [pc, #40]	; (400420 <mem_unload+0x30>)
  4003f8:	4798      	blx	r3
  4003fa:	4604      	mov	r4, r0
  4003fc:	b158      	cbz	r0, 400416 <mem_unload+0x26>

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
  4003fe:	b965      	cbnz	r5, 40041a <mem_unload+0x2a>
  400400:	4630      	mov	r0, r6
  400402:	4b08      	ldr	r3, [pc, #32]	; (400424 <mem_unload+0x34>)
  400404:	4798      	blx	r3
  400406:	4604      	mov	r4, r0
# endif
#else
              false; /* No mem, unload/load fail */
#endif

  Ctrl_access_unlock();
  400408:	2300      	movs	r3, #0
  40040a:	461a      	mov	r2, r3
  40040c:	4619      	mov	r1, r3
  40040e:	4806      	ldr	r0, [pc, #24]	; (400428 <mem_unload+0x38>)
  400410:	6800      	ldr	r0, [r0, #0]
  400412:	4d06      	ldr	r5, [pc, #24]	; (40042c <mem_unload+0x3c>)
  400414:	47a8      	blx	r5

  return unloaded;
}
  400416:	4620      	mov	r0, r4
  400418:	bd70      	pop	{r4, r5, r6, pc}
                  lun_desc[lun].unload(unload) : !unload) :
  40041a:	2400      	movs	r4, #0
  40041c:	e7f4      	b.n	400408 <mem_unload+0x18>
  40041e:	bf00      	nop
  400420:	00400305 	.word	0x00400305
  400424:	00400221 	.word	0x00400221
  400428:	20006ac8 	.word	0x20006ac8
  40042c:	0040addd 	.word	0x0040addd

00400430 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
  400430:	b538      	push	{r3, r4, r5, lr}
  400432:	4605      	mov	r5, r0
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;
  400434:	4b09      	ldr	r3, [pc, #36]	; (40045c <mem_wr_protect+0x2c>)
  400436:	4798      	blx	r3
  400438:	b170      	cbz	r0, 400458 <mem_wr_protect+0x28>
  40043a:	4604      	mov	r4, r0

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40043c:	b145      	cbz	r5, 400450 <mem_wr_protect+0x20>
                                 Lun_usb_wr_protect(lun - LUN_ID_USB);
#else
                                 true;
#endif

  Ctrl_access_unlock();
  40043e:	2300      	movs	r3, #0
  400440:	461a      	mov	r2, r3
  400442:	4619      	mov	r1, r3
  400444:	4806      	ldr	r0, [pc, #24]	; (400460 <mem_wr_protect+0x30>)
  400446:	6800      	ldr	r0, [r0, #0]
  400448:	4d06      	ldr	r5, [pc, #24]	; (400464 <mem_wr_protect+0x34>)
  40044a:	47a8      	blx	r5

  return wr_protect;
}
  40044c:	4620      	mov	r0, r4
  40044e:	bd38      	pop	{r3, r4, r5, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  400450:	4b05      	ldr	r3, [pc, #20]	; (400468 <mem_wr_protect+0x38>)
  400452:	4798      	blx	r3
  400454:	4604      	mov	r4, r0
  400456:	e7f2      	b.n	40043e <mem_wr_protect+0xe>
  if (!Ctrl_access_lock()) return true;
  400458:	2401      	movs	r4, #1
  40045a:	e7f7      	b.n	40044c <mem_wr_protect+0x1c>
  40045c:	00400305 	.word	0x00400305
  400460:	20006ac8 	.word	0x20006ac8
  400464:	0040addd 	.word	0x0040addd
  400468:	00400219 	.word	0x00400219

0040046c <mem_removal>:


bool mem_removal(U8 lun)
{
  40046c:	b538      	push	{r3, r4, r5, lr}
  40046e:	4605      	mov	r5, r0
  bool removal;
#if MAX_LUN==0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return true;
  400470:	4b09      	ldr	r3, [pc, #36]	; (400498 <mem_removal+0x2c>)
  400472:	4798      	blx	r3
  400474:	b170      	cbz	r0, 400494 <mem_removal+0x28>
  400476:	4604      	mov	r4, r0

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
  400478:	b145      	cbz	r5, 40048c <mem_removal+0x20>
                              Lun_usb_removal();
#else
                              true;
#endif

  Ctrl_access_unlock();
  40047a:	2300      	movs	r3, #0
  40047c:	461a      	mov	r2, r3
  40047e:	4619      	mov	r1, r3
  400480:	4806      	ldr	r0, [pc, #24]	; (40049c <mem_removal+0x30>)
  400482:	6800      	ldr	r0, [r0, #0]
  400484:	4d06      	ldr	r5, [pc, #24]	; (4004a0 <mem_removal+0x34>)
  400486:	47a8      	blx	r5

  return removal;
}
  400488:	4620      	mov	r0, r4
  40048a:	bd38      	pop	{r3, r4, r5, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
  40048c:	4b05      	ldr	r3, [pc, #20]	; (4004a4 <mem_removal+0x38>)
  40048e:	4798      	blx	r3
  400490:	4604      	mov	r4, r0
  400492:	e7f2      	b.n	40047a <mem_removal+0xe>
  if (!Ctrl_access_lock()) return true;
  400494:	2401      	movs	r4, #1
  400496:	e7f7      	b.n	400488 <mem_removal+0x1c>
  400498:	00400305 	.word	0x00400305
  40049c:	20006ac8 	.word	0x20006ac8
  4004a0:	0040addd 	.word	0x0040addd
  4004a4:	0040021d 	.word	0x0040021d

004004a8 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
  4004a8:	2800      	cmp	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
  4004aa:	4802      	ldr	r0, [pc, #8]	; (4004b4 <mem_name+0xc>)
  4004ac:	bf18      	it	ne
  4004ae:	2000      	movne	r0, #0
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop
  4004b4:	00412bec 	.word	0x00412bec

004004b8 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
  4004b8:	b570      	push	{r4, r5, r6, lr}
  4004ba:	4604      	mov	r4, r0
  4004bc:	460d      	mov	r5, r1
  4004be:	4616      	mov	r6, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;
  4004c0:	4b0c      	ldr	r3, [pc, #48]	; (4004f4 <memory_2_usb+0x3c>)
  4004c2:	4798      	blx	r3
  4004c4:	b910      	cbnz	r0, 4004cc <memory_2_usb+0x14>
  4004c6:	2401      	movs	r4, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
  4004c8:	4620      	mov	r0, r4
  4004ca:	bd70      	pop	{r4, r5, r6, pc}
  memory_start_read_action(nb_sector);
  4004cc:	4b0a      	ldr	r3, [pc, #40]	; (4004f8 <memory_2_usb+0x40>)
  4004ce:	4798      	blx	r3
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
  4004d0:	b154      	cbz	r4, 4004e8 <memory_2_usb+0x30>
  4004d2:	2401      	movs	r4, #1
  memory_stop_read_action();
  4004d4:	4b09      	ldr	r3, [pc, #36]	; (4004fc <memory_2_usb+0x44>)
  4004d6:	4798      	blx	r3
  Ctrl_access_unlock();
  4004d8:	2300      	movs	r3, #0
  4004da:	461a      	mov	r2, r3
  4004dc:	4619      	mov	r1, r3
  4004de:	4808      	ldr	r0, [pc, #32]	; (400500 <memory_2_usb+0x48>)
  4004e0:	6800      	ldr	r0, [r0, #0]
  4004e2:	4d08      	ldr	r5, [pc, #32]	; (400504 <memory_2_usb+0x4c>)
  4004e4:	47a8      	blx	r5
  return status;
  4004e6:	e7ef      	b.n	4004c8 <memory_2_usb+0x10>
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
  4004e8:	4631      	mov	r1, r6
  4004ea:	4628      	mov	r0, r5
  4004ec:	4b06      	ldr	r3, [pc, #24]	; (400508 <memory_2_usb+0x50>)
  4004ee:	4798      	blx	r3
  4004f0:	4604      	mov	r4, r0
  4004f2:	e7ef      	b.n	4004d4 <memory_2_usb+0x1c>
  4004f4:	00400305 	.word	0x00400305
  4004f8:	00400179 	.word	0x00400179
  4004fc:	0040017b 	.word	0x0040017b
  400500:	20006ac8 	.word	0x20006ac8
  400504:	0040addd 	.word	0x0040addd
  400508:	0040022d 	.word	0x0040022d

0040050c <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
  40050c:	b570      	push	{r4, r5, r6, lr}
  40050e:	4604      	mov	r4, r0
  400510:	460d      	mov	r5, r1
  400512:	4616      	mov	r6, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;
  400514:	4b0c      	ldr	r3, [pc, #48]	; (400548 <usb_2_memory+0x3c>)
  400516:	4798      	blx	r3
  400518:	b910      	cbnz	r0, 400520 <usb_2_memory+0x14>
  40051a:	2401      	movs	r4, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
  40051c:	4620      	mov	r0, r4
  40051e:	bd70      	pop	{r4, r5, r6, pc}
  memory_start_write_action(nb_sector);
  400520:	4b0a      	ldr	r3, [pc, #40]	; (40054c <usb_2_memory+0x40>)
  400522:	4798      	blx	r3
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
  400524:	b154      	cbz	r4, 40053c <usb_2_memory+0x30>
  400526:	2401      	movs	r4, #1
  memory_stop_write_action();
  400528:	4b09      	ldr	r3, [pc, #36]	; (400550 <usb_2_memory+0x44>)
  40052a:	4798      	blx	r3
  Ctrl_access_unlock();
  40052c:	2300      	movs	r3, #0
  40052e:	461a      	mov	r2, r3
  400530:	4619      	mov	r1, r3
  400532:	4808      	ldr	r0, [pc, #32]	; (400554 <usb_2_memory+0x48>)
  400534:	6800      	ldr	r0, [r0, #0]
  400536:	4d08      	ldr	r5, [pc, #32]	; (400558 <usb_2_memory+0x4c>)
  400538:	47a8      	blx	r5
  return status;
  40053a:	e7ef      	b.n	40051c <usb_2_memory+0x10>
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
  40053c:	4631      	mov	r1, r6
  40053e:	4628      	mov	r0, r5
  400540:	4b06      	ldr	r3, [pc, #24]	; (40055c <usb_2_memory+0x50>)
  400542:	4798      	blx	r3
  400544:	4604      	mov	r4, r0
  400546:	e7ef      	b.n	400528 <usb_2_memory+0x1c>
  400548:	00400305 	.word	0x00400305
  40054c:	0040017d 	.word	0x0040017d
  400550:	0040017f 	.word	0x0040017f
  400554:	20006ac8 	.word	0x20006ac8
  400558:	0040addd 	.word	0x0040addd
  40055c:	0040023d 	.word	0x0040023d

00400560 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
  400560:	2000      	movs	r0, #0
  400562:	4770      	bx	lr

00400564 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
  400564:	3000      	adds	r0, #0
  400566:	bf18      	it	ne
  400568:	2001      	movne	r0, #1
  40056a:	4b03      	ldr	r3, [pc, #12]	; (400578 <udi_msc_trans_ack+0x14>)
  40056c:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
  40056e:	2201      	movs	r2, #1
  400570:	4b02      	ldr	r3, [pc, #8]	; (40057c <udi_msc_trans_ack+0x18>)
  400572:	701a      	strb	r2, [r3, #0]
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	20013442 	.word	0x20013442
  40057c:	20000014 	.word	0x20000014

00400580 <udi_msc_cbw_wait>:
{
  400580:	b510      	push	{r4, lr}
  400582:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
  400584:	4b07      	ldr	r3, [pc, #28]	; (4005a4 <udi_msc_cbw_wait+0x24>)
  400586:	9300      	str	r3, [sp, #0]
  400588:	231f      	movs	r3, #31
  40058a:	4a07      	ldr	r2, [pc, #28]	; (4005a8 <udi_msc_cbw_wait+0x28>)
  40058c:	2101      	movs	r1, #1
  40058e:	2002      	movs	r0, #2
  400590:	4c06      	ldr	r4, [pc, #24]	; (4005ac <udi_msc_cbw_wait+0x2c>)
  400592:	47a0      	blx	r4
  400594:	b108      	cbz	r0, 40059a <udi_msc_cbw_wait+0x1a>
}
  400596:	b002      	add	sp, #8
  400598:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
  40059a:	4905      	ldr	r1, [pc, #20]	; (4005b0 <udi_msc_cbw_wait+0x30>)
  40059c:	2002      	movs	r0, #2
  40059e:	4b05      	ldr	r3, [pc, #20]	; (4005b4 <udi_msc_cbw_wait+0x34>)
  4005a0:	4798      	blx	r3
}
  4005a2:	e7f8      	b.n	400596 <udi_msc_cbw_wait+0x16>
  4005a4:	00400995 	.word	0x00400995
  4005a8:	20006af0 	.word	0x20006af0
  4005ac:	004039f1 	.word	0x004039f1
  4005b0:	00400581 	.word	0x00400581
  4005b4:	00403cd1 	.word	0x00403cd1

004005b8 <udi_msc_enable>:
{
  4005b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udi_msc_b_trans_req = false;
  4005bc:	2300      	movs	r3, #0
  4005be:	4a14      	ldr	r2, [pc, #80]	; (400610 <udi_msc_enable+0x58>)
  4005c0:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
  4005c2:	4a14      	ldr	r2, [pc, #80]	; (400614 <udi_msc_enable+0x5c>)
  4005c4:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
  4005c6:	2301      	movs	r3, #1
  4005c8:	4a13      	ldr	r2, [pc, #76]	; (400618 <udi_msc_enable+0x60>)
  4005ca:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
  4005cc:	4a13      	ldr	r2, [pc, #76]	; (40061c <udi_msc_enable+0x64>)
  4005ce:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
  4005d0:	4b13      	ldr	r3, [pc, #76]	; (400620 <udi_msc_enable+0x68>)
  4005d2:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
  4005d4:	b928      	cbnz	r0, 4005e2 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
  4005d6:	2500      	movs	r5, #0
  4005d8:	4b12      	ldr	r3, [pc, #72]	; (400624 <udi_msc_enable+0x6c>)
  4005da:	701d      	strb	r5, [r3, #0]
}
  4005dc:	4628      	mov	r0, r5
  4005de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_msc_nb_lun--;
  4005e2:	1e43      	subs	r3, r0, #1
  4005e4:	4a0f      	ldr	r2, [pc, #60]	; (400624 <udi_msc_enable+0x6c>)
  4005e6:	7013      	strb	r3, [r2, #0]
	if (!UDI_MSC_ENABLE_EXT())
  4005e8:	4b0f      	ldr	r3, [pc, #60]	; (400628 <udi_msc_enable+0x70>)
  4005ea:	4798      	blx	r3
  4005ec:	4605      	mov	r5, r0
  4005ee:	2800      	cmp	r0, #0
  4005f0:	d0f4      	beq.n	4005dc <udi_msc_enable+0x24>
  4005f2:	2400      	movs	r4, #0
		mem_unload(lun, false);
  4005f4:	46a0      	mov	r8, r4
  4005f6:	4f0d      	ldr	r7, [pc, #52]	; (40062c <udi_msc_enable+0x74>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  4005f8:	4e0a      	ldr	r6, [pc, #40]	; (400624 <udi_msc_enable+0x6c>)
		mem_unload(lun, false);
  4005fa:	4641      	mov	r1, r8
  4005fc:	4620      	mov	r0, r4
  4005fe:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  400600:	3401      	adds	r4, #1
  400602:	b2e4      	uxtb	r4, r4
  400604:	7833      	ldrb	r3, [r6, #0]
  400606:	42a3      	cmp	r3, r4
  400608:	d2f7      	bcs.n	4005fa <udi_msc_enable+0x42>
	udi_msc_cbw_wait();
  40060a:	4b09      	ldr	r3, [pc, #36]	; (400630 <udi_msc_enable+0x78>)
  40060c:	4798      	blx	r3
	return true;
  40060e:	e7e5      	b.n	4005dc <udi_msc_enable+0x24>
  400610:	20006ae6 	.word	0x20006ae6
  400614:	20006ae4 	.word	0x20006ae4
  400618:	20000014 	.word	0x20000014
  40061c:	20000015 	.word	0x20000015
  400620:	00400371 	.word	0x00400371
  400624:	20006b14 	.word	0x20006b14
  400628:	0040c2e5 	.word	0x0040c2e5
  40062c:	004003f1 	.word	0x004003f1
  400630:	00400581 	.word	0x00400581

00400634 <udi_msc_csw_sent>:
{
  400634:	b508      	push	{r3, lr}
	udi_msc_cbw_wait();
  400636:	4b01      	ldr	r3, [pc, #4]	; (40063c <udi_msc_csw_sent+0x8>)
  400638:	4798      	blx	r3
  40063a:	bd08      	pop	{r3, pc}
  40063c:	00400581 	.word	0x00400581

00400640 <udi_msc_csw_send>:
{
  400640:	b510      	push	{r4, lr}
  400642:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
  400644:	4b07      	ldr	r3, [pc, #28]	; (400664 <udi_msc_csw_send+0x24>)
  400646:	9300      	str	r3, [sp, #0]
  400648:	230d      	movs	r3, #13
  40064a:	4a07      	ldr	r2, [pc, #28]	; (400668 <udi_msc_csw_send+0x28>)
  40064c:	2100      	movs	r1, #0
  40064e:	2081      	movs	r0, #129	; 0x81
  400650:	4c06      	ldr	r4, [pc, #24]	; (40066c <udi_msc_csw_send+0x2c>)
  400652:	47a0      	blx	r4
  400654:	b108      	cbz	r0, 40065a <udi_msc_csw_send+0x1a>
}
  400656:	b002      	add	sp, #8
  400658:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
  40065a:	4905      	ldr	r1, [pc, #20]	; (400670 <udi_msc_csw_send+0x30>)
  40065c:	2081      	movs	r0, #129	; 0x81
  40065e:	4b05      	ldr	r3, [pc, #20]	; (400674 <udi_msc_csw_send+0x34>)
  400660:	4798      	blx	r3
}
  400662:	e7f8      	b.n	400656 <udi_msc_csw_send+0x16>
  400664:	00400635 	.word	0x00400635
  400668:	20000018 	.word	0x20000018
  40066c:	004039f1 	.word	0x004039f1
  400670:	00400641 	.word	0x00400641
  400674:	00403cd1 	.word	0x00403cd1

00400678 <udi_msc_cbw_invalid>:
{
  400678:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
  40067a:	4b06      	ldr	r3, [pc, #24]	; (400694 <udi_msc_cbw_invalid+0x1c>)
  40067c:	781b      	ldrb	r3, [r3, #0]
  40067e:	b903      	cbnz	r3, 400682 <udi_msc_cbw_invalid+0xa>
  400680:	bd08      	pop	{r3, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
  400682:	2002      	movs	r0, #2
  400684:	4b04      	ldr	r3, [pc, #16]	; (400698 <udi_msc_cbw_invalid+0x20>)
  400686:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
  400688:	4904      	ldr	r1, [pc, #16]	; (40069c <udi_msc_cbw_invalid+0x24>)
  40068a:	2002      	movs	r0, #2
  40068c:	4b04      	ldr	r3, [pc, #16]	; (4006a0 <udi_msc_cbw_invalid+0x28>)
  40068e:	4798      	blx	r3
  400690:	e7f6      	b.n	400680 <udi_msc_cbw_invalid+0x8>
  400692:	bf00      	nop
  400694:	20006ae4 	.word	0x20006ae4
  400698:	00403835 	.word	0x00403835
  40069c:	00400679 	.word	0x00400679
  4006a0:	00403cd1 	.word	0x00403cd1

004006a4 <udi_msc_csw_invalid>:
{
  4006a4:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
  4006a6:	4b06      	ldr	r3, [pc, #24]	; (4006c0 <udi_msc_csw_invalid+0x1c>)
  4006a8:	781b      	ldrb	r3, [r3, #0]
  4006aa:	b903      	cbnz	r3, 4006ae <udi_msc_csw_invalid+0xa>
  4006ac:	bd08      	pop	{r3, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
  4006ae:	2081      	movs	r0, #129	; 0x81
  4006b0:	4b04      	ldr	r3, [pc, #16]	; (4006c4 <udi_msc_csw_invalid+0x20>)
  4006b2:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
  4006b4:	4904      	ldr	r1, [pc, #16]	; (4006c8 <udi_msc_csw_invalid+0x24>)
  4006b6:	2081      	movs	r0, #129	; 0x81
  4006b8:	4b04      	ldr	r3, [pc, #16]	; (4006cc <udi_msc_csw_invalid+0x28>)
  4006ba:	4798      	blx	r3
  4006bc:	e7f6      	b.n	4006ac <udi_msc_csw_invalid+0x8>
  4006be:	bf00      	nop
  4006c0:	20006ae4 	.word	0x20006ae4
  4006c4:	00403835 	.word	0x00403835
  4006c8:	004006a5 	.word	0x004006a5
  4006cc:	00403cd1 	.word	0x00403cd1

004006d0 <udi_msc_csw_process>:
{
  4006d0:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
  4006d2:	4b09      	ldr	r3, [pc, #36]	; (4006f8 <udi_msc_csw_process+0x28>)
  4006d4:	689b      	ldr	r3, [r3, #8]
  4006d6:	b143      	cbz	r3, 4006ea <udi_msc_csw_process+0x1a>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
  4006d8:	4b08      	ldr	r3, [pc, #32]	; (4006fc <udi_msc_csw_process+0x2c>)
  4006da:	f993 300c 	ldrsb.w	r3, [r3, #12]
  4006de:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
  4006e0:	bfb4      	ite	lt
  4006e2:	2081      	movlt	r0, #129	; 0x81
			udd_ep_set_halt(UDI_MSC_EP_OUT);
  4006e4:	2002      	movge	r0, #2
  4006e6:	4b06      	ldr	r3, [pc, #24]	; (400700 <udi_msc_csw_process+0x30>)
  4006e8:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
  4006ea:	4b04      	ldr	r3, [pc, #16]	; (4006fc <udi_msc_csw_process+0x2c>)
  4006ec:	685a      	ldr	r2, [r3, #4]
  4006ee:	4b02      	ldr	r3, [pc, #8]	; (4006f8 <udi_msc_csw_process+0x28>)
  4006f0:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
  4006f2:	4b04      	ldr	r3, [pc, #16]	; (400704 <udi_msc_csw_process+0x34>)
  4006f4:	4798      	blx	r3
  4006f6:	bd08      	pop	{r3, pc}
  4006f8:	20000018 	.word	0x20000018
  4006fc:	20006af0 	.word	0x20006af0
  400700:	00403835 	.word	0x00403835
  400704:	00400641 	.word	0x00400641

00400708 <udi_msc_clear_sense>:
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
  400708:	4b05      	ldr	r3, [pc, #20]	; (400720 <udi_msc_clear_sense+0x18>)
  40070a:	2200      	movs	r2, #0
  40070c:	601a      	str	r2, [r3, #0]
  40070e:	605a      	str	r2, [r3, #4]
  400710:	609a      	str	r2, [r3, #8]
  400712:	60da      	str	r2, [r3, #12]
  400714:	821a      	strh	r2, [r3, #16]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
  400716:	22f0      	movs	r2, #240	; 0xf0
  400718:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
  40071a:	220a      	movs	r2, #10
  40071c:	71da      	strb	r2, [r3, #7]
  40071e:	4770      	bx	lr
  400720:	20006b18 	.word	0x20006b18

00400724 <udi_msc_sense_fail>:
{
  400724:	b570      	push	{r4, r5, r6, lr}
  400726:	4606      	mov	r6, r0
  400728:	460d      	mov	r5, r1
  40072a:	4614      	mov	r4, r2
	udi_msc_clear_sense();
  40072c:	4b08      	ldr	r3, [pc, #32]	; (400750 <udi_msc_sense_fail+0x2c>)
  40072e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
  400730:	2201      	movs	r2, #1
  400732:	4b08      	ldr	r3, [pc, #32]	; (400754 <udi_msc_sense_fail+0x30>)
  400734:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
  400736:	4b08      	ldr	r3, [pc, #32]	; (400758 <udi_msc_sense_fail+0x34>)
  400738:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
  40073a:	0e22      	lsrs	r2, r4, #24
  40073c:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
  40073e:	0c22      	lsrs	r2, r4, #16
  400740:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
  400742:	0a22      	lsrs	r2, r4, #8
  400744:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
  400746:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
  400748:	0a2a      	lsrs	r2, r5, #8
  40074a:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
  40074c:	735d      	strb	r5, [r3, #13]
  40074e:	bd70      	pop	{r4, r5, r6, pc}
  400750:	00400709 	.word	0x00400709
  400754:	20000018 	.word	0x20000018
  400758:	20006b18 	.word	0x20006b18

0040075c <udi_msc_sense_fail_cdb_invalid>:
{
  40075c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  40075e:	2200      	movs	r2, #0
  400760:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  400764:	2005      	movs	r0, #5
  400766:	4b01      	ldr	r3, [pc, #4]	; (40076c <udi_msc_sense_fail_cdb_invalid+0x10>)
  400768:	4798      	blx	r3
  40076a:	bd08      	pop	{r3, pc}
  40076c:	00400725 	.word	0x00400725

00400770 <udi_msc_cbw_validate>:
{
  400770:	b508      	push	{r3, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
  400772:	4b09      	ldr	r3, [pc, #36]	; (400798 <udi_msc_cbw_validate+0x28>)
  400774:	7b1b      	ldrb	r3, [r3, #12]
  400776:	4059      	eors	r1, r3
  400778:	f011 0f80 	tst.w	r1, #128	; 0x80
  40077c:	d103      	bne.n	400786 <udi_msc_cbw_validate+0x16>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
  40077e:	4b07      	ldr	r3, [pc, #28]	; (40079c <udi_msc_cbw_validate+0x2c>)
  400780:	689b      	ldr	r3, [r3, #8]
  400782:	4283      	cmp	r3, r0
  400784:	d205      	bcs.n	400792 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <udi_msc_cbw_validate+0x30>)
  400788:	4798      	blx	r3
		udi_msc_csw_process();
  40078a:	4b06      	ldr	r3, [pc, #24]	; (4007a4 <udi_msc_cbw_validate+0x34>)
  40078c:	4798      	blx	r3
		return false;
  40078e:	2000      	movs	r0, #0
  400790:	bd08      	pop	{r3, pc}
	return true;
  400792:	2001      	movs	r0, #1
}
  400794:	bd08      	pop	{r3, pc}
  400796:	bf00      	nop
  400798:	20006af0 	.word	0x20006af0
  40079c:	20000018 	.word	0x20000018
  4007a0:	0040075d 	.word	0x0040075d
  4007a4:	004006d1 	.word	0x004006d1

004007a8 <udi_msc_sense_fail_hardware>:
{
  4007a8:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
  4007aa:	2200      	movs	r2, #0
  4007ac:	4611      	mov	r1, r2
  4007ae:	2004      	movs	r0, #4
  4007b0:	4b01      	ldr	r3, [pc, #4]	; (4007b8 <udi_msc_sense_fail_hardware+0x10>)
  4007b2:	4798      	blx	r3
  4007b4:	bd08      	pop	{r3, pc}
  4007b6:	bf00      	nop
  4007b8:	00400725 	.word	0x00400725

004007bc <udi_msc_data_send>:
{
  4007bc:	b510      	push	{r4, lr}
  4007be:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
  4007c0:	4b07      	ldr	r3, [pc, #28]	; (4007e0 <udi_msc_data_send+0x24>)
  4007c2:	9300      	str	r3, [sp, #0]
  4007c4:	460b      	mov	r3, r1
  4007c6:	4602      	mov	r2, r0
  4007c8:	2101      	movs	r1, #1
  4007ca:	2081      	movs	r0, #129	; 0x81
  4007cc:	4c05      	ldr	r4, [pc, #20]	; (4007e4 <udi_msc_data_send+0x28>)
  4007ce:	47a0      	blx	r4
  4007d0:	b108      	cbz	r0, 4007d6 <udi_msc_data_send+0x1a>
}
  4007d2:	b002      	add	sp, #8
  4007d4:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
  4007d6:	4b04      	ldr	r3, [pc, #16]	; (4007e8 <udi_msc_data_send+0x2c>)
  4007d8:	4798      	blx	r3
		udi_msc_csw_process();
  4007da:	4b04      	ldr	r3, [pc, #16]	; (4007ec <udi_msc_data_send+0x30>)
  4007dc:	4798      	blx	r3
}
  4007de:	e7f8      	b.n	4007d2 <udi_msc_data_send+0x16>
  4007e0:	00400831 	.word	0x00400831
  4007e4:	004039f1 	.word	0x004039f1
  4007e8:	004007a9 	.word	0x004007a9
  4007ec:	004006d1 	.word	0x004006d1

004007f0 <udi_msc_sense_fail_busy_or_change>:
{
  4007f0:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
  4007f2:	2200      	movs	r2, #0
  4007f4:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  4007f8:	2006      	movs	r0, #6
  4007fa:	4b01      	ldr	r3, [pc, #4]	; (400800 <udi_msc_sense_fail_busy_or_change+0x10>)
  4007fc:	4798      	blx	r3
  4007fe:	bd08      	pop	{r3, pc}
  400800:	00400725 	.word	0x00400725

00400804 <udi_msc_sense_fail_not_present>:
{
  400804:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
  400806:	2200      	movs	r2, #0
  400808:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
  40080c:	2002      	movs	r0, #2
  40080e:	4b01      	ldr	r3, [pc, #4]	; (400814 <udi_msc_sense_fail_not_present+0x10>)
  400810:	4798      	blx	r3
  400812:	bd08      	pop	{r3, pc}
  400814:	00400725 	.word	0x00400725

00400818 <udi_msc_sense_pass>:
{
  400818:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
  40081a:	4b03      	ldr	r3, [pc, #12]	; (400828 <udi_msc_sense_pass+0x10>)
  40081c:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
  40081e:	2200      	movs	r2, #0
  400820:	4b02      	ldr	r3, [pc, #8]	; (40082c <udi_msc_sense_pass+0x14>)
  400822:	731a      	strb	r2, [r3, #12]
  400824:	bd08      	pop	{r3, pc}
  400826:	bf00      	nop
  400828:	00400709 	.word	0x00400709
  40082c:	20000018 	.word	0x20000018

00400830 <udi_msc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400830:	b100      	cbz	r0, 400834 <udi_msc_data_sent+0x4>
  400832:	4770      	bx	lr
{
  400834:	b510      	push	{r4, lr}
  400836:	460c      	mov	r4, r1
	udi_msc_sense_pass();
  400838:	4b04      	ldr	r3, [pc, #16]	; (40084c <udi_msc_data_sent+0x1c>)
  40083a:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
  40083c:	4b04      	ldr	r3, [pc, #16]	; (400850 <udi_msc_data_sent+0x20>)
  40083e:	6899      	ldr	r1, [r3, #8]
  400840:	1b09      	subs	r1, r1, r4
  400842:	6099      	str	r1, [r3, #8]
	udi_msc_csw_process();
  400844:	4b03      	ldr	r3, [pc, #12]	; (400854 <udi_msc_data_sent+0x24>)
  400846:	4798      	blx	r3
  400848:	bd10      	pop	{r4, pc}
  40084a:	bf00      	nop
  40084c:	00400819 	.word	0x00400819
  400850:	20000018 	.word	0x20000018
  400854:	004006d1 	.word	0x004006d1

00400858 <udi_msc_spc_mode_sense>:
{
  400858:	b570      	push	{r4, r5, r6, lr}
	memset(&sense, 0, sizeof(sense));
  40085a:	4b23      	ldr	r3, [pc, #140]	; (4008e8 <udi_msc_spc_mode_sense+0x90>)
  40085c:	2200      	movs	r2, #0
  40085e:	601a      	str	r2, [r3, #0]
  400860:	605a      	str	r2, [r3, #4]
  400862:	609a      	str	r2, [r3, #8]
  400864:	60da      	str	r2, [r3, #12]
  400866:	611a      	str	r2, [r3, #16]
	if (b_sense10) {
  400868:	4606      	mov	r6, r0
  40086a:	b1a0      	cbz	r0, 400896 <udi_msc_spc_mode_sense+0x3e>
		request_lgt = udi_msc_cbw.CDB[8];
  40086c:	4b1f      	ldr	r3, [pc, #124]	; (4008ec <udi_msc_spc_mode_sense+0x94>)
  40086e:	7ddd      	ldrb	r5, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
  400870:	4a1f      	ldr	r2, [pc, #124]	; (4008f0 <udi_msc_spc_mode_sense+0x98>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
  400872:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
  400874:	4b1d      	ldr	r3, [pc, #116]	; (4008ec <udi_msc_spc_mode_sense+0x94>)
  400876:	7c5b      	ldrb	r3, [r3, #17]
  400878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
  40087c:	2b1c      	cmp	r3, #28
  40087e:	d00f      	beq.n	4008a0 <udi_msc_spc_mode_sense+0x48>
			|| (SCSI_MS_MODE_ALL == mode)) {
  400880:	2b3f      	cmp	r3, #63	; 0x3f
  400882:	d00d      	beq.n	4008a0 <udi_msc_spc_mode_sense+0x48>
  400884:	42a5      	cmp	r5, r4
  400886:	bf28      	it	cs
  400888:	4625      	movcs	r5, r4
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
  40088a:	2180      	movs	r1, #128	; 0x80
  40088c:	4628      	mov	r0, r5
  40088e:	4b19      	ldr	r3, [pc, #100]	; (4008f4 <udi_msc_spc_mode_sense+0x9c>)
  400890:	4798      	blx	r3
  400892:	b970      	cbnz	r0, 4008b2 <udi_msc_spc_mode_sense+0x5a>
  400894:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
  400896:	4b15      	ldr	r3, [pc, #84]	; (4008ec <udi_msc_spc_mode_sense+0x94>)
  400898:	7cdd      	ldrb	r5, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
  40089a:	4a17      	ldr	r2, [pc, #92]	; (4008f8 <udi_msc_spc_mode_sense+0xa0>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
  40089c:	2404      	movs	r4, #4
  40089e:	e7e9      	b.n	400874 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
  4008a0:	231c      	movs	r3, #28
  4008a2:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
  4008a4:	230a      	movs	r3, #10
  4008a6:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
  4008a8:	2305      	movs	r3, #5
  4008aa:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
  4008ac:	340c      	adds	r4, #12
  4008ae:	b2e4      	uxtb	r4, r4
  4008b0:	e7e8      	b.n	400884 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
  4008b2:	4b0e      	ldr	r3, [pc, #56]	; (4008ec <udi_msc_spc_mode_sense+0x94>)
  4008b4:	7b58      	ldrb	r0, [r3, #13]
  4008b6:	4b11      	ldr	r3, [pc, #68]	; (4008fc <udi_msc_spc_mode_sense+0xa4>)
  4008b8:	4798      	blx	r3
  4008ba:	2800      	cmp	r0, #0
  4008bc:	bf14      	ite	ne
  4008be:	2380      	movne	r3, #128	; 0x80
  4008c0:	2300      	moveq	r3, #0
	if (b_sense10) {
  4008c2:	b166      	cbz	r6, 4008de <udi_msc_spc_mode_sense+0x86>
				cpu_to_be16((data_sense_lgt - 2));
  4008c4:	3c02      	subs	r4, #2
  4008c6:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
  4008c8:	4907      	ldr	r1, [pc, #28]	; (4008e8 <udi_msc_spc_mode_sense+0x90>)
				cpu_to_be16((data_sense_lgt - 2));
  4008ca:	0222      	lsls	r2, r4, #8
  4008cc:	ea42 2414 	orr.w	r4, r2, r4, lsr #8
		sense.s10.header.mode_data_length =
  4008d0:	800c      	strh	r4, [r1, #0]
		sense.s10.header.device_specific_parameter = wp;
  4008d2:	70cb      	strb	r3, [r1, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
  4008d4:	4629      	mov	r1, r5
  4008d6:	4804      	ldr	r0, [pc, #16]	; (4008e8 <udi_msc_spc_mode_sense+0x90>)
  4008d8:	4b09      	ldr	r3, [pc, #36]	; (400900 <udi_msc_spc_mode_sense+0xa8>)
  4008da:	4798      	blx	r3
  4008dc:	e7da      	b.n	400894 <udi_msc_spc_mode_sense+0x3c>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
  4008de:	4a02      	ldr	r2, [pc, #8]	; (4008e8 <udi_msc_spc_mode_sense+0x90>)
  4008e0:	3c01      	subs	r4, #1
  4008e2:	7014      	strb	r4, [r2, #0]
		sense.s6.header.device_specific_parameter = wp;
  4008e4:	7093      	strb	r3, [r2, #2]
  4008e6:	e7f5      	b.n	4008d4 <udi_msc_spc_mode_sense+0x7c>
  4008e8:	20006acc 	.word	0x20006acc
  4008ec:	20006af0 	.word	0x20006af0
  4008f0:	20006ad4 	.word	0x20006ad4
  4008f4:	00400771 	.word	0x00400771
  4008f8:	20006ad0 	.word	0x20006ad0
  4008fc:	00400431 	.word	0x00400431
  400900:	004007bd 	.word	0x004007bd

00400904 <udi_msc_sbc_trans>:
{
  400904:	b510      	push	{r4, lr}
	if (!b_read) {
  400906:	4604      	mov	r4, r0
  400908:	b1c0      	cbz	r0, 40093c <udi_msc_sbc_trans+0x38>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
  40090a:	4a18      	ldr	r2, [pc, #96]	; (40096c <udi_msc_sbc_trans+0x68>)
  40090c:	4b18      	ldr	r3, [pc, #96]	; (400970 <udi_msc_sbc_trans+0x6c>)
  40090e:	7c59      	ldrb	r1, [r3, #17]
  400910:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
  400912:	7c99      	ldrb	r1, [r3, #18]
  400914:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
  400916:	7cd9      	ldrb	r1, [r3, #19]
  400918:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
  40091a:	7d19      	ldrb	r1, [r3, #20]
  40091c:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
  40091e:	4a15      	ldr	r2, [pc, #84]	; (400974 <udi_msc_sbc_trans+0x70>)
  400920:	7d99      	ldrb	r1, [r3, #22]
  400922:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
  400924:	7ddb      	ldrb	r3, [r3, #23]
  400926:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
  400928:	8810      	ldrh	r0, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
  40092a:	2c00      	cmp	r4, #0
  40092c:	bf14      	ite	ne
  40092e:	2180      	movne	r1, #128	; 0x80
  400930:	2100      	moveq	r1, #0
  400932:	0240      	lsls	r0, r0, #9
  400934:	4b10      	ldr	r3, [pc, #64]	; (400978 <udi_msc_sbc_trans+0x74>)
  400936:	4798      	blx	r3
  400938:	b978      	cbnz	r0, 40095a <udi_msc_sbc_trans+0x56>
  40093a:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
  40093c:	4b0c      	ldr	r3, [pc, #48]	; (400970 <udi_msc_sbc_trans+0x6c>)
  40093e:	7b58      	ldrb	r0, [r3, #13]
  400940:	4b0e      	ldr	r3, [pc, #56]	; (40097c <udi_msc_sbc_trans+0x78>)
  400942:	4798      	blx	r3
  400944:	2800      	cmp	r0, #0
  400946:	d0e0      	beq.n	40090a <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
  400948:	2200      	movs	r2, #0
  40094a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
  40094e:	2007      	movs	r0, #7
  400950:	4b0b      	ldr	r3, [pc, #44]	; (400980 <udi_msc_sbc_trans+0x7c>)
  400952:	4798      	blx	r3
			udi_msc_csw_process();
  400954:	4b0b      	ldr	r3, [pc, #44]	; (400984 <udi_msc_sbc_trans+0x80>)
  400956:	4798      	blx	r3
			return;
  400958:	bd10      	pop	{r4, pc}
	udi_msc_b_read = b_read;
  40095a:	4b0b      	ldr	r3, [pc, #44]	; (400988 <udi_msc_sbc_trans+0x84>)
  40095c:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
  40095e:	2201      	movs	r2, #1
  400960:	4b0a      	ldr	r3, [pc, #40]	; (40098c <udi_msc_sbc_trans+0x88>)
  400962:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
  400964:	4b0a      	ldr	r3, [pc, #40]	; (400990 <udi_msc_sbc_trans+0x8c>)
  400966:	4798      	blx	r3
  400968:	e7e7      	b.n	40093a <udi_msc_sbc_trans+0x36>
  40096a:	bf00      	nop
  40096c:	20006ae0 	.word	0x20006ae0
  400970:	20006af0 	.word	0x20006af0
  400974:	20006b10 	.word	0x20006b10
  400978:	00400771 	.word	0x00400771
  40097c:	00400431 	.word	0x00400431
  400980:	00400725 	.word	0x00400725
  400984:	004006d1 	.word	0x004006d1
  400988:	20006ae5 	.word	0x20006ae5
  40098c:	20006ae6 	.word	0x20006ae6
  400990:	0040c28d 	.word	0x0040c28d

00400994 <udi_msc_cbw_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400994:	2800      	cmp	r0, #0
  400996:	f040 8190 	bne.w	400cba <udi_msc_cbw_received+0x326>
{
  40099a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((sizeof(udi_msc_cbw) != nb_received)
  40099c:	291f      	cmp	r1, #31
  40099e:	d104      	bne.n	4009aa <udi_msc_cbw_received+0x16>
			|| (udi_msc_cbw.dCBWSignature !=
  4009a0:	4b89      	ldr	r3, [pc, #548]	; (400bc8 <udi_msc_cbw_received+0x234>)
  4009a2:	681a      	ldr	r2, [r3, #0]
  4009a4:	4b89      	ldr	r3, [pc, #548]	; (400bcc <udi_msc_cbw_received+0x238>)
  4009a6:	429a      	cmp	r2, r3
  4009a8:	d007      	beq.n	4009ba <udi_msc_cbw_received+0x26>
		udi_msc_b_cbw_invalid = true;
  4009aa:	2201      	movs	r2, #1
  4009ac:	4b88      	ldr	r3, [pc, #544]	; (400bd0 <udi_msc_cbw_received+0x23c>)
  4009ae:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
  4009b0:	4b88      	ldr	r3, [pc, #544]	; (400bd4 <udi_msc_cbw_received+0x240>)
  4009b2:	4798      	blx	r3
		udi_msc_csw_invalid();
  4009b4:	4b88      	ldr	r3, [pc, #544]	; (400bd8 <udi_msc_cbw_received+0x244>)
  4009b6:	4798      	blx	r3
		return;
  4009b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
  4009ba:	4b83      	ldr	r3, [pc, #524]	; (400bc8 <udi_msc_cbw_received+0x234>)
  4009bc:	7b58      	ldrb	r0, [r3, #13]
  4009be:	f000 000f 	and.w	r0, r0, #15
  4009c2:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
  4009c4:	4b85      	ldr	r3, [pc, #532]	; (400bdc <udi_msc_cbw_received+0x248>)
  4009c6:	781b      	ldrb	r3, [r3, #0]
  4009c8:	4283      	cmp	r3, r0
  4009ca:	d364      	bcc.n	400a96 <udi_msc_cbw_received+0x102>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
  4009cc:	4b7e      	ldr	r3, [pc, #504]	; (400bc8 <udi_msc_cbw_received+0x234>)
	udi_msc_csw.dCSWDataResidue =
  4009ce:	6899      	ldr	r1, [r3, #8]
  4009d0:	4a83      	ldr	r2, [pc, #524]	; (400be0 <udi_msc_cbw_received+0x24c>)
  4009d2:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
  4009d4:	7bdb      	ldrb	r3, [r3, #15]
  4009d6:	2b5a      	cmp	r3, #90	; 0x5a
  4009d8:	f200 8158 	bhi.w	400c8c <udi_msc_cbw_received+0x2f8>
  4009dc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4009e0:	015600be 	.word	0x015600be
  4009e4:	00600156 	.word	0x00600156
  4009e8:	01560156 	.word	0x01560156
  4009ec:	01560156 	.word	0x01560156
  4009f0:	01560156 	.word	0x01560156
  4009f4:	01560156 	.word	0x01560156
  4009f8:	01560156 	.word	0x01560156
  4009fc:	01560156 	.word	0x01560156
  400a00:	01560156 	.word	0x01560156
  400a04:	01560070 	.word	0x01560070
  400a08:	01560156 	.word	0x01560156
  400a0c:	01560156 	.word	0x01560156
  400a10:	01560156 	.word	0x01560156
  400a14:	012d00b6 	.word	0x012d00b6
  400a18:	01560156 	.word	0x01560156
  400a1c:	0156013e 	.word	0x0156013e
  400a20:	01560156 	.word	0x01560156
  400a24:	01560156 	.word	0x01560156
  400a28:	00d30156 	.word	0x00d30156
  400a2c:	01560156 	.word	0x01560156
  400a30:	0156014e 	.word	0x0156014e
  400a34:	01560152 	.word	0x01560152
  400a38:	01560156 	.word	0x01560156
  400a3c:	01490156 	.word	0x01490156
  400a40:	01560156 	.word	0x01560156
  400a44:	01560156 	.word	0x01560156
  400a48:	01560156 	.word	0x01560156
  400a4c:	01560156 	.word	0x01560156
  400a50:	01560156 	.word	0x01560156
  400a54:	01560156 	.word	0x01560156
  400a58:	01560156 	.word	0x01560156
  400a5c:	01560156 	.word	0x01560156
  400a60:	01560156 	.word	0x01560156
  400a64:	01560156 	.word	0x01560156
  400a68:	01560156 	.word	0x01560156
  400a6c:	01560156 	.word	0x01560156
  400a70:	01560156 	.word	0x01560156
  400a74:	01560156 	.word	0x01560156
  400a78:	01560156 	.word	0x01560156
  400a7c:	01560156 	.word	0x01560156
  400a80:	01560156 	.word	0x01560156
  400a84:	01560156 	.word	0x01560156
  400a88:	01560156 	.word	0x01560156
  400a8c:	01560156 	.word	0x01560156
  400a90:	01560156 	.word	0x01560156
  400a94:	00ba      	.short	0x00ba
		udi_msc_sense_fail_cdb_invalid();
  400a96:	4b53      	ldr	r3, [pc, #332]	; (400be4 <udi_msc_cbw_received+0x250>)
  400a98:	4798      	blx	r3
		udi_msc_csw_process();
  400a9a:	4b53      	ldr	r3, [pc, #332]	; (400be8 <udi_msc_cbw_received+0x254>)
  400a9c:	4798      	blx	r3
		return;
  400a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t length = udi_msc_cbw.CDB[4];
  400aa0:	4b49      	ldr	r3, [pc, #292]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400aa2:	7cdc      	ldrb	r4, [r3, #19]
  400aa4:	2c12      	cmp	r4, #18
  400aa6:	bf28      	it	cs
  400aa8:	2412      	movcs	r4, #18
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  400aaa:	2180      	movs	r1, #128	; 0x80
  400aac:	4620      	mov	r0, r4
  400aae:	4b4f      	ldr	r3, [pc, #316]	; (400bec <udi_msc_cbw_received+0x258>)
  400ab0:	4798      	blx	r3
  400ab2:	b900      	cbnz	r0, 400ab6 <udi_msc_cbw_received+0x122>
  400ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
  400ab6:	4621      	mov	r1, r4
  400ab8:	484d      	ldr	r0, [pc, #308]	; (400bf0 <udi_msc_cbw_received+0x25c>)
  400aba:	4b4e      	ldr	r3, [pc, #312]	; (400bf4 <udi_msc_cbw_received+0x260>)
  400abc:	4798      	blx	r3
  400abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	length = udi_msc_cbw.CDB[4];
  400ac0:	4b41      	ldr	r3, [pc, #260]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400ac2:	7cdc      	ldrb	r4, [r3, #19]
  400ac4:	2c24      	cmp	r4, #36	; 0x24
  400ac6:	bf28      	it	cs
  400ac8:	2424      	movcs	r4, #36	; 0x24
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  400aca:	2180      	movs	r1, #128	; 0x80
  400acc:	4620      	mov	r0, r4
  400ace:	4b47      	ldr	r3, [pc, #284]	; (400bec <udi_msc_cbw_received+0x258>)
  400ad0:	4798      	blx	r3
  400ad2:	2800      	cmp	r0, #0
  400ad4:	d0ee      	beq.n	400ab4 <udi_msc_cbw_received+0x120>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
  400ad6:	4b3c      	ldr	r3, [pc, #240]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400ad8:	7c1b      	ldrb	r3, [r3, #16]
  400ada:	f013 0f03 	tst.w	r3, #3
  400ade:	d102      	bne.n	400ae6 <udi_msc_cbw_received+0x152>
			|| (0 != udi_msc_cbw.CDB[2])) {
  400ae0:	4b39      	ldr	r3, [pc, #228]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400ae2:	7c5d      	ldrb	r5, [r3, #17]
  400ae4:	b125      	cbz	r5, 400af0 <udi_msc_cbw_received+0x15c>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  400ae6:	4b3f      	ldr	r3, [pc, #252]	; (400be4 <udi_msc_cbw_received+0x250>)
  400ae8:	4798      	blx	r3
		udi_msc_csw_process();
  400aea:	4b3f      	ldr	r3, [pc, #252]	; (400be8 <udi_msc_cbw_received+0x254>)
  400aec:	4798      	blx	r3
  400aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
  400af0:	4b35      	ldr	r3, [pc, #212]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400af2:	7b58      	ldrb	r0, [r3, #13]
  400af4:	4b40      	ldr	r3, [pc, #256]	; (400bf8 <udi_msc_cbw_received+0x264>)
  400af6:	4798      	blx	r3
  400af8:	2800      	cmp	r0, #0
  400afa:	bf0c      	ite	eq
  400afc:	462b      	moveq	r3, r5
  400afe:	2380      	movne	r3, #128	; 0x80
  400b00:	4f3e      	ldr	r7, [pc, #248]	; (400bfc <udi_msc_cbw_received+0x268>)
  400b02:	707b      	strb	r3, [r7, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
  400b04:	4b30      	ldr	r3, [pc, #192]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400b06:	7b58      	ldrb	r0, [r3, #13]
  400b08:	4b3d      	ldr	r3, [pc, #244]	; (400c00 <udi_msc_cbw_received+0x26c>)
  400b0a:	4798      	blx	r3
	memcpy(udi_msc_inquiry_data.product_id,
  400b0c:	f107 0610 	add.w	r6, r7, #16
  400b10:	4603      	mov	r3, r0
  400b12:	f853 0f01 	ldr.w	r0, [r3, #1]!
  400b16:	6859      	ldr	r1, [r3, #4]
  400b18:	689a      	ldr	r2, [r3, #8]
  400b1a:	68db      	ldr	r3, [r3, #12]
  400b1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
		if ((0 == udi_msc_inquiry_data.product_id[i])
  400b1e:	7c3b      	ldrb	r3, [r7, #16]
  400b20:	2b00      	cmp	r3, #0
  400b22:	f000 80bd 	beq.w	400ca0 <udi_msc_cbw_received+0x30c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
  400b26:	2b22      	cmp	r3, #34	; 0x22
  400b28:	f000 80b9 	beq.w	400c9e <udi_msc_cbw_received+0x30a>
  400b2c:	f1a6 010f 	sub.w	r1, r6, #15
		i++;
  400b30:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
  400b32:	f811 2b01 	ldrb.w	r2, [r1], #1
  400b36:	2a00      	cmp	r2, #0
  400b38:	f000 80b2 	beq.w	400ca0 <udi_msc_cbw_received+0x30c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
  400b3c:	2a22      	cmp	r2, #34	; 0x22
  400b3e:	f000 80af 	beq.w	400ca0 <udi_msc_cbw_received+0x30c>
		i++;
  400b42:	3301      	adds	r3, #1
  400b44:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  400b46:	2b10      	cmp	r3, #16
  400b48:	d1f3      	bne.n	400b32 <udi_msc_cbw_received+0x19e>
  400b4a:	e0b1      	b.n	400cb0 <udi_msc_cbw_received+0x31c>
		udi_msc_spc_mode_sense(false);
  400b4c:	2000      	movs	r0, #0
  400b4e:	4b2d      	ldr	r3, [pc, #180]	; (400c04 <udi_msc_cbw_received+0x270>)
  400b50:	4798      	blx	r3
		break;
  400b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_spc_mode_sense(true);
  400b54:	2001      	movs	r0, #1
  400b56:	4b2b      	ldr	r3, [pc, #172]	; (400c04 <udi_msc_cbw_received+0x270>)
  400b58:	4798      	blx	r3
		break;
  400b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
  400b5c:	4b2a      	ldr	r3, [pc, #168]	; (400c08 <udi_msc_cbw_received+0x274>)
  400b5e:	4798      	blx	r3
  400b60:	2802      	cmp	r0, #2
  400b62:	d008      	beq.n	400b76 <udi_msc_cbw_received+0x1e2>
  400b64:	2803      	cmp	r0, #3
  400b66:	d003      	beq.n	400b70 <udi_msc_cbw_received+0x1dc>
  400b68:	b140      	cbz	r0, 400b7c <udi_msc_cbw_received+0x1e8>
		udi_msc_sense_fail_hardware();
  400b6a:	4b28      	ldr	r3, [pc, #160]	; (400c0c <udi_msc_cbw_received+0x278>)
  400b6c:	4798      	blx	r3
  400b6e:	e007      	b.n	400b80 <udi_msc_cbw_received+0x1ec>
		udi_msc_sense_fail_busy_or_change();
  400b70:	4b27      	ldr	r3, [pc, #156]	; (400c10 <udi_msc_cbw_received+0x27c>)
  400b72:	4798      	blx	r3
  400b74:	e004      	b.n	400b80 <udi_msc_cbw_received+0x1ec>
		udi_msc_sense_fail_not_present();
  400b76:	4b27      	ldr	r3, [pc, #156]	; (400c14 <udi_msc_cbw_received+0x280>)
  400b78:	4798      	blx	r3
  400b7a:	e001      	b.n	400b80 <udi_msc_cbw_received+0x1ec>
		udi_msc_sense_pass();
  400b7c:	4b26      	ldr	r3, [pc, #152]	; (400c18 <udi_msc_cbw_received+0x284>)
  400b7e:	4798      	blx	r3
	udi_msc_csw_process();
  400b80:	4b19      	ldr	r3, [pc, #100]	; (400be8 <udi_msc_cbw_received+0x254>)
  400b82:	4798      	blx	r3
  400b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
  400b86:	2180      	movs	r1, #128	; 0x80
  400b88:	2008      	movs	r0, #8
  400b8a:	4b18      	ldr	r3, [pc, #96]	; (400bec <udi_msc_cbw_received+0x258>)
  400b8c:	4798      	blx	r3
  400b8e:	2800      	cmp	r0, #0
  400b90:	d090      	beq.n	400ab4 <udi_msc_cbw_received+0x120>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
  400b92:	4922      	ldr	r1, [pc, #136]	; (400c1c <udi_msc_cbw_received+0x288>)
  400b94:	4b0c      	ldr	r3, [pc, #48]	; (400bc8 <udi_msc_cbw_received+0x234>)
  400b96:	7b58      	ldrb	r0, [r3, #13]
  400b98:	4b21      	ldr	r3, [pc, #132]	; (400c20 <udi_msc_cbw_received+0x28c>)
  400b9a:	4798      	blx	r3
  400b9c:	2802      	cmp	r0, #2
  400b9e:	d00d      	beq.n	400bbc <udi_msc_cbw_received+0x228>
  400ba0:	2803      	cmp	r0, #3
  400ba2:	d006      	beq.n	400bb2 <udi_msc_cbw_received+0x21e>
  400ba4:	2800      	cmp	r0, #0
  400ba6:	d03d      	beq.n	400c24 <udi_msc_cbw_received+0x290>
		udi_msc_sense_fail_hardware();
  400ba8:	4b18      	ldr	r3, [pc, #96]	; (400c0c <udi_msc_cbw_received+0x278>)
  400baa:	4798      	blx	r3
		udi_msc_csw_process();
  400bac:	4b0e      	ldr	r3, [pc, #56]	; (400be8 <udi_msc_cbw_received+0x254>)
  400bae:	4798      	blx	r3
  400bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sense_fail_busy_or_change();
  400bb2:	4b17      	ldr	r3, [pc, #92]	; (400c10 <udi_msc_cbw_received+0x27c>)
  400bb4:	4798      	blx	r3
		udi_msc_csw_process();
  400bb6:	4b0c      	ldr	r3, [pc, #48]	; (400be8 <udi_msc_cbw_received+0x254>)
  400bb8:	4798      	blx	r3
  400bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sense_fail_not_present();
  400bbc:	4b15      	ldr	r3, [pc, #84]	; (400c14 <udi_msc_cbw_received+0x280>)
  400bbe:	4798      	blx	r3
		udi_msc_csw_process();
  400bc0:	4b09      	ldr	r3, [pc, #36]	; (400be8 <udi_msc_cbw_received+0x254>)
  400bc2:	4798      	blx	r3
  400bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bc6:	bf00      	nop
  400bc8:	20006af0 	.word	0x20006af0
  400bcc:	43425355 	.word	0x43425355
  400bd0:	20006ae4 	.word	0x20006ae4
  400bd4:	00400679 	.word	0x00400679
  400bd8:	004006a5 	.word	0x004006a5
  400bdc:	20006b14 	.word	0x20006b14
  400be0:	20000018 	.word	0x20000018
  400be4:	0040075d 	.word	0x0040075d
  400be8:	004006d1 	.word	0x004006d1
  400bec:	00400771 	.word	0x00400771
  400bf0:	20006b18 	.word	0x20006b18
  400bf4:	004007bd 	.word	0x004007bd
  400bf8:	0040046d 	.word	0x0040046d
  400bfc:	20000028 	.word	0x20000028
  400c00:	004004a9 	.word	0x004004a9
  400c04:	00400859 	.word	0x00400859
  400c08:	00400375 	.word	0x00400375
  400c0c:	004007a9 	.word	0x004007a9
  400c10:	004007f1 	.word	0x004007f1
  400c14:	00400805 	.word	0x00400805
  400c18:	00400819 	.word	0x00400819
  400c1c:	20006ae8 	.word	0x20006ae8
  400c20:	004003b1 	.word	0x004003b1
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
  400c24:	4825      	ldr	r0, [pc, #148]	; (400cbc <udi_msc_cbw_received+0x328>)
  400c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400c2a:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
  400c2c:	6803      	ldr	r3, [r0, #0]
  400c2e:	ba1b      	rev	r3, r3
  400c30:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
  400c32:	2108      	movs	r1, #8
  400c34:	4b22      	ldr	r3, [pc, #136]	; (400cc0 <udi_msc_cbw_received+0x32c>)
  400c36:	4798      	blx	r3
  400c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bool start = 0x1 & udi_msc_cbw.CDB[4];
  400c3a:	4b22      	ldr	r3, [pc, #136]	; (400cc4 <udi_msc_cbw_received+0x330>)
  400c3c:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
  400c3e:	f013 0f02 	tst.w	r3, #2
  400c42:	d104      	bne.n	400c4e <udi_msc_cbw_received+0x2ba>
	udi_msc_sense_pass();
  400c44:	4b20      	ldr	r3, [pc, #128]	; (400cc8 <udi_msc_cbw_received+0x334>)
  400c46:	4798      	blx	r3
	udi_msc_csw_process();
  400c48:	4b20      	ldr	r3, [pc, #128]	; (400ccc <udi_msc_cbw_received+0x338>)
  400c4a:	4798      	blx	r3
  400c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
  400c4e:	f083 0301 	eor.w	r3, r3, #1
  400c52:	f003 0101 	and.w	r1, r3, #1
  400c56:	4b1e      	ldr	r3, [pc, #120]	; (400cd0 <udi_msc_cbw_received+0x33c>)
  400c58:	4798      	blx	r3
  400c5a:	e7f3      	b.n	400c44 <udi_msc_cbw_received+0x2b0>
	uint8_t prevent = udi_msc_cbw.CDB[4];
  400c5c:	4b19      	ldr	r3, [pc, #100]	; (400cc4 <udi_msc_cbw_received+0x330>)
	if (0 == prevent) {
  400c5e:	7cdb      	ldrb	r3, [r3, #19]
  400c60:	b123      	cbz	r3, 400c6c <udi_msc_cbw_received+0x2d8>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  400c62:	4b1c      	ldr	r3, [pc, #112]	; (400cd4 <udi_msc_cbw_received+0x340>)
  400c64:	4798      	blx	r3
	udi_msc_csw_process();
  400c66:	4b19      	ldr	r3, [pc, #100]	; (400ccc <udi_msc_cbw_received+0x338>)
  400c68:	4798      	blx	r3
  400c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sense_pass();
  400c6c:	4b16      	ldr	r3, [pc, #88]	; (400cc8 <udi_msc_cbw_received+0x334>)
  400c6e:	4798      	blx	r3
  400c70:	e7f9      	b.n	400c66 <udi_msc_cbw_received+0x2d2>
		udi_msc_sense_pass();
  400c72:	4b15      	ldr	r3, [pc, #84]	; (400cc8 <udi_msc_cbw_received+0x334>)
  400c74:	4798      	blx	r3
		udi_msc_csw_process();
  400c76:	4b15      	ldr	r3, [pc, #84]	; (400ccc <udi_msc_cbw_received+0x338>)
  400c78:	4798      	blx	r3
		break;
  400c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sbc_trans(true);
  400c7c:	2001      	movs	r0, #1
  400c7e:	4b16      	ldr	r3, [pc, #88]	; (400cd8 <udi_msc_cbw_received+0x344>)
  400c80:	4798      	blx	r3
		break;
  400c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udi_msc_sbc_trans(false);
  400c84:	2000      	movs	r0, #0
  400c86:	4b14      	ldr	r3, [pc, #80]	; (400cd8 <udi_msc_cbw_received+0x344>)
  400c88:	4798      	blx	r3
		break;
  400c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  400c8c:	2200      	movs	r2, #0
  400c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400c92:	2005      	movs	r0, #5
  400c94:	4b11      	ldr	r3, [pc, #68]	; (400cdc <udi_msc_cbw_received+0x348>)
  400c96:	4798      	blx	r3
		udi_msc_csw_process();
  400c98:	4b0c      	ldr	r3, [pc, #48]	; (400ccc <udi_msc_cbw_received+0x338>)
  400c9a:	4798      	blx	r3
		break;
  400c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	i = 0;
  400c9e:	462b      	mov	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
  400ca0:	480f      	ldr	r0, [pc, #60]	; (400ce0 <udi_msc_cbw_received+0x34c>)
  400ca2:	2120      	movs	r1, #32
  400ca4:	18c2      	adds	r2, r0, r3
  400ca6:	7411      	strb	r1, [r2, #16]
		i++;
  400ca8:	3301      	adds	r3, #1
  400caa:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  400cac:	2b10      	cmp	r3, #16
  400cae:	d1f9      	bne.n	400ca4 <udi_msc_cbw_received+0x310>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
  400cb0:	4621      	mov	r1, r4
  400cb2:	480b      	ldr	r0, [pc, #44]	; (400ce0 <udi_msc_cbw_received+0x34c>)
  400cb4:	4b02      	ldr	r3, [pc, #8]	; (400cc0 <udi_msc_cbw_received+0x32c>)
  400cb6:	4798      	blx	r3
  400cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400cba:	4770      	bx	lr
  400cbc:	20006ae8 	.word	0x20006ae8
  400cc0:	004007bd 	.word	0x004007bd
  400cc4:	20006af0 	.word	0x20006af0
  400cc8:	00400819 	.word	0x00400819
  400ccc:	004006d1 	.word	0x004006d1
  400cd0:	004003f1 	.word	0x004003f1
  400cd4:	0040075d 	.word	0x0040075d
  400cd8:	00400905 	.word	0x00400905
  400cdc:	00400725 	.word	0x00400725
  400ce0:	20000028 	.word	0x20000028

00400ce4 <udi_msc_disable>:
{
  400ce4:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
  400ce6:	2200      	movs	r2, #0
  400ce8:	4b04      	ldr	r3, [pc, #16]	; (400cfc <udi_msc_disable+0x18>)
  400cea:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  400cec:	2301      	movs	r3, #1
  400cee:	4a04      	ldr	r2, [pc, #16]	; (400d00 <udi_msc_disable+0x1c>)
  400cf0:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
  400cf2:	4a04      	ldr	r2, [pc, #16]	; (400d04 <udi_msc_disable+0x20>)
  400cf4:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
  400cf6:	4b04      	ldr	r3, [pc, #16]	; (400d08 <udi_msc_disable+0x24>)
  400cf8:	4798      	blx	r3
  400cfa:	bd08      	pop	{r3, pc}
  400cfc:	20006ae6 	.word	0x20006ae6
  400d00:	20000014 	.word	0x20000014
  400d04:	20000015 	.word	0x20000015
  400d08:	0040c2f1 	.word	0x0040c2f1

00400d0c <udi_msc_setup>:
	if (Udd_setup_is_in()) {
  400d0c:	4b22      	ldr	r3, [pc, #136]	; (400d98 <udi_msc_setup+0x8c>)
  400d0e:	781b      	ldrb	r3, [r3, #0]
  400d10:	f013 0f80 	tst.w	r3, #128	; 0x80
  400d14:	d105      	bne.n	400d22 <udi_msc_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400d1a:	2b20      	cmp	r3, #32
  400d1c:	d01a      	beq.n	400d54 <udi_msc_setup+0x48>
	return false;	// Not supported request
  400d1e:	2000      	movs	r0, #0
  400d20:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400d26:	2b20      	cmp	r3, #32
  400d28:	d001      	beq.n	400d2e <udi_msc_setup+0x22>
	return false;	// Not supported request
  400d2a:	2000      	movs	r0, #0
  400d2c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400d2e:	4b1a      	ldr	r3, [pc, #104]	; (400d98 <udi_msc_setup+0x8c>)
  400d30:	785b      	ldrb	r3, [r3, #1]
  400d32:	2bfe      	cmp	r3, #254	; 0xfe
  400d34:	d128      	bne.n	400d88 <udi_msc_setup+0x7c>
				if (1 != udd_g_ctrlreq.req.wLength)
  400d36:	4b18      	ldr	r3, [pc, #96]	; (400d98 <udi_msc_setup+0x8c>)
  400d38:	88db      	ldrh	r3, [r3, #6]
  400d3a:	2b01      	cmp	r3, #1
  400d3c:	d001      	beq.n	400d42 <udi_msc_setup+0x36>
					return false;	// Error for USB host
  400d3e:	2000      	movs	r0, #0
  400d40:	4770      	bx	lr
				if (0 != udd_g_ctrlreq.req.wValue)
  400d42:	4b15      	ldr	r3, [pc, #84]	; (400d98 <udi_msc_setup+0x8c>)
  400d44:	885b      	ldrh	r3, [r3, #2]
  400d46:	bb0b      	cbnz	r3, 400d8c <udi_msc_setup+0x80>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
  400d48:	4b13      	ldr	r3, [pc, #76]	; (400d98 <udi_msc_setup+0x8c>)
  400d4a:	4a14      	ldr	r2, [pc, #80]	; (400d9c <udi_msc_setup+0x90>)
  400d4c:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
  400d4e:	2001      	movs	r0, #1
  400d50:	8198      	strh	r0, [r3, #12]
				return true;
  400d52:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400d54:	4b10      	ldr	r3, [pc, #64]	; (400d98 <udi_msc_setup+0x8c>)
  400d56:	785b      	ldrb	r3, [r3, #1]
  400d58:	2bff      	cmp	r3, #255	; 0xff
  400d5a:	d119      	bne.n	400d90 <udi_msc_setup+0x84>
				if (0 != udd_g_ctrlreq.req.wLength)
  400d5c:	4b0e      	ldr	r3, [pc, #56]	; (400d98 <udi_msc_setup+0x8c>)
  400d5e:	88db      	ldrh	r3, [r3, #6]
  400d60:	b9c3      	cbnz	r3, 400d94 <udi_msc_setup+0x88>
				if (0 != udd_g_ctrlreq.req.wValue)
  400d62:	4b0d      	ldr	r3, [pc, #52]	; (400d98 <udi_msc_setup+0x8c>)
  400d64:	885b      	ldrh	r3, [r3, #2]
  400d66:	b10b      	cbz	r3, 400d6c <udi_msc_setup+0x60>
					return false;
  400d68:	2000      	movs	r0, #0
  400d6a:	4770      	bx	lr
{
  400d6c:	b510      	push	{r4, lr}
				udi_msc_b_cbw_invalid = false;
  400d6e:	4a0c      	ldr	r2, [pc, #48]	; (400da0 <udi_msc_setup+0x94>)
  400d70:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
  400d72:	4a0c      	ldr	r2, [pc, #48]	; (400da4 <udi_msc_setup+0x98>)
  400d74:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
  400d76:	2002      	movs	r0, #2
  400d78:	4c0b      	ldr	r4, [pc, #44]	; (400da8 <udi_msc_setup+0x9c>)
  400d7a:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
  400d7c:	2081      	movs	r0, #129	; 0x81
  400d7e:	47a0      	blx	r4
				udi_msc_cbw_wait();
  400d80:	4b0a      	ldr	r3, [pc, #40]	; (400dac <udi_msc_setup+0xa0>)
  400d82:	4798      	blx	r3
				return true;
  400d84:	2001      	movs	r0, #1
  400d86:	bd10      	pop	{r4, pc}
	return false;	// Not supported request
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr
					return false;
  400d8c:	2000      	movs	r0, #0
  400d8e:	4770      	bx	lr
	return false;	// Not supported request
  400d90:	2000      	movs	r0, #0
  400d92:	4770      	bx	lr
					return false;
  400d94:	2000      	movs	r0, #0
  400d96:	4770      	bx	lr
  400d98:	20013454 	.word	0x20013454
  400d9c:	20006b14 	.word	0x20006b14
  400da0:	20006ae4 	.word	0x20006ae4
  400da4:	20006ae6 	.word	0x20006ae6
  400da8:	00403b6d 	.word	0x00403b6d
  400dac:	00400581 	.word	0x00400581

00400db0 <udi_msc_process_trans>:
{
  400db0:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
  400db2:	4b1d      	ldr	r3, [pc, #116]	; (400e28 <udi_msc_process_trans+0x78>)
  400db4:	781c      	ldrb	r4, [r3, #0]
  400db6:	2c00      	cmp	r4, #0
  400db8:	d02e      	beq.n	400e18 <udi_msc_process_trans+0x68>
	udi_msc_b_trans_req = false;
  400dba:	2300      	movs	r3, #0
  400dbc:	4a1a      	ldr	r2, [pc, #104]	; (400e28 <udi_msc_process_trans+0x78>)
  400dbe:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
  400dc0:	4a1a      	ldr	r2, [pc, #104]	; (400e2c <udi_msc_process_trans+0x7c>)
  400dc2:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
  400dc4:	4b1a      	ldr	r3, [pc, #104]	; (400e30 <udi_msc_process_trans+0x80>)
  400dc6:	781b      	ldrb	r3, [r3, #0]
  400dc8:	b1a3      	cbz	r3, 400df4 <udi_msc_process_trans+0x44>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
  400dca:	4b1a      	ldr	r3, [pc, #104]	; (400e34 <udi_msc_process_trans+0x84>)
  400dcc:	881a      	ldrh	r2, [r3, #0]
  400dce:	4b1a      	ldr	r3, [pc, #104]	; (400e38 <udi_msc_process_trans+0x88>)
  400dd0:	6819      	ldr	r1, [r3, #0]
  400dd2:	4b1a      	ldr	r3, [pc, #104]	; (400e3c <udi_msc_process_trans+0x8c>)
  400dd4:	7b58      	ldrb	r0, [r3, #13]
  400dd6:	4b1a      	ldr	r3, [pc, #104]	; (400e40 <udi_msc_process_trans+0x90>)
  400dd8:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
  400dda:	4b14      	ldr	r3, [pc, #80]	; (400e2c <udi_msc_process_trans+0x7c>)
  400ddc:	781b      	ldrb	r3, [r3, #0]
  400dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
  400de2:	b983      	cbnz	r3, 400e06 <udi_msc_process_trans+0x56>
	switch (status) {
  400de4:	2802      	cmp	r0, #2
  400de6:	d01c      	beq.n	400e22 <udi_msc_process_trans+0x72>
  400de8:	2803      	cmp	r0, #3
  400dea:	d017      	beq.n	400e1c <udi_msc_process_trans+0x6c>
  400dec:	b180      	cbz	r0, 400e10 <udi_msc_process_trans+0x60>
		udi_msc_sense_fail_hardware();
  400dee:	4b15      	ldr	r3, [pc, #84]	; (400e44 <udi_msc_process_trans+0x94>)
  400df0:	4798      	blx	r3
		break;
  400df2:	e00f      	b.n	400e14 <udi_msc_process_trans+0x64>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
  400df4:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <udi_msc_process_trans+0x84>)
  400df6:	881a      	ldrh	r2, [r3, #0]
  400df8:	4b0f      	ldr	r3, [pc, #60]	; (400e38 <udi_msc_process_trans+0x88>)
  400dfa:	6819      	ldr	r1, [r3, #0]
  400dfc:	4b0f      	ldr	r3, [pc, #60]	; (400e3c <udi_msc_process_trans+0x8c>)
  400dfe:	7b58      	ldrb	r0, [r3, #13]
  400e00:	4b11      	ldr	r3, [pc, #68]	; (400e48 <udi_msc_process_trans+0x98>)
  400e02:	4798      	blx	r3
  400e04:	e7e9      	b.n	400dda <udi_msc_process_trans+0x2a>
		udi_msc_b_reset_trans = false;
  400e06:	2100      	movs	r1, #0
  400e08:	4b08      	ldr	r3, [pc, #32]	; (400e2c <udi_msc_process_trans+0x7c>)
  400e0a:	7019      	strb	r1, [r3, #0]
		return true;
  400e0c:	4614      	mov	r4, r2
  400e0e:	e003      	b.n	400e18 <udi_msc_process_trans+0x68>
		udi_msc_sense_pass();
  400e10:	4b0e      	ldr	r3, [pc, #56]	; (400e4c <udi_msc_process_trans+0x9c>)
  400e12:	4798      	blx	r3
	udi_msc_csw_process();
  400e14:	4b0e      	ldr	r3, [pc, #56]	; (400e50 <udi_msc_process_trans+0xa0>)
  400e16:	4798      	blx	r3
}
  400e18:	4620      	mov	r0, r4
  400e1a:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
  400e1c:	4b0d      	ldr	r3, [pc, #52]	; (400e54 <udi_msc_process_trans+0xa4>)
  400e1e:	4798      	blx	r3
		break;
  400e20:	e7f8      	b.n	400e14 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_not_present();
  400e22:	4b0d      	ldr	r3, [pc, #52]	; (400e58 <udi_msc_process_trans+0xa8>)
  400e24:	4798      	blx	r3
		break;
  400e26:	e7f5      	b.n	400e14 <udi_msc_process_trans+0x64>
  400e28:	20006ae6 	.word	0x20006ae6
  400e2c:	20000015 	.word	0x20000015
  400e30:	20006ae5 	.word	0x20006ae5
  400e34:	20006b10 	.word	0x20006b10
  400e38:	20006ae0 	.word	0x20006ae0
  400e3c:	20006af0 	.word	0x20006af0
  400e40:	004004b9 	.word	0x004004b9
  400e44:	004007a9 	.word	0x004007a9
  400e48:	0040050d 	.word	0x0040050d
  400e4c:	00400819 	.word	0x00400819
  400e50:	004006d1 	.word	0x004006d1
  400e54:	004007f1 	.word	0x004007f1
  400e58:	00400805 	.word	0x00400805

00400e5c <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
  400e5c:	b530      	push	{r4, r5, lr}
  400e5e:	b083      	sub	sp, #12
	if (!udi_msc_b_ack_trans)
  400e60:	4c1d      	ldr	r4, [pc, #116]	; (400ed8 <udi_msc_trans_block+0x7c>)
  400e62:	7824      	ldrb	r4, [r4, #0]
  400e64:	f004 05ff 	and.w	r5, r4, #255	; 0xff
  400e68:	b1a4      	cbz	r4, 400e94 <udi_msc_trans_block+0x38>
  400e6a:	4614      	mov	r4, r2
  400e6c:	460a      	mov	r2, r1
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
  400e6e:	2500      	movs	r5, #0
  400e70:	4919      	ldr	r1, [pc, #100]	; (400ed8 <udi_msc_trans_block+0x7c>)
  400e72:	700d      	strb	r5, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
  400e74:	42a8      	cmp	r0, r5
  400e76:	bf14      	ite	ne
  400e78:	2081      	movne	r0, #129	; 0x81
  400e7a:	2002      	moveq	r0, #2
  400e7c:	b16b      	cbz	r3, 400e9a <udi_msc_trans_block+0x3e>
  400e7e:	9300      	str	r3, [sp, #0]
  400e80:	4623      	mov	r3, r4
  400e82:	2100      	movs	r1, #0
  400e84:	4d15      	ldr	r5, [pc, #84]	; (400edc <udi_msc_trans_block+0x80>)
  400e86:	47a8      	blx	r5
  400e88:	4605      	mov	r5, r0
  400e8a:	b1e8      	cbz	r0, 400ec8 <udi_msc_trans_block+0x6c>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
  400e8c:	4b14      	ldr	r3, [pc, #80]	; (400ee0 <udi_msc_trans_block+0x84>)
  400e8e:	689a      	ldr	r2, [r3, #8]
  400e90:	1b12      	subs	r2, r2, r4
  400e92:	609a      	str	r2, [r3, #8]
	return true;
}
  400e94:	4628      	mov	r0, r5
  400e96:	b003      	add	sp, #12
  400e98:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
  400e9a:	4b12      	ldr	r3, [pc, #72]	; (400ee4 <udi_msc_trans_block+0x88>)
  400e9c:	9300      	str	r3, [sp, #0]
  400e9e:	4623      	mov	r3, r4
  400ea0:	4629      	mov	r1, r5
  400ea2:	4d0e      	ldr	r5, [pc, #56]	; (400edc <udi_msc_trans_block+0x80>)
  400ea4:	47a8      	blx	r5
  400ea6:	b178      	cbz	r0, 400ec8 <udi_msc_trans_block+0x6c>
		while (!udi_msc_b_ack_trans);
  400ea8:	4a0b      	ldr	r2, [pc, #44]	; (400ed8 <udi_msc_trans_block+0x7c>)
  400eaa:	7813      	ldrb	r3, [r2, #0]
  400eac:	2b00      	cmp	r3, #0
  400eae:	d0fc      	beq.n	400eaa <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
  400eb0:	4b0d      	ldr	r3, [pc, #52]	; (400ee8 <udi_msc_trans_block+0x8c>)
  400eb2:	781b      	ldrb	r3, [r3, #0]
  400eb4:	b96b      	cbnz	r3, 400ed2 <udi_msc_trans_block+0x76>
		udi_msc_csw.dCSWDataResidue -= block_size;
  400eb6:	4b0a      	ldr	r3, [pc, #40]	; (400ee0 <udi_msc_trans_block+0x84>)
  400eb8:	689a      	ldr	r2, [r3, #8]
  400eba:	1b12      	subs	r2, r2, r4
  400ebc:	609a      	str	r2, [r3, #8]
		return (!udi_msc_b_abort_trans);
  400ebe:	4b0a      	ldr	r3, [pc, #40]	; (400ee8 <udi_msc_trans_block+0x8c>)
  400ec0:	781d      	ldrb	r5, [r3, #0]
  400ec2:	f085 0501 	eor.w	r5, r5, #1
  400ec6:	e7e5      	b.n	400e94 <udi_msc_trans_block+0x38>
		udi_msc_b_ack_trans = true;
  400ec8:	2201      	movs	r2, #1
  400eca:	4b03      	ldr	r3, [pc, #12]	; (400ed8 <udi_msc_trans_block+0x7c>)
  400ecc:	701a      	strb	r2, [r3, #0]
		return false;
  400ece:	2500      	movs	r5, #0
  400ed0:	e7e0      	b.n	400e94 <udi_msc_trans_block+0x38>
			return false;
  400ed2:	2500      	movs	r5, #0
  400ed4:	e7de      	b.n	400e94 <udi_msc_trans_block+0x38>
  400ed6:	bf00      	nop
  400ed8:	20000014 	.word	0x20000014
  400edc:	004039f1 	.word	0x004039f1
  400ee0:	20000018 	.word	0x20000018
  400ee4:	00400565 	.word	0x00400565
  400ee8:	20013442 	.word	0x20013442

00400eec <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400eec:	4b10      	ldr	r3, [pc, #64]	; (400f30 <udc_next_desc_in_iface+0x44>)
  400eee:	681b      	ldr	r3, [r3, #0]
  400ef0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400ef2:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400ef4:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400ef6:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400ef8:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400efa:	4290      	cmp	r0, r2
  400efc:	d211      	bcs.n	400f22 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400efe:	7843      	ldrb	r3, [r0, #1]
  400f00:	2b04      	cmp	r3, #4
  400f02:	d010      	beq.n	400f26 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400f04:	428b      	cmp	r3, r1
  400f06:	d009      	beq.n	400f1c <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400f08:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400f0a:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400f0c:	4290      	cmp	r0, r2
  400f0e:	d206      	bcs.n	400f1e <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400f10:	7843      	ldrb	r3, [r0, #1]
  400f12:	2b04      	cmp	r3, #4
  400f14:	d009      	beq.n	400f2a <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400f16:	428b      	cmp	r3, r1
  400f18:	d1f6      	bne.n	400f08 <udc_next_desc_in_iface+0x1c>
  400f1a:	e007      	b.n	400f2c <udc_next_desc_in_iface+0x40>
  400f1c:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  400f1e:	2000      	movs	r0, #0
  400f20:	4770      	bx	lr
  400f22:	2000      	movs	r0, #0
  400f24:	4770      	bx	lr
  400f26:	2000      	movs	r0, #0
  400f28:	4770      	bx	lr
  400f2a:	2000      	movs	r0, #0
}
  400f2c:	4770      	bx	lr
  400f2e:	bf00      	nop
  400f30:	20006b38 	.word	0x20006b38

00400f34 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400f34:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400f36:	4b03      	ldr	r3, [pc, #12]	; (400f44 <udc_valid_address+0x10>)
  400f38:	7898      	ldrb	r0, [r3, #2]
  400f3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400f3e:	4b02      	ldr	r3, [pc, #8]	; (400f48 <udc_valid_address+0x14>)
  400f40:	4798      	blx	r3
  400f42:	bd08      	pop	{r3, pc}
  400f44:	20013454 	.word	0x20013454
  400f48:	00403631 	.word	0x00403631

00400f4c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400f4c:	4b19      	ldr	r3, [pc, #100]	; (400fb4 <udc_update_iface_desc+0x68>)
  400f4e:	781b      	ldrb	r3, [r3, #0]
  400f50:	b34b      	cbz	r3, 400fa6 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400f52:	4b19      	ldr	r3, [pc, #100]	; (400fb8 <udc_update_iface_desc+0x6c>)
  400f54:	681b      	ldr	r3, [r3, #0]
  400f56:	681b      	ldr	r3, [r3, #0]
  400f58:	791a      	ldrb	r2, [r3, #4]
  400f5a:	4282      	cmp	r2, r0
  400f5c:	d925      	bls.n	400faa <udc_update_iface_desc+0x5e>
{
  400f5e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400f60:	4a16      	ldr	r2, [pc, #88]	; (400fbc <udc_update_iface_desc+0x70>)
  400f62:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400f64:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400f66:	441c      	add	r4, r3
	while (ptr_end_desc >
  400f68:	42a3      	cmp	r3, r4
  400f6a:	d220      	bcs.n	400fae <udc_update_iface_desc+0x62>
  400f6c:	2500      	movs	r5, #0
  400f6e:	2601      	movs	r6, #1
  400f70:	e007      	b.n	400f82 <udc_update_iface_desc+0x36>
  400f72:	4a12      	ldr	r2, [pc, #72]	; (400fbc <udc_update_iface_desc+0x70>)
  400f74:	6013      	str	r3, [r2, #0]
  400f76:	e00f      	b.n	400f98 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400f78:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400f7a:	4413      	add	r3, r2
  400f7c:	4635      	mov	r5, r6
	while (ptr_end_desc >
  400f7e:	42a3      	cmp	r3, r4
  400f80:	d20c      	bcs.n	400f9c <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400f82:	785a      	ldrb	r2, [r3, #1]
  400f84:	2a04      	cmp	r2, #4
  400f86:	d1f7      	bne.n	400f78 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400f88:	789a      	ldrb	r2, [r3, #2]
  400f8a:	4282      	cmp	r2, r0
  400f8c:	d1f4      	bne.n	400f78 <udc_update_iface_desc+0x2c>
  400f8e:	78da      	ldrb	r2, [r3, #3]
  400f90:	428a      	cmp	r2, r1
  400f92:	d1f1      	bne.n	400f78 <udc_update_iface_desc+0x2c>
  400f94:	2d00      	cmp	r5, #0
  400f96:	d1ec      	bne.n	400f72 <udc_update_iface_desc+0x26>
				return true; // Interface found
  400f98:	2001      	movs	r0, #1
  400f9a:	e002      	b.n	400fa2 <udc_update_iface_desc+0x56>
  400f9c:	4a07      	ldr	r2, [pc, #28]	; (400fbc <udc_update_iface_desc+0x70>)
  400f9e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400fa0:	2000      	movs	r0, #0
}
  400fa2:	bc70      	pop	{r4, r5, r6}
  400fa4:	4770      	bx	lr
		return false;
  400fa6:	2000      	movs	r0, #0
  400fa8:	4770      	bx	lr
		return false;
  400faa:	2000      	movs	r0, #0
  400fac:	4770      	bx	lr
	return false; // Interface not found
  400fae:	2000      	movs	r0, #0
  400fb0:	e7f7      	b.n	400fa2 <udc_update_iface_desc+0x56>
  400fb2:	bf00      	nop
  400fb4:	20006b34 	.word	0x20006b34
  400fb8:	20006b38 	.word	0x20006b38
  400fbc:	20006b3c 	.word	0x20006b3c

00400fc0 <udc_iface_disable>:
{
  400fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400fc4:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  400fc6:	2100      	movs	r1, #0
  400fc8:	4b13      	ldr	r3, [pc, #76]	; (401018 <udc_iface_disable+0x58>)
  400fca:	4798      	blx	r3
  400fcc:	4680      	mov	r8, r0
  400fce:	b910      	cbnz	r0, 400fd6 <udc_iface_disable+0x16>
}
  400fd0:	4640      	mov	r0, r8
  400fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400fd6:	4b11      	ldr	r3, [pc, #68]	; (40101c <udc_iface_disable+0x5c>)
  400fd8:	681b      	ldr	r3, [r3, #0]
  400fda:	685b      	ldr	r3, [r3, #4]
  400fdc:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400fe0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400fe4:	4798      	blx	r3
  400fe6:	4601      	mov	r1, r0
  400fe8:	4620      	mov	r0, r4
  400fea:	4b0b      	ldr	r3, [pc, #44]	; (401018 <udc_iface_disable+0x58>)
  400fec:	4798      	blx	r3
  400fee:	4680      	mov	r8, r0
  400ff0:	2800      	cmp	r0, #0
  400ff2:	d0ed      	beq.n	400fd0 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400ff4:	4b0a      	ldr	r3, [pc, #40]	; (401020 <udc_iface_disable+0x60>)
  400ff6:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400ff8:	2605      	movs	r6, #5
  400ffa:	4d0a      	ldr	r5, [pc, #40]	; (401024 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400ffc:	4f0a      	ldr	r7, [pc, #40]	; (401028 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400ffe:	4631      	mov	r1, r6
  401000:	4620      	mov	r0, r4
  401002:	47a8      	blx	r5
			if (NULL == ep_desc) {
  401004:	4604      	mov	r4, r0
  401006:	b110      	cbz	r0, 40100e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  401008:	7880      	ldrb	r0, [r0, #2]
  40100a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40100c:	e7f7      	b.n	400ffe <udc_iface_disable+0x3e>
	udi_api->disable();
  40100e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  401012:	4798      	blx	r3
	return true;
  401014:	e7dc      	b.n	400fd0 <udc_iface_disable+0x10>
  401016:	bf00      	nop
  401018:	00400f4d 	.word	0x00400f4d
  40101c:	20006b38 	.word	0x20006b38
  401020:	20006b3c 	.word	0x20006b3c
  401024:	00400eed 	.word	0x00400eed
  401028:	0040379d 	.word	0x0040379d

0040102c <udc_iface_enable>:
{
  40102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401030:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  401032:	4b10      	ldr	r3, [pc, #64]	; (401074 <udc_iface_enable+0x48>)
  401034:	4798      	blx	r3
  401036:	4603      	mov	r3, r0
  401038:	b1c8      	cbz	r0, 40106e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40103a:	4b0f      	ldr	r3, [pc, #60]	; (401078 <udc_iface_enable+0x4c>)
  40103c:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40103e:	2605      	movs	r6, #5
  401040:	4d0e      	ldr	r5, [pc, #56]	; (40107c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401042:	4f0f      	ldr	r7, [pc, #60]	; (401080 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401044:	4631      	mov	r1, r6
  401046:	4620      	mov	r0, r4
  401048:	47a8      	blx	r5
		if (NULL == ep_desc)
  40104a:	4604      	mov	r4, r0
  40104c:	b138      	cbz	r0, 40105e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40104e:	8882      	ldrh	r2, [r0, #4]
  401050:	78c1      	ldrb	r1, [r0, #3]
  401052:	7880      	ldrb	r0, [r0, #2]
  401054:	47b8      	blx	r7
  401056:	4603      	mov	r3, r0
  401058:	2800      	cmp	r0, #0
  40105a:	d1f3      	bne.n	401044 <udc_iface_enable+0x18>
  40105c:	e007      	b.n	40106e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40105e:	4b09      	ldr	r3, [pc, #36]	; (401084 <udc_iface_enable+0x58>)
  401060:	681b      	ldr	r3, [r3, #0]
  401062:	685b      	ldr	r3, [r3, #4]
  401064:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  401068:	681b      	ldr	r3, [r3, #0]
  40106a:	4798      	blx	r3
  40106c:	4603      	mov	r3, r0
}
  40106e:	4618      	mov	r0, r3
  401070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401074:	00400f4d 	.word	0x00400f4d
  401078:	20006b3c 	.word	0x20006b3c
  40107c:	00400eed 	.word	0x00400eed
  401080:	004036a5 	.word	0x004036a5
  401084:	20006b38 	.word	0x20006b38

00401088 <udc_start>:
{
  401088:	b508      	push	{r3, lr}
	udd_enable();
  40108a:	4b01      	ldr	r3, [pc, #4]	; (401090 <udc_start+0x8>)
  40108c:	4798      	blx	r3
  40108e:	bd08      	pop	{r3, pc}
  401090:	0040355d 	.word	0x0040355d

00401094 <udc_reset>:
{
  401094:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  401096:	4b0d      	ldr	r3, [pc, #52]	; (4010cc <udc_reset+0x38>)
  401098:	781b      	ldrb	r3, [r3, #0]
  40109a:	b183      	cbz	r3, 4010be <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40109c:	4b0c      	ldr	r3, [pc, #48]	; (4010d0 <udc_reset+0x3c>)
  40109e:	681b      	ldr	r3, [r3, #0]
  4010a0:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4010a2:	791b      	ldrb	r3, [r3, #4]
  4010a4:	b15b      	cbz	r3, 4010be <udc_reset+0x2a>
  4010a6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4010a8:	4e0a      	ldr	r6, [pc, #40]	; (4010d4 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010aa:	4d09      	ldr	r5, [pc, #36]	; (4010d0 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4010ac:	4620      	mov	r0, r4
  4010ae:	47b0      	blx	r6
				iface_num++) {
  4010b0:	3401      	adds	r4, #1
  4010b2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010b4:	682b      	ldr	r3, [r5, #0]
  4010b6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4010b8:	791b      	ldrb	r3, [r3, #4]
  4010ba:	42a3      	cmp	r3, r4
  4010bc:	d8f6      	bhi.n	4010ac <udc_reset+0x18>
	udc_num_configuration = 0;
  4010be:	2200      	movs	r2, #0
  4010c0:	4b02      	ldr	r3, [pc, #8]	; (4010cc <udc_reset+0x38>)
  4010c2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4010c4:	2201      	movs	r2, #1
  4010c6:	4b04      	ldr	r3, [pc, #16]	; (4010d8 <udc_reset+0x44>)
  4010c8:	801a      	strh	r2, [r3, #0]
  4010ca:	bd70      	pop	{r4, r5, r6, pc}
  4010cc:	20006b34 	.word	0x20006b34
  4010d0:	20006b38 	.word	0x20006b38
  4010d4:	00400fc1 	.word	0x00400fc1
  4010d8:	20006b2a 	.word	0x20006b2a

004010dc <udc_sof_notify>:
{
  4010dc:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4010de:	4b0d      	ldr	r3, [pc, #52]	; (401114 <udc_sof_notify+0x38>)
  4010e0:	781b      	ldrb	r3, [r3, #0]
  4010e2:	b1b3      	cbz	r3, 401112 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010e4:	4b0c      	ldr	r3, [pc, #48]	; (401118 <udc_sof_notify+0x3c>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4010ea:	7912      	ldrb	r2, [r2, #4]
  4010ec:	b18a      	cbz	r2, 401112 <udc_sof_notify+0x36>
  4010ee:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010f0:	4d09      	ldr	r5, [pc, #36]	; (401118 <udc_sof_notify+0x3c>)
  4010f2:	e006      	b.n	401102 <udc_sof_notify+0x26>
				iface_num++) {
  4010f4:	3401      	adds	r4, #1
  4010f6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010f8:	682b      	ldr	r3, [r5, #0]
  4010fa:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4010fc:	7912      	ldrb	r2, [r2, #4]
  4010fe:	42a2      	cmp	r2, r4
  401100:	d907      	bls.n	401112 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  401102:	685b      	ldr	r3, [r3, #4]
  401104:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401108:	691b      	ldr	r3, [r3, #16]
  40110a:	2b00      	cmp	r3, #0
  40110c:	d0f2      	beq.n	4010f4 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  40110e:	4798      	blx	r3
  401110:	e7f0      	b.n	4010f4 <udc_sof_notify+0x18>
  401112:	bd38      	pop	{r3, r4, r5, pc}
  401114:	20006b34 	.word	0x20006b34
  401118:	20006b38 	.word	0x20006b38

0040111c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  40111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  40111e:	4b8a      	ldr	r3, [pc, #552]	; (401348 <udc_process_setup+0x22c>)
  401120:	2200      	movs	r2, #0
  401122:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401124:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401126:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401128:	781b      	ldrb	r3, [r3, #0]
  40112a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40112e:	d114      	bne.n	40115a <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401130:	f013 0f60 	tst.w	r3, #96	; 0x60
  401134:	f000 80d9 	beq.w	4012ea <udc_process_setup+0x1ce>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401138:	4b83      	ldr	r3, [pc, #524]	; (401348 <udc_process_setup+0x22c>)
  40113a:	781b      	ldrb	r3, [r3, #0]
  40113c:	f003 031f 	and.w	r3, r3, #31
  401140:	2b01      	cmp	r3, #1
  401142:	f000 8170 	beq.w	401426 <udc_process_setup+0x30a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  401146:	4b80      	ldr	r3, [pc, #512]	; (401348 <udc_process_setup+0x22c>)
  401148:	781b      	ldrb	r3, [r3, #0]
  40114a:	f003 031f 	and.w	r3, r3, #31
  40114e:	2b02      	cmp	r3, #2
  401150:	f000 81cb 	beq.w	4014ea <udc_process_setup+0x3ce>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401154:	2300      	movs	r3, #0
#endif
}
  401156:	4618      	mov	r0, r3
  401158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  40115a:	4a7b      	ldr	r2, [pc, #492]	; (401348 <udc_process_setup+0x22c>)
  40115c:	88d2      	ldrh	r2, [r2, #6]
  40115e:	2a00      	cmp	r2, #0
  401160:	f000 81ec 	beq.w	40153c <udc_process_setup+0x420>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401164:	f013 0f60 	tst.w	r3, #96	; 0x60
  401168:	d1e6      	bne.n	401138 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40116a:	f013 031f 	ands.w	r3, r3, #31
  40116e:	d106      	bne.n	40117e <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  401170:	4975      	ldr	r1, [pc, #468]	; (401348 <udc_process_setup+0x22c>)
  401172:	7849      	ldrb	r1, [r1, #1]
  401174:	2906      	cmp	r1, #6
  401176:	d014      	beq.n	4011a2 <udc_process_setup+0x86>
  401178:	2908      	cmp	r1, #8
  40117a:	d077      	beq.n	40126c <udc_process_setup+0x150>
  40117c:	b151      	cbz	r1, 401194 <udc_process_setup+0x78>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40117e:	2b01      	cmp	r3, #1
  401180:	d07c      	beq.n	40127c <udc_process_setup+0x160>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401182:	2b02      	cmp	r3, #2
  401184:	d1d8      	bne.n	401138 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  401186:	4b70      	ldr	r3, [pc, #448]	; (401348 <udc_process_setup+0x22c>)
  401188:	785b      	ldrb	r3, [r3, #1]
  40118a:	2b00      	cmp	r3, #0
  40118c:	f000 809f 	beq.w	4012ce <udc_process_setup+0x1b2>
	return false;
  401190:	2300      	movs	r3, #0
  401192:	e18c      	b.n	4014ae <udc_process_setup+0x392>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401194:	2a02      	cmp	r2, #2
  401196:	d1d6      	bne.n	401146 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  401198:	2102      	movs	r1, #2
  40119a:	486c      	ldr	r0, [pc, #432]	; (40134c <udc_process_setup+0x230>)
  40119c:	4b6c      	ldr	r3, [pc, #432]	; (401350 <udc_process_setup+0x234>)
  40119e:	4798      	blx	r3
  4011a0:	e0bf      	b.n	401322 <udc_process_setup+0x206>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4011a2:	4b69      	ldr	r3, [pc, #420]	; (401348 <udc_process_setup+0x22c>)
  4011a4:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4011a6:	0a13      	lsrs	r3, r2, #8
  4011a8:	3b01      	subs	r3, #1
  4011aa:	2b0e      	cmp	r3, #14
  4011ac:	f200 817c 	bhi.w	4014a8 <udc_process_setup+0x38c>
  4011b0:	e8df f013 	tbh	[pc, r3, lsl #1]
  4011b4:	001d000f 	.word	0x001d000f
  4011b8:	017a0037 	.word	0x017a0037
  4011bc:	017a017a 	.word	0x017a017a
  4011c0:	017a017a 	.word	0x017a017a
  4011c4:	017a017a 	.word	0x017a017a
  4011c8:	017a017a 	.word	0x017a017a
  4011cc:	017a017a 	.word	0x017a017a
  4011d0:	002f      	.short	0x002f
				(uint8_t *) udc_config.confdev_lsfs,
  4011d2:	4b60      	ldr	r3, [pc, #384]	; (401354 <udc_process_setup+0x238>)
  4011d4:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4011d6:	7801      	ldrb	r1, [r0, #0]
  4011d8:	4b5d      	ldr	r3, [pc, #372]	; (401350 <udc_process_setup+0x234>)
  4011da:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4011dc:	4b5a      	ldr	r3, [pc, #360]	; (401348 <udc_process_setup+0x22c>)
  4011de:	88da      	ldrh	r2, [r3, #6]
  4011e0:	899b      	ldrh	r3, [r3, #12]
  4011e2:	4293      	cmp	r3, r2
  4011e4:	f240 809d 	bls.w	401322 <udc_process_setup+0x206>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4011e8:	4b57      	ldr	r3, [pc, #348]	; (401348 <udc_process_setup+0x22c>)
  4011ea:	819a      	strh	r2, [r3, #12]
  4011ec:	e099      	b.n	401322 <udc_process_setup+0x206>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4011ee:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4011f0:	4b58      	ldr	r3, [pc, #352]	; (401354 <udc_process_setup+0x238>)
  4011f2:	681b      	ldr	r3, [r3, #0]
  4011f4:	7c5b      	ldrb	r3, [r3, #17]
  4011f6:	4293      	cmp	r3, r2
  4011f8:	d9a5      	bls.n	401146 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4011fa:	4b56      	ldr	r3, [pc, #344]	; (401354 <udc_process_setup+0x238>)
  4011fc:	685b      	ldr	r3, [r3, #4]
  4011fe:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  401202:	8841      	ldrh	r1, [r0, #2]
  401204:	4b52      	ldr	r3, [pc, #328]	; (401350 <udc_process_setup+0x234>)
  401206:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401208:	4b4f      	ldr	r3, [pc, #316]	; (401348 <udc_process_setup+0x22c>)
  40120a:	689b      	ldr	r3, [r3, #8]
  40120c:	2202      	movs	r2, #2
  40120e:	705a      	strb	r2, [r3, #1]
  401210:	e7e4      	b.n	4011dc <udc_process_setup+0xc0>
		if (udc_config.conf_bos == NULL) {
  401212:	4b50      	ldr	r3, [pc, #320]	; (401354 <udc_process_setup+0x238>)
  401214:	6898      	ldr	r0, [r3, #8]
  401216:	2800      	cmp	r0, #0
  401218:	d095      	beq.n	401146 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40121a:	8841      	ldrh	r1, [r0, #2]
  40121c:	4b4c      	ldr	r3, [pc, #304]	; (401350 <udc_process_setup+0x234>)
  40121e:	4798      	blx	r3
  401220:	e7dc      	b.n	4011dc <udc_process_setup+0xc0>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401222:	b2d2      	uxtb	r2, r2
  401224:	2a03      	cmp	r2, #3
  401226:	d887      	bhi.n	401138 <udc_process_setup+0x1c>
  401228:	e8df f012 	tbh	[pc, r2, lsl #1]
  40122c:	000c0007 	.word	0x000c0007
  401230:	0004018c 	.word	0x0004018c
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  401234:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
  401236:	4a48      	ldr	r2, [pc, #288]	; (401358 <udc_process_setup+0x23c>)
  401238:	e006      	b.n	401248 <udc_process_setup+0x12c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  40123a:	2104      	movs	r1, #4
  40123c:	4847      	ldr	r0, [pc, #284]	; (40135c <udc_process_setup+0x240>)
  40123e:	4b44      	ldr	r3, [pc, #272]	; (401350 <udc_process_setup+0x234>)
  401240:	4798      	blx	r3
  401242:	e7cb      	b.n	4011dc <udc_process_setup+0xc0>
		str = udc_string_manufacturer_name;
  401244:	4a46      	ldr	r2, [pc, #280]	; (401360 <udc_process_setup+0x244>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  401246:	2109      	movs	r1, #9
  401248:	3a01      	subs	r2, #1
  40124a:	4846      	ldr	r0, [pc, #280]	; (401364 <udc_process_setup+0x248>)
  40124c:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  40124e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
  401252:	f820 4f02 	strh.w	r4, [r0, #2]!
		for(i = 0; i < str_length; i++) {
  401256:	3301      	adds	r3, #1
  401258:	b2db      	uxtb	r3, r3
  40125a:	4299      	cmp	r1, r3
  40125c:	d8f7      	bhi.n	40124e <udc_process_setup+0x132>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  40125e:	0049      	lsls	r1, r1, #1
  401260:	3102      	adds	r1, #2
  401262:	4840      	ldr	r0, [pc, #256]	; (401364 <udc_process_setup+0x248>)
  401264:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  401266:	4b3a      	ldr	r3, [pc, #232]	; (401350 <udc_process_setup+0x234>)
  401268:	4798      	blx	r3
  40126a:	e7b7      	b.n	4011dc <udc_process_setup+0xc0>
	if (udd_g_ctrlreq.req.wLength != 1) {
  40126c:	2a01      	cmp	r2, #1
  40126e:	f47f af6a 	bne.w	401146 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
  401272:	2101      	movs	r1, #1
  401274:	483c      	ldr	r0, [pc, #240]	; (401368 <udc_process_setup+0x24c>)
  401276:	4b36      	ldr	r3, [pc, #216]	; (401350 <udc_process_setup+0x234>)
  401278:	4798      	blx	r3
  40127a:	e052      	b.n	401322 <udc_process_setup+0x206>
			switch (udd_g_ctrlreq.req.bRequest) {
  40127c:	4932      	ldr	r1, [pc, #200]	; (401348 <udc_process_setup+0x22c>)
  40127e:	7849      	ldrb	r1, [r1, #1]
  401280:	290a      	cmp	r1, #10
  401282:	f47f af7e 	bne.w	401182 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  401286:	2a01      	cmp	r2, #1
  401288:	f040 80cd 	bne.w	401426 <udc_process_setup+0x30a>
	if (!udc_num_configuration) {
  40128c:	4b36      	ldr	r3, [pc, #216]	; (401368 <udc_process_setup+0x24c>)
  40128e:	781b      	ldrb	r3, [r3, #0]
  401290:	2b00      	cmp	r3, #0
  401292:	f000 80c8 	beq.w	401426 <udc_process_setup+0x30a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401296:	4b2c      	ldr	r3, [pc, #176]	; (401348 <udc_process_setup+0x22c>)
  401298:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40129a:	4b34      	ldr	r3, [pc, #208]	; (40136c <udc_process_setup+0x250>)
  40129c:	681d      	ldr	r5, [r3, #0]
  40129e:	682b      	ldr	r3, [r5, #0]
  4012a0:	791b      	ldrb	r3, [r3, #4]
  4012a2:	42a3      	cmp	r3, r4
  4012a4:	f240 80bf 	bls.w	401426 <udc_process_setup+0x30a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  4012a8:	2100      	movs	r1, #0
  4012aa:	4620      	mov	r0, r4
  4012ac:	4b30      	ldr	r3, [pc, #192]	; (401370 <udc_process_setup+0x254>)
  4012ae:	4798      	blx	r3
  4012b0:	2800      	cmp	r0, #0
  4012b2:	f43f af41 	beq.w	401138 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4012b6:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  4012b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4012bc:	68db      	ldr	r3, [r3, #12]
  4012be:	4798      	blx	r3
  4012c0:	4b2c      	ldr	r3, [pc, #176]	; (401374 <udc_process_setup+0x258>)
  4012c2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  4012c4:	2101      	movs	r1, #1
  4012c6:	4618      	mov	r0, r3
  4012c8:	4b21      	ldr	r3, [pc, #132]	; (401350 <udc_process_setup+0x234>)
  4012ca:	4798      	blx	r3
  4012cc:	e029      	b.n	401322 <udc_process_setup+0x206>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4012ce:	2a02      	cmp	r2, #2
  4012d0:	f47f af39 	bne.w	401146 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4012d4:	4b1c      	ldr	r3, [pc, #112]	; (401348 <udc_process_setup+0x22c>)
  4012d6:	7918      	ldrb	r0, [r3, #4]
  4012d8:	4b27      	ldr	r3, [pc, #156]	; (401378 <udc_process_setup+0x25c>)
  4012da:	4798      	blx	r3
  4012dc:	4b27      	ldr	r3, [pc, #156]	; (40137c <udc_process_setup+0x260>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  4012de:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4012e0:	2102      	movs	r1, #2
  4012e2:	4618      	mov	r0, r3
  4012e4:	4b1a      	ldr	r3, [pc, #104]	; (401350 <udc_process_setup+0x234>)
  4012e6:	4798      	blx	r3
  4012e8:	e01b      	b.n	401322 <udc_process_setup+0x206>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4012ea:	f013 031f 	ands.w	r3, r3, #31
  4012ee:	f040 8083 	bne.w	4013f8 <udc_process_setup+0x2dc>
			switch (udd_g_ctrlreq.req.bRequest) {
  4012f2:	4a15      	ldr	r2, [pc, #84]	; (401348 <udc_process_setup+0x22c>)
  4012f4:	7852      	ldrb	r2, [r2, #1]
  4012f6:	3a01      	subs	r2, #1
  4012f8:	2a08      	cmp	r2, #8
  4012fa:	d87d      	bhi.n	4013f8 <udc_process_setup+0x2dc>
  4012fc:	e8df f012 	tbh	[pc, r2, lsl #1]
  401300:	007c0013 	.word	0x007c0013
  401304:	007c00d6 	.word	0x007c00d6
  401308:	007c0009 	.word	0x007c0009
  40130c:	007c007c 	.word	0x007c007c
  401310:	0042      	.short	0x0042
	if (udd_g_ctrlreq.req.wLength) {
  401312:	4b0d      	ldr	r3, [pc, #52]	; (401348 <udc_process_setup+0x22c>)
  401314:	88db      	ldrh	r3, [r3, #6]
  401316:	2b00      	cmp	r3, #0
  401318:	f47f af15 	bne.w	401146 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
  40131c:	4a18      	ldr	r2, [pc, #96]	; (401380 <udc_process_setup+0x264>)
  40131e:	4b0a      	ldr	r3, [pc, #40]	; (401348 <udc_process_setup+0x22c>)
  401320:	611a      	str	r2, [r3, #16]
			return true;
  401322:	2301      	movs	r3, #1
  401324:	e717      	b.n	401156 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  401326:	4b08      	ldr	r3, [pc, #32]	; (401348 <udc_process_setup+0x22c>)
  401328:	88db      	ldrh	r3, [r3, #6]
  40132a:	2b00      	cmp	r3, #0
  40132c:	f47f af0b 	bne.w	401146 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  401330:	4b05      	ldr	r3, [pc, #20]	; (401348 <udc_process_setup+0x22c>)
  401332:	885b      	ldrh	r3, [r3, #2]
  401334:	2b01      	cmp	r3, #1
  401336:	f47f af06 	bne.w	401146 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  40133a:	4a04      	ldr	r2, [pc, #16]	; (40134c <udc_process_setup+0x230>)
  40133c:	8813      	ldrh	r3, [r2, #0]
  40133e:	f023 0302 	bic.w	r3, r3, #2
  401342:	8013      	strh	r3, [r2, #0]
  401344:	e7ed      	b.n	401322 <udc_process_setup+0x206>
  401346:	bf00      	nop
  401348:	20013454 	.word	0x20013454
  40134c:	20006b2a 	.word	0x20006b2a
  401350:	00403699 	.word	0x00403699
  401354:	2000004c 	.word	0x2000004c
  401358:	00412c08 	.word	0x00412c08
  40135c:	200000b4 	.word	0x200000b4
  401360:	200000b8 	.word	0x200000b8
  401364:	20000098 	.word	0x20000098
  401368:	20006b34 	.word	0x20006b34
  40136c:	20006b38 	.word	0x20006b38
  401370:	00400f4d 	.word	0x00400f4d
  401374:	20006b30 	.word	0x20006b30
  401378:	004037f5 	.word	0x004037f5
  40137c:	20006b2c 	.word	0x20006b2c
  401380:	00400f35 	.word	0x00400f35
	if (udd_g_ctrlreq.req.wLength) {
  401384:	4b71      	ldr	r3, [pc, #452]	; (40154c <udc_process_setup+0x430>)
  401386:	88db      	ldrh	r3, [r3, #6]
  401388:	2b00      	cmp	r3, #0
  40138a:	f47f aedc 	bne.w	401146 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
  40138e:	4b70      	ldr	r3, [pc, #448]	; (401550 <udc_process_setup+0x434>)
  401390:	4798      	blx	r3
  401392:	2800      	cmp	r0, #0
  401394:	f43f aed0 	beq.w	401138 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401398:	4b6c      	ldr	r3, [pc, #432]	; (40154c <udc_process_setup+0x430>)
  40139a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  40139c:	4b6d      	ldr	r3, [pc, #436]	; (401554 <udc_process_setup+0x438>)
  40139e:	681b      	ldr	r3, [r3, #0]
  4013a0:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4013a2:	429a      	cmp	r2, r3
  4013a4:	f73f aec8 	bgt.w	401138 <udc_process_setup+0x1c>
	udc_reset();
  4013a8:	4b6b      	ldr	r3, [pc, #428]	; (401558 <udc_process_setup+0x43c>)
  4013aa:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4013ac:	4b67      	ldr	r3, [pc, #412]	; (40154c <udc_process_setup+0x430>)
  4013ae:	789b      	ldrb	r3, [r3, #2]
  4013b0:	4a6a      	ldr	r2, [pc, #424]	; (40155c <udc_process_setup+0x440>)
  4013b2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  4013b4:	2b00      	cmp	r3, #0
  4013b6:	d0b4      	beq.n	401322 <udc_process_setup+0x206>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4013b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  4013bc:	3b01      	subs	r3, #1
  4013be:	4a65      	ldr	r2, [pc, #404]	; (401554 <udc_process_setup+0x438>)
  4013c0:	6852      	ldr	r2, [r2, #4]
  4013c2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4013c6:	4966      	ldr	r1, [pc, #408]	; (401560 <udc_process_setup+0x444>)
  4013c8:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4013ce:	791b      	ldrb	r3, [r3, #4]
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	d0a6      	beq.n	401322 <udc_process_setup+0x206>
  4013d4:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  4013d6:	4626      	mov	r6, r4
  4013d8:	4d62      	ldr	r5, [pc, #392]	; (401564 <udc_process_setup+0x448>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013da:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  4013dc:	4631      	mov	r1, r6
  4013de:	4620      	mov	r0, r4
  4013e0:	47a8      	blx	r5
  4013e2:	2800      	cmp	r0, #0
  4013e4:	f43f aea8 	beq.w	401138 <udc_process_setup+0x1c>
			iface_num++) {
  4013e8:	3401      	adds	r4, #1
  4013ea:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013ec:	683b      	ldr	r3, [r7, #0]
  4013ee:	681b      	ldr	r3, [r3, #0]
  4013f0:	791b      	ldrb	r3, [r3, #4]
  4013f2:	42a3      	cmp	r3, r4
  4013f4:	d8f2      	bhi.n	4013dc <udc_process_setup+0x2c0>
  4013f6:	e794      	b.n	401322 <udc_process_setup+0x206>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4013f8:	2b01      	cmp	r3, #1
  4013fa:	d00a      	beq.n	401412 <udc_process_setup+0x2f6>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4013fc:	2b02      	cmp	r3, #2
  4013fe:	f47f ae9b 	bne.w	401138 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  401402:	4b52      	ldr	r3, [pc, #328]	; (40154c <udc_process_setup+0x430>)
  401404:	785b      	ldrb	r3, [r3, #1]
  401406:	2b01      	cmp	r3, #1
  401408:	d02b      	beq.n	401462 <udc_process_setup+0x346>
  40140a:	2b03      	cmp	r3, #3
  40140c:	d039      	beq.n	401482 <udc_process_setup+0x366>
	return false;
  40140e:	2300      	movs	r3, #0
  401410:	e04d      	b.n	4014ae <udc_process_setup+0x392>
			switch (udd_g_ctrlreq.req.bRequest) {
  401412:	4a4e      	ldr	r2, [pc, #312]	; (40154c <udc_process_setup+0x430>)
  401414:	7852      	ldrb	r2, [r2, #1]
  401416:	2a0b      	cmp	r2, #11
  401418:	d1f0      	bne.n	4013fc <udc_process_setup+0x2e0>
	if (udd_g_ctrlreq.req.wLength) {
  40141a:	4b4c      	ldr	r3, [pc, #304]	; (40154c <udc_process_setup+0x430>)
  40141c:	88db      	ldrh	r3, [r3, #6]
  40141e:	b913      	cbnz	r3, 401426 <udc_process_setup+0x30a>
	if (!udc_num_configuration) {
  401420:	4b4e      	ldr	r3, [pc, #312]	; (40155c <udc_process_setup+0x440>)
  401422:	781b      	ldrb	r3, [r3, #0]
  401424:	b973      	cbnz	r3, 401444 <udc_process_setup+0x328>
	if (0 == udc_num_configuration) {
  401426:	4b4d      	ldr	r3, [pc, #308]	; (40155c <udc_process_setup+0x440>)
  401428:	781b      	ldrb	r3, [r3, #0]
  40142a:	2b00      	cmp	r3, #0
  40142c:	f000 8088 	beq.w	401540 <udc_process_setup+0x424>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401430:	4b46      	ldr	r3, [pc, #280]	; (40154c <udc_process_setup+0x430>)
  401432:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401434:	4b4a      	ldr	r3, [pc, #296]	; (401560 <udc_process_setup+0x444>)
  401436:	681d      	ldr	r5, [r3, #0]
  401438:	682b      	ldr	r3, [r5, #0]
  40143a:	791b      	ldrb	r3, [r3, #4]
  40143c:	42a3      	cmp	r3, r4
  40143e:	d83a      	bhi.n	4014b6 <udc_process_setup+0x39a>
	return false;
  401440:	2300      	movs	r3, #0
  401442:	e688      	b.n	401156 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401444:	4b41      	ldr	r3, [pc, #260]	; (40154c <udc_process_setup+0x430>)
  401446:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401448:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  40144a:	4620      	mov	r0, r4
  40144c:	4b46      	ldr	r3, [pc, #280]	; (401568 <udc_process_setup+0x44c>)
  40144e:	4798      	blx	r3
  401450:	2800      	cmp	r0, #0
  401452:	f43f ae71 	beq.w	401138 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  401456:	b2e9      	uxtb	r1, r5
  401458:	4620      	mov	r0, r4
  40145a:	4b42      	ldr	r3, [pc, #264]	; (401564 <udc_process_setup+0x448>)
  40145c:	4798      	blx	r3
  40145e:	4603      	mov	r3, r0
  401460:	e025      	b.n	4014ae <udc_process_setup+0x392>
	if (udd_g_ctrlreq.req.wLength) {
  401462:	4b3a      	ldr	r3, [pc, #232]	; (40154c <udc_process_setup+0x430>)
  401464:	88db      	ldrh	r3, [r3, #6]
  401466:	2b00      	cmp	r3, #0
  401468:	f47f ae6d 	bne.w	401146 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40146c:	4b37      	ldr	r3, [pc, #220]	; (40154c <udc_process_setup+0x430>)
  40146e:	885b      	ldrh	r3, [r3, #2]
  401470:	2b00      	cmp	r3, #0
  401472:	f47f ae68 	bne.w	401146 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401476:	4b35      	ldr	r3, [pc, #212]	; (40154c <udc_process_setup+0x430>)
  401478:	7918      	ldrb	r0, [r3, #4]
  40147a:	4b3c      	ldr	r3, [pc, #240]	; (40156c <udc_process_setup+0x450>)
  40147c:	4798      	blx	r3
  40147e:	4603      	mov	r3, r0
  401480:	e015      	b.n	4014ae <udc_process_setup+0x392>
	if (udd_g_ctrlreq.req.wLength) {
  401482:	4b32      	ldr	r3, [pc, #200]	; (40154c <udc_process_setup+0x430>)
  401484:	88db      	ldrh	r3, [r3, #6]
  401486:	2b00      	cmp	r3, #0
  401488:	f47f ae5d 	bne.w	401146 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40148c:	4b2f      	ldr	r3, [pc, #188]	; (40154c <udc_process_setup+0x430>)
  40148e:	885b      	ldrh	r3, [r3, #2]
  401490:	2b00      	cmp	r3, #0
  401492:	f47f ae58 	bne.w	401146 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  401496:	4c2d      	ldr	r4, [pc, #180]	; (40154c <udc_process_setup+0x430>)
  401498:	7920      	ldrb	r0, [r4, #4]
  40149a:	4b35      	ldr	r3, [pc, #212]	; (401570 <udc_process_setup+0x454>)
  40149c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  40149e:	7920      	ldrb	r0, [r4, #4]
  4014a0:	4b34      	ldr	r3, [pc, #208]	; (401574 <udc_process_setup+0x458>)
  4014a2:	4798      	blx	r3
  4014a4:	4603      	mov	r3, r0
  4014a6:	e002      	b.n	4014ae <udc_process_setup+0x392>
		return false;
  4014a8:	2300      	movs	r3, #0
  4014aa:	e000      	b.n	4014ae <udc_process_setup+0x392>
				return udc_req_std_dev_set_feature();
  4014ac:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	f47f ae51 	bne.w	401156 <udc_process_setup+0x3a>
  4014b4:	e640      	b.n	401138 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  4014b6:	2100      	movs	r1, #0
  4014b8:	4620      	mov	r0, r4
  4014ba:	4b2f      	ldr	r3, [pc, #188]	; (401578 <udc_process_setup+0x45c>)
  4014bc:	4798      	blx	r3
  4014be:	2800      	cmp	r0, #0
  4014c0:	f43f ae41 	beq.w	401146 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4014c4:	686b      	ldr	r3, [r5, #4]
  4014c6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4014ca:	68eb      	ldr	r3, [r5, #12]
  4014cc:	4798      	blx	r3
  4014ce:	4601      	mov	r1, r0
  4014d0:	4620      	mov	r0, r4
  4014d2:	4b29      	ldr	r3, [pc, #164]	; (401578 <udc_process_setup+0x45c>)
  4014d4:	4798      	blx	r3
  4014d6:	2800      	cmp	r0, #0
  4014d8:	f43f ae35 	beq.w	401146 <udc_process_setup+0x2a>
	return udi_api->setup();
  4014dc:	68ab      	ldr	r3, [r5, #8]
  4014de:	4798      	blx	r3
		if (udc_req_iface()) {
  4014e0:	4603      	mov	r3, r0
  4014e2:	2800      	cmp	r0, #0
  4014e4:	f47f ae37 	bne.w	401156 <udc_process_setup+0x3a>
  4014e8:	e62d      	b.n	401146 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  4014ea:	4b1c      	ldr	r3, [pc, #112]	; (40155c <udc_process_setup+0x440>)
  4014ec:	781b      	ldrb	r3, [r3, #0]
  4014ee:	b30b      	cbz	r3, 401534 <udc_process_setup+0x418>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4014f0:	4b1b      	ldr	r3, [pc, #108]	; (401560 <udc_process_setup+0x444>)
  4014f2:	681a      	ldr	r2, [r3, #0]
  4014f4:	6813      	ldr	r3, [r2, #0]
  4014f6:	791b      	ldrb	r3, [r3, #4]
  4014f8:	b1f3      	cbz	r3, 401538 <udc_process_setup+0x41c>
  4014fa:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4014fc:	4e1e      	ldr	r6, [pc, #120]	; (401578 <udc_process_setup+0x45c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4014fe:	4f18      	ldr	r7, [pc, #96]	; (401560 <udc_process_setup+0x444>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401500:	6853      	ldr	r3, [r2, #4]
  401502:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401506:	68eb      	ldr	r3, [r5, #12]
  401508:	4798      	blx	r3
  40150a:	4601      	mov	r1, r0
  40150c:	4620      	mov	r0, r4
  40150e:	47b0      	blx	r6
  401510:	4603      	mov	r3, r0
  401512:	2800      	cmp	r0, #0
  401514:	f43f ae1f 	beq.w	401156 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  401518:	68ab      	ldr	r3, [r5, #8]
  40151a:	4798      	blx	r3
  40151c:	4603      	mov	r3, r0
  40151e:	2800      	cmp	r0, #0
  401520:	f47f ae19 	bne.w	401156 <udc_process_setup+0x3a>
			iface_num++) {
  401524:	3401      	adds	r4, #1
  401526:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401528:	683a      	ldr	r2, [r7, #0]
  40152a:	6811      	ldr	r1, [r2, #0]
  40152c:	7909      	ldrb	r1, [r1, #4]
  40152e:	42a1      	cmp	r1, r4
  401530:	d8e6      	bhi.n	401500 <udc_process_setup+0x3e4>
  401532:	e610      	b.n	401156 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  401534:	2300      	movs	r3, #0
  401536:	e60e      	b.n	401156 <udc_process_setup+0x3a>
	return false;
  401538:	2300      	movs	r3, #0
  40153a:	e60c      	b.n	401156 <udc_process_setup+0x3a>
			return false; // Error from USB host
  40153c:	2300      	movs	r3, #0
  40153e:	e60a      	b.n	401156 <udc_process_setup+0x3a>
	return false;
  401540:	2300      	movs	r3, #0
  401542:	e608      	b.n	401156 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  401544:	2103      	movs	r1, #3
		str = udc_string_product_name;
  401546:	4a0d      	ldr	r2, [pc, #52]	; (40157c <udc_process_setup+0x460>)
  401548:	e67e      	b.n	401248 <udc_process_setup+0x12c>
  40154a:	bf00      	nop
  40154c:	20013454 	.word	0x20013454
  401550:	0040366d 	.word	0x0040366d
  401554:	2000004c 	.word	0x2000004c
  401558:	00401095 	.word	0x00401095
  40155c:	20006b34 	.word	0x20006b34
  401560:	20006b38 	.word	0x20006b38
  401564:	0040102d 	.word	0x0040102d
  401568:	00400fc1 	.word	0x00400fc1
  40156c:	00403919 	.word	0x00403919
  401570:	00403b6d 	.word	0x00403b6d
  401574:	00403835 	.word	0x00403835
  401578:	00400f4d 	.word	0x00400f4d
  40157c:	200000c4 	.word	0x200000c4

00401580 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401584:	b980      	cbnz	r0, 4015a8 <_read+0x28>
  401586:	460c      	mov	r4, r1
  401588:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40158a:	2a00      	cmp	r2, #0
  40158c:	dd0f      	ble.n	4015ae <_read+0x2e>
  40158e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401590:	4e08      	ldr	r6, [pc, #32]	; (4015b4 <_read+0x34>)
  401592:	4d09      	ldr	r5, [pc, #36]	; (4015b8 <_read+0x38>)
  401594:	6830      	ldr	r0, [r6, #0]
  401596:	4621      	mov	r1, r4
  401598:	682b      	ldr	r3, [r5, #0]
  40159a:	4798      	blx	r3
		ptr++;
  40159c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40159e:	42bc      	cmp	r4, r7
  4015a0:	d1f8      	bne.n	401594 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4015a2:	4640      	mov	r0, r8
  4015a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4015a8:	f04f 38ff 	mov.w	r8, #4294967295
  4015ac:	e7f9      	b.n	4015a2 <_read+0x22>
	for (; len > 0; --len) {
  4015ae:	4680      	mov	r8, r0
  4015b0:	e7f7      	b.n	4015a2 <_read+0x22>
  4015b2:	bf00      	nop
  4015b4:	2001344c 	.word	0x2001344c
  4015b8:	20013444 	.word	0x20013444

004015bc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4015bc:	3801      	subs	r0, #1
  4015be:	2802      	cmp	r0, #2
  4015c0:	d815      	bhi.n	4015ee <_write+0x32>
{
  4015c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4015c6:	460e      	mov	r6, r1
  4015c8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4015ca:	b19a      	cbz	r2, 4015f4 <_write+0x38>
  4015cc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4015ce:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401608 <_write+0x4c>
  4015d2:	4f0c      	ldr	r7, [pc, #48]	; (401604 <_write+0x48>)
  4015d4:	f8d8 0000 	ldr.w	r0, [r8]
  4015d8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4015dc:	683b      	ldr	r3, [r7, #0]
  4015de:	4798      	blx	r3
  4015e0:	2800      	cmp	r0, #0
  4015e2:	db0a      	blt.n	4015fa <_write+0x3e>
  4015e4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4015e6:	3c01      	subs	r4, #1
  4015e8:	d1f4      	bne.n	4015d4 <_write+0x18>
  4015ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4015ee:	f04f 30ff 	mov.w	r0, #4294967295
  4015f2:	4770      	bx	lr
	for (; len != 0; --len) {
  4015f4:	4610      	mov	r0, r2
  4015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4015fa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401602:	bf00      	nop
  401604:	20013448 	.word	0x20013448
  401608:	2001344c 	.word	0x2001344c

0040160c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  40160c:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40160e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  401612:	4bae      	ldr	r3, [pc, #696]	; (4018cc <board_init+0x2c0>)
  401614:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401616:	2009      	movs	r0, #9
  401618:	4dad      	ldr	r5, [pc, #692]	; (4018d0 <board_init+0x2c4>)
  40161a:	47a8      	blx	r5
  40161c:	200a      	movs	r0, #10
  40161e:	47a8      	blx	r5
  401620:	200b      	movs	r0, #11
  401622:	47a8      	blx	r5
  401624:	200c      	movs	r0, #12
  401626:	47a8      	blx	r5
  401628:	200d      	movs	r0, #13
  40162a:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40162c:	4ba9      	ldr	r3, [pc, #676]	; (4018d4 <board_init+0x2c8>)
  40162e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401632:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401634:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401638:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40163a:	4aa7      	ldr	r2, [pc, #668]	; (4018d8 <board_init+0x2cc>)
  40163c:	2104      	movs	r1, #4
  40163e:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401640:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  401644:	6651      	str	r1, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401646:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40164a:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  40164c:	6211      	str	r1, [r2, #32]
		base->PIO_IFSCER = mask;
  40164e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401652:	6f10      	ldr	r0, [r2, #112]	; 0x70
  401654:	f020 0004 	bic.w	r0, r0, #4
  401658:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40165a:	6f50      	ldr	r0, [r2, #116]	; 0x74
  40165c:	f020 0004 	bic.w	r0, r0, #4
  401660:	6750      	str	r0, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401662:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401666:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40166a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40166e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  401672:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401674:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401678:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40167a:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40167c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401680:	6f15      	ldr	r5, [r2, #112]	; 0x70
  401682:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  401686:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401688:	6f55      	ldr	r5, [r2, #116]	; 0x74
  40168a:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  40168e:	6755      	str	r5, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401690:	6050      	str	r0, [r2, #4]
		base->PIO_PUDR = mask;
  401692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401696:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40169c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40169e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4016a6:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  4016aa:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4016ac:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4016ae:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  4016b2:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016b4:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4016b6:	2201      	movs	r2, #1
  4016b8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016be:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016c0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016c6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4016c8:	f020 0001 	bic.w	r0, r0, #1
  4016cc:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4016ce:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4016d0:	f020 0001 	bic.w	r0, r0, #1
  4016d4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016d6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4016d8:	2202      	movs	r2, #2
  4016da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4016ea:	f020 0002 	bic.w	r0, r0, #2
  4016ee:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4016f0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4016f2:	f020 0002 	bic.w	r0, r0, #2
  4016f6:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016f8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4016fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4016fe:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401704:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401706:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40170c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40170e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  401712:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401714:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401716:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  40171a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40171c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40171e:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401720:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401724:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401726:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401728:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40172c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40172e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  401732:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401734:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  40173a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40173c:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  40173e:	2208      	movs	r2, #8
  401740:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401746:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401748:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40174a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40174e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401750:	f020 0008 	bic.w	r0, r0, #8
  401754:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401756:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401758:	f020 0008 	bic.w	r0, r0, #8
  40175c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40175e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401760:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401762:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401766:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401768:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40176a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40176e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401770:	f022 0204 	bic.w	r2, r2, #4
  401774:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401778:	f022 0204 	bic.w	r2, r2, #4
  40177c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40177e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401784:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40178a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40178c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40178e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401792:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401794:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  401798:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40179a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40179c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4017a0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4017a2:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4017a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4017aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4017ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4017b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4017b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4017b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4017b8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4017bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4017be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4017c0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4017c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4017c6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4017c8:	2240      	movs	r2, #64	; 0x40
  4017ca:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4017cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4017d0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4017d2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4017d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4017d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4017da:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  4017de:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4017e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4017e2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  4017e6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4017e8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4017ea:	2220      	movs	r2, #32
  4017ec:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4017ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4017f2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4017f4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4017f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4017fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4017fc:	f021 0120 	bic.w	r1, r1, #32
  401800:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401802:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401804:	f021 0120 	bic.w	r1, r1, #32
  401808:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40180a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40180c:	2280      	movs	r2, #128	; 0x80
  40180e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401810:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401814:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401816:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40181c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40181e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  401822:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401824:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401826:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40182a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40182c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40182e:	2210      	movs	r2, #16
  401830:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401836:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401838:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40183a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40183e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401840:	f021 0110 	bic.w	r1, r1, #16
  401844:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401846:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401848:	f021 0110 	bic.w	r1, r1, #16
  40184c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40184e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401850:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401854:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40185a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40185c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40185e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401862:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401864:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401868:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40186a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40186c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401870:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401872:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401878:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40187a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40187e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401880:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401886:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401888:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40188c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40188e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401890:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  401894:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401896:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401898:	f44f 7280 	mov.w	r2, #256	; 0x100
  40189c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40189e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018a2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4018a4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4018a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4018aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4018ac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  4018b0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4018b4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  4018b8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4018ba:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4018c0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4018c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018c6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4018c8:	625a      	str	r2, [r3, #36]	; 0x24
  4018ca:	e007      	b.n	4018dc <board_init+0x2d0>
  4018cc:	400e1850 	.word	0x400e1850
  4018d0:	00402141 	.word	0x00402141
  4018d4:	400e1400 	.word	0x400e1400
  4018d8:	400e0e00 	.word	0x400e0e00
		base->PIO_IFSCDR = mask;
  4018dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4018e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4018e2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4018e6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018e8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4018ea:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4018ee:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4018f0:	605a      	str	r2, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4018f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018f6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4018fc:	bd38      	pop	{r3, r4, r5, pc}
  4018fe:	bf00      	nop

00401900 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  401900:	b5f0      	push	{r4, r5, r6, r7, lr}
  401902:	b083      	sub	sp, #12
  401904:	4604      	mov	r4, r0
  401906:	460f      	mov	r7, r1
  401908:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40190a:	6803      	ldr	r3, [r0, #0]
  40190c:	f043 0310 	orr.w	r3, r3, #16
  401910:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  401912:	ab01      	add	r3, sp, #4
  401914:	2201      	movs	r2, #1
  401916:	4d36      	ldr	r5, [pc, #216]	; (4019f0 <ethernet_phy_set_link+0xf0>)
  401918:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40191a:	b958      	cbnz	r0, 401934 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  40191c:	9b01      	ldr	r3, [sp, #4]
  40191e:	f013 0f04 	tst.w	r3, #4
  401922:	d10d      	bne.n	401940 <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401924:	6823      	ldr	r3, [r4, #0]
  401926:	f023 0310 	bic.w	r3, r3, #16
  40192a:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  40192c:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40192e:	4618      	mov	r0, r3
  401930:	b003      	add	sp, #12
  401932:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401934:	4603      	mov	r3, r0
  401936:	6822      	ldr	r2, [r4, #0]
  401938:	f022 0210 	bic.w	r2, r2, #16
  40193c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40193e:	e7f6      	b.n	40192e <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  401940:	b92e      	cbnz	r6, 40194e <ethernet_phy_set_link+0x4e>
  401942:	6823      	ldr	r3, [r4, #0]
  401944:	f023 0310 	bic.w	r3, r3, #16
  401948:	6023      	str	r3, [r4, #0]
		return uc_rc;
  40194a:	4633      	mov	r3, r6
  40194c:	e7ef      	b.n	40192e <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  40194e:	466b      	mov	r3, sp
  401950:	221e      	movs	r2, #30
  401952:	4639      	mov	r1, r7
  401954:	4620      	mov	r0, r4
  401956:	4d26      	ldr	r5, [pc, #152]	; (4019f0 <ethernet_phy_set_link+0xf0>)
  401958:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40195a:	4603      	mov	r3, r0
  40195c:	b950      	cbnz	r0, 401974 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  40195e:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  401960:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  401964:	d00b      	beq.n	40197e <ethernet_phy_set_link+0x7e>
  401966:	9900      	ldr	r1, [sp, #0]
  401968:	f011 0f05 	tst.w	r1, #5
  40196c:	bf0c      	ite	eq
  40196e:	2101      	moveq	r1, #1
  401970:	2100      	movne	r1, #0
  401972:	e005      	b.n	401980 <ethernet_phy_set_link+0x80>
  401974:	6822      	ldr	r2, [r4, #0]
  401976:	f022 0210 	bic.w	r2, r2, #16
  40197a:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40197c:	e7d7      	b.n	40192e <ethernet_phy_set_link+0x2e>
  40197e:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  401980:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  401984:	d003      	beq.n	40198e <ethernet_phy_set_link+0x8e>
  401986:	9800      	ldr	r0, [sp, #0]
  401988:	f010 0f02 	tst.w	r0, #2
  40198c:	d127      	bne.n	4019de <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  40198e:	f412 6f00 	tst.w	r2, #2048	; 0x800
  401992:	d003      	beq.n	40199c <ethernet_phy_set_link+0x9c>
  401994:	9a00      	ldr	r2, [sp, #0]
  401996:	f012 0f01 	tst.w	r2, #1
  40199a:	d111      	bne.n	4019c0 <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  40199c:	b191      	cbz	r1, 4019c4 <ethernet_phy_set_link+0xc4>
  40199e:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  4019a0:	6861      	ldr	r1, [r4, #4]
  4019a2:	f041 0101 	orr.w	r1, r1, #1
  4019a6:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  4019a8:	b1a2      	cbz	r2, 4019d4 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  4019aa:	6862      	ldr	r2, [r4, #4]
  4019ac:	f042 0202 	orr.w	r2, r2, #2
  4019b0:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4019b2:	6822      	ldr	r2, [r4, #0]
  4019b4:	f022 0210 	bic.w	r2, r2, #16
  4019b8:	6022      	str	r2, [r4, #0]
	return uc_rc;
  4019ba:	e7b8      	b.n	40192e <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  4019bc:	461a      	mov	r2, r3
  4019be:	e7ef      	b.n	4019a0 <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  4019c0:	461a      	mov	r2, r3
  4019c2:	e000      	b.n	4019c6 <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4019c4:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4019c6:	6861      	ldr	r1, [r4, #4]
  4019c8:	f021 0101 	bic.w	r1, r1, #1
  4019cc:	6061      	str	r1, [r4, #4]
  4019ce:	e7eb      	b.n	4019a8 <ethernet_phy_set_link+0xa8>
  4019d0:	461a      	mov	r2, r3
  4019d2:	e7f8      	b.n	4019c6 <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4019d4:	6862      	ldr	r2, [r4, #4]
  4019d6:	f022 0202 	bic.w	r2, r2, #2
  4019da:	6062      	str	r2, [r4, #4]
  4019dc:	e7e9      	b.n	4019b2 <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4019de:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4019e2:	d0eb      	beq.n	4019bc <ethernet_phy_set_link+0xbc>
  4019e4:	9a00      	ldr	r2, [sp, #0]
  4019e6:	f012 0f01 	tst.w	r2, #1
  4019ea:	d1f1      	bne.n	4019d0 <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4019ec:	461a      	mov	r2, r3
  4019ee:	e7d7      	b.n	4019a0 <ethernet_phy_set_link+0xa0>
  4019f0:	00401d0d 	.word	0x00401d0d

004019f4 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4019f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4019f8:	b082      	sub	sp, #8
  4019fa:	4604      	mov	r4, r0
  4019fc:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4019fe:	6803      	ldr	r3, [r0, #0]
  401a00:	f043 0310 	orr.w	r3, r3, #16
  401a04:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  401a06:	ab01      	add	r3, sp, #4
  401a08:	2200      	movs	r2, #0
  401a0a:	4e5d      	ldr	r6, [pc, #372]	; (401b80 <ethernet_phy_auto_negotiate+0x18c>)
  401a0c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401a0e:	b140      	cbz	r0, 401a22 <ethernet_phy_auto_negotiate+0x2e>
  401a10:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401a12:	6822      	ldr	r2, [r4, #0]
  401a14:	f022 0210 	bic.w	r2, r2, #16
  401a18:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  401a1a:	4618      	mov	r0, r3
  401a1c:	b002      	add	sp, #8
  401a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  401a22:	9b01      	ldr	r3, [sp, #4]
  401a24:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  401a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401a2c:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  401a2e:	2200      	movs	r2, #0
  401a30:	4629      	mov	r1, r5
  401a32:	4620      	mov	r0, r4
  401a34:	4e53      	ldr	r6, [pc, #332]	; (401b84 <ethernet_phy_auto_negotiate+0x190>)
  401a36:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401a38:	4603      	mov	r3, r0
  401a3a:	b120      	cbz	r0, 401a46 <ethernet_phy_auto_negotiate+0x52>
  401a3c:	6822      	ldr	r2, [r4, #0]
  401a3e:	f022 0210 	bic.w	r2, r2, #16
  401a42:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401a44:	e7e9      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  401a46:	f240 13e1 	movw	r3, #481	; 0x1e1
  401a4a:	2204      	movs	r2, #4
  401a4c:	4629      	mov	r1, r5
  401a4e:	4620      	mov	r0, r4
  401a50:	4e4c      	ldr	r6, [pc, #304]	; (401b84 <ethernet_phy_auto_negotiate+0x190>)
  401a52:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401a54:	4603      	mov	r3, r0
  401a56:	b120      	cbz	r0, 401a62 <ethernet_phy_auto_negotiate+0x6e>
  401a58:	6822      	ldr	r2, [r4, #0]
  401a5a:	f022 0210 	bic.w	r2, r2, #16
  401a5e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401a60:	e7db      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  401a62:	ab01      	add	r3, sp, #4
  401a64:	2200      	movs	r2, #0
  401a66:	4629      	mov	r1, r5
  401a68:	4620      	mov	r0, r4
  401a6a:	4e45      	ldr	r6, [pc, #276]	; (401b80 <ethernet_phy_auto_negotiate+0x18c>)
  401a6c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401a6e:	4603      	mov	r3, r0
  401a70:	b120      	cbz	r0, 401a7c <ethernet_phy_auto_negotiate+0x88>
  401a72:	6822      	ldr	r2, [r4, #0]
  401a74:	f022 0210 	bic.w	r2, r2, #16
  401a78:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401a7a:	e7ce      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  401a7c:	9b01      	ldr	r3, [sp, #4]
  401a7e:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  401a82:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  401a84:	2200      	movs	r2, #0
  401a86:	4629      	mov	r1, r5
  401a88:	4620      	mov	r0, r4
  401a8a:	4e3e      	ldr	r6, [pc, #248]	; (401b84 <ethernet_phy_auto_negotiate+0x190>)
  401a8c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401a8e:	4603      	mov	r3, r0
  401a90:	b120      	cbz	r0, 401a9c <ethernet_phy_auto_negotiate+0xa8>
  401a92:	6822      	ldr	r2, [r4, #0]
  401a94:	f022 0210 	bic.w	r2, r2, #16
  401a98:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401a9a:	e7be      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  401a9c:	9b01      	ldr	r3, [sp, #4]
  401a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  401aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  401aa6:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  401aa8:	2200      	movs	r2, #0
  401aaa:	4629      	mov	r1, r5
  401aac:	4620      	mov	r0, r4
  401aae:	4e35      	ldr	r6, [pc, #212]	; (401b84 <ethernet_phy_auto_negotiate+0x190>)
  401ab0:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401ab2:	4603      	mov	r3, r0
  401ab4:	b9b0      	cbnz	r0, 401ae4 <ethernet_phy_auto_negotiate+0xf0>
  401ab6:	4e34      	ldr	r6, [pc, #208]	; (401b88 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  401ab8:	f04f 0801 	mov.w	r8, #1
  401abc:	4f30      	ldr	r7, [pc, #192]	; (401b80 <ethernet_phy_auto_negotiate+0x18c>)
  401abe:	ab01      	add	r3, sp, #4
  401ac0:	4642      	mov	r2, r8
  401ac2:	4629      	mov	r1, r5
  401ac4:	4620      	mov	r0, r4
  401ac6:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  401ac8:	4603      	mov	r3, r0
  401aca:	b980      	cbnz	r0, 401aee <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  401acc:	9b01      	ldr	r3, [sp, #4]
  401ace:	f013 0f20 	tst.w	r3, #32
  401ad2:	d111      	bne.n	401af8 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  401ad4:	3e01      	subs	r6, #1
  401ad6:	d1f2      	bne.n	401abe <ethernet_phy_auto_negotiate+0xca>
  401ad8:	6823      	ldr	r3, [r4, #0]
  401ada:	f023 0310 	bic.w	r3, r3, #16
  401ade:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  401ae0:	2301      	movs	r3, #1
  401ae2:	e79a      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
  401ae4:	6822      	ldr	r2, [r4, #0]
  401ae6:	f022 0210 	bic.w	r2, r2, #16
  401aea:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401aec:	e795      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
  401aee:	6822      	ldr	r2, [r4, #0]
  401af0:	f022 0210 	bic.w	r2, r2, #16
  401af4:	6022      	str	r2, [r4, #0]
			return uc_rc;
  401af6:	e790      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  401af8:	466b      	mov	r3, sp
  401afa:	2205      	movs	r2, #5
  401afc:	4629      	mov	r1, r5
  401afe:	4620      	mov	r0, r4
  401b00:	4d1f      	ldr	r5, [pc, #124]	; (401b80 <ethernet_phy_auto_negotiate+0x18c>)
  401b02:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  401b04:	4603      	mov	r3, r0
  401b06:	b980      	cbnz	r0, 401b2a <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  401b08:	9a00      	ldr	r2, [sp, #0]
  401b0a:	f412 7f80 	tst.w	r2, #256	; 0x100
  401b0e:	d113      	bne.n	401b38 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  401b10:	f012 0f40 	tst.w	r2, #64	; 0x40
  401b14:	d12c      	bne.n	401b70 <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  401b16:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  401b1a:	bf08      	it	eq
  401b1c:	4602      	moveq	r2, r0
  401b1e:	d109      	bne.n	401b34 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  401b20:	6861      	ldr	r1, [r4, #4]
  401b22:	f021 0101 	bic.w	r1, r1, #1
  401b26:	6061      	str	r1, [r4, #4]
  401b28:	e00b      	b.n	401b42 <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401b2a:	6822      	ldr	r2, [r4, #0]
  401b2c:	f022 0210 	bic.w	r2, r2, #16
  401b30:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401b32:	e772      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  401b34:	4602      	mov	r2, r0
  401b36:	e000      	b.n	401b3a <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  401b38:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  401b3a:	6861      	ldr	r1, [r4, #4]
  401b3c:	f041 0101 	orr.w	r1, r1, #1
  401b40:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  401b42:	b1ba      	cbz	r2, 401b74 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  401b44:	6862      	ldr	r2, [r4, #4]
  401b46:	f042 0202 	orr.w	r2, r2, #2
  401b4a:	6062      	str	r2, [r4, #4]
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
	switch (mode) {
		case GMAC_PHY_MII:
		case GMAC_PHY_RMII:
			p_gmac->GMAC_UR |= GMAC_UR_MII;
  401b4c:	68e2      	ldr	r2, [r4, #12]
  401b4e:	f042 0201 	orr.w	r2, r2, #1
  401b52:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  401b54:	4a0d      	ldr	r2, [pc, #52]	; (401b8c <ethernet_phy_auto_negotiate+0x198>)
  401b56:	6811      	ldr	r1, [r2, #0]
  401b58:	f041 0108 	orr.w	r1, r1, #8
  401b5c:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  401b5e:	6811      	ldr	r1, [r2, #0]
  401b60:	f041 0104 	orr.w	r1, r1, #4
  401b64:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401b66:	6822      	ldr	r2, [r4, #0]
  401b68:	f022 0210 	bic.w	r2, r2, #16
  401b6c:	6022      	str	r2, [r4, #0]
	return uc_rc;
  401b6e:	e754      	b.n	401a1a <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  401b70:	2201      	movs	r2, #1
  401b72:	e7d5      	b.n	401b20 <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  401b74:	6862      	ldr	r2, [r4, #4]
  401b76:	f022 0202 	bic.w	r2, r2, #2
  401b7a:	6062      	str	r2, [r4, #4]
  401b7c:	e7e6      	b.n	401b4c <ethernet_phy_auto_negotiate+0x158>
  401b7e:	bf00      	nop
  401b80:	00401d0d 	.word	0x00401d0d
  401b84:	00401d6d 	.word	0x00401d6d
  401b88:	000f4240 	.word	0x000f4240
  401b8c:	40034000 	.word	0x40034000

00401b90 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  401b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b94:	b083      	sub	sp, #12
  401b96:	4605      	mov	r5, r0
  401b98:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  401b9a:	6803      	ldr	r3, [r0, #0]
  401b9c:	f043 0310 	orr.w	r3, r3, #16
  401ba0:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  401ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ba6:	ae02      	add	r6, sp, #8
  401ba8:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  401bac:	2200      	movs	r2, #0
  401bae:	4c0e      	ldr	r4, [pc, #56]	; (401be8 <ethernet_phy_reset+0x58>)
  401bb0:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  401bb2:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  401bb4:	f04f 0800 	mov.w	r8, #0
  401bb8:	4f0c      	ldr	r7, [pc, #48]	; (401bec <ethernet_phy_reset+0x5c>)
  401bba:	4633      	mov	r3, r6
  401bbc:	4642      	mov	r2, r8
  401bbe:	4649      	mov	r1, r9
  401bc0:	4628      	mov	r0, r5
  401bc2:	47b8      	blx	r7
		ul_timeout--;
  401bc4:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  401bc6:	9b01      	ldr	r3, [sp, #4]
  401bc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401bcc:	d001      	beq.n	401bd2 <ethernet_phy_reset+0x42>
  401bce:	2c00      	cmp	r4, #0
  401bd0:	d1f3      	bne.n	401bba <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401bd2:	682b      	ldr	r3, [r5, #0]
  401bd4:	f023 0310 	bic.w	r3, r3, #16
  401bd8:	602b      	str	r3, [r5, #0]
	if (!ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  401bda:	1c20      	adds	r0, r4, #0
  401bdc:	bf18      	it	ne
  401bde:	2001      	movne	r0, #1
  401be0:	b003      	add	sp, #12
  401be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401be6:	bf00      	nop
  401be8:	00401d6d 	.word	0x00401d6d
  401bec:	00401d0d 	.word	0x00401d0d

00401bf0 <ethernet_phy_init>:
{
  401bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401bf4:	b083      	sub	sp, #12
  401bf6:	4606      	mov	r6, r0
  401bf8:	4689      	mov	r9, r1
  401bfa:	4614      	mov	r4, r2
	ethernet_phy_reset(GMAC,uc_phy_addr);
  401bfc:	4839      	ldr	r0, [pc, #228]	; (401ce4 <ethernet_phy_init+0xf4>)
  401bfe:	4b3a      	ldr	r3, [pc, #232]	; (401ce8 <ethernet_phy_init+0xf8>)
  401c00:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  401c02:	4b3a      	ldr	r3, [pc, #232]	; (401cec <ethernet_phy_init+0xfc>)
  401c04:	429c      	cmp	r4, r3
  401c06:	d862      	bhi.n	401cce <ethernet_phy_init+0xde>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  401c08:	4b39      	ldr	r3, [pc, #228]	; (401cf0 <ethernet_phy_init+0x100>)
  401c0a:	429c      	cmp	r4, r3
  401c0c:	d80f      	bhi.n	401c2e <ethernet_phy_init+0x3e>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  401c0e:	4b39      	ldr	r3, [pc, #228]	; (401cf4 <ethernet_phy_init+0x104>)
  401c10:	429c      	cmp	r4, r3
  401c12:	d841      	bhi.n	401c98 <ethernet_phy_init+0xa8>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  401c14:	4b38      	ldr	r3, [pc, #224]	; (401cf8 <ethernet_phy_init+0x108>)
  401c16:	429c      	cmp	r4, r3
  401c18:	d841      	bhi.n	401c9e <ethernet_phy_init+0xae>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  401c1a:	4b38      	ldr	r3, [pc, #224]	; (401cfc <ethernet_phy_init+0x10c>)
  401c1c:	429c      	cmp	r4, r3
  401c1e:	d841      	bhi.n	401ca4 <ethernet_phy_init+0xb4>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  401c20:	4b37      	ldr	r3, [pc, #220]	; (401d00 <ethernet_phy_init+0x110>)
  401c22:	429c      	cmp	r4, r3
  401c24:	bf8c      	ite	hi
  401c26:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  401c2a:	2300      	movls	r3, #0
  401c2c:	e001      	b.n	401c32 <ethernet_phy_init+0x42>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  401c2e:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  401c32:	6872      	ldr	r2, [r6, #4]
  401c34:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  401c38:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  401c3a:	6874      	ldr	r4, [r6, #4]
  401c3c:	431c      	orrs	r4, r3
  401c3e:	6074      	str	r4, [r6, #4]
	uint32_t ul_value = 0;
  401c40:	ab02      	add	r3, sp, #8
  401c42:	2200      	movs	r2, #0
  401c44:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  401c48:	6832      	ldr	r2, [r6, #0]
  401c4a:	f042 0210 	orr.w	r2, r2, #16
  401c4e:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  401c50:	2202      	movs	r2, #2
  401c52:	4649      	mov	r1, r9
  401c54:	4630      	mov	r0, r6
  401c56:	4c2b      	ldr	r4, [pc, #172]	; (401d04 <ethernet_phy_init+0x114>)
  401c58:	47a0      	blx	r4
	if (ul_value != GMII_OUI_LSB) {
  401c5a:	9b01      	ldr	r3, [sp, #4]
  401c5c:	2b05      	cmp	r3, #5
  401c5e:	d03a      	beq.n	401cd6 <ethernet_phy_init+0xe6>
		ethernet_phy_addr = 0xFF; // MZ_TESTE: Para manter compatibilidade com FreeRTOS
  401c60:	22ff      	movs	r2, #255	; 0xff
  401c62:	4b29      	ldr	r3, [pc, #164]	; (401d08 <ethernet_phy_init+0x118>)
  401c64:	601a      	str	r2, [r3, #0]
	uint8_t uc_phy_address = uc_phy_addr;
  401c66:	464c      	mov	r4, r9
		ethernet_phy_addr = 0xFF; // MZ_TESTE: Para manter compatibilidade com FreeRTOS
  401c68:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  401c6a:	f04f 0802 	mov.w	r8, #2
  401c6e:	4f25      	ldr	r7, [pc, #148]	; (401d04 <ethernet_phy_init+0x114>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  401c70:	3401      	adds	r4, #1
  401c72:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  401c76:	ab01      	add	r3, sp, #4
  401c78:	4642      	mov	r2, r8
  401c7a:	4621      	mov	r1, r4
  401c7c:	4630      	mov	r0, r6
  401c7e:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  401c80:	9b01      	ldr	r3, [sp, #4]
  401c82:	2b22      	cmp	r3, #34	; 0x22
  401c84:	d011      	beq.n	401caa <ethernet_phy_init+0xba>
  401c86:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  401c88:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  401c8c:	d1f0      	bne.n	401c70 <ethernet_phy_init+0x80>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401c8e:	6833      	ldr	r3, [r6, #0]
  401c90:	f023 0310 	bic.w	r3, r3, #16
  401c94:	6033      	str	r3, [r6, #0]
  401c96:	e01a      	b.n	401cce <ethernet_phy_init+0xde>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  401c98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401c9c:	e7c9      	b.n	401c32 <ethernet_phy_init+0x42>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  401c9e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  401ca2:	e7c6      	b.n	401c32 <ethernet_phy_init+0x42>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  401ca4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401ca8:	e7c3      	b.n	401c32 <ethernet_phy_init+0x42>
				ethernet_phy_addr = uc_phy_address; // MZ_TESTE: Para manter compatibilidade com FreeRTOS
  401caa:	4b17      	ldr	r3, [pc, #92]	; (401d08 <ethernet_phy_init+0x118>)
  401cac:	601c      	str	r4, [r3, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401cae:	6833      	ldr	r3, [r6, #0]
  401cb0:	f023 0310 	bic.w	r3, r3, #16
  401cb4:	6033      	str	r3, [r6, #0]
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  401cb6:	4621      	mov	r1, r4
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  401cb8:	ab01      	add	r3, sp, #4
  401cba:	2201      	movs	r2, #1
  401cbc:	4630      	mov	r0, r6
  401cbe:	4d11      	ldr	r5, [pc, #68]	; (401d04 <ethernet_phy_init+0x114>)
  401cc0:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  401cc2:	45a1      	cmp	r9, r4
  401cc4:	d003      	beq.n	401cce <ethernet_phy_init+0xde>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  401cc6:	4649      	mov	r1, r9
  401cc8:	4630      	mov	r0, r6
  401cca:	4b07      	ldr	r3, [pc, #28]	; (401ce8 <ethernet_phy_init+0xf8>)
  401ccc:	4798      	blx	r3
}
  401cce:	2000      	movs	r0, #0
  401cd0:	b003      	add	sp, #12
  401cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401cd6:	6833      	ldr	r3, [r6, #0]
  401cd8:	f023 0310 	bic.w	r3, r3, #16
  401cdc:	6033      	str	r3, [r6, #0]
	uint8_t uc_phy_address = uc_phy_addr;
  401cde:	4649      	mov	r1, r9
	uint8_t uc_rc = 0;
  401ce0:	2400      	movs	r4, #0
  401ce2:	e7e9      	b.n	401cb8 <ethernet_phy_init+0xc8>
  401ce4:	40034000 	.word	0x40034000
  401ce8:	00401b91 	.word	0x00401b91
  401cec:	0e4e1c00 	.word	0x0e4e1c00
  401cf0:	09896800 	.word	0x09896800
  401cf4:	07270e00 	.word	0x07270e00
  401cf8:	04c4b400 	.word	0x04c4b400
  401cfc:	02625a00 	.word	0x02625a00
  401d00:	01312d00 	.word	0x01312d00
  401d04:	00401d0d 	.word	0x00401d0d
  401d08:	20006b40 	.word	0x20006b40

00401d0c <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  401d0c:	b410      	push	{r4}
  401d0e:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401d10:	6884      	ldr	r4, [r0, #8]
  401d12:	f014 0f04 	tst.w	r4, #4
  401d16:	d0fb      	beq.n	401d10 <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401d18:	0492      	lsls	r2, r2, #18
  401d1a:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401d1e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
  401d22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
			| GMAC_MAN_PHYA(uc_phy_addr)
  401d26:	05c9      	lsls	r1, r1, #23
  401d28:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401d2c:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401d2e:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401d30:	2200      	movs	r2, #0
  401d32:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401d34:	490c      	ldr	r1, [pc, #48]	; (401d68 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401d36:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401d38:	f012 0f04 	tst.w	r2, #4
  401d3c:	d107      	bne.n	401d4e <gmac_phy_read+0x42>
		ul_retry_count++;
  401d3e:	9a01      	ldr	r2, [sp, #4]
  401d40:	3201      	adds	r2, #1
  401d42:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401d44:	9a01      	ldr	r2, [sp, #4]
  401d46:	428a      	cmp	r2, r1
  401d48:	d9f5      	bls.n	401d36 <gmac_phy_read+0x2a>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  401d4a:	2001      	movs	r0, #1
  401d4c:	e007      	b.n	401d5e <gmac_phy_read+0x52>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401d4e:	6882      	ldr	r2, [r0, #8]
  401d50:	f012 0f04 	tst.w	r2, #4
  401d54:	d0fb      	beq.n	401d4e <gmac_phy_read+0x42>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  401d56:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401d58:	b292      	uxth	r2, r2
  401d5a:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401d5c:	2000      	movs	r0, #0
}
  401d5e:	b003      	add	sp, #12
  401d60:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d64:	4770      	bx	lr
  401d66:	bf00      	nop
  401d68:	000f423f 	.word	0x000f423f

00401d6c <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  401d6c:	b410      	push	{r4}
  401d6e:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401d70:	6884      	ldr	r4, [r0, #8]
  401d72:	f014 0f04 	tst.w	r4, #4
  401d76:	d0fb      	beq.n	401d70 <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401d78:	0492      	lsls	r2, r2, #18
  401d7a:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401d7e:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
  401d82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
			| GMAC_MAN_PHYA(uc_phy_addr)
  401d86:	05c9      	lsls	r1, r1, #23
  401d88:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401d8c:	430a      	orrs	r2, r1
  401d8e:	b29b      	uxth	r3, r3
  401d90:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401d92:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401d94:	2300      	movs	r3, #0
  401d96:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401d98:	4a08      	ldr	r2, [pc, #32]	; (401dbc <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401d9a:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401d9c:	f013 0f04 	tst.w	r3, #4
  401da0:	d107      	bne.n	401db2 <gmac_phy_write+0x46>
		ul_retry_count++;
  401da2:	9b01      	ldr	r3, [sp, #4]
  401da4:	3301      	adds	r3, #1
  401da6:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401da8:	9b01      	ldr	r3, [sp, #4]
  401daa:	4293      	cmp	r3, r2
  401dac:	d9f5      	bls.n	401d9a <gmac_phy_write+0x2e>
			return GMAC_TIMEOUT;
  401dae:	2001      	movs	r0, #1
  401db0:	e000      	b.n	401db4 <gmac_phy_write+0x48>
	return GMAC_OK;
  401db2:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  401db4:	b003      	add	sp, #12
  401db6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dba:	4770      	bx	lr
  401dbc:	000f423f 	.word	0x000f423f

00401dc0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401dc0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401dc2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401dc6:	d03a      	beq.n	401e3e <pio_set_peripheral+0x7e>
  401dc8:	d813      	bhi.n	401df2 <pio_set_peripheral+0x32>
  401dca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401dce:	d025      	beq.n	401e1c <pio_set_peripheral+0x5c>
  401dd0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401dd4:	d10a      	bne.n	401dec <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dd6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401dd8:	4313      	orrs	r3, r2
  401dda:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ddc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dde:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401de0:	400b      	ands	r3, r1
  401de2:	ea23 0302 	bic.w	r3, r3, r2
  401de6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401de8:	6042      	str	r2, [r0, #4]
  401dea:	4770      	bx	lr
	switch (ul_type) {
  401dec:	2900      	cmp	r1, #0
  401dee:	d1fb      	bne.n	401de8 <pio_set_peripheral+0x28>
  401df0:	4770      	bx	lr
  401df2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401df6:	d021      	beq.n	401e3c <pio_set_peripheral+0x7c>
  401df8:	d809      	bhi.n	401e0e <pio_set_peripheral+0x4e>
  401dfa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401dfe:	d1f3      	bne.n	401de8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e02:	4313      	orrs	r3, r2
  401e04:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e06:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e08:	4313      	orrs	r3, r2
  401e0a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401e0c:	e7ec      	b.n	401de8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401e0e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401e12:	d013      	beq.n	401e3c <pio_set_peripheral+0x7c>
  401e14:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401e18:	d010      	beq.n	401e3c <pio_set_peripheral+0x7c>
  401e1a:	e7e5      	b.n	401de8 <pio_set_peripheral+0x28>
{
  401e1c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e1e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e20:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401e22:	43d3      	mvns	r3, r2
  401e24:	4021      	ands	r1, r4
  401e26:	461c      	mov	r4, r3
  401e28:	4019      	ands	r1, r3
  401e2a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e2c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e2e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401e30:	400b      	ands	r3, r1
  401e32:	4023      	ands	r3, r4
  401e34:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401e36:	6042      	str	r2, [r0, #4]
}
  401e38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e3c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e3e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e40:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401e42:	400b      	ands	r3, r1
  401e44:	ea23 0302 	bic.w	r3, r3, r2
  401e48:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e4a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e4c:	4313      	orrs	r3, r2
  401e4e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401e50:	e7ca      	b.n	401de8 <pio_set_peripheral+0x28>

00401e52 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401e52:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e54:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401e58:	bf14      	ite	ne
  401e5a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401e5c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401e5e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401e62:	bf14      	ite	ne
  401e64:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  401e66:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  401e68:	f012 0f02 	tst.w	r2, #2
  401e6c:	d107      	bne.n	401e7e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401e6e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401e72:	bf18      	it	ne
  401e74:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  401e78:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401e7a:	6001      	str	r1, [r0, #0]
  401e7c:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  401e7e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401e82:	e7f9      	b.n	401e78 <pio_set_input+0x26>

00401e84 <pio_set_output>:
{
  401e84:	b410      	push	{r4}
  401e86:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401e88:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e8a:	b94c      	cbnz	r4, 401ea0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401e8c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401e8e:	b14b      	cbz	r3, 401ea4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401e90:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401e92:	b94a      	cbnz	r2, 401ea8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401e94:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401e96:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401e98:	6001      	str	r1, [r0, #0]
}
  401e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e9e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401ea0:	6641      	str	r1, [r0, #100]	; 0x64
  401ea2:	e7f4      	b.n	401e8e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401ea4:	6541      	str	r1, [r0, #84]	; 0x54
  401ea6:	e7f4      	b.n	401e92 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401ea8:	6301      	str	r1, [r0, #48]	; 0x30
  401eaa:	e7f4      	b.n	401e96 <pio_set_output+0x12>

00401eac <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401eac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401eae:	4770      	bx	lr

00401eb0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401eb0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401eb2:	4770      	bx	lr

00401eb4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401eb4:	b570      	push	{r4, r5, r6, lr}
  401eb6:	b082      	sub	sp, #8
  401eb8:	4605      	mov	r5, r0
  401eba:	460e      	mov	r6, r1
  401ebc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401ebe:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401ec6:	d03d      	beq.n	401f44 <pio_configure_pin_group+0x90>
  401ec8:	d80a      	bhi.n	401ee0 <pio_configure_pin_group+0x2c>
  401eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401ece:	d021      	beq.n	401f14 <pio_configure_pin_group+0x60>
  401ed0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ed4:	d02a      	beq.n	401f2c <pio_configure_pin_group+0x78>
  401ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401eda:	d00e      	beq.n	401efa <pio_configure_pin_group+0x46>
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  401edc:	2000      	movs	r0, #0
  401ede:	e017      	b.n	401f10 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  401ee0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ee4:	d03a      	beq.n	401f5c <pio_configure_pin_group+0xa8>
  401ee6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401eea:	d037      	beq.n	401f5c <pio_configure_pin_group+0xa8>
  401eec:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401ef0:	d1f4      	bne.n	401edc <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  401ef2:	4b23      	ldr	r3, [pc, #140]	; (401f80 <pio_configure_pin_group+0xcc>)
  401ef4:	4798      	blx	r3
	}

	return 1;
  401ef6:	2001      	movs	r0, #1
		break;
  401ef8:	e00a      	b.n	401f10 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401efa:	460a      	mov	r2, r1
  401efc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401f00:	4b20      	ldr	r3, [pc, #128]	; (401f84 <pio_configure_pin_group+0xd0>)
  401f02:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f04:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f08:	bf14      	ite	ne
  401f0a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401f0c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401f0e:	2001      	movs	r0, #1
}
  401f10:	b002      	add	sp, #8
  401f12:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401f14:	460a      	mov	r2, r1
  401f16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f1a:	4b1a      	ldr	r3, [pc, #104]	; (401f84 <pio_configure_pin_group+0xd0>)
  401f1c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f1e:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f22:	bf14      	ite	ne
  401f24:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401f26:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401f28:	2001      	movs	r0, #1
  401f2a:	e7f1      	b.n	401f10 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401f2c:	460a      	mov	r2, r1
  401f2e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401f32:	4b14      	ldr	r3, [pc, #80]	; (401f84 <pio_configure_pin_group+0xd0>)
  401f34:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f36:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f3a:	bf14      	ite	ne
  401f3c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401f3e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401f40:	2001      	movs	r0, #1
  401f42:	e7e5      	b.n	401f10 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401f44:	460a      	mov	r2, r1
  401f46:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401f4a:	4b0e      	ldr	r3, [pc, #56]	; (401f84 <pio_configure_pin_group+0xd0>)
  401f4c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401f4e:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f52:	bf14      	ite	ne
  401f54:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401f56:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  401f58:	2001      	movs	r0, #1
  401f5a:	e7d9      	b.n	401f10 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401f5c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  401f60:	f004 0301 	and.w	r3, r4, #1
  401f64:	9300      	str	r3, [sp, #0]
  401f66:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401f6a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401f6e:	bf14      	ite	ne
  401f70:	2200      	movne	r2, #0
  401f72:	2201      	moveq	r2, #1
  401f74:	4631      	mov	r1, r6
  401f76:	4628      	mov	r0, r5
  401f78:	4c03      	ldr	r4, [pc, #12]	; (401f88 <pio_configure_pin_group+0xd4>)
  401f7a:	47a0      	blx	r4
	return 1;
  401f7c:	2001      	movs	r0, #1
		break;
  401f7e:	e7c7      	b.n	401f10 <pio_configure_pin_group+0x5c>
  401f80:	00401e53 	.word	0x00401e53
  401f84:	00401dc1 	.word	0x00401dc1
  401f88:	00401e85 	.word	0x00401e85

00401f8c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f90:	4681      	mov	r9, r0
  401f92:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f94:	4b12      	ldr	r3, [pc, #72]	; (401fe0 <pio_handler_process+0x54>)
  401f96:	4798      	blx	r3
  401f98:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f9a:	4648      	mov	r0, r9
  401f9c:	4b11      	ldr	r3, [pc, #68]	; (401fe4 <pio_handler_process+0x58>)
  401f9e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401fa0:	4005      	ands	r5, r0
  401fa2:	d013      	beq.n	401fcc <pio_handler_process+0x40>
  401fa4:	4c10      	ldr	r4, [pc, #64]	; (401fe8 <pio_handler_process+0x5c>)
  401fa6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401faa:	e003      	b.n	401fb4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401fac:	42b4      	cmp	r4, r6
  401fae:	d00d      	beq.n	401fcc <pio_handler_process+0x40>
  401fb0:	3410      	adds	r4, #16
		while (status != 0) {
  401fb2:	b15d      	cbz	r5, 401fcc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401fb4:	6820      	ldr	r0, [r4, #0]
  401fb6:	42b8      	cmp	r0, r7
  401fb8:	d1f8      	bne.n	401fac <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401fba:	6861      	ldr	r1, [r4, #4]
  401fbc:	4229      	tst	r1, r5
  401fbe:	d0f5      	beq.n	401fac <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fc0:	68e3      	ldr	r3, [r4, #12]
  401fc2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401fc4:	6863      	ldr	r3, [r4, #4]
  401fc6:	ea25 0503 	bic.w	r5, r5, r3
  401fca:	e7ef      	b.n	401fac <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401fcc:	4b07      	ldr	r3, [pc, #28]	; (401fec <pio_handler_process+0x60>)
  401fce:	681b      	ldr	r3, [r3, #0]
  401fd0:	b123      	cbz	r3, 401fdc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401fd2:	4b07      	ldr	r3, [pc, #28]	; (401ff0 <pio_handler_process+0x64>)
  401fd4:	681b      	ldr	r3, [r3, #0]
  401fd6:	b10b      	cbz	r3, 401fdc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401fd8:	4648      	mov	r0, r9
  401fda:	4798      	blx	r3
  401fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401fe0:	00401ead 	.word	0x00401ead
  401fe4:	00401eb1 	.word	0x00401eb1
  401fe8:	20006b44 	.word	0x20006b44
  401fec:	20013450 	.word	0x20013450
  401ff0:	20006bb4 	.word	0x20006bb4

00401ff4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401ff4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401ff6:	2109      	movs	r1, #9
  401ff8:	4801      	ldr	r0, [pc, #4]	; (402000 <PIOA_Handler+0xc>)
  401ffa:	4b02      	ldr	r3, [pc, #8]	; (402004 <PIOA_Handler+0x10>)
  401ffc:	4798      	blx	r3
  401ffe:	bd08      	pop	{r3, pc}
  402000:	400e0e00 	.word	0x400e0e00
  402004:	00401f8d 	.word	0x00401f8d

00402008 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402008:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40200a:	210a      	movs	r1, #10
  40200c:	4801      	ldr	r0, [pc, #4]	; (402014 <PIOB_Handler+0xc>)
  40200e:	4b02      	ldr	r3, [pc, #8]	; (402018 <PIOB_Handler+0x10>)
  402010:	4798      	blx	r3
  402012:	bd08      	pop	{r3, pc}
  402014:	400e1000 	.word	0x400e1000
  402018:	00401f8d 	.word	0x00401f8d

0040201c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40201c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40201e:	210b      	movs	r1, #11
  402020:	4801      	ldr	r0, [pc, #4]	; (402028 <PIOC_Handler+0xc>)
  402022:	4b02      	ldr	r3, [pc, #8]	; (40202c <PIOC_Handler+0x10>)
  402024:	4798      	blx	r3
  402026:	bd08      	pop	{r3, pc}
  402028:	400e1200 	.word	0x400e1200
  40202c:	00401f8d 	.word	0x00401f8d

00402030 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402030:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  402032:	210c      	movs	r1, #12
  402034:	4801      	ldr	r0, [pc, #4]	; (40203c <PIOD_Handler+0xc>)
  402036:	4b02      	ldr	r3, [pc, #8]	; (402040 <PIOD_Handler+0x10>)
  402038:	4798      	blx	r3
  40203a:	bd08      	pop	{r3, pc}
  40203c:	400e1400 	.word	0x400e1400
  402040:	00401f8d 	.word	0x00401f8d

00402044 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402044:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  402046:	210d      	movs	r1, #13
  402048:	4801      	ldr	r0, [pc, #4]	; (402050 <PIOE_Handler+0xc>)
  40204a:	4b02      	ldr	r3, [pc, #8]	; (402054 <PIOE_Handler+0x10>)
  40204c:	4798      	blx	r3
  40204e:	bd08      	pop	{r3, pc}
  402050:	400e1600 	.word	0x400e1600
  402054:	00401f8d 	.word	0x00401f8d

00402058 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402058:	4a17      	ldr	r2, [pc, #92]	; (4020b8 <pmc_switch_mck_to_pllack+0x60>)
  40205a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40205c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402060:	4318      	orrs	r0, r3
  402062:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402064:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402066:	f013 0f08 	tst.w	r3, #8
  40206a:	d10a      	bne.n	402082 <pmc_switch_mck_to_pllack+0x2a>
  40206c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402070:	4911      	ldr	r1, [pc, #68]	; (4020b8 <pmc_switch_mck_to_pllack+0x60>)
  402072:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402074:	f012 0f08 	tst.w	r2, #8
  402078:	d103      	bne.n	402082 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40207a:	3b01      	subs	r3, #1
  40207c:	d1f9      	bne.n	402072 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40207e:	2001      	movs	r0, #1
  402080:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402082:	4a0d      	ldr	r2, [pc, #52]	; (4020b8 <pmc_switch_mck_to_pllack+0x60>)
  402084:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402086:	f023 0303 	bic.w	r3, r3, #3
  40208a:	f043 0302 	orr.w	r3, r3, #2
  40208e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402090:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402092:	f013 0f08 	tst.w	r3, #8
  402096:	d10a      	bne.n	4020ae <pmc_switch_mck_to_pllack+0x56>
  402098:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40209c:	4906      	ldr	r1, [pc, #24]	; (4020b8 <pmc_switch_mck_to_pllack+0x60>)
  40209e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4020a0:	f012 0f08 	tst.w	r2, #8
  4020a4:	d105      	bne.n	4020b2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4020a6:	3b01      	subs	r3, #1
  4020a8:	d1f9      	bne.n	40209e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4020aa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4020ac:	4770      	bx	lr
	return 0;
  4020ae:	2000      	movs	r0, #0
  4020b0:	4770      	bx	lr
  4020b2:	2000      	movs	r0, #0
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	400e0400 	.word	0x400e0400

004020bc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4020bc:	b9c8      	cbnz	r0, 4020f2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020be:	4a11      	ldr	r2, [pc, #68]	; (402104 <pmc_switch_mainck_to_xtal+0x48>)
  4020c0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4020c2:	0209      	lsls	r1, r1, #8
  4020c4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4020c6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4020ca:	f023 0303 	bic.w	r3, r3, #3
  4020ce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4020d2:	f043 0301 	orr.w	r3, r3, #1
  4020d6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020d8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4020da:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020dc:	f013 0f01 	tst.w	r3, #1
  4020e0:	d0fb      	beq.n	4020da <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4020e2:	4a08      	ldr	r2, [pc, #32]	; (402104 <pmc_switch_mainck_to_xtal+0x48>)
  4020e4:	6a13      	ldr	r3, [r2, #32]
  4020e6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4020ee:	6213      	str	r3, [r2, #32]
  4020f0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4020f2:	4904      	ldr	r1, [pc, #16]	; (402104 <pmc_switch_mainck_to_xtal+0x48>)
  4020f4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4020f6:	4a04      	ldr	r2, [pc, #16]	; (402108 <pmc_switch_mainck_to_xtal+0x4c>)
  4020f8:	401a      	ands	r2, r3
  4020fa:	4b04      	ldr	r3, [pc, #16]	; (40210c <pmc_switch_mainck_to_xtal+0x50>)
  4020fc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4020fe:	620b      	str	r3, [r1, #32]
  402100:	4770      	bx	lr
  402102:	bf00      	nop
  402104:	400e0400 	.word	0x400e0400
  402108:	fec8fffc 	.word	0xfec8fffc
  40210c:	01370002 	.word	0x01370002

00402110 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402110:	4b02      	ldr	r3, [pc, #8]	; (40211c <pmc_osc_is_ready_mainck+0xc>)
  402112:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402114:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402118:	4770      	bx	lr
  40211a:	bf00      	nop
  40211c:	400e0400 	.word	0x400e0400

00402120 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402120:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402124:	4b01      	ldr	r3, [pc, #4]	; (40212c <pmc_disable_pllack+0xc>)
  402126:	629a      	str	r2, [r3, #40]	; 0x28
  402128:	4770      	bx	lr
  40212a:	bf00      	nop
  40212c:	400e0400 	.word	0x400e0400

00402130 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402130:	4b02      	ldr	r3, [pc, #8]	; (40213c <pmc_is_locked_pllack+0xc>)
  402132:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402134:	f000 0002 	and.w	r0, r0, #2
  402138:	4770      	bx	lr
  40213a:	bf00      	nop
  40213c:	400e0400 	.word	0x400e0400

00402140 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402140:	282f      	cmp	r0, #47	; 0x2f
  402142:	d81e      	bhi.n	402182 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402144:	281f      	cmp	r0, #31
  402146:	d80c      	bhi.n	402162 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402148:	4b11      	ldr	r3, [pc, #68]	; (402190 <pmc_enable_periph_clk+0x50>)
  40214a:	699a      	ldr	r2, [r3, #24]
  40214c:	2301      	movs	r3, #1
  40214e:	4083      	lsls	r3, r0
  402150:	4393      	bics	r3, r2
  402152:	d018      	beq.n	402186 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402154:	2301      	movs	r3, #1
  402156:	fa03 f000 	lsl.w	r0, r3, r0
  40215a:	4b0d      	ldr	r3, [pc, #52]	; (402190 <pmc_enable_periph_clk+0x50>)
  40215c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40215e:	2000      	movs	r0, #0
  402160:	4770      	bx	lr
		ul_id -= 32;
  402162:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402164:	4b0a      	ldr	r3, [pc, #40]	; (402190 <pmc_enable_periph_clk+0x50>)
  402166:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40216a:	2301      	movs	r3, #1
  40216c:	4083      	lsls	r3, r0
  40216e:	4393      	bics	r3, r2
  402170:	d00b      	beq.n	40218a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402172:	2301      	movs	r3, #1
  402174:	fa03 f000 	lsl.w	r0, r3, r0
  402178:	4b05      	ldr	r3, [pc, #20]	; (402190 <pmc_enable_periph_clk+0x50>)
  40217a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40217e:	2000      	movs	r0, #0
  402180:	4770      	bx	lr
		return 1;
  402182:	2001      	movs	r0, #1
  402184:	4770      	bx	lr
	return 0;
  402186:	2000      	movs	r0, #0
  402188:	4770      	bx	lr
  40218a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40218c:	4770      	bx	lr
  40218e:	bf00      	nop
  402190:	400e0400 	.word	0x400e0400

00402194 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402194:	282f      	cmp	r0, #47	; 0x2f
  402196:	d822      	bhi.n	4021de <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  402198:	281f      	cmp	r0, #31
  40219a:	d80e      	bhi.n	4021ba <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40219c:	4b11      	ldr	r3, [pc, #68]	; (4021e4 <pmc_disable_periph_clk+0x50>)
  40219e:	699a      	ldr	r2, [r3, #24]
  4021a0:	2301      	movs	r3, #1
  4021a2:	4083      	lsls	r3, r0
  4021a4:	4393      	bics	r3, r2
  4021a6:	d001      	beq.n	4021ac <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4021a8:	2000      	movs	r0, #0
  4021aa:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  4021ac:	2301      	movs	r3, #1
  4021ae:	fa03 f000 	lsl.w	r0, r3, r0
  4021b2:	4b0c      	ldr	r3, [pc, #48]	; (4021e4 <pmc_disable_periph_clk+0x50>)
  4021b4:	6158      	str	r0, [r3, #20]
	return 0;
  4021b6:	2000      	movs	r0, #0
  4021b8:	4770      	bx	lr
		ul_id -= 32;
  4021ba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4021bc:	4b09      	ldr	r3, [pc, #36]	; (4021e4 <pmc_disable_periph_clk+0x50>)
  4021be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4021c2:	2301      	movs	r3, #1
  4021c4:	4083      	lsls	r3, r0
  4021c6:	4393      	bics	r3, r2
  4021c8:	d001      	beq.n	4021ce <pmc_disable_periph_clk+0x3a>
	return 0;
  4021ca:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4021cc:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  4021ce:	2301      	movs	r3, #1
  4021d0:	fa03 f000 	lsl.w	r0, r3, r0
  4021d4:	4b03      	ldr	r3, [pc, #12]	; (4021e4 <pmc_disable_periph_clk+0x50>)
  4021d6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  4021da:	2000      	movs	r0, #0
  4021dc:	4770      	bx	lr
		return 1;
  4021de:	2001      	movs	r0, #1
  4021e0:	4770      	bx	lr
  4021e2:	bf00      	nop
  4021e4:	400e0400 	.word	0x400e0400

004021e8 <pmc_switch_udpck_to_pllack>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
  4021e8:	0200      	lsls	r0, r0, #8
  4021ea:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4021ee:	4b01      	ldr	r3, [pc, #4]	; (4021f4 <pmc_switch_udpck_to_pllack+0xc>)
  4021f0:	6398      	str	r0, [r3, #56]	; 0x38
  4021f2:	4770      	bx	lr
  4021f4:	400e0400 	.word	0x400e0400

004021f8 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4021f8:	2280      	movs	r2, #128	; 0x80
  4021fa:	4b01      	ldr	r3, [pc, #4]	; (402200 <pmc_enable_udpck+0x8>)
  4021fc:	601a      	str	r2, [r3, #0]
  4021fe:	4770      	bx	lr
  402200:	400e0400 	.word	0x400e0400

00402204 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  402204:	4b03      	ldr	r3, [pc, #12]	; (402214 <pmc_set_fast_startup_input+0x10>)
  402206:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  402208:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  40220c:	4310      	orrs	r0, r2
  40220e:	6718      	str	r0, [r3, #112]	; 0x70
  402210:	4770      	bx	lr
  402212:	bf00      	nop
  402214:	400e0400 	.word	0x400e0400

00402218 <pmc_set_flash_in_wait_mode>:
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
	ul_flash_in_wait_mode = ul_flash_state;
  402218:	4b01      	ldr	r3, [pc, #4]	; (402220 <pmc_set_flash_in_wait_mode+0x8>)
  40221a:	6018      	str	r0, [r3, #0]
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop
  402220:	200000cc 	.word	0x200000cc

00402224 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  402224:	4a11      	ldr	r2, [pc, #68]	; (40226c <pmc_enable_waitmode+0x48>)
  402226:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402228:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
  40222c:	4910      	ldr	r1, [pc, #64]	; (402270 <pmc_enable_waitmode+0x4c>)
  40222e:	6809      	ldr	r1, [r1, #0]
  402230:	430b      	orrs	r3, r1
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
#endif
	PMC->PMC_FSMR = i;
  402232:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  402234:	6a13      	ldr	r3, [r2, #32]
  402236:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40223a:	f043 0304 	orr.w	r3, r3, #4
  40223e:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402240:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402242:	f013 0f08 	tst.w	r3, #8
  402246:	d0fb      	beq.n	402240 <pmc_enable_waitmode+0x1c>
  402248:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40224c:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  40224e:	3b01      	subs	r3, #1
  402250:	d1fc      	bne.n	40224c <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  402252:	4a06      	ldr	r2, [pc, #24]	; (40226c <pmc_enable_waitmode+0x48>)
  402254:	6a13      	ldr	r3, [r2, #32]
  402256:	f013 0f08 	tst.w	r3, #8
  40225a:	d0fb      	beq.n	402254 <pmc_enable_waitmode+0x30>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40225c:	4a03      	ldr	r2, [pc, #12]	; (40226c <pmc_enable_waitmode+0x48>)
  40225e:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  402260:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  402268:	6713      	str	r3, [r2, #112]	; 0x70
  40226a:	4770      	bx	lr
  40226c:	400e0400 	.word	0x400e0400
  402270:	200000cc 	.word	0x200000cc

00402274 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  402274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  402278:	1e43      	subs	r3, r0, #1
  40227a:	2b04      	cmp	r3, #4
  40227c:	f200 8116 	bhi.w	4024ac <pmc_sleep+0x238>
  402280:	e8df f013 	tbh	[pc, r3, lsl #1]
  402284:	00050005 	.word	0x00050005
  402288:	00150015 	.word	0x00150015
  40228c:	0105      	.short	0x0105
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40228e:	4a88      	ldr	r2, [pc, #544]	; (4024b0 <pmc_sleep+0x23c>)
  402290:	6913      	ldr	r3, [r2, #16]
  402292:	f023 0304 	bic.w	r3, r3, #4
  402296:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  402298:	2201      	movs	r2, #1
  40229a:	4b86      	ldr	r3, [pc, #536]	; (4024b4 <pmc_sleep+0x240>)
  40229c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40229e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4022a2:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4022a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4022a8:	bf30      	wfi
  4022aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4022ae:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4022b0:	2803      	cmp	r0, #3
  4022b2:	bf0c      	ite	eq
  4022b4:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4022b6:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  4022ba:	4b7f      	ldr	r3, [pc, #508]	; (4024b8 <pmc_sleep+0x244>)
  4022bc:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4022be:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4022c0:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4022c4:	2200      	movs	r2, #0
  4022c6:	4b7b      	ldr	r3, [pc, #492]	; (4024b4 <pmc_sleep+0x240>)
  4022c8:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4022ca:	2201      	movs	r2, #1
  4022cc:	4b7b      	ldr	r3, [pc, #492]	; (4024bc <pmc_sleep+0x248>)
  4022ce:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4022d0:	4b7b      	ldr	r3, [pc, #492]	; (4024c0 <pmc_sleep+0x24c>)
  4022d2:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4022d4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4022d6:	4a7b      	ldr	r2, [pc, #492]	; (4024c4 <pmc_sleep+0x250>)
  4022d8:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4022dc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4022de:	f447 125c 	orr.w	r2, r7, #3604480	; 0x370000
  4022e2:	f042 0208 	orr.w	r2, r2, #8
  4022e6:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4022e8:	f005 0903 	and.w	r9, r5, #3
  4022ec:	f1b9 0f01 	cmp.w	r9, #1
  4022f0:	f240 808d 	bls.w	40240e <pmc_sleep+0x19a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4022f4:	f025 0103 	bic.w	r1, r5, #3
  4022f8:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4022fc:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4022fe:	461a      	mov	r2, r3
  402300:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402302:	f013 0f08 	tst.w	r3, #8
  402306:	d0fb      	beq.n	402300 <pmc_sleep+0x8c>
	if (mckr & PMC_MCKR_PRES_Msk) {
  402308:	f011 0f70 	tst.w	r1, #112	; 0x70
  40230c:	d008      	beq.n	402320 <pmc_sleep+0xac>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40230e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  402312:	4b6b      	ldr	r3, [pc, #428]	; (4024c0 <pmc_sleep+0x24c>)
  402314:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402316:	461a      	mov	r2, r3
  402318:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40231a:	f013 0f08 	tst.w	r3, #8
  40231e:	d0fb      	beq.n	402318 <pmc_sleep+0xa4>
	pmc_disable_pllack();
  402320:	4b69      	ldr	r3, [pc, #420]	; (4024c8 <pmc_sleep+0x254>)
  402322:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402324:	4a66      	ldr	r2, [pc, #408]	; (4024c0 <pmc_sleep+0x24c>)
  402326:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402328:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40232c:	d0fb      	beq.n	402326 <pmc_sleep+0xb2>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40232e:	4a64      	ldr	r2, [pc, #400]	; (4024c0 <pmc_sleep+0x24c>)
  402330:	6a13      	ldr	r3, [r2, #32]
  402332:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40233a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40233e:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402340:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402342:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402346:	d0fb      	beq.n	402340 <pmc_sleep+0xcc>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  402348:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  40234c:	4a5d      	ldr	r2, [pc, #372]	; (4024c4 <pmc_sleep+0x250>)
  40234e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  402350:	2c04      	cmp	r4, #4
  402352:	d05e      	beq.n	402412 <pmc_sleep+0x19e>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  402354:	4c57      	ldr	r4, [pc, #348]	; (4024b4 <pmc_sleep+0x240>)
  402356:	2301      	movs	r3, #1
  402358:	7023      	strb	r3, [r4, #0]
  40235a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40235e:	b662      	cpsie	i

		pmc_enable_waitmode();
  402360:	4b5a      	ldr	r3, [pc, #360]	; (4024cc <pmc_sleep+0x258>)
  402362:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  402364:	b672      	cpsid	i
  402366:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40236a:	2300      	movs	r3, #0
  40236c:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40236e:	f017 0f02 	tst.w	r7, #2
  402372:	d059      	beq.n	402428 <pmc_sleep+0x1b4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402374:	4a52      	ldr	r2, [pc, #328]	; (4024c0 <pmc_sleep+0x24c>)
  402376:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402378:	4955      	ldr	r1, [pc, #340]	; (4024d0 <pmc_sleep+0x25c>)
  40237a:	4019      	ands	r1, r3
  40237c:	4b55      	ldr	r3, [pc, #340]	; (4024d4 <pmc_sleep+0x260>)
  40237e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402380:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402382:	6a13      	ldr	r3, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  402384:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402388:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  40238c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402390:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  402392:	4b51      	ldr	r3, [pc, #324]	; (4024d8 <pmc_sleep+0x264>)
  402394:	4033      	ands	r3, r6
  402396:	2b00      	cmp	r3, #0
  402398:	d077      	beq.n	40248a <pmc_sleep+0x216>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40239a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40239e:	4b48      	ldr	r3, [pc, #288]	; (4024c0 <pmc_sleep+0x24c>)
  4023a0:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4023a2:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4023a4:	f1b9 0f02 	cmp.w	r9, #2
  4023a8:	d104      	bne.n	4023b4 <pmc_sleep+0x140>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4023aa:	4a45      	ldr	r2, [pc, #276]	; (4024c0 <pmc_sleep+0x24c>)
  4023ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023ae:	f013 0f02 	tst.w	r3, #2
  4023b2:	d0fb      	beq.n	4023ac <pmc_sleep+0x138>
	mckr = PMC->PMC_MCKR;
  4023b4:	4a42      	ldr	r2, [pc, #264]	; (4024c0 <pmc_sleep+0x24c>)
  4023b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4023bc:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4023c0:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4023c2:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4023c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023c6:	f013 0f08 	tst.w	r3, #8
  4023ca:	d0fb      	beq.n	4023c4 <pmc_sleep+0x150>
	EFC0->EEFC_FMR = fmr_setting;
  4023cc:	4b3d      	ldr	r3, [pc, #244]	; (4024c4 <pmc_sleep+0x250>)
  4023ce:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  4023d2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4023d6:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4023d8:	461a      	mov	r2, r3
  4023da:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023dc:	f013 0f08 	tst.w	r3, #8
  4023e0:	d0fb      	beq.n	4023da <pmc_sleep+0x166>
	while (!(PMC->PMC_SR & pll_sr));
  4023e2:	4a37      	ldr	r2, [pc, #220]	; (4024c0 <pmc_sleep+0x24c>)
  4023e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023e6:	420b      	tst	r3, r1
  4023e8:	d0fc      	beq.n	4023e4 <pmc_sleep+0x170>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4023ea:	2200      	movs	r2, #0
  4023ec:	4b33      	ldr	r3, [pc, #204]	; (4024bc <pmc_sleep+0x248>)
  4023ee:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4023f0:	4b3a      	ldr	r3, [pc, #232]	; (4024dc <pmc_sleep+0x268>)
  4023f2:	681b      	ldr	r3, [r3, #0]
  4023f4:	b11b      	cbz	r3, 4023fe <pmc_sleep+0x18a>
			callback_clocks_restored();
  4023f6:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4023f8:	2200      	movs	r2, #0
  4023fa:	4b38      	ldr	r3, [pc, #224]	; (4024dc <pmc_sleep+0x268>)
  4023fc:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4023fe:	2201      	movs	r2, #1
  402400:	4b2c      	ldr	r3, [pc, #176]	; (4024b4 <pmc_sleep+0x240>)
  402402:	701a      	strb	r2, [r3, #0]
  402404:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402408:	b662      	cpsie	i
  40240a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40240e:	4629      	mov	r1, r5
  402410:	e77a      	b.n	402308 <pmc_sleep+0x94>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402412:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  402416:	6a13      	ldr	r3, [r2, #32]
  402418:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40241c:	f023 0301 	bic.w	r3, r3, #1
  402420:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402424:	6213      	str	r3, [r2, #32]
  402426:	e795      	b.n	402354 <pmc_sleep+0xe0>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  402428:	f017 0f01 	tst.w	r7, #1
  40242c:	d0b1      	beq.n	402392 <pmc_sleep+0x11e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40242e:	4b24      	ldr	r3, [pc, #144]	; (4024c0 <pmc_sleep+0x24c>)
  402430:	6a1b      	ldr	r3, [r3, #32]
  402432:	f013 0f01 	tst.w	r3, #1
  402436:	d10e      	bne.n	402456 <pmc_sleep+0x1e2>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402438:	4a21      	ldr	r2, [pc, #132]	; (4024c0 <pmc_sleep+0x24c>)
  40243a:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  40243c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402440:	f023 0303 	bic.w	r3, r3, #3
  402444:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402448:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40244c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40244e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402450:	f013 0f01 	tst.w	r3, #1
  402454:	d0fb      	beq.n	40244e <pmc_sleep+0x1da>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  402456:	4b1a      	ldr	r3, [pc, #104]	; (4024c0 <pmc_sleep+0x24c>)
  402458:	6a1b      	ldr	r3, [r3, #32]
  40245a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40245e:	d10a      	bne.n	402476 <pmc_sleep+0x202>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402460:	4a17      	ldr	r2, [pc, #92]	; (4024c0 <pmc_sleep+0x24c>)
  402462:	6a13      	ldr	r3, [r2, #32]
  402464:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40246c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40246e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402470:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402474:	d0fb      	beq.n	40246e <pmc_sleep+0x1fa>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402476:	4a12      	ldr	r2, [pc, #72]	; (4024c0 <pmc_sleep+0x24c>)
  402478:	6a13      	ldr	r3, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  40247a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40247e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  402482:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402486:	6213      	str	r3, [r2, #32]
  402488:	e783      	b.n	402392 <pmc_sleep+0x11e>
	uint32_t pll_sr = 0;
  40248a:	2100      	movs	r1, #0
  40248c:	e78a      	b.n	4023a4 <pmc_sleep+0x130>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40248e:	4a08      	ldr	r2, [pc, #32]	; (4024b0 <pmc_sleep+0x23c>)
  402490:	6913      	ldr	r3, [r2, #16]
  402492:	f043 0304 	orr.w	r3, r3, #4
  402496:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  402498:	4a11      	ldr	r2, [pc, #68]	; (4024e0 <pmc_sleep+0x26c>)
  40249a:	4b12      	ldr	r3, [pc, #72]	; (4024e4 <pmc_sleep+0x270>)
  40249c:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40249e:	2201      	movs	r2, #1
  4024a0:	4b04      	ldr	r3, [pc, #16]	; (4024b4 <pmc_sleep+0x240>)
  4024a2:	701a      	strb	r2, [r3, #0]
  4024a4:	f3bf 8f5f 	dmb	sy
  4024a8:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4024aa:	bf30      	wfi
  4024ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4024b0:	e000ed00 	.word	0xe000ed00
  4024b4:	200000c8 	.word	0x200000c8
  4024b8:	00402219 	.word	0x00402219
  4024bc:	20006bb8 	.word	0x20006bb8
  4024c0:	400e0400 	.word	0x400e0400
  4024c4:	400e0a00 	.word	0x400e0a00
  4024c8:	00402121 	.word	0x00402121
  4024cc:	00402225 	.word	0x00402225
  4024d0:	fec8fffc 	.word	0xfec8fffc
  4024d4:	01370002 	.word	0x01370002
  4024d8:	07ff0000 	.word	0x07ff0000
  4024dc:	20006bbc 	.word	0x20006bbc
  4024e0:	a5000004 	.word	0xa5000004
  4024e4:	400e1810 	.word	0x400e1810

004024e8 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4024e8:	4b02      	ldr	r3, [pc, #8]	; (4024f4 <pmc_is_wakeup_clocks_restored+0xc>)
  4024ea:	7818      	ldrb	r0, [r3, #0]
}
  4024ec:	f080 0001 	eor.w	r0, r0, #1
  4024f0:	4770      	bx	lr
  4024f2:	bf00      	nop
  4024f4:	20006bb8 	.word	0x20006bb8

004024f8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4024f8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4024fa:	23ac      	movs	r3, #172	; 0xac
  4024fc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4024fe:	680b      	ldr	r3, [r1, #0]
  402500:	684a      	ldr	r2, [r1, #4]
  402502:	fbb3 f3f2 	udiv	r3, r3, r2
  402506:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402508:	1e5c      	subs	r4, r3, #1
  40250a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40250e:	4294      	cmp	r4, r2
  402510:	d80c      	bhi.n	40252c <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  402512:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402514:	688b      	ldr	r3, [r1, #8]
  402516:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402518:	f240 2302 	movw	r3, #514	; 0x202
  40251c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402520:	2350      	movs	r3, #80	; 0x50
  402522:	6003      	str	r3, [r0, #0]

	return 0;
  402524:	2000      	movs	r0, #0
}
  402526:	f85d 4b04 	ldr.w	r4, [sp], #4
  40252a:	4770      	bx	lr
		return 1;
  40252c:	2001      	movs	r0, #1
  40252e:	e7fa      	b.n	402526 <uart_init+0x2e>

00402530 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402530:	6943      	ldr	r3, [r0, #20]
  402532:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402536:	bf1a      	itte	ne
  402538:	61c1      	strne	r1, [r0, #28]
	return 0;
  40253a:	2000      	movne	r0, #0
		return 1;
  40253c:	2001      	moveq	r0, #1
}
  40253e:	4770      	bx	lr

00402540 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402540:	6943      	ldr	r3, [r0, #20]
  402542:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402546:	bf1d      	ittte	ne
  402548:	6983      	ldrne	r3, [r0, #24]
  40254a:	700b      	strbne	r3, [r1, #0]
	return 0;
  40254c:	2000      	movne	r0, #0
		return 1;
  40254e:	2001      	moveq	r0, #1
}
  402550:	4770      	bx	lr
	...

00402554 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  402554:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  402556:	4601      	mov	r1, r0
  402558:	bb28      	cbnz	r0, 4025a6 <udd_sleep_mode+0x52>
  40255a:	4b24      	ldr	r3, [pc, #144]	; (4025ec <udd_sleep_mode+0x98>)
  40255c:	781b      	ldrb	r3, [r3, #0]
  40255e:	b91b      	cbnz	r3, 402568 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  402560:	4b22      	ldr	r3, [pc, #136]	; (4025ec <udd_sleep_mode+0x98>)
  402562:	7019      	strb	r1, [r3, #0]
}
  402564:	b002      	add	sp, #8
  402566:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  402568:	4b21      	ldr	r3, [pc, #132]	; (4025f0 <udd_sleep_mode+0x9c>)
  40256a:	789b      	ldrb	r3, [r3, #2]
  40256c:	b903      	cbnz	r3, 402570 <udd_sleep_mode+0x1c>
  40256e:	e7fe      	b.n	40256e <udd_sleep_mode+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402570:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402574:	fab3 f383 	clz	r3, r3
  402578:	095b      	lsrs	r3, r3, #5
  40257a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40257c:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40257e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402582:	2200      	movs	r2, #0
  402584:	4b1b      	ldr	r3, [pc, #108]	; (4025f4 <udd_sleep_mode+0xa0>)
  402586:	701a      	strb	r2, [r3, #0]
	return flags;
  402588:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  40258a:	4a19      	ldr	r2, [pc, #100]	; (4025f0 <udd_sleep_mode+0x9c>)
  40258c:	7893      	ldrb	r3, [r2, #2]
  40258e:	3b01      	subs	r3, #1
  402590:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402592:	2800      	cmp	r0, #0
  402594:	d0e4      	beq.n	402560 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  402596:	2201      	movs	r2, #1
  402598:	4b16      	ldr	r3, [pc, #88]	; (4025f4 <udd_sleep_mode+0xa0>)
  40259a:	701a      	strb	r2, [r3, #0]
  40259c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025a0:	b662      	cpsie	i
  4025a2:	e7dd      	b.n	402560 <udd_sleep_mode+0xc>
  4025a4:	e7fe      	b.n	4025a4 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  4025a6:	4b11      	ldr	r3, [pc, #68]	; (4025ec <udd_sleep_mode+0x98>)
  4025a8:	781b      	ldrb	r3, [r3, #0]
  4025aa:	2b00      	cmp	r3, #0
  4025ac:	d1d8      	bne.n	402560 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  4025ae:	4b10      	ldr	r3, [pc, #64]	; (4025f0 <udd_sleep_mode+0x9c>)
  4025b0:	789b      	ldrb	r3, [r3, #2]
  4025b2:	2bff      	cmp	r3, #255	; 0xff
  4025b4:	d0f6      	beq.n	4025a4 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4025b6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4025ba:	fab3 f383 	clz	r3, r3
  4025be:	095b      	lsrs	r3, r3, #5
  4025c0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4025c2:	b672      	cpsid	i
  4025c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4025c8:	2200      	movs	r2, #0
  4025ca:	4b0a      	ldr	r3, [pc, #40]	; (4025f4 <udd_sleep_mode+0xa0>)
  4025cc:	701a      	strb	r2, [r3, #0]
	return flags;
  4025ce:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  4025d0:	4a07      	ldr	r2, [pc, #28]	; (4025f0 <udd_sleep_mode+0x9c>)
  4025d2:	7893      	ldrb	r3, [r2, #2]
  4025d4:	3301      	adds	r3, #1
  4025d6:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4025d8:	2800      	cmp	r0, #0
  4025da:	d0c1      	beq.n	402560 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4025dc:	2201      	movs	r2, #1
  4025de:	4b05      	ldr	r3, [pc, #20]	; (4025f4 <udd_sleep_mode+0xa0>)
  4025e0:	701a      	strb	r2, [r3, #0]
  4025e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025e6:	b662      	cpsie	i
  4025e8:	e7ba      	b.n	402560 <udd_sleep_mode+0xc>
  4025ea:	bf00      	nop
  4025ec:	20006bc1 	.word	0x20006bc1
  4025f0:	2001343c 	.word	0x2001343c
  4025f4:	200000c8 	.word	0x200000c8

004025f8 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4025f8:	4a03      	ldr	r2, [pc, #12]	; (402608 <udd_ctrl_init+0x10>)
  4025fa:	2300      	movs	r3, #0
  4025fc:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4025fe:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  402600:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  402602:	4a02      	ldr	r2, [pc, #8]	; (40260c <udd_ctrl_init+0x14>)
  402604:	7013      	strb	r3, [r2, #0]
  402606:	4770      	bx	lr
  402608:	20013454 	.word	0x20013454
  40260c:	20006bc6 	.word	0x20006bc6

00402610 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  402610:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  402612:	2205      	movs	r2, #5
  402614:	4b0a      	ldr	r3, [pc, #40]	; (402640 <udd_ctrl_stall_data+0x30>)
  402616:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  402618:	4a0a      	ldr	r2, [pc, #40]	; (402644 <udd_ctrl_stall_data+0x34>)
  40261a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40261c:	9301      	str	r3, [sp, #4]
  40261e:	9b01      	ldr	r3, [sp, #4]
  402620:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402624:	9301      	str	r3, [sp, #4]
  402626:	9b01      	ldr	r3, [sp, #4]
  402628:	f043 0320 	orr.w	r3, r3, #32
  40262c:	9301      	str	r3, [sp, #4]
  40262e:	9b01      	ldr	r3, [sp, #4]
  402630:	6313      	str	r3, [r2, #48]	; 0x30
  402632:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402634:	f013 0f20 	tst.w	r3, #32
  402638:	d0fb      	beq.n	402632 <udd_ctrl_stall_data+0x22>
}
  40263a:	b002      	add	sp, #8
  40263c:	4770      	bx	lr
  40263e:	bf00      	nop
  402640:	20006bc6 	.word	0x20006bc6
  402644:	40084000 	.word	0x40084000

00402648 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  402648:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40264a:	2203      	movs	r2, #3
  40264c:	4b0a      	ldr	r3, [pc, #40]	; (402678 <udd_ctrl_send_zlp_in+0x30>)
  40264e:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  402650:	4a0a      	ldr	r2, [pc, #40]	; (40267c <udd_ctrl_send_zlp_in+0x34>)
  402652:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402654:	9301      	str	r3, [sp, #4]
  402656:	9b01      	ldr	r3, [sp, #4]
  402658:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40265c:	9301      	str	r3, [sp, #4]
  40265e:	9b01      	ldr	r3, [sp, #4]
  402660:	f043 0310 	orr.w	r3, r3, #16
  402664:	9301      	str	r3, [sp, #4]
  402666:	9b01      	ldr	r3, [sp, #4]
  402668:	6313      	str	r3, [r2, #48]	; 0x30
  40266a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40266c:	f013 0f10 	tst.w	r3, #16
  402670:	d0fb      	beq.n	40266a <udd_ctrl_send_zlp_in+0x22>
}
  402672:	b002      	add	sp, #8
  402674:	4770      	bx	lr
  402676:	bf00      	nop
  402678:	20006bc6 	.word	0x20006bc6
  40267c:	40084000 	.word	0x40084000

00402680 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  402680:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  402682:	4b02      	ldr	r3, [pc, #8]	; (40268c <udd_ctrl_endofrequest+0xc>)
  402684:	691b      	ldr	r3, [r3, #16]
  402686:	b103      	cbz	r3, 40268a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  402688:	4798      	blx	r3
  40268a:	bd08      	pop	{r3, pc}
  40268c:	20013454 	.word	0x20013454

00402690 <udd_ctrl_in_sent>:
{
  402690:	b530      	push	{r4, r5, lr}
  402692:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  402694:	4b63      	ldr	r3, [pc, #396]	; (402824 <udd_ctrl_in_sent+0x194>)
  402696:	781b      	ldrb	r3, [r3, #0]
  402698:	2b03      	cmp	r3, #3
  40269a:	d029      	beq.n	4026f0 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  40269c:	4b62      	ldr	r3, [pc, #392]	; (402828 <udd_ctrl_in_sent+0x198>)
  40269e:	881b      	ldrh	r3, [r3, #0]
  4026a0:	4a62      	ldr	r2, [pc, #392]	; (40282c <udd_ctrl_in_sent+0x19c>)
  4026a2:	8994      	ldrh	r4, [r2, #12]
  4026a4:	1ae4      	subs	r4, r4, r3
  4026a6:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4026a8:	2c00      	cmp	r4, #0
  4026aa:	d144      	bne.n	402736 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4026ac:	4a60      	ldr	r2, [pc, #384]	; (402830 <udd_ctrl_in_sent+0x1a0>)
  4026ae:	8811      	ldrh	r1, [r2, #0]
  4026b0:	440b      	add	r3, r1
  4026b2:	b29b      	uxth	r3, r3
  4026b4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4026b6:	4a5d      	ldr	r2, [pc, #372]	; (40282c <udd_ctrl_in_sent+0x19c>)
  4026b8:	88d2      	ldrh	r2, [r2, #6]
  4026ba:	429a      	cmp	r2, r3
  4026bc:	d003      	beq.n	4026c6 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  4026be:	4b5d      	ldr	r3, [pc, #372]	; (402834 <udd_ctrl_in_sent+0x1a4>)
  4026c0:	781b      	ldrb	r3, [r3, #0]
  4026c2:	2b00      	cmp	r3, #0
  4026c4:	d02b      	beq.n	40271e <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4026c6:	2204      	movs	r2, #4
  4026c8:	4b56      	ldr	r3, [pc, #344]	; (402824 <udd_ctrl_in_sent+0x194>)
  4026ca:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  4026cc:	4a5a      	ldr	r2, [pc, #360]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  4026ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026d0:	9301      	str	r3, [sp, #4]
  4026d2:	9b01      	ldr	r3, [sp, #4]
  4026d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026d8:	9301      	str	r3, [sp, #4]
  4026da:	9b01      	ldr	r3, [sp, #4]
  4026dc:	f023 0301 	bic.w	r3, r3, #1
  4026e0:	9301      	str	r3, [sp, #4]
  4026e2:	9b01      	ldr	r3, [sp, #4]
  4026e4:	6313      	str	r3, [r2, #48]	; 0x30
  4026e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026e8:	f013 0f01 	tst.w	r3, #1
  4026ec:	d1fb      	bne.n	4026e6 <udd_ctrl_in_sent+0x56>
  4026ee:	e014      	b.n	40271a <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  4026f0:	4a51      	ldr	r2, [pc, #324]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  4026f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026f4:	9300      	str	r3, [sp, #0]
  4026f6:	9b00      	ldr	r3, [sp, #0]
  4026f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026fc:	9300      	str	r3, [sp, #0]
  4026fe:	9b00      	ldr	r3, [sp, #0]
  402700:	f023 0301 	bic.w	r3, r3, #1
  402704:	9300      	str	r3, [sp, #0]
  402706:	9b00      	ldr	r3, [sp, #0]
  402708:	6313      	str	r3, [r2, #48]	; 0x30
  40270a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40270c:	f013 0f01 	tst.w	r3, #1
  402710:	d1fb      	bne.n	40270a <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  402712:	4b4a      	ldr	r3, [pc, #296]	; (40283c <udd_ctrl_in_sent+0x1ac>)
  402714:	4798      	blx	r3
		udd_ctrl_init();
  402716:	4b4a      	ldr	r3, [pc, #296]	; (402840 <udd_ctrl_in_sent+0x1b0>)
  402718:	4798      	blx	r3
}
  40271a:	b007      	add	sp, #28
  40271c:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  40271e:	4b43      	ldr	r3, [pc, #268]	; (40282c <udd_ctrl_in_sent+0x19c>)
  402720:	695b      	ldr	r3, [r3, #20]
  402722:	2b00      	cmp	r3, #0
  402724:	d05d      	beq.n	4027e2 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  402726:	4798      	blx	r3
  402728:	2800      	cmp	r0, #0
  40272a:	d05a      	beq.n	4027e2 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  40272c:	2200      	movs	r2, #0
  40272e:	4b3e      	ldr	r3, [pc, #248]	; (402828 <udd_ctrl_in_sent+0x198>)
  402730:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  402732:	4b3e      	ldr	r3, [pc, #248]	; (40282c <udd_ctrl_in_sent+0x19c>)
  402734:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  402736:	2c3f      	cmp	r4, #63	; 0x3f
  402738:	d953      	bls.n	4027e2 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  40273a:	2200      	movs	r2, #0
  40273c:	4b3d      	ldr	r3, [pc, #244]	; (402834 <udd_ctrl_in_sent+0x1a4>)
  40273e:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  402740:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402742:	4b3a      	ldr	r3, [pc, #232]	; (40282c <udd_ctrl_in_sent+0x19c>)
  402744:	6899      	ldr	r1, [r3, #8]
  402746:	4b38      	ldr	r3, [pc, #224]	; (402828 <udd_ctrl_in_sent+0x198>)
  402748:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40274a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40274e:	fab3 f383 	clz	r3, r3
  402752:	095b      	lsrs	r3, r3, #5
  402754:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402756:	b672      	cpsid	i
  402758:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40275c:	2200      	movs	r2, #0
  40275e:	4b39      	ldr	r3, [pc, #228]	; (402844 <udd_ctrl_in_sent+0x1b4>)
  402760:	701a      	strb	r2, [r3, #0]
	return flags;
  402762:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  402764:	4b34      	ldr	r3, [pc, #208]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  402766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402768:	f013 0f02 	tst.w	r3, #2
  40276c:	d13d      	bne.n	4027ea <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  40276e:	b14c      	cbz	r4, 402784 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402770:	4401      	add	r1, r0
  402772:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  402774:	4830      	ldr	r0, [pc, #192]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  402776:	f812 3b01 	ldrb.w	r3, [r2], #1
  40277a:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  40277c:	1a53      	subs	r3, r2, r1
  40277e:	b2db      	uxtb	r3, r3
  402780:	42a3      	cmp	r3, r4
  402782:	d3f8      	bcc.n	402776 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  402784:	4b28      	ldr	r3, [pc, #160]	; (402828 <udd_ctrl_in_sent+0x198>)
  402786:	881a      	ldrh	r2, [r3, #0]
  402788:	4414      	add	r4, r2
  40278a:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  40278c:	4a2a      	ldr	r2, [pc, #168]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  40278e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402790:	9303      	str	r3, [sp, #12]
  402792:	9b03      	ldr	r3, [sp, #12]
  402794:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402798:	9303      	str	r3, [sp, #12]
  40279a:	9b03      	ldr	r3, [sp, #12]
  40279c:	f043 0310 	orr.w	r3, r3, #16
  4027a0:	9303      	str	r3, [sp, #12]
  4027a2:	9b03      	ldr	r3, [sp, #12]
  4027a4:	6313      	str	r3, [r2, #48]	; 0x30
  4027a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027a8:	f013 0f10 	tst.w	r3, #16
  4027ac:	d0fb      	beq.n	4027a6 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  4027ae:	4a22      	ldr	r2, [pc, #136]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  4027b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027b2:	9304      	str	r3, [sp, #16]
  4027b4:	9b04      	ldr	r3, [sp, #16]
  4027b6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4027ba:	9304      	str	r3, [sp, #16]
  4027bc:	9b04      	ldr	r3, [sp, #16]
  4027be:	f023 0301 	bic.w	r3, r3, #1
  4027c2:	9304      	str	r3, [sp, #16]
  4027c4:	9b04      	ldr	r3, [sp, #16]
  4027c6:	6313      	str	r3, [r2, #48]	; 0x30
  4027c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027ca:	f013 0f01 	tst.w	r3, #1
  4027ce:	d1fb      	bne.n	4027c8 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  4027d0:	2d00      	cmp	r5, #0
  4027d2:	d0a2      	beq.n	40271a <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  4027d4:	2201      	movs	r2, #1
  4027d6:	4b1b      	ldr	r3, [pc, #108]	; (402844 <udd_ctrl_in_sent+0x1b4>)
  4027d8:	701a      	strb	r2, [r3, #0]
  4027da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4027de:	b662      	cpsie	i
  4027e0:	e79b      	b.n	40271a <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  4027e2:	2201      	movs	r2, #1
  4027e4:	4b13      	ldr	r3, [pc, #76]	; (402834 <udd_ctrl_in_sent+0x1a4>)
  4027e6:	701a      	strb	r2, [r3, #0]
  4027e8:	e7ab      	b.n	402742 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  4027ea:	b12d      	cbz	r5, 4027f8 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  4027ec:	2201      	movs	r2, #1
  4027ee:	4b15      	ldr	r3, [pc, #84]	; (402844 <udd_ctrl_in_sent+0x1b4>)
  4027f0:	701a      	strb	r2, [r3, #0]
  4027f2:	f3bf 8f5f 	dmb	sy
  4027f6:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4027f8:	2204      	movs	r2, #4
  4027fa:	4b0a      	ldr	r3, [pc, #40]	; (402824 <udd_ctrl_in_sent+0x194>)
  4027fc:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4027fe:	4a0e      	ldr	r2, [pc, #56]	; (402838 <udd_ctrl_in_sent+0x1a8>)
  402800:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402802:	9302      	str	r3, [sp, #8]
  402804:	9b02      	ldr	r3, [sp, #8]
  402806:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40280a:	9302      	str	r3, [sp, #8]
  40280c:	9b02      	ldr	r3, [sp, #8]
  40280e:	f023 0301 	bic.w	r3, r3, #1
  402812:	9302      	str	r3, [sp, #8]
  402814:	9b02      	ldr	r3, [sp, #8]
  402816:	6313      	str	r3, [r2, #48]	; 0x30
  402818:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40281a:	f013 0f01 	tst.w	r3, #1
  40281e:	d1fb      	bne.n	402818 <udd_ctrl_in_sent+0x188>
  402820:	e77b      	b.n	40271a <udd_ctrl_in_sent+0x8a>
  402822:	bf00      	nop
  402824:	20006bc6 	.word	0x20006bc6
  402828:	20006bc2 	.word	0x20006bc2
  40282c:	20013454 	.word	0x20013454
  402830:	20006bc4 	.word	0x20006bc4
  402834:	20006bc0 	.word	0x20006bc0
  402838:	40084000 	.word	0x40084000
  40283c:	00402681 	.word	0x00402681
  402840:	004025f9 	.word	0x004025f9
  402844:	200000c8 	.word	0x200000c8

00402848 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  402848:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  40284a:	7c43      	ldrb	r3, [r0, #17]
  40284c:	f013 0f10 	tst.w	r3, #16
  402850:	d016      	beq.n	402880 <udd_ep_finish_job+0x38>
  402852:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  402854:	7c43      	ldrb	r3, [r0, #17]
  402856:	f36f 1304 	bfc	r3, #4, #1
  40285a:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  40285c:	6804      	ldr	r4, [r0, #0]
  40285e:	b17c      	cbz	r4, 402880 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  402860:	f102 030c 	add.w	r3, r2, #12
  402864:	4907      	ldr	r1, [pc, #28]	; (402884 <udd_ep_finish_job+0x3c>)
  402866:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40286a:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  40286e:	bf18      	it	ne
  402870:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  402874:	6881      	ldr	r1, [r0, #8]
  402876:	2d01      	cmp	r5, #1
  402878:	bf14      	ite	ne
  40287a:	2000      	movne	r0, #0
  40287c:	2001      	moveq	r0, #1
  40287e:	47a0      	blx	r4
  402880:	bd38      	pop	{r3, r4, r5, pc}
  402882:	bf00      	nop
  402884:	40084000 	.word	0x40084000

00402888 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  402888:	b430      	push	{r4, r5}
  40288a:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40288c:	1e41      	subs	r1, r0, #1
  40288e:	0083      	lsls	r3, r0, #2
  402890:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402894:	f503 2300 	add.w	r3, r3, #524288	; 0x80000

	bank0_received = Is_udd_bank0_received(ep);
  402898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  40289a:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  40289c:	f012 0f02 	tst.w	r2, #2
  4028a0:	d032      	beq.n	402908 <udd_ep_ack_out_received+0x80>
  4028a2:	f014 0f40 	tst.w	r4, #64	; 0x40
  4028a6:	d108      	bne.n	4028ba <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  4028a8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4028ac:	4c2a      	ldr	r4, [pc, #168]	; (402958 <udd_ep_ack_out_received+0xd0>)
  4028ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4028b2:	7c54      	ldrb	r4, [r2, #17]
  4028b4:	f36f 0483 	bfc	r4, #2, #2
  4028b8:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  4028ba:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4028be:	4c26      	ldr	r4, [pc, #152]	; (402958 <udd_ep_ack_out_received+0xd0>)
  4028c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4028c4:	7c52      	ldrb	r2, [r2, #17]
  4028c6:	f012 0f0c 	tst.w	r2, #12
  4028ca:	d128      	bne.n	40291e <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  4028cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028ce:	9200      	str	r2, [sp, #0]
  4028d0:	9a00      	ldr	r2, [sp, #0]
  4028d2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4028d6:	9200      	str	r2, [sp, #0]
  4028d8:	9a00      	ldr	r2, [sp, #0]
  4028da:	f022 0202 	bic.w	r2, r2, #2
  4028de:	9200      	str	r2, [sp, #0]
  4028e0:	9a00      	ldr	r2, [sp, #0]
  4028e2:	631a      	str	r2, [r3, #48]	; 0x30
  4028e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028e6:	f012 0f02 	tst.w	r2, #2
  4028ea:	d1fb      	bne.n	4028e4 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4028ec:	b380      	cbz	r0, 402950 <udd_ep_ack_out_received+0xc8>
  4028ee:	2803      	cmp	r0, #3
  4028f0:	d02e      	beq.n	402950 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  4028f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4028f6:	4b18      	ldr	r3, [pc, #96]	; (402958 <udd_ep_ack_out_received+0xd0>)
  4028f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4028fc:	7c5a      	ldrb	r2, [r3, #17]
  4028fe:	2101      	movs	r1, #1
  402900:	f361 0283 	bfi	r2, r1, #2, #2
  402904:	745a      	strb	r2, [r3, #17]
  402906:	e023      	b.n	402950 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  402908:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40290c:	4c12      	ldr	r4, [pc, #72]	; (402958 <udd_ep_ack_out_received+0xd0>)
  40290e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  402912:	7c54      	ldrb	r4, [r2, #17]
  402914:	2501      	movs	r5, #1
  402916:	f365 0483 	bfi	r4, r5, #2, #2
  40291a:	7454      	strb	r4, [r2, #17]
  40291c:	e7cd      	b.n	4028ba <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402920:	9201      	str	r2, [sp, #4]
  402922:	9a01      	ldr	r2, [sp, #4]
  402924:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402928:	9201      	str	r2, [sp, #4]
  40292a:	9a01      	ldr	r2, [sp, #4]
  40292c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  402930:	9201      	str	r2, [sp, #4]
  402932:	9a01      	ldr	r2, [sp, #4]
  402934:	631a      	str	r2, [r3, #48]	; 0x30
  402936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402938:	f012 0f40 	tst.w	r2, #64	; 0x40
  40293c:	d1fb      	bne.n	402936 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  40293e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402942:	4b05      	ldr	r3, [pc, #20]	; (402958 <udd_ep_ack_out_received+0xd0>)
  402944:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  402948:	7c4b      	ldrb	r3, [r1, #17]
  40294a:	f36f 0383 	bfc	r3, #2, #2
  40294e:	744b      	strb	r3, [r1, #17]
	}
}
  402950:	b002      	add	sp, #8
  402952:	bc30      	pop	{r4, r5}
  402954:	4770      	bx	lr
  402956:	bf00      	nop
  402958:	20006bc8 	.word	0x20006bc8

0040295c <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  40295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402960:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  402962:	4682      	mov	sl, r0
  402964:	1e47      	subs	r7, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  402966:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40296a:	4b67      	ldr	r3, [pc, #412]	; (402b08 <udd_ep_in_sent+0x1ac>)
  40296c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402970:	f893 9011 	ldrb.w	r9, [r3, #17]
  402974:	f3c9 0981 	ubfx	r9, r9, #2, #2
  402978:	2800      	cmp	r0, #0
  40297a:	f000 80b9 	beq.w	402af0 <udd_ep_in_sent+0x194>
  40297e:	2803      	cmp	r0, #3
  402980:	bf0c      	ite	eq
  402982:	2301      	moveq	r3, #1
  402984:	2302      	movne	r3, #2
  402986:	454b      	cmp	r3, r9
  402988:	f340 80b4 	ble.w	402af4 <udd_ep_in_sent+0x198>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  40298c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  402990:	4a5d      	ldr	r2, [pc, #372]	; (402b08 <udd_ep_in_sent+0x1ac>)
  402992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402996:	68dd      	ldr	r5, [r3, #12]
  402998:	f8d3 c008 	ldr.w	ip, [r3, #8]
  40299c:	4565      	cmp	r5, ip
  40299e:	d308      	bcc.n	4029b2 <udd_ep_in_sent+0x56>
  4029a0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4029a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4029a8:	7c5b      	ldrb	r3, [r3, #17]
  4029aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4029ae:	f000 80a5 	beq.w	402afc <udd_ep_in_sent+0x1a0>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4029b2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4029b6:	4a54      	ldr	r2, [pc, #336]	; (402b08 <udd_ep_in_sent+0x1ac>)
  4029b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4029bc:	685c      	ldr	r4, [r3, #4]
  4029be:	442c      	add	r4, r5
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4029c0:	ebac 0e05 	sub.w	lr, ip, r5
	uint32_t pkt_size = ptr_job->size;
  4029c4:	8a1a      	ldrh	r2, [r3, #16]
  4029c6:	f3c2 0609 	ubfx	r6, r2, #0, #10
	if (nb_remain < pkt_size) {
  4029ca:	45b6      	cmp	lr, r6
		pkt_size = nb_remain;
  4029cc:	bf3a      	itte	cc
  4029ce:	4676      	movcc	r6, lr
		is_short_pkt = true;
  4029d0:	f04f 0801 	movcc.w	r8, #1
	bool is_short_pkt = false;
  4029d4:	f04f 0800 	movcs.w	r8, #0
	ptr_job->buf_cnt += pkt_size;
  4029d8:	eb05 0e06 	add.w	lr, r5, r6
  4029dc:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  4029e0:	4a49      	ldr	r2, [pc, #292]	; (402b08 <udd_ep_in_sent+0x1ac>)
  4029e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4029e6:	f8c3 e00c 	str.w	lr, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4029ea:	2e07      	cmp	r6, #7
  4029ec:	d933      	bls.n	402a56 <udd_ep_in_sent+0xfa>
  4029ee:	f104 0308 	add.w	r3, r4, #8
  4029f2:	4635      	mov	r5, r6
  4029f4:	0082      	lsls	r2, r0, #2
  4029f6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4029fa:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4029fe:	f813 bc08 	ldrb.w	fp, [r3, #-8]
  402a02:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a06:	f813 bc07 	ldrb.w	fp, [r3, #-7]
  402a0a:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a0e:	f813 bc06 	ldrb.w	fp, [r3, #-6]
  402a12:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a16:	f813 bc05 	ldrb.w	fp, [r3, #-5]
  402a1a:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a1e:	f813 bc04 	ldrb.w	fp, [r3, #-4]
  402a22:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a26:	f813 bc03 	ldrb.w	fp, [r3, #-3]
  402a2a:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a2e:	f813 bc02 	ldrb.w	fp, [r3, #-2]
  402a32:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a36:	f813 bc01 	ldrb.w	fp, [r3, #-1]
  402a3a:	f8c2 b050 	str.w	fp, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  402a3e:	3d08      	subs	r5, #8
  402a40:	3308      	adds	r3, #8
  402a42:	2d07      	cmp	r5, #7
  402a44:	d8db      	bhi.n	4029fe <udd_ep_in_sent+0xa2>
  402a46:	f1a6 0308 	sub.w	r3, r6, #8
  402a4a:	f023 0307 	bic.w	r3, r3, #7
  402a4e:	3308      	adds	r3, #8
  402a50:	441c      	add	r4, r3
  402a52:	f006 0607 	and.w	r6, r6, #7
	for (; pkt_size; pkt_size--) {
  402a56:	b14e      	cbz	r6, 402a6c <udd_ep_in_sent+0x110>
  402a58:	19a2      	adds	r2, r4, r6
		udd_endpoint_fifo_write(ep, *ptr_src++);
  402a5a:	4d2c      	ldr	r5, [pc, #176]	; (402b0c <udd_ep_in_sent+0x1b0>)
  402a5c:	f10a 0a14 	add.w	sl, sl, #20
  402a60:	f814 3b01 	ldrb.w	r3, [r4], #1
  402a64:	f845 302a 	str.w	r3, [r5, sl, lsl #2]
	for (; pkt_size; pkt_size--) {
  402a68:	4294      	cmp	r4, r2
  402a6a:	d1f9      	bne.n	402a60 <udd_ep_in_sent+0x104>
	ptr_job->bank++;
  402a6c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  402a70:	4a25      	ldr	r2, [pc, #148]	; (402b08 <udd_ep_in_sent+0x1ac>)
  402a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402a76:	f109 0901 	add.w	r9, r9, #1
  402a7a:	7c5a      	ldrb	r2, [r3, #17]
  402a7c:	f369 0283 	bfi	r2, r9, #2, #2
  402a80:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  402a82:	b1a1      	cbz	r1, 402aae <udd_ep_in_sent+0x152>
  402a84:	0080      	lsls	r0, r0, #2
  402a86:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  402a8a:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
		udd_set_transmit_ready(ep);
  402a8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402a90:	9301      	str	r3, [sp, #4]
  402a92:	9b01      	ldr	r3, [sp, #4]
  402a94:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a98:	9301      	str	r3, [sp, #4]
  402a9a:	9b01      	ldr	r3, [sp, #4]
  402a9c:	f043 0310 	orr.w	r3, r3, #16
  402aa0:	9301      	str	r3, [sp, #4]
  402aa2:	9b01      	ldr	r3, [sp, #4]
  402aa4:	6303      	str	r3, [r0, #48]	; 0x30
  402aa6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402aa8:	f013 0f10 	tst.w	r3, #16
  402aac:	d0fb      	beq.n	402aa6 <udd_ep_in_sent+0x14a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  402aae:	f1b8 0f00 	cmp.w	r8, #0
  402ab2:	d008      	beq.n	402ac6 <udd_ep_in_sent+0x16a>
		ptr_job->b_shortpacket = false;
  402ab4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  402ab8:	4a13      	ldr	r2, [pc, #76]	; (402b08 <udd_ep_in_sent+0x1ac>)
  402aba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402abe:	7c5a      	ldrb	r2, [r3, #17]
  402ac0:	f36f 1286 	bfc	r2, #6, #1
  402ac4:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  402ac6:	45f4      	cmp	ip, lr
  402ac8:	d81a      	bhi.n	402b00 <udd_ep_in_sent+0x1a4>
			&& (!ptr_job->b_shortpacket)) {
  402aca:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  402ace:	4a0e      	ldr	r2, [pc, #56]	; (402b08 <udd_ep_in_sent+0x1ac>)
  402ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402ad4:	7c5b      	ldrb	r3, [r3, #17]
  402ad6:	f013 0f40 	tst.w	r3, #64	; 0x40
  402ada:	d113      	bne.n	402b04 <udd_ep_in_sent+0x1a8>
		ptr_job->b_buf_end = true;
  402adc:	eb07 0387 	add.w	r3, r7, r7, lsl #2
  402ae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402ae4:	7c5a      	ldrb	r2, [r3, #17]
  402ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402aea:	745a      	strb	r2, [r3, #17]
		return false;
  402aec:	2000      	movs	r0, #0
  402aee:	e002      	b.n	402af6 <udd_ep_in_sent+0x19a>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  402af0:	2301      	movs	r3, #1
  402af2:	e748      	b.n	402986 <udd_ep_in_sent+0x2a>
		return true; // Data pending
  402af4:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  402af6:	b003      	add	sp, #12
  402af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  402afc:	2000      	movs	r0, #0
  402afe:	e7fa      	b.n	402af6 <udd_ep_in_sent+0x19a>
	return true; // Pending
  402b00:	2001      	movs	r0, #1
  402b02:	e7f8      	b.n	402af6 <udd_ep_in_sent+0x19a>
  402b04:	2001      	movs	r0, #1
  402b06:	e7f6      	b.n	402af6 <udd_ep_in_sent+0x19a>
  402b08:	20006bc8 	.word	0x20006bc8
  402b0c:	40084000 	.word	0x40084000

00402b10 <UDP_Handler>:
{
  402b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b14:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  402b16:	4b87      	ldr	r3, [pc, #540]	; (402d34 <UDP_Handler+0x224>)
  402b18:	4798      	blx	r3
  402b1a:	b920      	cbnz	r0, 402b26 <UDP_Handler+0x16>
  402b1c:	4b86      	ldr	r3, [pc, #536]	; (402d38 <UDP_Handler+0x228>)
  402b1e:	69db      	ldr	r3, [r3, #28]
  402b20:	f413 7f80 	tst.w	r3, #256	; 0x100
  402b24:	d03b      	beq.n	402b9e <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  402b26:	2023      	movs	r0, #35	; 0x23
  402b28:	4b84      	ldr	r3, [pc, #528]	; (402d3c <UDP_Handler+0x22c>)
  402b2a:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  402b2c:	4b82      	ldr	r3, [pc, #520]	; (402d38 <UDP_Handler+0x228>)
  402b2e:	699b      	ldr	r3, [r3, #24]
  402b30:	f413 6f00 	tst.w	r3, #2048	; 0x800
  402b34:	d004      	beq.n	402b40 <UDP_Handler+0x30>
  402b36:	4b80      	ldr	r3, [pc, #512]	; (402d38 <UDP_Handler+0x228>)
  402b38:	69db      	ldr	r3, [r3, #28]
  402b3a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  402b3e:	d137      	bne.n	402bb0 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  402b40:	4b7d      	ldr	r3, [pc, #500]	; (402d38 <UDP_Handler+0x228>)
  402b42:	69db      	ldr	r3, [r3, #28]
  402b44:	f013 0f01 	tst.w	r3, #1
  402b48:	f000 81c6 	beq.w	402ed8 <UDP_Handler+0x3c8>
	if (Is_udd_setup_received(0)) {
  402b4c:	4b7a      	ldr	r3, [pc, #488]	; (402d38 <UDP_Handler+0x228>)
  402b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b50:	f013 0f04 	tst.w	r3, #4
  402b54:	d135      	bne.n	402bc2 <UDP_Handler+0xb2>
	if (Is_udd_in_sent(0)) {
  402b56:	4b78      	ldr	r3, [pc, #480]	; (402d38 <UDP_Handler+0x228>)
  402b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b5a:	f013 0f01 	tst.w	r3, #1
  402b5e:	f040 80c5 	bne.w	402cec <UDP_Handler+0x1dc>
	if (Is_udd_bank0_received(0)) {
  402b62:	4b75      	ldr	r3, [pc, #468]	; (402d38 <UDP_Handler+0x228>)
  402b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b66:	f013 0f02 	tst.w	r3, #2
  402b6a:	f040 80c2 	bne.w	402cf2 <UDP_Handler+0x1e2>
	if (Is_udd_stall(0)) {
  402b6e:	4b72      	ldr	r3, [pc, #456]	; (402d38 <UDP_Handler+0x228>)
  402b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b72:	f013 0f08 	tst.w	r3, #8
  402b76:	f000 81af 	beq.w	402ed8 <UDP_Handler+0x3c8>
		udd_ack_stall(0);
  402b7a:	4a6f      	ldr	r2, [pc, #444]	; (402d38 <UDP_Handler+0x228>)
  402b7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402b7e:	9300      	str	r3, [sp, #0]
  402b80:	9b00      	ldr	r3, [sp, #0]
  402b82:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b86:	9300      	str	r3, [sp, #0]
  402b88:	9b00      	ldr	r3, [sp, #0]
  402b8a:	f023 0308 	bic.w	r3, r3, #8
  402b8e:	9300      	str	r3, [sp, #0]
  402b90:	9b00      	ldr	r3, [sp, #0]
  402b92:	6313      	str	r3, [r2, #48]	; 0x30
  402b94:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402b96:	f013 0f08 	tst.w	r3, #8
  402b9a:	d1fb      	bne.n	402b94 <UDP_Handler+0x84>
  402b9c:	e005      	b.n	402baa <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  402b9e:	b672      	cpsid	i
  402ba0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  402ba4:	2200      	movs	r2, #0
  402ba6:	4b66      	ldr	r3, [pc, #408]	; (402d40 <UDP_Handler+0x230>)
  402ba8:	701a      	strb	r2, [r3, #0]
}
  402baa:	b01b      	add	sp, #108	; 0x6c
  402bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  402bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402bb4:	4b60      	ldr	r3, [pc, #384]	; (402d38 <UDP_Handler+0x228>)
  402bb6:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  402bb8:	4b62      	ldr	r3, [pc, #392]	; (402d44 <UDP_Handler+0x234>)
  402bba:	4798      	blx	r3
		UDC_SOF_EVENT();
  402bbc:	4b62      	ldr	r3, [pc, #392]	; (402d48 <UDP_Handler+0x238>)
  402bbe:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  402bc0:	e7f3      	b.n	402baa <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  402bc2:	4b62      	ldr	r3, [pc, #392]	; (402d4c <UDP_Handler+0x23c>)
  402bc4:	781b      	ldrb	r3, [r3, #0]
  402bc6:	b9cb      	cbnz	r3, 402bfc <UDP_Handler+0xec>
	if (8 != udd_byte_count(0)) {
  402bc8:	4b5b      	ldr	r3, [pc, #364]	; (402d38 <UDP_Handler+0x228>)
  402bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402bcc:	f3c3 430a 	ubfx	r3, r3, #16, #11
  402bd0:	2b08      	cmp	r3, #8
  402bd2:	d018      	beq.n	402c06 <UDP_Handler+0xf6>
		udd_ack_setup_received(0);
  402bd4:	4a58      	ldr	r2, [pc, #352]	; (402d38 <UDP_Handler+0x228>)
  402bd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402bd8:	9301      	str	r3, [sp, #4]
  402bda:	9b01      	ldr	r3, [sp, #4]
  402bdc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402be0:	9301      	str	r3, [sp, #4]
  402be2:	9b01      	ldr	r3, [sp, #4]
  402be4:	f023 0304 	bic.w	r3, r3, #4
  402be8:	9301      	str	r3, [sp, #4]
  402bea:	9b01      	ldr	r3, [sp, #4]
  402bec:	6313      	str	r3, [r2, #48]	; 0x30
  402bee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402bf0:	f013 0f04 	tst.w	r3, #4
  402bf4:	d1fb      	bne.n	402bee <UDP_Handler+0xde>
		udd_ctrl_stall_data();
  402bf6:	4b56      	ldr	r3, [pc, #344]	; (402d50 <UDP_Handler+0x240>)
  402bf8:	4798      	blx	r3
  402bfa:	e7d6      	b.n	402baa <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  402bfc:	4b55      	ldr	r3, [pc, #340]	; (402d54 <UDP_Handler+0x244>)
  402bfe:	4798      	blx	r3
		udd_ctrl_init();
  402c00:	4b55      	ldr	r3, [pc, #340]	; (402d58 <UDP_Handler+0x248>)
  402c02:	4798      	blx	r3
  402c04:	e7e0      	b.n	402bc8 <UDP_Handler+0xb8>
  402c06:	4b55      	ldr	r3, [pc, #340]	; (402d5c <UDP_Handler+0x24c>)
  402c08:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  402c0c:	494a      	ldr	r1, [pc, #296]	; (402d38 <UDP_Handler+0x228>)
  402c0e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402c10:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  402c14:	4283      	cmp	r3, r0
  402c16:	d1fa      	bne.n	402c0e <UDP_Handler+0xfe>
	if (udc_process_setup() == false) {
  402c18:	4b51      	ldr	r3, [pc, #324]	; (402d60 <UDP_Handler+0x250>)
  402c1a:	4798      	blx	r3
  402c1c:	b998      	cbnz	r0, 402c46 <UDP_Handler+0x136>
		udd_ack_setup_received(0);
  402c1e:	4a46      	ldr	r2, [pc, #280]	; (402d38 <UDP_Handler+0x228>)
  402c20:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c22:	9302      	str	r3, [sp, #8]
  402c24:	9b02      	ldr	r3, [sp, #8]
  402c26:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c2a:	9302      	str	r3, [sp, #8]
  402c2c:	9b02      	ldr	r3, [sp, #8]
  402c2e:	f023 0304 	bic.w	r3, r3, #4
  402c32:	9302      	str	r3, [sp, #8]
  402c34:	9b02      	ldr	r3, [sp, #8]
  402c36:	6313      	str	r3, [r2, #48]	; 0x30
  402c38:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c3a:	f013 0f04 	tst.w	r3, #4
  402c3e:	d1fb      	bne.n	402c38 <UDP_Handler+0x128>
		udd_ctrl_stall_data();
  402c40:	4b43      	ldr	r3, [pc, #268]	; (402d50 <UDP_Handler+0x240>)
  402c42:	4798      	blx	r3
  402c44:	e7b1      	b.n	402baa <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  402c46:	4b47      	ldr	r3, [pc, #284]	; (402d64 <UDP_Handler+0x254>)
  402c48:	f993 3000 	ldrsb.w	r3, [r3]
  402c4c:	2b00      	cmp	r3, #0
  402c4e:	db1d      	blt.n	402c8c <UDP_Handler+0x17c>
		udd_ack_setup_received(0);
  402c50:	4a39      	ldr	r2, [pc, #228]	; (402d38 <UDP_Handler+0x228>)
  402c52:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c54:	9305      	str	r3, [sp, #20]
  402c56:	9b05      	ldr	r3, [sp, #20]
  402c58:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c5c:	9305      	str	r3, [sp, #20]
  402c5e:	9b05      	ldr	r3, [sp, #20]
  402c60:	f023 0304 	bic.w	r3, r3, #4
  402c64:	9305      	str	r3, [sp, #20]
  402c66:	9b05      	ldr	r3, [sp, #20]
  402c68:	6313      	str	r3, [r2, #48]	; 0x30
  402c6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c6c:	f013 0f04 	tst.w	r3, #4
  402c70:	d1fb      	bne.n	402c6a <UDP_Handler+0x15a>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402c72:	4b3c      	ldr	r3, [pc, #240]	; (402d64 <UDP_Handler+0x254>)
  402c74:	88db      	ldrh	r3, [r3, #6]
  402c76:	2b00      	cmp	r3, #0
  402c78:	d035      	beq.n	402ce6 <UDP_Handler+0x1d6>
		udd_ctrl_prev_payload_nb_trans = 0;
  402c7a:	2300      	movs	r3, #0
  402c7c:	4a3a      	ldr	r2, [pc, #232]	; (402d68 <UDP_Handler+0x258>)
  402c7e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  402c80:	4a3a      	ldr	r2, [pc, #232]	; (402d6c <UDP_Handler+0x25c>)
  402c82:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402c84:	2201      	movs	r2, #1
  402c86:	4b31      	ldr	r3, [pc, #196]	; (402d4c <UDP_Handler+0x23c>)
  402c88:	701a      	strb	r2, [r3, #0]
  402c8a:	e78e      	b.n	402baa <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  402c8c:	4a2a      	ldr	r2, [pc, #168]	; (402d38 <UDP_Handler+0x228>)
  402c8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c90:	9303      	str	r3, [sp, #12]
  402c92:	9b03      	ldr	r3, [sp, #12]
  402c94:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c98:	9303      	str	r3, [sp, #12]
  402c9a:	9b03      	ldr	r3, [sp, #12]
  402c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ca0:	9303      	str	r3, [sp, #12]
  402ca2:	9b03      	ldr	r3, [sp, #12]
  402ca4:	6313      	str	r3, [r2, #48]	; 0x30
  402ca6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ca8:	f013 0f80 	tst.w	r3, #128	; 0x80
  402cac:	d0fb      	beq.n	402ca6 <UDP_Handler+0x196>
		udd_ack_setup_received(0);
  402cae:	4a22      	ldr	r2, [pc, #136]	; (402d38 <UDP_Handler+0x228>)
  402cb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402cb2:	9304      	str	r3, [sp, #16]
  402cb4:	9b04      	ldr	r3, [sp, #16]
  402cb6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402cba:	9304      	str	r3, [sp, #16]
  402cbc:	9b04      	ldr	r3, [sp, #16]
  402cbe:	f023 0304 	bic.w	r3, r3, #4
  402cc2:	9304      	str	r3, [sp, #16]
  402cc4:	9b04      	ldr	r3, [sp, #16]
  402cc6:	6313      	str	r3, [r2, #48]	; 0x30
  402cc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402cca:	f013 0f04 	tst.w	r3, #4
  402cce:	d1fb      	bne.n	402cc8 <UDP_Handler+0x1b8>
		udd_ctrl_prev_payload_nb_trans = 0;
  402cd0:	2300      	movs	r3, #0
  402cd2:	4a25      	ldr	r2, [pc, #148]	; (402d68 <UDP_Handler+0x258>)
  402cd4:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  402cd6:	4a25      	ldr	r2, [pc, #148]	; (402d6c <UDP_Handler+0x25c>)
  402cd8:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402cda:	2202      	movs	r2, #2
  402cdc:	4b1b      	ldr	r3, [pc, #108]	; (402d4c <UDP_Handler+0x23c>)
  402cde:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402ce0:	4b23      	ldr	r3, [pc, #140]	; (402d70 <UDP_Handler+0x260>)
  402ce2:	4798      	blx	r3
  402ce4:	e761      	b.n	402baa <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  402ce6:	4b23      	ldr	r3, [pc, #140]	; (402d74 <UDP_Handler+0x264>)
  402ce8:	4798      	blx	r3
  402cea:	e75e      	b.n	402baa <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  402cec:	4b20      	ldr	r3, [pc, #128]	; (402d70 <UDP_Handler+0x260>)
  402cee:	4798      	blx	r3
  402cf0:	e75b      	b.n	402baa <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402cf2:	4b16      	ldr	r3, [pc, #88]	; (402d4c <UDP_Handler+0x23c>)
  402cf4:	781b      	ldrb	r3, [r3, #0]
  402cf6:	2b01      	cmp	r3, #1
  402cf8:	d03e      	beq.n	402d78 <UDP_Handler+0x268>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402cfa:	2b02      	cmp	r3, #2
  402cfc:	d004      	beq.n	402d08 <UDP_Handler+0x1f8>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402cfe:	2b04      	cmp	r3, #4
  402d00:	d002      	beq.n	402d08 <UDP_Handler+0x1f8>
			udd_ctrl_stall_data();
  402d02:	4b13      	ldr	r3, [pc, #76]	; (402d50 <UDP_Handler+0x240>)
  402d04:	4798      	blx	r3
  402d06:	e001      	b.n	402d0c <UDP_Handler+0x1fc>
			udd_ctrl_endofrequest();
  402d08:	4b12      	ldr	r3, [pc, #72]	; (402d54 <UDP_Handler+0x244>)
  402d0a:	4798      	blx	r3
		udd_ack_bank0_received(0);
  402d0c:	4a0a      	ldr	r2, [pc, #40]	; (402d38 <UDP_Handler+0x228>)
  402d0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d10:	9306      	str	r3, [sp, #24]
  402d12:	9b06      	ldr	r3, [sp, #24]
  402d14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d18:	9306      	str	r3, [sp, #24]
  402d1a:	9b06      	ldr	r3, [sp, #24]
  402d1c:	f023 0302 	bic.w	r3, r3, #2
  402d20:	9306      	str	r3, [sp, #24]
  402d22:	9b06      	ldr	r3, [sp, #24]
  402d24:	6313      	str	r3, [r2, #48]	; 0x30
  402d26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d28:	f013 0f02 	tst.w	r3, #2
  402d2c:	d1fb      	bne.n	402d26 <UDP_Handler+0x216>
		udd_ctrl_init();
  402d2e:	4b0a      	ldr	r3, [pc, #40]	; (402d58 <UDP_Handler+0x248>)
  402d30:	4798      	blx	r3
  402d32:	e73a      	b.n	402baa <UDP_Handler+0x9a>
  402d34:	004024e9 	.word	0x004024e9
  402d38:	40084000 	.word	0x40084000
  402d3c:	00402141 	.word	0x00402141
  402d40:	200000c8 	.word	0x200000c8
  402d44:	004010dd 	.word	0x004010dd
  402d48:	0040c2c5 	.word	0x0040c2c5
  402d4c:	20006bc6 	.word	0x20006bc6
  402d50:	00402611 	.word	0x00402611
  402d54:	00402681 	.word	0x00402681
  402d58:	004025f9 	.word	0x004025f9
  402d5c:	20013453 	.word	0x20013453
  402d60:	0040111d 	.word	0x0040111d
  402d64:	20013454 	.word	0x20013454
  402d68:	20006bc4 	.word	0x20006bc4
  402d6c:	20006bc2 	.word	0x20006bc2
  402d70:	00402691 	.word	0x00402691
  402d74:	00402649 	.word	0x00402649
	nb_data = udd_byte_count(0);
  402d78:	4b51      	ldr	r3, [pc, #324]	; (402ec0 <UDP_Handler+0x3b0>)
  402d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402d7c:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402d80:	4b50      	ldr	r3, [pc, #320]	; (402ec4 <UDP_Handler+0x3b4>)
  402d82:	899b      	ldrh	r3, [r3, #12]
  402d84:	4a50      	ldr	r2, [pc, #320]	; (402ec8 <UDP_Handler+0x3b8>)
  402d86:	8815      	ldrh	r5, [r2, #0]
  402d88:	186a      	adds	r2, r5, r1
  402d8a:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  402d8c:	bfbc      	itt	lt
  402d8e:	1b5b      	sublt	r3, r3, r5
  402d90:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402d92:	4b4c      	ldr	r3, [pc, #304]	; (402ec4 <UDP_Handler+0x3b4>)
  402d94:	6898      	ldr	r0, [r3, #8]
  402d96:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  402d98:	b171      	cbz	r1, 402db8 <UDP_Handler+0x2a8>
  402d9a:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  402d9c:	4c48      	ldr	r4, [pc, #288]	; (402ec0 <UDP_Handler+0x3b0>)
  402d9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402da0:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  402da4:	1a13      	subs	r3, r2, r0
  402da6:	b2db      	uxtb	r3, r3
  402da8:	428b      	cmp	r3, r1
  402daa:	d3f8      	bcc.n	402d9e <UDP_Handler+0x28e>
	udd_ctrl_payload_nb_trans += nb_data;
  402dac:	440d      	add	r5, r1
  402dae:	b2ad      	uxth	r5, r5
  402db0:	4b45      	ldr	r3, [pc, #276]	; (402ec8 <UDP_Handler+0x3b8>)
  402db2:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  402db4:	2940      	cmp	r1, #64	; 0x40
  402db6:	d01a      	beq.n	402dee <UDP_Handler+0x2de>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  402db8:	4b42      	ldr	r3, [pc, #264]	; (402ec4 <UDP_Handler+0x3b4>)
  402dba:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  402dbc:	695b      	ldr	r3, [r3, #20]
  402dbe:	b113      	cbz	r3, 402dc6 <UDP_Handler+0x2b6>
			if (!udd_g_ctrlreq.over_under_run()) {
  402dc0:	4798      	blx	r3
  402dc2:	2800      	cmp	r0, #0
  402dc4:	d030      	beq.n	402e28 <UDP_Handler+0x318>
		udd_ack_bank0_received(0);
  402dc6:	4a3e      	ldr	r2, [pc, #248]	; (402ec0 <UDP_Handler+0x3b0>)
  402dc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402dca:	9308      	str	r3, [sp, #32]
  402dcc:	9b08      	ldr	r3, [sp, #32]
  402dce:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402dd2:	9308      	str	r3, [sp, #32]
  402dd4:	9b08      	ldr	r3, [sp, #32]
  402dd6:	f023 0302 	bic.w	r3, r3, #2
  402dda:	9308      	str	r3, [sp, #32]
  402ddc:	9b08      	ldr	r3, [sp, #32]
  402dde:	6313      	str	r3, [r2, #48]	; 0x30
  402de0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402de2:	f013 0f02 	tst.w	r3, #2
  402de6:	d1fb      	bne.n	402de0 <UDP_Handler+0x2d0>
		udd_ctrl_send_zlp_in();
  402de8:	4b38      	ldr	r3, [pc, #224]	; (402ecc <UDP_Handler+0x3bc>)
  402dea:	4798      	blx	r3
  402dec:	e6dd      	b.n	402baa <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  402dee:	4b35      	ldr	r3, [pc, #212]	; (402ec4 <UDP_Handler+0x3b4>)
  402df0:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  402df2:	4b37      	ldr	r3, [pc, #220]	; (402ed0 <UDP_Handler+0x3c0>)
  402df4:	881b      	ldrh	r3, [r3, #0]
  402df6:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  402df8:	429a      	cmp	r2, r3
  402dfa:	dddd      	ble.n	402db8 <UDP_Handler+0x2a8>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  402dfc:	4b31      	ldr	r3, [pc, #196]	; (402ec4 <UDP_Handler+0x3b4>)
  402dfe:	899b      	ldrh	r3, [r3, #12]
  402e00:	42ab      	cmp	r3, r5
  402e02:	d025      	beq.n	402e50 <UDP_Handler+0x340>
	udd_ack_bank0_received(0);
  402e04:	4a2e      	ldr	r2, [pc, #184]	; (402ec0 <UDP_Handler+0x3b0>)
  402e06:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e08:	930b      	str	r3, [sp, #44]	; 0x2c
  402e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402e0c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e10:	930b      	str	r3, [sp, #44]	; 0x2c
  402e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402e14:	f023 0302 	bic.w	r3, r3, #2
  402e18:	930b      	str	r3, [sp, #44]	; 0x2c
  402e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402e1c:	6313      	str	r3, [r2, #48]	; 0x30
  402e1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e20:	f013 0f02 	tst.w	r3, #2
  402e24:	d1fb      	bne.n	402e1e <UDP_Handler+0x30e>
  402e26:	e6c0      	b.n	402baa <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  402e28:	4b2a      	ldr	r3, [pc, #168]	; (402ed4 <UDP_Handler+0x3c4>)
  402e2a:	4798      	blx	r3
				udd_ack_bank0_received(0);
  402e2c:	4a24      	ldr	r2, [pc, #144]	; (402ec0 <UDP_Handler+0x3b0>)
  402e2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e30:	9307      	str	r3, [sp, #28]
  402e32:	9b07      	ldr	r3, [sp, #28]
  402e34:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e38:	9307      	str	r3, [sp, #28]
  402e3a:	9b07      	ldr	r3, [sp, #28]
  402e3c:	f023 0302 	bic.w	r3, r3, #2
  402e40:	9307      	str	r3, [sp, #28]
  402e42:	9b07      	ldr	r3, [sp, #28]
  402e44:	6313      	str	r3, [r2, #48]	; 0x30
  402e46:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e48:	f013 0f02 	tst.w	r3, #2
  402e4c:	d1fb      	bne.n	402e46 <UDP_Handler+0x336>
  402e4e:	e6ac      	b.n	402baa <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  402e50:	4b1c      	ldr	r3, [pc, #112]	; (402ec4 <UDP_Handler+0x3b4>)
  402e52:	695b      	ldr	r3, [r3, #20]
  402e54:	b153      	cbz	r3, 402e6c <UDP_Handler+0x35c>
		if (!udd_g_ctrlreq.over_under_run()) {
  402e56:	4798      	blx	r3
  402e58:	b1e8      	cbz	r0, 402e96 <UDP_Handler+0x386>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402e5a:	491d      	ldr	r1, [pc, #116]	; (402ed0 <UDP_Handler+0x3c0>)
  402e5c:	4a1a      	ldr	r2, [pc, #104]	; (402ec8 <UDP_Handler+0x3b8>)
  402e5e:	880b      	ldrh	r3, [r1, #0]
  402e60:	8810      	ldrh	r0, [r2, #0]
  402e62:	4403      	add	r3, r0
  402e64:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  402e66:	2300      	movs	r3, #0
  402e68:	8013      	strh	r3, [r2, #0]
  402e6a:	e7cb      	b.n	402e04 <UDP_Handler+0x2f4>
			udd_ctrl_stall_data();
  402e6c:	4b19      	ldr	r3, [pc, #100]	; (402ed4 <UDP_Handler+0x3c4>)
  402e6e:	4798      	blx	r3
			udd_ack_bank0_received(0);
  402e70:	4a13      	ldr	r2, [pc, #76]	; (402ec0 <UDP_Handler+0x3b0>)
  402e72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e74:	9309      	str	r3, [sp, #36]	; 0x24
  402e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e78:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e7c:	9309      	str	r3, [sp, #36]	; 0x24
  402e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e80:	f023 0302 	bic.w	r3, r3, #2
  402e84:	9309      	str	r3, [sp, #36]	; 0x24
  402e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e88:	6313      	str	r3, [r2, #48]	; 0x30
  402e8a:	4613      	mov	r3, r2
  402e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e8e:	f012 0f02 	tst.w	r2, #2
  402e92:	d1fb      	bne.n	402e8c <UDP_Handler+0x37c>
  402e94:	e689      	b.n	402baa <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  402e96:	4b0f      	ldr	r3, [pc, #60]	; (402ed4 <UDP_Handler+0x3c4>)
  402e98:	4798      	blx	r3
			udd_ack_bank0_received(0);
  402e9a:	4a09      	ldr	r2, [pc, #36]	; (402ec0 <UDP_Handler+0x3b0>)
  402e9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e9e:	930a      	str	r3, [sp, #40]	; 0x28
  402ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ea2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ea6:	930a      	str	r3, [sp, #40]	; 0x28
  402ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402eaa:	f023 0302 	bic.w	r3, r3, #2
  402eae:	930a      	str	r3, [sp, #40]	; 0x28
  402eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402eb2:	6313      	str	r3, [r2, #48]	; 0x30
  402eb4:	4613      	mov	r3, r2
  402eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402eb8:	f012 0f02 	tst.w	r2, #2
  402ebc:	d1fb      	bne.n	402eb6 <UDP_Handler+0x3a6>
  402ebe:	e674      	b.n	402baa <UDP_Handler+0x9a>
  402ec0:	40084000 	.word	0x40084000
  402ec4:	20013454 	.word	0x20013454
  402ec8:	20006bc2 	.word	0x20006bc2
  402ecc:	00402649 	.word	0x00402649
  402ed0:	20006bc4 	.word	0x20006bc4
  402ed4:	00402611 	.word	0x00402611
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402ed8:	4b97      	ldr	r3, [pc, #604]	; (403138 <UDP_Handler+0x628>)
  402eda:	699b      	ldr	r3, [r3, #24]
  402edc:	f013 0f02 	tst.w	r3, #2
  402ee0:	d011      	beq.n	402f06 <UDP_Handler+0x3f6>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  402ee2:	4b96      	ldr	r3, [pc, #600]	; (40313c <UDP_Handler+0x62c>)
  402ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ee6:	f013 0f42 	tst.w	r3, #66	; 0x42
  402eea:	f040 80c9 	bne.w	403080 <UDP_Handler+0x570>
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402eee:	4b93      	ldr	r3, [pc, #588]	; (40313c <UDP_Handler+0x62c>)
  402ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ef2:	f013 0f01 	tst.w	r3, #1
  402ef6:	f040 8133 	bne.w	403160 <UDP_Handler+0x650>
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402efa:	4b90      	ldr	r3, [pc, #576]	; (40313c <UDP_Handler+0x62c>)
  402efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402efe:	f013 0f08 	tst.w	r3, #8
  402f02:	f040 827b 	bne.w	4033fc <UDP_Handler+0x8ec>
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402f06:	4b8c      	ldr	r3, [pc, #560]	; (403138 <UDP_Handler+0x628>)
  402f08:	699b      	ldr	r3, [r3, #24]
  402f0a:	f013 0f04 	tst.w	r3, #4
  402f0e:	d013      	beq.n	402f38 <UDP_Handler+0x428>
		if (Is_udd_any_bank_received(ep)) {
  402f10:	4b8b      	ldr	r3, [pc, #556]	; (403140 <UDP_Handler+0x630>)
  402f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f14:	f013 0f42 	tst.w	r3, #66	; 0x42
  402f18:	f040 80a9 	bne.w	40306e <UDP_Handler+0x55e>
		if (Is_udd_in_sent(ep)) {
  402f1c:	4b88      	ldr	r3, [pc, #544]	; (403140 <UDP_Handler+0x630>)
  402f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f20:	f013 0f01 	tst.w	r3, #1
  402f24:	f040 8101 	bne.w	40312a <UDP_Handler+0x61a>
		if (Is_udd_stall(ep)) {
  402f28:	4b85      	ldr	r3, [pc, #532]	; (403140 <UDP_Handler+0x630>)
  402f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f2c:	f013 0f08 	tst.w	r3, #8
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402f30:	bf18      	it	ne
  402f32:	2302      	movne	r3, #2
		if (Is_udd_stall(ep)) {
  402f34:	f040 8263 	bne.w	4033fe <UDP_Handler+0x8ee>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402f38:	4b7f      	ldr	r3, [pc, #508]	; (403138 <UDP_Handler+0x628>)
  402f3a:	699b      	ldr	r3, [r3, #24]
  402f3c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402f40:	d005      	beq.n	402f4e <UDP_Handler+0x43e>
  402f42:	4b7d      	ldr	r3, [pc, #500]	; (403138 <UDP_Handler+0x628>)
  402f44:	69db      	ldr	r3, [r3, #28]
  402f46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402f4a:	f040 8277 	bne.w	40343c <UDP_Handler+0x92c>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402f4e:	4b7a      	ldr	r3, [pc, #488]	; (403138 <UDP_Handler+0x628>)
  402f50:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402f52:	f413 7f00 	tst.w	r3, #512	; 0x200
  402f56:	d005      	beq.n	402f64 <UDP_Handler+0x454>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402f58:	4b77      	ldr	r3, [pc, #476]	; (403138 <UDP_Handler+0x628>)
  402f5a:	69db      	ldr	r3, [r3, #28]
  402f5c:	f413 7f00 	tst.w	r3, #512	; 0x200
  402f60:	f040 826c 	bne.w	40343c <UDP_Handler+0x92c>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402f64:	4b74      	ldr	r3, [pc, #464]	; (403138 <UDP_Handler+0x628>)
  402f66:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402f68:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402f6c:	d005      	beq.n	402f7a <UDP_Handler+0x46a>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402f6e:	4b72      	ldr	r3, [pc, #456]	; (403138 <UDP_Handler+0x628>)
  402f70:	69db      	ldr	r3, [r3, #28]
  402f72:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402f76:	f040 8261 	bne.w	40343c <UDP_Handler+0x92c>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  402f7a:	4b6f      	ldr	r3, [pc, #444]	; (403138 <UDP_Handler+0x628>)
  402f7c:	699b      	ldr	r3, [r3, #24]
  402f7e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402f82:	d005      	beq.n	402f90 <UDP_Handler+0x480>
  402f84:	4b6c      	ldr	r3, [pc, #432]	; (403138 <UDP_Handler+0x628>)
  402f86:	69db      	ldr	r3, [r3, #28]
  402f88:	f413 7f80 	tst.w	r3, #256	; 0x100
  402f8c:	f040 8269 	bne.w	403462 <UDP_Handler+0x952>
	if (Is_udd_reset()) {
  402f90:	4b69      	ldr	r3, [pc, #420]	; (403138 <UDP_Handler+0x628>)
  402f92:	69db      	ldr	r3, [r3, #28]
  402f94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402f98:	f43f ae07 	beq.w	402baa <UDP_Handler+0x9a>
		udd_ack_reset();
  402f9c:	4c66      	ldr	r4, [pc, #408]	; (403138 <UDP_Handler+0x628>)
  402f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402fa2:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402fa4:	4e67      	ldr	r6, [pc, #412]	; (403144 <UDP_Handler+0x634>)
  402fa6:	2201      	movs	r2, #1
  402fa8:	4611      	mov	r1, r2
  402faa:	4630      	mov	r0, r6
  402fac:	4d66      	ldr	r5, [pc, #408]	; (403148 <UDP_Handler+0x638>)
  402fae:	47a8      	blx	r5
  402fb0:	2202      	movs	r2, #2
  402fb2:	2101      	movs	r1, #1
  402fb4:	f106 0014 	add.w	r0, r6, #20
  402fb8:	47a8      	blx	r5
		udc_reset();
  402fba:	4b64      	ldr	r3, [pc, #400]	; (40314c <UDP_Handler+0x63c>)
  402fbc:	4798      	blx	r3
		udd_disable_address_state();
  402fbe:	6863      	ldr	r3, [r4, #4]
  402fc0:	f023 0301 	bic.w	r3, r3, #1
  402fc4:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  402fc6:	6863      	ldr	r3, [r4, #4]
  402fc8:	f023 0302 	bic.w	r3, r3, #2
  402fcc:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  402fce:	68a3      	ldr	r3, [r4, #8]
  402fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402fd4:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  402fd6:	68a3      	ldr	r3, [r4, #8]
  402fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402fdc:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402fde:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402fe0:	9318      	str	r3, [sp, #96]	; 0x60
  402fe2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402fe4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402fe8:	9318      	str	r3, [sp, #96]	; 0x60
  402fea:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402fec:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402ff4:	9318      	str	r3, [sp, #96]	; 0x60
  402ff6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402ffc:	9318      	str	r3, [sp, #96]	; 0x60
  402ffe:	9b18      	ldr	r3, [sp, #96]	; 0x60
  403000:	6323      	str	r3, [r4, #48]	; 0x30
  403002:	4622      	mov	r2, r4
  403004:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403006:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  40300a:	d0fb      	beq.n	403004 <UDP_Handler+0x4f4>
	udd_enable_endpoint(0);
  40300c:	4a4a      	ldr	r2, [pc, #296]	; (403138 <UDP_Handler+0x628>)
  40300e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403010:	9319      	str	r3, [sp, #100]	; 0x64
  403012:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403014:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403018:	9319      	str	r3, [sp, #100]	; 0x64
  40301a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40301c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403020:	9319      	str	r3, [sp, #100]	; 0x64
  403022:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403024:	6313      	str	r3, [r2, #48]	; 0x30
  403026:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403028:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  40302c:	d0fb      	beq.n	403026 <UDP_Handler+0x516>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40302e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403032:	fab3 f383 	clz	r3, r3
  403036:	095b      	lsrs	r3, r3, #5
  403038:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  40303a:	b672      	cpsid	i
  40303c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403040:	2200      	movs	r2, #0
  403042:	4b43      	ldr	r3, [pc, #268]	; (403150 <UDP_Handler+0x640>)
  403044:	701a      	strb	r2, [r3, #0]
	return flags;
  403046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  403048:	2101      	movs	r1, #1
  40304a:	4a3b      	ldr	r2, [pc, #236]	; (403138 <UDP_Handler+0x628>)
  40304c:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40304e:	b123      	cbz	r3, 40305a <UDP_Handler+0x54a>
		cpu_irq_enable();
  403050:	4b3f      	ldr	r3, [pc, #252]	; (403150 <UDP_Handler+0x640>)
  403052:	7019      	strb	r1, [r3, #0]
  403054:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403058:	b662      	cpsie	i
		udd_ctrl_init();
  40305a:	4b3e      	ldr	r3, [pc, #248]	; (403154 <UDP_Handler+0x644>)
  40305c:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  40305e:	4b36      	ldr	r3, [pc, #216]	; (403138 <UDP_Handler+0x628>)
  403060:	f44f 7280 	mov.w	r2, #256	; 0x100
  403064:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  403066:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40306a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  40306c:	e59d      	b.n	402baa <UDP_Handler+0x9a>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40306e:	f04f 0802 	mov.w	r8, #2
		ptr_job = &udd_ep_job[ep - 1];
  403072:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 40315c <UDP_Handler+0x64c>
  403076:	2501      	movs	r5, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  403078:	f04f 0a04 	mov.w	sl, #4
  40307c:	4644      	mov	r4, r8
  40307e:	e007      	b.n	403090 <UDP_Handler+0x580>
		if (Is_udd_any_bank_received(ep)) {
  403080:	f04f 0801 	mov.w	r8, #1
		ptr_job = &udd_ep_job[ep - 1];
  403084:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 403144 <UDP_Handler+0x634>
  403088:	2500      	movs	r5, #0
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40308a:	f04f 0a02 	mov.w	sl, #2
  40308e:	4644      	mov	r4, r8
	uint32_t pkt_size = ptr_job->size;
  403090:	00ab      	lsls	r3, r5, #2
  403092:	195a      	adds	r2, r3, r5
  403094:	4b2b      	ldr	r3, [pc, #172]	; (403144 <UDP_Handler+0x634>)
  403096:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40309a:	8a1f      	ldrh	r7, [r3, #16]
  40309c:	f3c7 0709 	ubfx	r7, r7, #0, #10
  4030a0:	00a4      	lsls	r4, r4, #2
  4030a2:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4030a6:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
	nb_data = udd_byte_count(ep);
  4030aa:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4030ac:	f3c6 460a 	ubfx	r6, r6, #16, #11
	if (nb_data > 0) {
  4030b0:	2e00      	cmp	r6, #0
  4030b2:	f000 81ff 	beq.w	4034b4 <UDP_Handler+0x9a4>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4030b6:	4b23      	ldr	r3, [pc, #140]	; (403144 <UDP_Handler+0x634>)
  4030b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4030bc:	f8d3 e008 	ldr.w	lr, [r3, #8]
  4030c0:	68da      	ldr	r2, [r3, #12]
  4030c2:	ebae 0102 	sub.w	r1, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4030c6:	6858      	ldr	r0, [r3, #4]
		if (nb_data >= nb_remain) {
  4030c8:	42b1      	cmp	r1, r6
  4030ca:	f240 81e6 	bls.w	40349a <UDP_Handler+0x98a>
		ptr_job->buf_cnt += nb_data;
  4030ce:	00ab      	lsls	r3, r5, #2
  4030d0:	1959      	adds	r1, r3, r5
  4030d2:	4b1c      	ldr	r3, [pc, #112]	; (403144 <UDP_Handler+0x634>)
  4030d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4030d8:	1991      	adds	r1, r2, r6
  4030da:	60d9      	str	r1, [r3, #12]
	nb_data = udd_byte_count(ep);
  4030dc:	4631      	mov	r1, r6
	bool b_full = false, b_short;
  4030de:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4030e2:	4410      	add	r0, r2
  4030e4:	4603      	mov	r3, r0
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4030e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4030e8:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  4030ec:	1a1a      	subs	r2, r3, r0
  4030ee:	428a      	cmp	r2, r1
  4030f0:	d3f9      	bcc.n	4030e6 <UDP_Handler+0x5d6>
	udd_ep_ack_out_received(ep);
  4030f2:	4640      	mov	r0, r8
  4030f4:	4b18      	ldr	r3, [pc, #96]	; (403158 <UDP_Handler+0x648>)
  4030f6:	4798      	blx	r3
	if ((b_full || b_short) &&
  4030f8:	f1bb 0f00 	cmp.w	fp, #0
  4030fc:	f000 81dd 	beq.w	4034ba <UDP_Handler+0x9aa>
			!Is_udd_endpoint_stall_requested(ep)) {
  403100:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  403102:	f013 0f20 	tst.w	r3, #32
  403106:	f47f ad50 	bne.w	402baa <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  40310a:	4b0b      	ldr	r3, [pc, #44]	; (403138 <UDP_Handler+0x628>)
  40310c:	f8c3 a014 	str.w	sl, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403110:	4b0c      	ldr	r3, [pc, #48]	; (403144 <UDP_Handler+0x634>)
  403112:	00aa      	lsls	r2, r5, #2
  403114:	1951      	adds	r1, r2, r5
  403116:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40311a:	68cb      	ldr	r3, [r1, #12]
  40311c:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40311e:	4642      	mov	r2, r8
  403120:	2100      	movs	r1, #0
  403122:	4648      	mov	r0, r9
  403124:	4b08      	ldr	r3, [pc, #32]	; (403148 <UDP_Handler+0x638>)
  403126:	4798      	blx	r3
  403128:	e53f      	b.n	402baa <UDP_Handler+0x9a>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40312a:	2602      	movs	r6, #2
		ptr_job = &udd_ep_job[ep - 1];
  40312c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 40315c <UDP_Handler+0x64c>
  403130:	2501      	movs	r5, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  403132:	2704      	movs	r7, #4
  403134:	4634      	mov	r4, r6
  403136:	e019      	b.n	40316c <UDP_Handler+0x65c>
  403138:	40084000 	.word	0x40084000
  40313c:	40084004 	.word	0x40084004
  403140:	40084008 	.word	0x40084008
  403144:	20006bc8 	.word	0x20006bc8
  403148:	00402849 	.word	0x00402849
  40314c:	00401095 	.word	0x00401095
  403150:	200000c8 	.word	0x200000c8
  403154:	004025f9 	.word	0x004025f9
  403158:	00402889 	.word	0x00402889
  40315c:	20006bdc 	.word	0x20006bdc
		if (Is_udd_in_sent(ep)) {
  403160:	2601      	movs	r6, #1
		ptr_job = &udd_ep_job[ep - 1];
  403162:	f8df 8284 	ldr.w	r8, [pc, #644]	; 4033e8 <UDP_Handler+0x8d8>
  403166:	2500      	movs	r5, #0
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  403168:	2702      	movs	r7, #2
  40316a:	4634      	mov	r4, r6
			ptr_job->bank--;
  40316c:	00ab      	lsls	r3, r5, #2
  40316e:	442b      	add	r3, r5
  403170:	4a9d      	ldr	r2, [pc, #628]	; (4033e8 <UDP_Handler+0x8d8>)
  403172:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  403176:	7c53      	ldrb	r3, [r2, #17]
  403178:	f3c3 0181 	ubfx	r1, r3, #2, #2
  40317c:	3103      	adds	r1, #3
  40317e:	f361 0383 	bfi	r3, r1, #2, #2
  403182:	7453      	strb	r3, [r2, #17]
			if (ptr_job->b_stall_requested) {
  403184:	7c53      	ldrb	r3, [r2, #17]
  403186:	f013 0f20 	tst.w	r3, #32
  40318a:	d057      	beq.n	40323c <UDP_Handler+0x72c>
				if (ptr_job->bank) {
  40318c:	f013 0f0c 	tst.w	r3, #12
  403190:	d025      	beq.n	4031de <UDP_Handler+0x6ce>
  403192:	00a3      	lsls	r3, r4, #2
  403194:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403198:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
					udd_set_transmit_ready(ep);
  40319c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40319e:	920c      	str	r2, [sp, #48]	; 0x30
  4031a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4031a2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4031a6:	920c      	str	r2, [sp, #48]	; 0x30
  4031a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4031aa:	f042 0210 	orr.w	r2, r2, #16
  4031ae:	920c      	str	r2, [sp, #48]	; 0x30
  4031b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4031b2:	631a      	str	r2, [r3, #48]	; 0x30
  4031b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4031b6:	f012 0f10 	tst.w	r2, #16
  4031ba:	d0fb      	beq.n	4031b4 <UDP_Handler+0x6a4>
					udd_ack_in_sent(ep);
  4031bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4031be:	920d      	str	r2, [sp, #52]	; 0x34
  4031c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4031c2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4031c6:	920d      	str	r2, [sp, #52]	; 0x34
  4031c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4031ca:	f022 0201 	bic.w	r2, r2, #1
  4031ce:	920d      	str	r2, [sp, #52]	; 0x34
  4031d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4031d2:	631a      	str	r2, [r3, #48]	; 0x30
  4031d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4031d6:	f012 0f01 	tst.w	r2, #1
  4031da:	d1fb      	bne.n	4031d4 <UDP_Handler+0x6c4>
  4031dc:	e4e5      	b.n	402baa <UDP_Handler+0x9a>
  4031de:	00a3      	lsls	r3, r4, #2
  4031e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4031e4:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
					udd_ack_in_sent(ep);
  4031e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4031ea:	920e      	str	r2, [sp, #56]	; 0x38
  4031ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031ee:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4031f2:	920e      	str	r2, [sp, #56]	; 0x38
  4031f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031f6:	f022 0201 	bic.w	r2, r2, #1
  4031fa:	920e      	str	r2, [sp, #56]	; 0x38
  4031fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031fe:	631a      	str	r2, [r3, #48]	; 0x30
  403200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403202:	f012 0f01 	tst.w	r2, #1
  403206:	d1fb      	bne.n	403200 <UDP_Handler+0x6f0>
					udd_enable_stall_handshake(ep);
  403208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40320a:	920f      	str	r2, [sp, #60]	; 0x3c
  40320c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40320e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403212:	920f      	str	r2, [sp, #60]	; 0x3c
  403214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403216:	f042 0220 	orr.w	r2, r2, #32
  40321a:	920f      	str	r2, [sp, #60]	; 0x3c
  40321c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40321e:	631a      	str	r2, [r3, #48]	; 0x30
  403220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403222:	f012 0f20 	tst.w	r2, #32
  403226:	d0fb      	beq.n	403220 <UDP_Handler+0x710>
					ptr_job->b_stall_requested = false;
  403228:	00ab      	lsls	r3, r5, #2
  40322a:	441d      	add	r5, r3
  40322c:	4b6e      	ldr	r3, [pc, #440]	; (4033e8 <UDP_Handler+0x8d8>)
  40322e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  403232:	7c5a      	ldrb	r2, [r3, #17]
  403234:	f36f 1245 	bfc	r2, #5, #1
  403238:	745a      	strb	r2, [r3, #17]
  40323a:	e4b6      	b.n	402baa <UDP_Handler+0x9a>
			if (ptr_job->b_buf_end) {
  40323c:	f013 0f80 	tst.w	r3, #128	; 0x80
  403240:	d13d      	bne.n	4032be <UDP_Handler+0x7ae>
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403242:	00ab      	lsls	r3, r5, #2
  403244:	195a      	adds	r2, r3, r5
  403246:	4b68      	ldr	r3, [pc, #416]	; (4033e8 <UDP_Handler+0x8d8>)
  403248:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40324c:	68da      	ldr	r2, [r3, #12]
  40324e:	689b      	ldr	r3, [r3, #8]
  403250:	429a      	cmp	r2, r3
  403252:	d346      	bcc.n	4032e2 <UDP_Handler+0x7d2>
					!ptr_job->b_shortpacket &&
  403254:	00ab      	lsls	r3, r5, #2
  403256:	195a      	adds	r2, r3, r5
  403258:	4b63      	ldr	r3, [pc, #396]	; (4033e8 <UDP_Handler+0x8d8>)
  40325a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40325e:	7c5b      	ldrb	r3, [r3, #17]
  403260:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  403264:	d13d      	bne.n	4032e2 <UDP_Handler+0x7d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403266:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40326a:	fab3 f383 	clz	r3, r3
  40326e:	095b      	lsrs	r3, r3, #5
  403270:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  403272:	b672      	cpsid	i
  403274:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403278:	2200      	movs	r2, #0
  40327a:	4b5c      	ldr	r3, [pc, #368]	; (4033ec <UDP_Handler+0x8dc>)
  40327c:	701a      	strb	r2, [r3, #0]
	return flags;
  40327e:	9b10      	ldr	r3, [sp, #64]	; 0x40
				udd_disable_endpoint_interrupt(ep);
  403280:	4a5b      	ldr	r2, [pc, #364]	; (4033f0 <UDP_Handler+0x8e0>)
  403282:	6157      	str	r7, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  403284:	b12b      	cbz	r3, 403292 <UDP_Handler+0x782>
		cpu_irq_enable();
  403286:	2201      	movs	r2, #1
  403288:	4b58      	ldr	r3, [pc, #352]	; (4033ec <UDP_Handler+0x8dc>)
  40328a:	701a      	strb	r2, [r3, #0]
  40328c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403290:	b662      	cpsie	i
  403292:	00a3      	lsls	r3, r4, #2
  403294:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403298:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				udd_ack_in_sent(ep);
  40329c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40329e:	9211      	str	r2, [sp, #68]	; 0x44
  4032a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032a2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4032a6:	9211      	str	r2, [sp, #68]	; 0x44
  4032a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032aa:	f022 0201 	bic.w	r2, r2, #1
  4032ae:	9211      	str	r2, [sp, #68]	; 0x44
  4032b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032b2:	631a      	str	r2, [r3, #48]	; 0x30
  4032b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4032b6:	f012 0f01 	tst.w	r2, #1
  4032ba:	d1fb      	bne.n	4032b4 <UDP_Handler+0x7a4>
  4032bc:	e475      	b.n	402baa <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  4032be:	2314      	movs	r3, #20
  4032c0:	4a49      	ldr	r2, [pc, #292]	; (4033e8 <UDP_Handler+0x8d8>)
  4032c2:	fb03 2305 	mla	r3, r3, r5, r2
  4032c6:	7c59      	ldrb	r1, [r3, #17]
  4032c8:	f36f 11c7 	bfc	r1, #7, #1
  4032cc:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4032ce:	68da      	ldr	r2, [r3, #12]
  4032d0:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  4032d2:	4b47      	ldr	r3, [pc, #284]	; (4033f0 <UDP_Handler+0x8e0>)
  4032d4:	615f      	str	r7, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4032d6:	4632      	mov	r2, r6
  4032d8:	2100      	movs	r1, #0
  4032da:	4640      	mov	r0, r8
  4032dc:	4b45      	ldr	r3, [pc, #276]	; (4033f4 <UDP_Handler+0x8e4>)
  4032de:	4798      	blx	r3
  4032e0:	e7af      	b.n	403242 <UDP_Handler+0x732>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  4032e2:	2e00      	cmp	r6, #0
  4032e4:	d064      	beq.n	4033b0 <UDP_Handler+0x8a0>
  4032e6:	2e03      	cmp	r6, #3
  4032e8:	d062      	beq.n	4033b0 <UDP_Handler+0x8a0>
					&& ptr_job->bank > 0) {
  4032ea:	2314      	movs	r3, #20
  4032ec:	4a3e      	ldr	r2, [pc, #248]	; (4033e8 <UDP_Handler+0x8d8>)
  4032ee:	fb03 2305 	mla	r3, r3, r5, r2
  4032f2:	7c5b      	ldrb	r3, [r3, #17]
  4032f4:	f013 0f0c 	tst.w	r3, #12
  4032f8:	d029      	beq.n	40334e <UDP_Handler+0x83e>
  4032fa:	00a3      	lsls	r3, r4, #2
  4032fc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403300:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				udd_set_transmit_ready(ep);
  403304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403306:	9212      	str	r2, [sp, #72]	; 0x48
  403308:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40330a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40330e:	9212      	str	r2, [sp, #72]	; 0x48
  403310:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403312:	f042 0210 	orr.w	r2, r2, #16
  403316:	9212      	str	r2, [sp, #72]	; 0x48
  403318:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40331a:	631a      	str	r2, [r3, #48]	; 0x30
  40331c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40331e:	f012 0f10 	tst.w	r2, #16
  403322:	d0fb      	beq.n	40331c <UDP_Handler+0x80c>
				udd_ack_in_sent(ep);
  403324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403326:	9213      	str	r2, [sp, #76]	; 0x4c
  403328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40332a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40332e:	9213      	str	r2, [sp, #76]	; 0x4c
  403330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403332:	f022 0201 	bic.w	r2, r2, #1
  403336:	9213      	str	r2, [sp, #76]	; 0x4c
  403338:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40333a:	631a      	str	r2, [r3, #48]	; 0x30
  40333c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40333e:	f012 0f01 	tst.w	r2, #1
  403342:	d1fb      	bne.n	40333c <UDP_Handler+0x82c>
				udd_ep_in_sent(ep, false);
  403344:	2100      	movs	r1, #0
  403346:	4630      	mov	r0, r6
  403348:	4b2b      	ldr	r3, [pc, #172]	; (4033f8 <UDP_Handler+0x8e8>)
  40334a:	4798      	blx	r3
  40334c:	e42d      	b.n	402baa <UDP_Handler+0x9a>
				if (!udd_ep_in_sent(ep, true)) {
  40334e:	2101      	movs	r1, #1
  403350:	4630      	mov	r0, r6
  403352:	4b29      	ldr	r3, [pc, #164]	; (4033f8 <UDP_Handler+0x8e8>)
  403354:	4798      	blx	r3
  403356:	b1c8      	cbz	r0, 40338c <UDP_Handler+0x87c>
  403358:	00a3      	lsls	r3, r4, #2
  40335a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40335e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				udd_ack_in_sent(ep);
  403362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403364:	9214      	str	r2, [sp, #80]	; 0x50
  403366:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403368:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40336c:	9214      	str	r2, [sp, #80]	; 0x50
  40336e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403370:	f022 0201 	bic.w	r2, r2, #1
  403374:	9214      	str	r2, [sp, #80]	; 0x50
  403376:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403378:	631a      	str	r2, [r3, #48]	; 0x30
  40337a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40337c:	f012 0f01 	tst.w	r2, #1
  403380:	d1fb      	bne.n	40337a <UDP_Handler+0x86a>
				udd_ep_in_sent(ep, false);
  403382:	2100      	movs	r1, #0
  403384:	4630      	mov	r0, r6
  403386:	4b1c      	ldr	r3, [pc, #112]	; (4033f8 <UDP_Handler+0x8e8>)
  403388:	4798      	blx	r3
  40338a:	e40e      	b.n	402baa <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  40338c:	2214      	movs	r2, #20
  40338e:	4b16      	ldr	r3, [pc, #88]	; (4033e8 <UDP_Handler+0x8d8>)
  403390:	fb02 3305 	mla	r3, r2, r5, r3
  403394:	7c59      	ldrb	r1, [r3, #17]
  403396:	f36f 11c7 	bfc	r1, #7, #1
  40339a:	7459      	strb	r1, [r3, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40339c:	68da      	ldr	r2, [r3, #12]
  40339e:	609a      	str	r2, [r3, #8]
                    udd_disable_endpoint_interrupt(ep);
  4033a0:	4b13      	ldr	r3, [pc, #76]	; (4033f0 <UDP_Handler+0x8e0>)
  4033a2:	615f      	str	r7, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4033a4:	4632      	mov	r2, r6
  4033a6:	2100      	movs	r1, #0
  4033a8:	4640      	mov	r0, r8
  4033aa:	4b12      	ldr	r3, [pc, #72]	; (4033f4 <UDP_Handler+0x8e4>)
  4033ac:	4798      	blx	r3
  4033ae:	e7d3      	b.n	403358 <UDP_Handler+0x848>
				udd_ep_in_sent(ep, true);
  4033b0:	2101      	movs	r1, #1
  4033b2:	4630      	mov	r0, r6
  4033b4:	4b10      	ldr	r3, [pc, #64]	; (4033f8 <UDP_Handler+0x8e8>)
  4033b6:	4798      	blx	r3
  4033b8:	00a3      	lsls	r3, r4, #2
  4033ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4033be:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				udd_ack_in_sent(ep);
  4033c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4033c4:	9215      	str	r2, [sp, #84]	; 0x54
  4033c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4033c8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4033cc:	9215      	str	r2, [sp, #84]	; 0x54
  4033ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4033d0:	f022 0201 	bic.w	r2, r2, #1
  4033d4:	9215      	str	r2, [sp, #84]	; 0x54
  4033d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4033d8:	631a      	str	r2, [r3, #48]	; 0x30
  4033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4033dc:	f012 0f01 	tst.w	r2, #1
  4033e0:	d1fb      	bne.n	4033da <UDP_Handler+0x8ca>
  4033e2:	f7ff bbe2 	b.w	402baa <UDP_Handler+0x9a>
  4033e6:	bf00      	nop
  4033e8:	20006bc8 	.word	0x20006bc8
  4033ec:	200000c8 	.word	0x200000c8
  4033f0:	40084000 	.word	0x40084000
  4033f4:	00402849 	.word	0x00402849
  4033f8:	0040295d 	.word	0x0040295d
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4033fc:	2301      	movs	r3, #1
  4033fe:	009b      	lsls	r3, r3, #2
  403400:	f103 2240 	add.w	r2, r3, #1073758208	; 0x40004000
  403404:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
			udd_ack_stall(ep);
  403408:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40340a:	9316      	str	r3, [sp, #88]	; 0x58
  40340c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40340e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403412:	9316      	str	r3, [sp, #88]	; 0x58
  403414:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403416:	f023 0308 	bic.w	r3, r3, #8
  40341a:	9316      	str	r3, [sp, #88]	; 0x58
  40341c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40341e:	6313      	str	r3, [r2, #48]	; 0x30
  403420:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403422:	f013 0f08 	tst.w	r3, #8
  403426:	d1fb      	bne.n	403420 <UDP_Handler+0x910>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  403428:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40342a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403432:	f43f abba 	beq.w	402baa <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  403436:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403438:	f7ff bbb7 	b.w	402baa <UDP_Handler+0x9a>
		udd_ack_wakeups();
  40343c:	4c21      	ldr	r4, [pc, #132]	; (4034c4 <UDP_Handler+0x9b4>)
  40343e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  403442:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  403444:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  403446:	2001      	movs	r0, #1
  403448:	4b1f      	ldr	r3, [pc, #124]	; (4034c8 <UDP_Handler+0x9b8>)
  40344a:	4798      	blx	r3
		UDC_RESUME_EVENT();
  40344c:	4b1f      	ldr	r3, [pc, #124]	; (4034cc <UDP_Handler+0x9bc>)
  40344e:	4798      	blx	r3
		udd_ack_suspend();
  403450:	f44f 7380 	mov.w	r3, #256	; 0x100
  403454:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  403456:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  403458:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40345c:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  40345e:	f7ff bba4 	b.w	402baa <UDP_Handler+0x9a>
		udd_ack_suspend();
  403462:	4b18      	ldr	r3, [pc, #96]	; (4034c4 <UDP_Handler+0x9b4>)
  403464:	f44f 7280 	mov.w	r2, #256	; 0x100
  403468:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  40346a:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  40346c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  403470:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  403472:	f44f 7200 	mov.w	r2, #512	; 0x200
  403476:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  403478:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40347c:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  40347e:	2023      	movs	r0, #35	; 0x23
  403480:	4b13      	ldr	r3, [pc, #76]	; (4034d0 <UDP_Handler+0x9c0>)
  403482:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  403484:	2000      	movs	r0, #0
  403486:	4b10      	ldr	r3, [pc, #64]	; (4034c8 <UDP_Handler+0x9b8>)
  403488:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
  40348a:	4b12      	ldr	r3, [pc, #72]	; (4034d4 <UDP_Handler+0x9c4>)
  40348c:	4798      	blx	r3
		goto udd_interrupt_end;
  40348e:	f7ff bb8c 	b.w	402baa <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  403492:	4640      	mov	r0, r8
  403494:	4b10      	ldr	r3, [pc, #64]	; (4034d8 <UDP_Handler+0x9c8>)
  403496:	4798      	blx	r3
  403498:	e632      	b.n	403100 <UDP_Handler+0x5f0>
		ptr_job->buf_cnt += nb_data;
  40349a:	00ab      	lsls	r3, r5, #2
  40349c:	eb03 0c05 	add.w	ip, r3, r5
  4034a0:	4b0e      	ldr	r3, [pc, #56]	; (4034dc <UDP_Handler+0x9cc>)
  4034a2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  4034a6:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  4034aa:	2900      	cmp	r1, #0
  4034ac:	d0f1      	beq.n	403492 <UDP_Handler+0x982>
			b_full = true;
  4034ae:	f04f 0b01 	mov.w	fp, #1
  4034b2:	e616      	b.n	4030e2 <UDP_Handler+0x5d2>
	udd_ep_ack_out_received(ep);
  4034b4:	4640      	mov	r0, r8
  4034b6:	4b08      	ldr	r3, [pc, #32]	; (4034d8 <UDP_Handler+0x9c8>)
  4034b8:	4798      	blx	r3
	if ((b_full || b_short) &&
  4034ba:	42b7      	cmp	r7, r6
  4034bc:	f63f ae20 	bhi.w	403100 <UDP_Handler+0x5f0>
  4034c0:	f7ff bb73 	b.w	402baa <UDP_Handler+0x9a>
  4034c4:	40084000 	.word	0x40084000
  4034c8:	00402555 	.word	0x00402555
  4034cc:	0040c2b9 	.word	0x0040c2b9
  4034d0:	00402195 	.word	0x00402195
  4034d4:	0040c2ad 	.word	0x0040c2ad
  4034d8:	00402889 	.word	0x00402889
  4034dc:	20006bc8 	.word	0x20006bc8

004034e0 <udd_attach>:
{
  4034e0:	b510      	push	{r4, lr}
  4034e2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4034e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4034e8:	fab3 f383 	clz	r3, r3
  4034ec:	095b      	lsrs	r3, r3, #5
  4034ee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4034f0:	b672      	cpsid	i
  4034f2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4034f6:	2200      	movs	r2, #0
  4034f8:	4b14      	ldr	r3, [pc, #80]	; (40354c <udd_attach+0x6c>)
  4034fa:	701a      	strb	r2, [r3, #0]
	return flags;
  4034fc:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  4034fe:	2001      	movs	r0, #1
  403500:	4b13      	ldr	r3, [pc, #76]	; (403550 <udd_attach+0x70>)
  403502:	4798      	blx	r3
	udd_enable_periph_ck();
  403504:	2023      	movs	r0, #35	; 0x23
  403506:	4b13      	ldr	r3, [pc, #76]	; (403554 <udd_attach+0x74>)
  403508:	4798      	blx	r3
	udd_enable_transceiver();
  40350a:	4b13      	ldr	r3, [pc, #76]	; (403558 <udd_attach+0x78>)
  40350c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40350e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  403512:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  403514:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40351a:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  40351c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403520:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  403522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  403526:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  403528:	f44f 7200 	mov.w	r2, #512	; 0x200
  40352c:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  40352e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403532:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  403534:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403538:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40353a:	b12c      	cbz	r4, 403548 <udd_attach+0x68>
		cpu_irq_enable();
  40353c:	2201      	movs	r2, #1
  40353e:	4b03      	ldr	r3, [pc, #12]	; (40354c <udd_attach+0x6c>)
  403540:	701a      	strb	r2, [r3, #0]
  403542:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403546:	b662      	cpsie	i
}
  403548:	b002      	add	sp, #8
  40354a:	bd10      	pop	{r4, pc}
  40354c:	200000c8 	.word	0x200000c8
  403550:	00402555 	.word	0x00402555
  403554:	00402141 	.word	0x00402141
  403558:	40084000 	.word	0x40084000

0040355c <udd_enable>:
{
  40355c:	b530      	push	{r4, r5, lr}
  40355e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403560:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403564:	fab3 f383 	clz	r3, r3
  403568:	095b      	lsrs	r3, r3, #5
  40356a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40356c:	b672      	cpsid	i
  40356e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403572:	2400      	movs	r4, #0
  403574:	4b25      	ldr	r3, [pc, #148]	; (40360c <udd_enable+0xb0>)
  403576:	701c      	strb	r4, [r3, #0]
	return flags;
  403578:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  40357a:	2023      	movs	r0, #35	; 0x23
  40357c:	4b24      	ldr	r3, [pc, #144]	; (403610 <udd_enable+0xb4>)
  40357e:	4798      	blx	r3
	sysclk_enable_usb();
  403580:	4b24      	ldr	r3, [pc, #144]	; (403614 <udd_enable+0xb8>)
  403582:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403584:	4b24      	ldr	r3, [pc, #144]	; (403618 <udd_enable+0xbc>)
  403586:	2250      	movs	r2, #80	; 0x50
  403588:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40358c:	2208      	movs	r2, #8
  40358e:	605a      	str	r2, [r3, #4]
		udd_ep_job[i].bank = 0;
  403590:	4b22      	ldr	r3, [pc, #136]	; (40361c <udd_enable+0xc0>)
  403592:	7c5a      	ldrb	r2, [r3, #17]
		udd_ep_job[i].b_buf_end = false;
  403594:	f002 0283 	and.w	r2, r2, #131	; 0x83
  403598:	f364 12c7 	bfi	r2, r4, #7, #1
  40359c:	745a      	strb	r2, [r3, #17]
		udd_ep_job[i].bank = 0;
  40359e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
		udd_ep_job[i].b_buf_end = false;
  4035a2:	f002 0283 	and.w	r2, r2, #131	; 0x83
  4035a6:	f364 12c7 	bfi	r2, r4, #7, #1
  4035aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4035ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4035b2:	4b1b      	ldr	r3, [pc, #108]	; (403620 <udd_enable+0xc4>)
  4035b4:	4798      	blx	r3
	udd_b_idle = false;
  4035b6:	4b1b      	ldr	r3, [pc, #108]	; (403624 <udd_enable+0xc8>)
  4035b8:	701c      	strb	r4, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  4035ba:	4b1b      	ldr	r3, [pc, #108]	; (403628 <udd_enable+0xcc>)
  4035bc:	781b      	ldrb	r3, [r3, #0]
  4035be:	2bff      	cmp	r3, #255	; 0xff
  4035c0:	d022      	beq.n	403608 <udd_enable+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4035c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4035c6:	fab3 f383 	clz	r3, r3
  4035ca:	095b      	lsrs	r3, r3, #5
  4035cc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4035ce:	b672      	cpsid	i
  4035d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4035d4:	2200      	movs	r2, #0
  4035d6:	4b0d      	ldr	r3, [pc, #52]	; (40360c <udd_enable+0xb0>)
  4035d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4035da:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  4035dc:	4a12      	ldr	r2, [pc, #72]	; (403628 <udd_enable+0xcc>)
  4035de:	7813      	ldrb	r3, [r2, #0]
  4035e0:	3301      	adds	r3, #1
  4035e2:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4035e4:	b129      	cbz	r1, 4035f2 <udd_enable+0x96>
		cpu_irq_enable();
  4035e6:	2201      	movs	r2, #1
  4035e8:	4b08      	ldr	r3, [pc, #32]	; (40360c <udd_enable+0xb0>)
  4035ea:	701a      	strb	r2, [r3, #0]
  4035ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4035f0:	b662      	cpsie	i
	udd_attach();
  4035f2:	4b0e      	ldr	r3, [pc, #56]	; (40362c <udd_enable+0xd0>)
  4035f4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  4035f6:	b12d      	cbz	r5, 403604 <udd_enable+0xa8>
		cpu_irq_enable();
  4035f8:	2201      	movs	r2, #1
  4035fa:	4b04      	ldr	r3, [pc, #16]	; (40360c <udd_enable+0xb0>)
  4035fc:	701a      	strb	r2, [r3, #0]
  4035fe:	f3bf 8f5f 	dmb	sy
  403602:	b662      	cpsie	i
}
  403604:	b003      	add	sp, #12
  403606:	bd30      	pop	{r4, r5, pc}
  403608:	e7fe      	b.n	403608 <udd_enable+0xac>
  40360a:	bf00      	nop
  40360c:	200000c8 	.word	0x200000c8
  403610:	00402141 	.word	0x00402141
  403614:	0040024d 	.word	0x0040024d
  403618:	e000e100 	.word	0xe000e100
  40361c:	20006bc8 	.word	0x20006bc8
  403620:	00402205 	.word	0x00402205
  403624:	20006bc1 	.word	0x20006bc1
  403628:	2001343c 	.word	0x2001343c
  40362c:	004034e1 	.word	0x004034e1

00403630 <udd_set_address>:
	udd_disable_address_state();
  403630:	4b0d      	ldr	r3, [pc, #52]	; (403668 <udd_set_address+0x38>)
  403632:	685a      	ldr	r2, [r3, #4]
  403634:	f022 0201 	bic.w	r2, r2, #1
  403638:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40363a:	689a      	ldr	r2, [r3, #8]
  40363c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  403640:	609a      	str	r2, [r3, #8]
	if (address) {
  403642:	4602      	mov	r2, r0
  403644:	b170      	cbz	r0, 403664 <udd_set_address+0x34>
		udd_configure_address(address);
  403646:	6898      	ldr	r0, [r3, #8]
  403648:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  40364c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  403650:	4310      	orrs	r0, r2
  403652:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  403654:	689a      	ldr	r2, [r3, #8]
  403656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40365a:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  40365c:	685a      	ldr	r2, [r3, #4]
  40365e:	f042 0201 	orr.w	r2, r2, #1
  403662:	605a      	str	r2, [r3, #4]
  403664:	4770      	bx	lr
  403666:	bf00      	nop
  403668:	40084000 	.word	0x40084000

0040366c <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  40366c:	4b05      	ldr	r3, [pc, #20]	; (403684 <udd_getaddress+0x18>)
  40366e:	685b      	ldr	r3, [r3, #4]
  403670:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  403674:	bf1d      	ittte	ne
  403676:	4b03      	ldrne	r3, [pc, #12]	; (403684 <udd_getaddress+0x18>)
  403678:	6898      	ldrne	r0, [r3, #8]
  40367a:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  40367e:	2000      	moveq	r0, #0
}
  403680:	4770      	bx	lr
  403682:	bf00      	nop
  403684:	40084000 	.word	0x40084000

00403688 <udd_get_frame_number>:
	return udd_frame_number();
  403688:	4b02      	ldr	r3, [pc, #8]	; (403694 <udd_get_frame_number+0xc>)
  40368a:	6818      	ldr	r0, [r3, #0]
}
  40368c:	f3c0 000a 	ubfx	r0, r0, #0, #11
  403690:	4770      	bx	lr
  403692:	bf00      	nop
  403694:	40084000 	.word	0x40084000

00403698 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  403698:	4b01      	ldr	r3, [pc, #4]	; (4036a0 <udd_set_setup_payload+0x8>)
  40369a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  40369c:	8199      	strh	r1, [r3, #12]
  40369e:	4770      	bx	lr
  4036a0:	20013454 	.word	0x20013454

004036a4 <udd_ep_alloc>:
{
  4036a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036a6:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  4036a8:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  4036ac:	2c02      	cmp	r4, #2
  4036ae:	d867      	bhi.n	403780 <udd_ep_alloc+0xdc>
  4036b0:	00a3      	lsls	r3, r4, #2
  4036b2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4036b6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	if (Is_udd_endpoint_enabled(ep)) {
  4036ba:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4036bc:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4036c0:	d161      	bne.n	403786 <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4036c2:	f001 0503 	and.w	r5, r1, #3
  4036c6:	2d01      	cmp	r5, #1
  4036c8:	d050      	beq.n	40376c <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4036ca:	1f25      	subs	r5, r4, #4
  4036cc:	b2ed      	uxtb	r5, r5
  4036ce:	2d02      	cmp	r5, #2
  4036d0:	bf34      	ite	cc
  4036d2:	f44f 7500 	movcc.w	r5, #512	; 0x200
  4036d6:	2540      	movcs	r5, #64	; 0x40
  4036d8:	4295      	cmp	r5, r2
  4036da:	db58      	blt.n	40378e <udd_ep_alloc+0xea>
  4036dc:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  4036de:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  4036e0:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4036e4:	4d2b      	ldr	r5, [pc, #172]	; (403794 <udd_ep_alloc+0xf0>)
  4036e6:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  4036ea:	f105 0710 	add.w	r7, r5, #16
  4036ee:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  4036f2:	f362 0e09 	bfi	lr, r2, #0, #10
  4036f6:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  4036fa:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  4036fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  403700:	f36f 1245 	bfc	r2, #5, #1
  403704:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  403706:	2800      	cmp	r0, #0
  403708:	db35      	blt.n	403776 <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  40370a:	4e23      	ldr	r6, [pc, #140]	; (403798 <udd_ep_alloc+0xf4>)
  40370c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  40370e:	2201      	movs	r2, #1
  403710:	fa02 f404 	lsl.w	r4, r2, r4
  403714:	4325      	orrs	r5, r4
  403716:	62b5      	str	r5, [r6, #40]	; 0x28
  403718:	4635      	mov	r5, r6
  40371a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40371c:	4214      	tst	r4, r2
  40371e:	d0fc      	beq.n	40371a <udd_ep_alloc+0x76>
  403720:	4d1d      	ldr	r5, [pc, #116]	; (403798 <udd_ep_alloc+0xf4>)
  403722:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  403724:	ea22 0404 	bic.w	r4, r2, r4
  403728:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  40372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40372c:	9201      	str	r2, [sp, #4]
  40372e:	9a01      	ldr	r2, [sp, #4]
  403730:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403734:	9201      	str	r2, [sp, #4]
  403736:	9a01      	ldr	r2, [sp, #4]
  403738:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  40373c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403740:	9201      	str	r2, [sp, #4]
  403742:	2800      	cmp	r0, #0
  403744:	ea4f 2201 	mov.w	r2, r1, lsl #8
  403748:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40374c:	bfb4      	ite	lt
  40374e:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  403752:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  403756:	9901      	ldr	r1, [sp, #4]
  403758:	4311      	orrs	r1, r2
  40375a:	9101      	str	r1, [sp, #4]
  40375c:	9901      	ldr	r1, [sp, #4]
  40375e:	6319      	str	r1, [r3, #48]	; 0x30
  403760:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403762:	ea32 0101 	bics.w	r1, r2, r1
  403766:	d1fb      	bne.n	403760 <udd_ep_alloc+0xbc>
	return true;
  403768:	2001      	movs	r0, #1
  40376a:	e00a      	b.n	403782 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40376c:	b16c      	cbz	r4, 40378a <udd_ep_alloc+0xe6>
  40376e:	2c03      	cmp	r4, #3
  403770:	d1ab      	bne.n	4036ca <udd_ep_alloc+0x26>
		return false;
  403772:	2000      	movs	r0, #0
  403774:	e005      	b.n	403782 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  403776:	787a      	ldrb	r2, [r7, #1]
  403778:	f36f 0283 	bfc	r2, #2, #2
  40377c:	707a      	strb	r2, [r7, #1]
  40377e:	e7c4      	b.n	40370a <udd_ep_alloc+0x66>
		return false;
  403780:	2000      	movs	r0, #0
}
  403782:	b003      	add	sp, #12
  403784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  403786:	2000      	movs	r0, #0
  403788:	e7fb      	b.n	403782 <udd_ep_alloc+0xde>
		return false;
  40378a:	2000      	movs	r0, #0
  40378c:	e7f9      	b.n	403782 <udd_ep_alloc+0xde>
		return false;
  40378e:	2000      	movs	r0, #0
  403790:	e7f7      	b.n	403782 <udd_ep_alloc+0xde>
  403792:	bf00      	nop
  403794:	20006bc8 	.word	0x20006bc8
  403798:	40084000 	.word	0x40084000

0040379c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40379c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4037a0:	2a02      	cmp	r2, #2
  4037a2:	d822      	bhi.n	4037ea <udd_ep_free+0x4e>
{
  4037a4:	b500      	push	{lr}
  4037a6:	b083      	sub	sp, #12
  4037a8:	0091      	lsls	r1, r2, #2
  4037aa:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  4037ae:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
	udd_disable_endpoint(ep_index);
  4037b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4037b4:	9301      	str	r3, [sp, #4]
  4037b6:	9b01      	ldr	r3, [sp, #4]
  4037b8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4037bc:	9301      	str	r3, [sp, #4]
  4037be:	9b01      	ldr	r3, [sp, #4]
  4037c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4037c4:	9301      	str	r3, [sp, #4]
  4037c6:	9b01      	ldr	r3, [sp, #4]
  4037c8:	630b      	str	r3, [r1, #48]	; 0x30
  4037ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4037cc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4037d0:	d1fb      	bne.n	4037ca <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4037d2:	1e50      	subs	r0, r2, #1
  4037d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4037d8:	2101      	movs	r1, #1
  4037da:	4b04      	ldr	r3, [pc, #16]	; (4037ec <udd_ep_free+0x50>)
  4037dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4037e0:	4b03      	ldr	r3, [pc, #12]	; (4037f0 <udd_ep_free+0x54>)
  4037e2:	4798      	blx	r3
}
  4037e4:	b003      	add	sp, #12
  4037e6:	f85d fb04 	ldr.w	pc, [sp], #4
  4037ea:	4770      	bx	lr
  4037ec:	20006bc8 	.word	0x20006bc8
  4037f0:	00402849 	.word	0x00402849

004037f4 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4037f4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4037f8:	2802      	cmp	r0, #2
  4037fa:	d815      	bhi.n	403828 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  4037fc:	1e43      	subs	r3, r0, #1
  4037fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403802:	4a0a      	ldr	r2, [pc, #40]	; (40382c <udd_ep_is_halted+0x38>)
  403804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403808:	7c5b      	ldrb	r3, [r3, #17]
  40380a:	f013 0f20 	tst.w	r3, #32
  40380e:	d109      	bne.n	403824 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  403810:	300c      	adds	r0, #12
  403812:	4b07      	ldr	r3, [pc, #28]	; (403830 <udd_ep_is_halted+0x3c>)
  403814:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  403818:	f013 0f28 	tst.w	r3, #40	; 0x28
  40381c:	bf14      	ite	ne
  40381e:	2001      	movne	r0, #1
  403820:	2000      	moveq	r0, #0
  403822:	4770      	bx	lr
  403824:	2001      	movs	r0, #1
  403826:	4770      	bx	lr
		return false;
  403828:	2000      	movs	r0, #0
}
  40382a:	4770      	bx	lr
  40382c:	20006bc8 	.word	0x20006bc8
  403830:	40084000 	.word	0x40084000

00403834 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403834:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  403838:	2902      	cmp	r1, #2
  40383a:	d860      	bhi.n	4038fe <udd_ep_set_halt+0xca>
{
  40383c:	b410      	push	{r4}
  40383e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403840:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403844:	fab3 f383 	clz	r3, r3
  403848:	095b      	lsrs	r3, r3, #5
  40384a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40384c:	b672      	cpsid	i
  40384e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403852:	2200      	movs	r2, #0
  403854:	4b2d      	ldr	r3, [pc, #180]	; (40390c <udd_ep_set_halt+0xd8>)
  403856:	701a      	strb	r2, [r3, #0]
	return flags;
  403858:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40385a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40385e:	d125      	bne.n	4038ac <udd_ep_set_halt+0x78>
  403860:	008a      	lsls	r2, r1, #2
  403862:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  403866:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
		udd_enable_stall_handshake(ep_index);
  40386a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40386c:	9300      	str	r3, [sp, #0]
  40386e:	9b00      	ldr	r3, [sp, #0]
  403870:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403874:	9300      	str	r3, [sp, #0]
  403876:	9b00      	ldr	r3, [sp, #0]
  403878:	f043 0320 	orr.w	r3, r3, #32
  40387c:	9300      	str	r3, [sp, #0]
  40387e:	9b00      	ldr	r3, [sp, #0]
  403880:	6313      	str	r3, [r2, #48]	; 0x30
  403882:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403884:	f013 0f20 	tst.w	r3, #32
  403888:	d0fb      	beq.n	403882 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  40388a:	2301      	movs	r3, #1
  40388c:	fa03 f101 	lsl.w	r1, r3, r1
  403890:	4b1f      	ldr	r3, [pc, #124]	; (403910 <udd_ep_set_halt+0xdc>)
  403892:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  403894:	2c00      	cmp	r4, #0
  403896:	d036      	beq.n	403906 <udd_ep_set_halt+0xd2>
		cpu_irq_enable();
  403898:	2001      	movs	r0, #1
  40389a:	4b1c      	ldr	r3, [pc, #112]	; (40390c <udd_ep_set_halt+0xd8>)
  40389c:	7018      	strb	r0, [r3, #0]
  40389e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4038a2:	b662      	cpsie	i
}
  4038a4:	b003      	add	sp, #12
  4038a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4038aa:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4038ac:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4038ae:	f101 020c 	add.w	r2, r1, #12
  4038b2:	4817      	ldr	r0, [pc, #92]	; (403910 <udd_ep_set_halt+0xdc>)
  4038b4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4038b8:	f012 0f10 	tst.w	r2, #16
  4038bc:	d109      	bne.n	4038d2 <udd_ep_set_halt+0x9e>
				|| ptr_job->bank > 1)) {
  4038be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4038c2:	4814      	ldr	r0, [pc, #80]	; (403914 <udd_ep_set_halt+0xe0>)
  4038c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4038c8:	7c52      	ldrb	r2, [r2, #17]
  4038ca:	f3c2 0281 	ubfx	r2, r2, #2, #2
  4038ce:	2a01      	cmp	r2, #1
  4038d0:	ddc6      	ble.n	403860 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  4038d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4038d6:	4b0f      	ldr	r3, [pc, #60]	; (403914 <udd_ep_set_halt+0xe0>)
  4038d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4038dc:	7c5a      	ldrb	r2, [r3, #17]
  4038de:	f042 0220 	orr.w	r2, r2, #32
  4038e2:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4038e4:	2301      	movs	r3, #1
  4038e6:	fa03 f101 	lsl.w	r1, r3, r1
  4038ea:	4b09      	ldr	r3, [pc, #36]	; (403910 <udd_ep_set_halt+0xdc>)
  4038ec:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4038ee:	b144      	cbz	r4, 403902 <udd_ep_set_halt+0xce>
		cpu_irq_enable();
  4038f0:	2001      	movs	r0, #1
  4038f2:	4b06      	ldr	r3, [pc, #24]	; (40390c <udd_ep_set_halt+0xd8>)
  4038f4:	7018      	strb	r0, [r3, #0]
  4038f6:	f3bf 8f5f 	dmb	sy
  4038fa:	b662      	cpsie	i
  4038fc:	e7d2      	b.n	4038a4 <udd_ep_set_halt+0x70>
		return false;
  4038fe:	2000      	movs	r0, #0
  403900:	4770      	bx	lr
		return true;
  403902:	2001      	movs	r0, #1
  403904:	e7ce      	b.n	4038a4 <udd_ep_set_halt+0x70>
	return true;
  403906:	2001      	movs	r0, #1
  403908:	e7cc      	b.n	4038a4 <udd_ep_set_halt+0x70>
  40390a:	bf00      	nop
  40390c:	200000c8 	.word	0x200000c8
  403910:	40084000 	.word	0x40084000
  403914:	20006bc8 	.word	0x20006bc8

00403918 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  403918:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  40391c:	2802      	cmp	r0, #2
  40391e:	d85e      	bhi.n	4039de <udd_ep_clear_halt+0xc6>
{
  403920:	b530      	push	{r4, r5, lr}
  403922:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  403924:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  403926:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40392a:	4b2f      	ldr	r3, [pc, #188]	; (4039e8 <udd_ep_clear_halt+0xd0>)
  40392c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  403930:	7c5a      	ldrb	r2, [r3, #17]
  403932:	f36f 1245 	bfc	r2, #5, #1
  403936:	745a      	strb	r2, [r3, #17]
  403938:	0083      	lsls	r3, r0, #2
  40393a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40393e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	if (Is_udd_endpoint_stall_requested(ep)) {
  403942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403944:	f012 0f20 	tst.w	r2, #32
  403948:	d04b      	beq.n	4039e2 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  40394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40394c:	9200      	str	r2, [sp, #0]
  40394e:	9a00      	ldr	r2, [sp, #0]
  403950:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403954:	9200      	str	r2, [sp, #0]
  403956:	9a00      	ldr	r2, [sp, #0]
  403958:	f022 0220 	bic.w	r2, r2, #32
  40395c:	9200      	str	r2, [sp, #0]
  40395e:	9a00      	ldr	r2, [sp, #0]
  403960:	631a      	str	r2, [r3, #48]	; 0x30
  403962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403964:	f012 0f20 	tst.w	r2, #32
  403968:	d1fb      	bne.n	403962 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40396a:	4d20      	ldr	r5, [pc, #128]	; (4039ec <udd_ep_clear_halt+0xd4>)
  40396c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40396e:	2201      	movs	r2, #1
  403970:	fa02 f000 	lsl.w	r0, r2, r0
  403974:	4301      	orrs	r1, r0
  403976:	62a9      	str	r1, [r5, #40]	; 0x28
  403978:	4629      	mov	r1, r5
  40397a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  40397c:	4210      	tst	r0, r2
  40397e:	d0fc      	beq.n	40397a <udd_ep_clear_halt+0x62>
  403980:	491a      	ldr	r1, [pc, #104]	; (4039ec <udd_ep_clear_halt+0xd4>)
  403982:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  403984:	ea22 0000 	bic.w	r0, r2, r0
  403988:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40398a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40398c:	9201      	str	r2, [sp, #4]
  40398e:	9a01      	ldr	r2, [sp, #4]
  403990:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403994:	9201      	str	r2, [sp, #4]
  403996:	9a01      	ldr	r2, [sp, #4]
  403998:	f022 0208 	bic.w	r2, r2, #8
  40399c:	9201      	str	r2, [sp, #4]
  40399e:	9a01      	ldr	r2, [sp, #4]
  4039a0:	631a      	str	r2, [r3, #48]	; 0x30
  4039a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4039a4:	f012 0f08 	tst.w	r2, #8
  4039a8:	d1fb      	bne.n	4039a2 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  4039aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4039ae:	4a0e      	ldr	r2, [pc, #56]	; (4039e8 <udd_ep_clear_halt+0xd0>)
  4039b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4039b4:	7c5b      	ldrb	r3, [r3, #17]
  4039b6:	f013 0f10 	tst.w	r3, #16
  4039ba:	d101      	bne.n	4039c0 <udd_ep_clear_halt+0xa8>
	return true;
  4039bc:	2001      	movs	r0, #1
  4039be:	e011      	b.n	4039e4 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  4039c0:	4611      	mov	r1, r2
  4039c2:	00a2      	lsls	r2, r4, #2
  4039c4:	1913      	adds	r3, r2, r4
  4039c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4039ca:	7c58      	ldrb	r0, [r3, #17]
  4039cc:	f36f 1004 	bfc	r0, #4, #1
  4039d0:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  4039d2:	4414      	add	r4, r2
  4039d4:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  4039d8:	4798      	blx	r3
	return true;
  4039da:	2001      	movs	r0, #1
  4039dc:	e002      	b.n	4039e4 <udd_ep_clear_halt+0xcc>
		return false;
  4039de:	2000      	movs	r0, #0
  4039e0:	4770      	bx	lr
	return true;
  4039e2:	2001      	movs	r0, #1
}
  4039e4:	b003      	add	sp, #12
  4039e6:	bd30      	pop	{r4, r5, pc}
  4039e8:	20006bc8 	.word	0x20006bc8
  4039ec:	40084000 	.word	0x40084000

004039f0 <udd_ep_run>:
{
  4039f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4039f2:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  4039f4:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  4039f8:	2f02      	cmp	r7, #2
  4039fa:	f200 80a2 	bhi.w	403b42 <udd_ep_run+0x152>
  4039fe:	00bc      	lsls	r4, r7, #2
  403a00:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  403a04:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
	if ((!Is_udd_endpoint_enabled(ep))
  403a08:	6b25      	ldr	r5, [r4, #48]	; 0x30
  403a0a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  403a0e:	f000 809b 	beq.w	403b48 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  403a12:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  403a14:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  403a18:	4e50      	ldr	r6, [pc, #320]	; (403b5c <udd_ep_run+0x16c>)
  403a1a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  403a1e:	7c76      	ldrb	r6, [r6, #17]
  403a20:	f016 0f20 	tst.w	r6, #32
  403a24:	f040 8092 	bne.w	403b4c <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  403a28:	6b26      	ldr	r6, [r4, #48]	; 0x30
  403a2a:	f016 0f20 	tst.w	r6, #32
  403a2e:	f040 808f 	bne.w	403b50 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403a32:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403a36:	fab6 f686 	clz	r6, r6
  403a3a:	0976      	lsrs	r6, r6, #5
  403a3c:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403a3e:	b672      	cpsid	i
  403a40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403a44:	f04f 0e00 	mov.w	lr, #0
  403a48:	4e45      	ldr	r6, [pc, #276]	; (403b60 <udd_ep_run+0x170>)
  403a4a:	f886 e000 	strb.w	lr, [r6]
	return flags;
  403a4e:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  403a52:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  403a56:	4e41      	ldr	r6, [pc, #260]	; (403b5c <udd_ep_run+0x16c>)
  403a58:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  403a5c:	7c76      	ldrb	r6, [r6, #17]
  403a5e:	f016 0f10 	tst.w	r6, #16
  403a62:	d00a      	beq.n	403a7a <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  403a64:	f1bc 0f00 	cmp.w	ip, #0
  403a68:	d074      	beq.n	403b54 <udd_ep_run+0x164>
		cpu_irq_enable();
  403a6a:	2201      	movs	r2, #1
  403a6c:	4b3c      	ldr	r3, [pc, #240]	; (403b60 <udd_ep_run+0x170>)
  403a6e:	701a      	strb	r2, [r3, #0]
  403a70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403a74:	b662      	cpsie	i
		return false; // Job already on going
  403a76:	2000      	movs	r0, #0
  403a78:	e064      	b.n	403b44 <udd_ep_run+0x154>
	ptr_job->busy = true;
  403a7a:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  403a7e:	4e37      	ldr	r6, [pc, #220]	; (403b5c <udd_ep_run+0x16c>)
  403a80:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  403a84:	f896 e011 	ldrb.w	lr, [r6, #17]
  403a88:	f04e 0e10 	orr.w	lr, lr, #16
  403a8c:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  403a90:	f1bc 0f00 	cmp.w	ip, #0
  403a94:	d007      	beq.n	403aa6 <udd_ep_run+0xb6>
		cpu_irq_enable();
  403a96:	f04f 0e01 	mov.w	lr, #1
  403a9a:	4e31      	ldr	r6, [pc, #196]	; (403b60 <udd_ep_run+0x170>)
  403a9c:	f886 e000 	strb.w	lr, [r6]
  403aa0:	f3bf 8f5f 	dmb	sy
  403aa4:	b662      	cpsie	i
	ptr_job->buf = buf;
  403aa6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 403b5c <udd_ep_run+0x16c>
  403aaa:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  403aae:	00b6      	lsls	r6, r6, #2
  403ab0:	eb0c 0e06 	add.w	lr, ip, r6
  403ab4:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  403ab8:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  403abc:	2200      	movs	r2, #0
  403abe:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  403ac2:	9a08      	ldr	r2, [sp, #32]
  403ac4:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  403ac8:	b911      	cbnz	r1, 403ad0 <udd_ep_run+0xe0>
  403aca:	fab3 f183 	clz	r1, r3
  403ace:	0949      	lsrs	r1, r1, #5
  403ad0:	4a22      	ldr	r2, [pc, #136]	; (403b5c <udd_ep_run+0x16c>)
  403ad2:	00ae      	lsls	r6, r5, #2
  403ad4:	1973      	adds	r3, r6, r5
  403ad6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403ada:	7c5b      	ldrb	r3, [r3, #17]
  403adc:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  403ae0:	4435      	add	r5, r6
  403ae2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  403ae6:	f36f 13c7 	bfc	r3, #7, #1
  403aea:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403aec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403af0:	fab3 f383 	clz	r3, r3
  403af4:	095b      	lsrs	r3, r3, #5
  403af6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403af8:	b672      	cpsid	i
  403afa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403afe:	2200      	movs	r2, #0
  403b00:	4b17      	ldr	r3, [pc, #92]	; (403b60 <udd_ep_run+0x170>)
  403b02:	701a      	strb	r2, [r3, #0]
	return flags;
  403b04:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  403b06:	2301      	movs	r3, #1
  403b08:	40bb      	lsls	r3, r7
  403b0a:	4a16      	ldr	r2, [pc, #88]	; (403b64 <udd_ep_run+0x174>)
  403b0c:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  403b0e:	f010 0f80 	tst.w	r0, #128	; 0x80
  403b12:	d107      	bne.n	403b24 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  403b14:	b305      	cbz	r5, 403b58 <udd_ep_run+0x168>
		cpu_irq_enable();
  403b16:	2001      	movs	r0, #1
  403b18:	4b11      	ldr	r3, [pc, #68]	; (403b60 <udd_ep_run+0x170>)
  403b1a:	7018      	strb	r0, [r3, #0]
  403b1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403b20:	b662      	cpsie	i
  403b22:	e00f      	b.n	403b44 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  403b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403b26:	f013 0f11 	tst.w	r3, #17
  403b2a:	d1f3      	bne.n	403b14 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  403b2c:	2101      	movs	r1, #1
  403b2e:	4638      	mov	r0, r7
  403b30:	4b0d      	ldr	r3, [pc, #52]	; (403b68 <udd_ep_run+0x178>)
  403b32:	4798      	blx	r3
  403b34:	2800      	cmp	r0, #0
  403b36:	d0ed      	beq.n	403b14 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  403b38:	2100      	movs	r1, #0
  403b3a:	4638      	mov	r0, r7
  403b3c:	4b0a      	ldr	r3, [pc, #40]	; (403b68 <udd_ep_run+0x178>)
  403b3e:	4798      	blx	r3
  403b40:	e7e8      	b.n	403b14 <udd_ep_run+0x124>
		return false;
  403b42:	2000      	movs	r0, #0
}
  403b44:	b003      	add	sp, #12
  403b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  403b48:	2000      	movs	r0, #0
  403b4a:	e7fb      	b.n	403b44 <udd_ep_run+0x154>
  403b4c:	2000      	movs	r0, #0
  403b4e:	e7f9      	b.n	403b44 <udd_ep_run+0x154>
  403b50:	2000      	movs	r0, #0
  403b52:	e7f7      	b.n	403b44 <udd_ep_run+0x154>
		return false; // Job already on going
  403b54:	2000      	movs	r0, #0
  403b56:	e7f5      	b.n	403b44 <udd_ep_run+0x154>
	return true;
  403b58:	2001      	movs	r0, #1
  403b5a:	e7f3      	b.n	403b44 <udd_ep_run+0x154>
  403b5c:	20006bc8 	.word	0x20006bc8
  403b60:	200000c8 	.word	0x200000c8
  403b64:	40084000 	.word	0x40084000
  403b68:	0040295d 	.word	0x0040295d

00403b6c <udd_ep_abort>:
{
  403b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b6e:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  403b70:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  403b74:	2d02      	cmp	r5, #2
  403b76:	d840      	bhi.n	403bfa <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403b78:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403b7c:	fab3 f383 	clz	r3, r3
  403b80:	095b      	lsrs	r3, r3, #5
  403b82:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  403b84:	b672      	cpsid	i
  403b86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403b8a:	2200      	movs	r2, #0
  403b8c:	4b4b      	ldr	r3, [pc, #300]	; (403cbc <udd_ep_abort+0x150>)
  403b8e:	701a      	strb	r2, [r3, #0]
	return flags;
  403b90:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  403b92:	2401      	movs	r4, #1
  403b94:	40ac      	lsls	r4, r5
  403b96:	4a4a      	ldr	r2, [pc, #296]	; (403cc0 <udd_ep_abort+0x154>)
  403b98:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  403b9a:	b12b      	cbz	r3, 403ba8 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  403b9c:	2201      	movs	r2, #1
  403b9e:	4b47      	ldr	r3, [pc, #284]	; (403cbc <udd_ep_abort+0x150>)
  403ba0:	701a      	strb	r2, [r3, #0]
  403ba2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403ba6:	b662      	cpsie	i
	if (b_dir_in) {
  403ba8:	f010 0f80 	tst.w	r0, #128	; 0x80
  403bac:	d127      	bne.n	403bfe <udd_ep_abort+0x92>
  403bae:	00ae      	lsls	r6, r5, #2
  403bb0:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  403bb4:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
		while(Is_udd_any_bank_received(ep)) {
  403bb8:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403bba:	f013 0f42 	tst.w	r3, #66	; 0x42
  403bbe:	d006      	beq.n	403bce <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  403bc0:	4f40      	ldr	r7, [pc, #256]	; (403cc4 <udd_ep_abort+0x158>)
  403bc2:	4628      	mov	r0, r5
  403bc4:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  403bc6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403bc8:	f013 0f42 	tst.w	r3, #66	; 0x42
  403bcc:	d1f9      	bne.n	403bc2 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  403bce:	4a3c      	ldr	r2, [pc, #240]	; (403cc0 <udd_ep_abort+0x154>)
  403bd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403bd2:	4323      	orrs	r3, r4
  403bd4:	6293      	str	r3, [r2, #40]	; 0x28
  403bd6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403bd8:	421c      	tst	r4, r3
  403bda:	d0fc      	beq.n	403bd6 <udd_ep_abort+0x6a>
  403bdc:	4a38      	ldr	r2, [pc, #224]	; (403cc0 <udd_ep_abort+0x154>)
  403bde:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403be0:	ea23 0404 	bic.w	r4, r3, r4
  403be4:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403be6:	1e68      	subs	r0, r5, #1
  403be8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403bec:	462a      	mov	r2, r5
  403bee:	2101      	movs	r1, #1
  403bf0:	4b35      	ldr	r3, [pc, #212]	; (403cc8 <udd_ep_abort+0x15c>)
  403bf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403bf6:	4b35      	ldr	r3, [pc, #212]	; (403ccc <udd_ep_abort+0x160>)
  403bf8:	4798      	blx	r3
}
  403bfa:	b007      	add	sp, #28
  403bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403bfe:	00ab      	lsls	r3, r5, #2
  403c00:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403c04:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
		if (Is_udd_transmit_ready(ep)) {
  403c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c0a:	f012 0f10 	tst.w	r2, #16
  403c0e:	d03a      	beq.n	403c86 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  403c10:	b34d      	cbz	r5, 403c66 <udd_ep_abort+0xfa>
  403c12:	2d03      	cmp	r5, #3
  403c14:	d027      	beq.n	403c66 <udd_ep_abort+0xfa>
  403c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c18:	9201      	str	r2, [sp, #4]
  403c1a:	9a01      	ldr	r2, [sp, #4]
  403c1c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403c20:	9201      	str	r2, [sp, #4]
  403c22:	9a01      	ldr	r2, [sp, #4]
  403c24:	f022 0210 	bic.w	r2, r2, #16
  403c28:	9201      	str	r2, [sp, #4]
  403c2a:	9a01      	ldr	r2, [sp, #4]
  403c2c:	631a      	str	r2, [r3, #48]	; 0x30
  403c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c30:	f012 0f10 	tst.w	r2, #16
  403c34:	d1fb      	bne.n	403c2e <udd_ep_abort+0xc2>
  403c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c38:	f012 0f10 	tst.w	r2, #16
  403c3c:	d1fb      	bne.n	403c36 <udd_ep_abort+0xca>
  403c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c40:	9202      	str	r2, [sp, #8]
  403c42:	9a02      	ldr	r2, [sp, #8]
  403c44:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403c48:	9202      	str	r2, [sp, #8]
  403c4a:	9a02      	ldr	r2, [sp, #8]
  403c4c:	f042 0210 	orr.w	r2, r2, #16
  403c50:	9202      	str	r2, [sp, #8]
  403c52:	9a02      	ldr	r2, [sp, #8]
  403c54:	631a      	str	r2, [r3, #48]	; 0x30
  403c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c58:	f012 0f10 	tst.w	r2, #16
  403c5c:	d0fb      	beq.n	403c56 <udd_ep_abort+0xea>
  403c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c60:	f012 0f10 	tst.w	r2, #16
  403c64:	d0fb      	beq.n	403c5e <udd_ep_abort+0xf2>
  403c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c68:	9203      	str	r2, [sp, #12]
  403c6a:	9a03      	ldr	r2, [sp, #12]
  403c6c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403c70:	9203      	str	r2, [sp, #12]
  403c72:	9a03      	ldr	r2, [sp, #12]
  403c74:	f022 0210 	bic.w	r2, r2, #16
  403c78:	9203      	str	r2, [sp, #12]
  403c7a:	9a03      	ldr	r2, [sp, #12]
  403c7c:	631a      	str	r2, [r3, #48]	; 0x30
  403c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c80:	f012 0f10 	tst.w	r2, #16
  403c84:	d1fb      	bne.n	403c7e <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  403c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403c88:	9204      	str	r2, [sp, #16]
  403c8a:	9a04      	ldr	r2, [sp, #16]
  403c8c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403c90:	9204      	str	r2, [sp, #16]
  403c92:	9a04      	ldr	r2, [sp, #16]
  403c94:	f022 0201 	bic.w	r2, r2, #1
  403c98:	9204      	str	r2, [sp, #16]
  403c9a:	9a04      	ldr	r2, [sp, #16]
  403c9c:	631a      	str	r2, [r3, #48]	; 0x30
  403c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403ca0:	f012 0f01 	tst.w	r2, #1
  403ca4:	d1fb      	bne.n	403c9e <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  403ca6:	1e6b      	subs	r3, r5, #1
  403ca8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  403cac:	4b06      	ldr	r3, [pc, #24]	; (403cc8 <udd_ep_abort+0x15c>)
  403cae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  403cb2:	7c5a      	ldrb	r2, [r3, #17]
  403cb4:	f36f 0283 	bfc	r2, #2, #2
  403cb8:	745a      	strb	r2, [r3, #17]
  403cba:	e788      	b.n	403bce <udd_ep_abort+0x62>
  403cbc:	200000c8 	.word	0x200000c8
  403cc0:	40084000 	.word	0x40084000
  403cc4:	00402889 	.word	0x00402889
  403cc8:	20006bc8 	.word	0x20006bc8
  403ccc:	00402849 	.word	0x00402849

00403cd0 <udd_ep_wait_stall_clear>:
	ep &= USB_EP_ADDR_MASK;
  403cd0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  403cd4:	2802      	cmp	r0, #2
  403cd6:	d82b      	bhi.n	403d30 <udd_ep_wait_stall_clear+0x60>
{
  403cd8:	b538      	push	{r3, r4, r5, lr}
  403cda:	0083      	lsls	r3, r0, #2
  403cdc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403ce0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	if (!Is_udd_endpoint_enabled(ep)) {
  403ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403ce6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  403cea:	d023      	beq.n	403d34 <udd_ep_wait_stall_clear+0x64>
	ptr_job = &udd_ep_job[ep - 1];
  403cec:	3801      	subs	r0, #1
	if (ptr_job->busy == true) {
  403cee:	eb00 0480 	add.w	r4, r0, r0, lsl #2
  403cf2:	4a12      	ldr	r2, [pc, #72]	; (403d3c <udd_ep_wait_stall_clear+0x6c>)
  403cf4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
  403cf8:	7c52      	ldrb	r2, [r2, #17]
  403cfa:	f012 0f10 	tst.w	r2, #16
  403cfe:	d11b      	bne.n	403d38 <udd_ep_wait_stall_clear+0x68>
	if (Is_udd_endpoint_stall_requested(ep)
  403d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d02:	f013 0f20 	tst.w	r3, #32
  403d06:	d102      	bne.n	403d0e <udd_ep_wait_stall_clear+0x3e>
			|| ptr_job->b_stall_requested) {
  403d08:	f012 0f20 	tst.w	r2, #32
  403d0c:	d00d      	beq.n	403d2a <udd_ep_wait_stall_clear+0x5a>
		ptr_job->busy = true;
  403d0e:	4d0b      	ldr	r5, [pc, #44]	; (403d3c <udd_ep_wait_stall_clear+0x6c>)
  403d10:	0082      	lsls	r2, r0, #2
  403d12:	1813      	adds	r3, r2, r0
  403d14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403d18:	7c5c      	ldrb	r4, [r3, #17]
  403d1a:	f044 0410 	orr.w	r4, r4, #16
  403d1e:	745c      	strb	r4, [r3, #17]
		ptr_job->call_nohalt = callback;
  403d20:	4410      	add	r0, r2
  403d22:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	return true;
  403d26:	2001      	movs	r0, #1
		ptr_job->call_nohalt = callback;
  403d28:	bd38      	pop	{r3, r4, r5, pc}
		callback();
  403d2a:	4788      	blx	r1
	return true;
  403d2c:	2001      	movs	r0, #1
  403d2e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
  403d30:	2000      	movs	r0, #0
  403d32:	4770      	bx	lr
		return false; // Endpoint not enabled
  403d34:	2000      	movs	r0, #0
  403d36:	bd38      	pop	{r3, r4, r5, pc}
		return false; // Job already on going
  403d38:	2000      	movs	r0, #0
}
  403d3a:	bd38      	pop	{r3, r4, r5, pc}
  403d3c:	20006bc8 	.word	0x20006bc8

00403d40 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403d40:	6943      	ldr	r3, [r0, #20]
  403d42:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  403d46:	bf1d      	ittte	ne
  403d48:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  403d4c:	61c1      	strne	r1, [r0, #28]
	return 0;
  403d4e:	2000      	movne	r0, #0
		return 1;
  403d50:	2001      	moveq	r0, #1
}
  403d52:	4770      	bx	lr

00403d54 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403d54:	6943      	ldr	r3, [r0, #20]
  403d56:	f013 0f01 	tst.w	r3, #1
  403d5a:	d005      	beq.n	403d68 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403d5c:	6983      	ldr	r3, [r0, #24]
  403d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403d62:	600b      	str	r3, [r1, #0]

	return 0;
  403d64:	2000      	movs	r0, #0
  403d66:	4770      	bx	lr
		return 1;
  403d68:	2001      	movs	r0, #1
}
  403d6a:	4770      	bx	lr

00403d6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403d6c:	e7fe      	b.n	403d6c <Dummy_Handler>
	...

00403d70 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403d70:	b500      	push	{lr}
  403d72:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  403d74:	4b25      	ldr	r3, [pc, #148]	; (403e0c <Reset_Handler+0x9c>)
  403d76:	4a26      	ldr	r2, [pc, #152]	; (403e10 <Reset_Handler+0xa0>)
  403d78:	429a      	cmp	r2, r3
  403d7a:	d010      	beq.n	403d9e <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  403d7c:	4b25      	ldr	r3, [pc, #148]	; (403e14 <Reset_Handler+0xa4>)
  403d7e:	4a23      	ldr	r2, [pc, #140]	; (403e0c <Reset_Handler+0x9c>)
  403d80:	429a      	cmp	r2, r3
  403d82:	d20c      	bcs.n	403d9e <Reset_Handler+0x2e>
  403d84:	3b01      	subs	r3, #1
  403d86:	1a9b      	subs	r3, r3, r2
  403d88:	f023 0303 	bic.w	r3, r3, #3
  403d8c:	3304      	adds	r3, #4
  403d8e:	4413      	add	r3, r2
  403d90:	491f      	ldr	r1, [pc, #124]	; (403e10 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  403d92:	f851 0b04 	ldr.w	r0, [r1], #4
  403d96:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  403d9a:	429a      	cmp	r2, r3
  403d9c:	d1f9      	bne.n	403d92 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403d9e:	4b1e      	ldr	r3, [pc, #120]	; (403e18 <Reset_Handler+0xa8>)
  403da0:	4a1e      	ldr	r2, [pc, #120]	; (403e1c <Reset_Handler+0xac>)
  403da2:	429a      	cmp	r2, r3
  403da4:	d20a      	bcs.n	403dbc <Reset_Handler+0x4c>
  403da6:	3b01      	subs	r3, #1
  403da8:	1a9b      	subs	r3, r3, r2
  403daa:	f023 0303 	bic.w	r3, r3, #3
  403dae:	3304      	adds	r3, #4
  403db0:	4413      	add	r3, r2
		*pDest++ = 0;
  403db2:	2100      	movs	r1, #0
  403db4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403db8:	4293      	cmp	r3, r2
  403dba:	d1fb      	bne.n	403db4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403dbc:	4a18      	ldr	r2, [pc, #96]	; (403e20 <Reset_Handler+0xb0>)
  403dbe:	4b19      	ldr	r3, [pc, #100]	; (403e24 <Reset_Handler+0xb4>)
  403dc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403dc4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403dc6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403dca:	fab3 f383 	clz	r3, r3
  403dce:	095b      	lsrs	r3, r3, #5
  403dd0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403dd2:	b672      	cpsid	i
  403dd4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403dd8:	2200      	movs	r2, #0
  403dda:	4b13      	ldr	r3, [pc, #76]	; (403e28 <Reset_Handler+0xb8>)
  403ddc:	701a      	strb	r2, [r3, #0]
	return flags;
  403dde:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403de0:	4a12      	ldr	r2, [pc, #72]	; (403e2c <Reset_Handler+0xbc>)
  403de2:	6813      	ldr	r3, [r2, #0]
  403de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403de8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  403dea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403dee:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  403df2:	b129      	cbz	r1, 403e00 <Reset_Handler+0x90>
		cpu_irq_enable();
  403df4:	2201      	movs	r2, #1
  403df6:	4b0c      	ldr	r3, [pc, #48]	; (403e28 <Reset_Handler+0xb8>)
  403df8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403dfa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403dfe:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  403e00:	4b0b      	ldr	r3, [pc, #44]	; (403e30 <Reset_Handler+0xc0>)
  403e02:	4798      	blx	r3

	/* Branch to main function */
	main();
  403e04:	4b0b      	ldr	r3, [pc, #44]	; (403e34 <Reset_Handler+0xc4>)
  403e06:	4798      	blx	r3
  403e08:	e7fe      	b.n	403e08 <Reset_Handler+0x98>
  403e0a:	bf00      	nop
  403e0c:	20000000 	.word	0x20000000
  403e10:	00414454 	.word	0x00414454
  403e14:	20000aa8 	.word	0x20000aa8
  403e18:	200134cc 	.word	0x200134cc
  403e1c:	20000aa8 	.word	0x20000aa8
  403e20:	e000ed00 	.word	0xe000ed00
  403e24:	00400000 	.word	0x00400000
  403e28:	200000c8 	.word	0x200000c8
  403e2c:	e000ed88 	.word	0xe000ed88
  403e30:	0040c301 	.word	0x0040c301
  403e34:	0040bfdd 	.word	0x0040bfdd

00403e38 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403e38:	4b3b      	ldr	r3, [pc, #236]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403e3c:	f003 0303 	and.w	r3, r3, #3
  403e40:	2b01      	cmp	r3, #1
  403e42:	d01d      	beq.n	403e80 <SystemCoreClockUpdate+0x48>
  403e44:	b183      	cbz	r3, 403e68 <SystemCoreClockUpdate+0x30>
  403e46:	2b02      	cmp	r3, #2
  403e48:	d036      	beq.n	403eb8 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  403e4a:	4b37      	ldr	r3, [pc, #220]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403e52:	2b70      	cmp	r3, #112	; 0x70
  403e54:	d05f      	beq.n	403f16 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  403e56:	4b34      	ldr	r3, [pc, #208]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403e5a:	4934      	ldr	r1, [pc, #208]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403e5c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403e60:	680b      	ldr	r3, [r1, #0]
  403e62:	40d3      	lsrs	r3, r2
  403e64:	600b      	str	r3, [r1, #0]
  403e66:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403e68:	4b31      	ldr	r3, [pc, #196]	; (403f30 <SystemCoreClockUpdate+0xf8>)
  403e6a:	695b      	ldr	r3, [r3, #20]
  403e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403e70:	bf14      	ite	ne
  403e72:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403e76:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403e7a:	4b2c      	ldr	r3, [pc, #176]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403e7c:	601a      	str	r2, [r3, #0]
  403e7e:	e7e4      	b.n	403e4a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403e80:	4b29      	ldr	r3, [pc, #164]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403e82:	6a1b      	ldr	r3, [r3, #32]
  403e84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403e88:	d003      	beq.n	403e92 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403e8a:	4a2a      	ldr	r2, [pc, #168]	; (403f34 <SystemCoreClockUpdate+0xfc>)
  403e8c:	4b27      	ldr	r3, [pc, #156]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403e8e:	601a      	str	r2, [r3, #0]
  403e90:	e7db      	b.n	403e4a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403e92:	4a29      	ldr	r2, [pc, #164]	; (403f38 <SystemCoreClockUpdate+0x100>)
  403e94:	4b25      	ldr	r3, [pc, #148]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403e96:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403e98:	4b23      	ldr	r3, [pc, #140]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403e9a:	6a1b      	ldr	r3, [r3, #32]
  403e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ea0:	2b10      	cmp	r3, #16
  403ea2:	d005      	beq.n	403eb0 <SystemCoreClockUpdate+0x78>
  403ea4:	2b20      	cmp	r3, #32
  403ea6:	d1d0      	bne.n	403e4a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  403ea8:	4a22      	ldr	r2, [pc, #136]	; (403f34 <SystemCoreClockUpdate+0xfc>)
  403eaa:	4b20      	ldr	r3, [pc, #128]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403eac:	601a      	str	r2, [r3, #0]
				break;
  403eae:	e7cc      	b.n	403e4a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  403eb0:	4a22      	ldr	r2, [pc, #136]	; (403f3c <SystemCoreClockUpdate+0x104>)
  403eb2:	4b1e      	ldr	r3, [pc, #120]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403eb4:	601a      	str	r2, [r3, #0]
				break;
  403eb6:	e7c8      	b.n	403e4a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403eb8:	4b1b      	ldr	r3, [pc, #108]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403eba:	6a1b      	ldr	r3, [r3, #32]
  403ebc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403ec0:	d016      	beq.n	403ef0 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403ec2:	4a1c      	ldr	r2, [pc, #112]	; (403f34 <SystemCoreClockUpdate+0xfc>)
  403ec4:	4b19      	ldr	r3, [pc, #100]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403ec6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  403ec8:	4b17      	ldr	r3, [pc, #92]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ecc:	f003 0303 	and.w	r3, r3, #3
  403ed0:	2b02      	cmp	r3, #2
  403ed2:	d1ba      	bne.n	403e4a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403ed4:	4a14      	ldr	r2, [pc, #80]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403ed6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403ed8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403eda:	4814      	ldr	r0, [pc, #80]	; (403f2c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403edc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403ee0:	6803      	ldr	r3, [r0, #0]
  403ee2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403ee6:	b2d2      	uxtb	r2, r2
  403ee8:	fbb3 f3f2 	udiv	r3, r3, r2
  403eec:	6003      	str	r3, [r0, #0]
  403eee:	e7ac      	b.n	403e4a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403ef0:	4a11      	ldr	r2, [pc, #68]	; (403f38 <SystemCoreClockUpdate+0x100>)
  403ef2:	4b0e      	ldr	r3, [pc, #56]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403ef4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403ef6:	4b0c      	ldr	r3, [pc, #48]	; (403f28 <SystemCoreClockUpdate+0xf0>)
  403ef8:	6a1b      	ldr	r3, [r3, #32]
  403efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403efe:	2b10      	cmp	r3, #16
  403f00:	d005      	beq.n	403f0e <SystemCoreClockUpdate+0xd6>
  403f02:	2b20      	cmp	r3, #32
  403f04:	d1e0      	bne.n	403ec8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  403f06:	4a0b      	ldr	r2, [pc, #44]	; (403f34 <SystemCoreClockUpdate+0xfc>)
  403f08:	4b08      	ldr	r3, [pc, #32]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403f0a:	601a      	str	r2, [r3, #0]
				break;
  403f0c:	e7dc      	b.n	403ec8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  403f0e:	4a0b      	ldr	r2, [pc, #44]	; (403f3c <SystemCoreClockUpdate+0x104>)
  403f10:	4b06      	ldr	r3, [pc, #24]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403f12:	601a      	str	r2, [r3, #0]
				break;
  403f14:	e7d8      	b.n	403ec8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  403f16:	4a05      	ldr	r2, [pc, #20]	; (403f2c <SystemCoreClockUpdate+0xf4>)
  403f18:	6813      	ldr	r3, [r2, #0]
  403f1a:	4909      	ldr	r1, [pc, #36]	; (403f40 <SystemCoreClockUpdate+0x108>)
  403f1c:	fba1 1303 	umull	r1, r3, r1, r3
  403f20:	085b      	lsrs	r3, r3, #1
  403f22:	6013      	str	r3, [r2, #0]
  403f24:	4770      	bx	lr
  403f26:	bf00      	nop
  403f28:	400e0400 	.word	0x400e0400
  403f2c:	200000d0 	.word	0x200000d0
  403f30:	400e1810 	.word	0x400e1810
  403f34:	00b71b00 	.word	0x00b71b00
  403f38:	003d0900 	.word	0x003d0900
  403f3c:	007a1200 	.word	0x007a1200
  403f40:	aaaaaaab 	.word	0xaaaaaaab

00403f44 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403f44:	4b12      	ldr	r3, [pc, #72]	; (403f90 <system_init_flash+0x4c>)
  403f46:	4298      	cmp	r0, r3
  403f48:	d911      	bls.n	403f6e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  403f4a:	4b12      	ldr	r3, [pc, #72]	; (403f94 <system_init_flash+0x50>)
  403f4c:	4298      	cmp	r0, r3
  403f4e:	d913      	bls.n	403f78 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  403f50:	4b11      	ldr	r3, [pc, #68]	; (403f98 <system_init_flash+0x54>)
  403f52:	4298      	cmp	r0, r3
  403f54:	d914      	bls.n	403f80 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403f56:	4b11      	ldr	r3, [pc, #68]	; (403f9c <system_init_flash+0x58>)
  403f58:	4298      	cmp	r0, r3
  403f5a:	d915      	bls.n	403f88 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403f5c:	4b10      	ldr	r3, [pc, #64]	; (403fa0 <system_init_flash+0x5c>)
  403f5e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403f60:	bf94      	ite	ls
  403f62:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403f66:	4a0f      	ldrhi	r2, [pc, #60]	; (403fa4 <system_init_flash+0x60>)
  403f68:	4b0f      	ldr	r3, [pc, #60]	; (403fa8 <system_init_flash+0x64>)
  403f6a:	601a      	str	r2, [r3, #0]
  403f6c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403f6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403f72:	4b0d      	ldr	r3, [pc, #52]	; (403fa8 <system_init_flash+0x64>)
  403f74:	601a      	str	r2, [r3, #0]
  403f76:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403f78:	4a0c      	ldr	r2, [pc, #48]	; (403fac <system_init_flash+0x68>)
  403f7a:	4b0b      	ldr	r3, [pc, #44]	; (403fa8 <system_init_flash+0x64>)
  403f7c:	601a      	str	r2, [r3, #0]
  403f7e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403f80:	4a0b      	ldr	r2, [pc, #44]	; (403fb0 <system_init_flash+0x6c>)
  403f82:	4b09      	ldr	r3, [pc, #36]	; (403fa8 <system_init_flash+0x64>)
  403f84:	601a      	str	r2, [r3, #0]
  403f86:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403f88:	4a0a      	ldr	r2, [pc, #40]	; (403fb4 <system_init_flash+0x70>)
  403f8a:	4b07      	ldr	r3, [pc, #28]	; (403fa8 <system_init_flash+0x64>)
  403f8c:	601a      	str	r2, [r3, #0]
  403f8e:	4770      	bx	lr
  403f90:	01312cff 	.word	0x01312cff
  403f94:	026259ff 	.word	0x026259ff
  403f98:	039386ff 	.word	0x039386ff
  403f9c:	04c4b3ff 	.word	0x04c4b3ff
  403fa0:	05f5e0ff 	.word	0x05f5e0ff
  403fa4:	04000500 	.word	0x04000500
  403fa8:	400e0a00 	.word	0x400e0a00
  403fac:	04000100 	.word	0x04000100
  403fb0:	04000200 	.word	0x04000200
  403fb4:	04000300 	.word	0x04000300

00403fb8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403fb8:	4b0a      	ldr	r3, [pc, #40]	; (403fe4 <_sbrk+0x2c>)
  403fba:	681b      	ldr	r3, [r3, #0]
  403fbc:	b153      	cbz	r3, 403fd4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403fbe:	4b09      	ldr	r3, [pc, #36]	; (403fe4 <_sbrk+0x2c>)
  403fc0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403fc2:	181a      	adds	r2, r3, r0
  403fc4:	4908      	ldr	r1, [pc, #32]	; (403fe8 <_sbrk+0x30>)
  403fc6:	4291      	cmp	r1, r2
  403fc8:	db08      	blt.n	403fdc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403fca:	4610      	mov	r0, r2
  403fcc:	4a05      	ldr	r2, [pc, #20]	; (403fe4 <_sbrk+0x2c>)
  403fce:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403fd0:	4618      	mov	r0, r3
  403fd2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403fd4:	4a05      	ldr	r2, [pc, #20]	; (403fec <_sbrk+0x34>)
  403fd6:	4b03      	ldr	r3, [pc, #12]	; (403fe4 <_sbrk+0x2c>)
  403fd8:	601a      	str	r2, [r3, #0]
  403fda:	e7f0      	b.n	403fbe <_sbrk+0x6>
		return (caddr_t) -1;	
  403fdc:	f04f 30ff 	mov.w	r0, #4294967295
}
  403fe0:	4770      	bx	lr
  403fe2:	bf00      	nop
  403fe4:	20006bf0 	.word	0x20006bf0
  403fe8:	2001fffc 	.word	0x2001fffc
  403fec:	200164d0 	.word	0x200164d0

00403ff0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403ff0:	f04f 30ff 	mov.w	r0, #4294967295
  403ff4:	4770      	bx	lr

00403ff6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403ffa:	604b      	str	r3, [r1, #4]

	return 0;
}
  403ffc:	2000      	movs	r0, #0
  403ffe:	4770      	bx	lr

00404000 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404000:	2001      	movs	r0, #1
  404002:	4770      	bx	lr

00404004 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404004:	2000      	movs	r0, #0
  404006:	4770      	bx	lr

00404008 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
  404008:	b510      	push	{r4, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
  40400a:	2018      	movs	r0, #24
  40400c:	4b05      	ldr	r3, [pc, #20]	; (404024 <xEventGroupCreate+0x1c>)
  40400e:	4798      	blx	r3

		if( pxEventBits != NULL )
  404010:	4604      	mov	r4, r0
  404012:	b120      	cbz	r0, 40401e <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
  404014:	2300      	movs	r3, #0
  404016:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  40401a:	4b03      	ldr	r3, [pc, #12]	; (404028 <xEventGroupCreate+0x20>)
  40401c:	4798      	blx	r3
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
  40401e:	4620      	mov	r0, r4
  404020:	bd10      	pop	{r4, pc}
  404022:	bf00      	nop
  404024:	0040a0a1 	.word	0x0040a0a1
  404028:	00409c5d 	.word	0x00409c5d

0040402c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
  40402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404030:	4606      	mov	r6, r0
  404032:	460d      	mov	r5, r1
  404034:	4690      	mov	r8, r2
  404036:	461f      	mov	r7, r3
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
  404038:	4b2b      	ldr	r3, [pc, #172]	; (4040e8 <xEventGroupWaitBits+0xbc>)
  40403a:	4798      	blx	r3
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
  40403c:	6834      	ldr	r4, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
  40403e:	b97f      	cbnz	r7, 404060 <xEventGroupWaitBits+0x34>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  404040:	422c      	tst	r4, r5
  404042:	bf14      	ite	ne
  404044:	2301      	movne	r3, #1
  404046:	2300      	moveq	r3, #0
		if( xWaitConditionMet != pdFALSE )
  404048:	b183      	cbz	r3, 40406c <xEventGroupWaitBits+0x40>
			if( xClearOnExit != pdFALSE )
  40404a:	f1b8 0f00 	cmp.w	r8, #0
  40404e:	d002      	beq.n	404056 <xEventGroupWaitBits+0x2a>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
  404050:	ea24 0505 	bic.w	r5, r4, r5
  404054:	6035      	str	r5, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
  404056:	4b25      	ldr	r3, [pc, #148]	; (4040ec <xEventGroupWaitBits+0xc0>)
  404058:	4798      	blx	r3
  40405a:	4620      	mov	r0, r4
}
  40405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  404060:	ea35 0304 	bics.w	r3, r5, r4
  404064:	bf0c      	ite	eq
  404066:	2301      	moveq	r3, #1
  404068:	2300      	movne	r3, #0
  40406a:	e7ed      	b.n	404048 <xEventGroupWaitBits+0x1c>
		else if( xTicksToWait == ( TickType_t ) 0 )
  40406c:	9b06      	ldr	r3, [sp, #24]
  40406e:	2b00      	cmp	r3, #0
  404070:	d0f1      	beq.n	404056 <xEventGroupWaitBits+0x2a>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
  404072:	f1b8 0f00 	cmp.w	r8, #0
  404076:	bf0c      	ite	eq
  404078:	2100      	moveq	r1, #0
  40407a:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
  40407e:	b10f      	cbz	r7, 404084 <xEventGroupWaitBits+0x58>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
  404080:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
  404084:	9a06      	ldr	r2, [sp, #24]
  404086:	4329      	orrs	r1, r5
  404088:	1d30      	adds	r0, r6, #4
  40408a:	4b19      	ldr	r3, [pc, #100]	; (4040f0 <xEventGroupWaitBits+0xc4>)
  40408c:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
  40408e:	4b17      	ldr	r3, [pc, #92]	; (4040ec <xEventGroupWaitBits+0xc0>)
  404090:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  404092:	b938      	cbnz	r0, 4040a4 <xEventGroupWaitBits+0x78>
			portYIELD_WITHIN_API();
  404094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404098:	4b16      	ldr	r3, [pc, #88]	; (4040f4 <xEventGroupWaitBits+0xc8>)
  40409a:	601a      	str	r2, [r3, #0]
  40409c:	f3bf 8f4f 	dsb	sy
  4040a0:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
  4040a4:	4b14      	ldr	r3, [pc, #80]	; (4040f8 <xEventGroupWaitBits+0xcc>)
  4040a6:	4798      	blx	r3
  4040a8:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
  4040aa:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
  4040ae:	d003      	beq.n	4040b8 <xEventGroupWaitBits+0x8c>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
  4040b0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	return uxReturn;
  4040b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			taskENTER_CRITICAL();
  4040b8:	4b10      	ldr	r3, [pc, #64]	; (4040fc <xEventGroupWaitBits+0xd0>)
  4040ba:	4798      	blx	r3
				uxReturn = pxEventBits->uxEventBits;
  4040bc:	6834      	ldr	r4, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
  4040be:	b96f      	cbnz	r7, 4040dc <xEventGroupWaitBits+0xb0>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  4040c0:	4225      	tst	r5, r4
  4040c2:	bf14      	ite	ne
  4040c4:	2301      	movne	r3, #1
  4040c6:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
  4040c8:	b12b      	cbz	r3, 4040d6 <xEventGroupWaitBits+0xaa>
					if( xClearOnExit != pdFALSE )
  4040ca:	f1b8 0f00 	cmp.w	r8, #0
  4040ce:	d002      	beq.n	4040d6 <xEventGroupWaitBits+0xaa>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
  4040d0:	ea24 0505 	bic.w	r5, r4, r5
  4040d4:	6035      	str	r5, [r6, #0]
			taskEXIT_CRITICAL();
  4040d6:	4b0a      	ldr	r3, [pc, #40]	; (404100 <xEventGroupWaitBits+0xd4>)
  4040d8:	4798      	blx	r3
  4040da:	e7e9      	b.n	4040b0 <xEventGroupWaitBits+0x84>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  4040dc:	ea35 0304 	bics.w	r3, r5, r4
  4040e0:	bf0c      	ite	eq
  4040e2:	2301      	moveq	r3, #1
  4040e4:	2300      	movne	r3, #0
  4040e6:	e7ef      	b.n	4040c8 <xEventGroupWaitBits+0x9c>
  4040e8:	0040b639 	.word	0x0040b639
  4040ec:	0040b775 	.word	0x0040b775
  4040f0:	0040b94d 	.word	0x0040b94d
  4040f4:	e000ed04 	.word	0xe000ed04
  4040f8:	0040bcf5 	.word	0x0040bcf5
  4040fc:	00409f15 	.word	0x00409f15
  404100:	00409f35 	.word	0x00409f35

00404104 <xEventGroupClearBits>:
{
  404104:	b570      	push	{r4, r5, r6, lr}
  404106:	4606      	mov	r6, r0
  404108:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  40410a:	4b05      	ldr	r3, [pc, #20]	; (404120 <xEventGroupClearBits+0x1c>)
  40410c:	4798      	blx	r3
		uxReturn = pxEventBits->uxEventBits;
  40410e:	6835      	ldr	r5, [r6, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  404110:	ea25 0404 	bic.w	r4, r5, r4
  404114:	6034      	str	r4, [r6, #0]
	taskEXIT_CRITICAL();
  404116:	4b03      	ldr	r3, [pc, #12]	; (404124 <xEventGroupClearBits+0x20>)
  404118:	4798      	blx	r3
}
  40411a:	4628      	mov	r0, r5
  40411c:	bd70      	pop	{r4, r5, r6, pc}
  40411e:	bf00      	nop
  404120:	00409f15 	.word	0x00409f15
  404124:	00409f35 	.word	0x00409f35

00404128 <xEventGroupSetBits>:
{
  404128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40412c:	4605      	mov	r5, r0
  40412e:	460c      	mov	r4, r1
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  404130:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
  404134:	4b1b      	ldr	r3, [pc, #108]	; (4041a4 <xEventGroupSetBits+0x7c>)
  404136:	4798      	blx	r3
		pxListItem = listGET_HEAD_ENTRY( pxList );
  404138:	6928      	ldr	r0, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
  40413a:	6829      	ldr	r1, [r5, #0]
  40413c:	4321      	orrs	r1, r4
  40413e:	6029      	str	r1, [r5, #0]
		while( pxListItem != pxListEnd )
  404140:	4286      	cmp	r6, r0
  404142:	d024      	beq.n	40418e <xEventGroupSetBits+0x66>
  404144:	2700      	movs	r7, #0
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
  404146:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4041ac <xEventGroupSetBits+0x84>
  40414a:	e009      	b.n	404160 <xEventGroupSetBits+0x38>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
  40414c:	6829      	ldr	r1, [r5, #0]
  40414e:	ea32 0101 	bics.w	r1, r2, r1
  404152:	bf0c      	ite	eq
  404154:	2101      	moveq	r1, #1
  404156:	2100      	movne	r1, #0
  404158:	e00e      	b.n	404178 <xEventGroupSetBits+0x50>
  40415a:	4620      	mov	r0, r4
		while( pxListItem != pxListEnd )
  40415c:	42a6      	cmp	r6, r4
  40415e:	d017      	beq.n	404190 <xEventGroupSetBits+0x68>
			pxNext = listGET_NEXT( pxListItem );
  404160:	6844      	ldr	r4, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
  404162:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
  404164:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
  404168:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40416c:	d1ee      	bne.n	40414c <xEventGroupSetBits+0x24>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
  40416e:	6829      	ldr	r1, [r5, #0]
  404170:	420a      	tst	r2, r1
  404172:	bf14      	ite	ne
  404174:	2101      	movne	r1, #1
  404176:	2100      	moveq	r1, #0
			if( xMatchFound != pdFALSE )
  404178:	2900      	cmp	r1, #0
  40417a:	d0ee      	beq.n	40415a <xEventGroupSetBits+0x32>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
  40417c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
  404180:	bf18      	it	ne
  404182:	4317      	orrne	r7, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
  404184:	6829      	ldr	r1, [r5, #0]
  404186:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  40418a:	47c0      	blx	r8
  40418c:	e7e5      	b.n	40415a <xEventGroupSetBits+0x32>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
  40418e:	2700      	movs	r7, #0
		pxEventBits->uxEventBits &= ~uxBitsToClear;
  404190:	682b      	ldr	r3, [r5, #0]
  404192:	ea23 0707 	bic.w	r7, r3, r7
  404196:	602f      	str	r7, [r5, #0]
	( void ) xTaskResumeAll();
  404198:	4b03      	ldr	r3, [pc, #12]	; (4041a8 <xEventGroupSetBits+0x80>)
  40419a:	4798      	blx	r3
}
  40419c:	6828      	ldr	r0, [r5, #0]
  40419e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041a2:	bf00      	nop
  4041a4:	0040b639 	.word	0x0040b639
  4041a8:	0040b775 	.word	0x0040b775
  4041ac:	0040b9f5 	.word	0x0040b9f5

004041b0 <vEventGroupDelete>:
{
  4041b0:	b570      	push	{r4, r5, r6, lr}
  4041b2:	4604      	mov	r4, r0
	vTaskSuspendAll();
  4041b4:	4b09      	ldr	r3, [pc, #36]	; (4041dc <vEventGroupDelete+0x2c>)
  4041b6:	4798      	blx	r3
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
  4041b8:	6863      	ldr	r3, [r4, #4]
  4041ba:	b143      	cbz	r3, 4041ce <vEventGroupDelete+0x1e>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
  4041bc:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  4041c0:	4d07      	ldr	r5, [pc, #28]	; (4041e0 <vEventGroupDelete+0x30>)
  4041c2:	4631      	mov	r1, r6
  4041c4:	6920      	ldr	r0, [r4, #16]
  4041c6:	47a8      	blx	r5
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
  4041c8:	6863      	ldr	r3, [r4, #4]
  4041ca:	2b00      	cmp	r3, #0
  4041cc:	d1f9      	bne.n	4041c2 <vEventGroupDelete+0x12>
			vPortFree( pxEventBits );
  4041ce:	4620      	mov	r0, r4
  4041d0:	4b04      	ldr	r3, [pc, #16]	; (4041e4 <vEventGroupDelete+0x34>)
  4041d2:	4798      	blx	r3
	( void ) xTaskResumeAll();
  4041d4:	4b04      	ldr	r3, [pc, #16]	; (4041e8 <vEventGroupDelete+0x38>)
  4041d6:	4798      	blx	r3
  4041d8:	bd70      	pop	{r4, r5, r6, pc}
  4041da:	bf00      	nop
  4041dc:	0040b639 	.word	0x0040b639
  4041e0:	0040b9f5 	.word	0x0040b9f5
  4041e4:	0040a1b9 	.word	0x0040a1b9
  4041e8:	0040b775 	.word	0x0040b775

004041ec <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
  4041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041f0:	b083      	sub	sp, #12

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
  4041f2:	4b45      	ldr	r3, [pc, #276]	; (404308 <vARPRefreshCacheEntry+0x11c>)
  4041f4:	695b      	ldr	r3, [r3, #20]
  4041f6:	ea83 0401 	eor.w	r4, r3, r1
  4041fa:	4a44      	ldr	r2, [pc, #272]	; (40430c <vARPRefreshCacheEntry+0x120>)
  4041fc:	6852      	ldr	r2, [r2, #4]
  4041fe:	4214      	tst	r4, r2
  404200:	d001      	beq.n	404206 <vARPRefreshCacheEntry+0x1a>
  404202:	2b00      	cmp	r3, #0
  404204:	d162      	bne.n	4042cc <vARPRefreshCacheEntry+0xe0>
  404206:	4688      	mov	r8, r1
  404208:	4606      	mov	r6, r0
  40420a:	4c41      	ldr	r4, [pc, #260]	; (404310 <vARPRefreshCacheEntry+0x124>)
{
  40420c:	f04f 0bff 	mov.w	fp, #255	; 0xff
  404210:	2300      	movs	r3, #0
  404212:	9301      	str	r3, [sp, #4]
  404214:	f04f 39ff 	mov.w	r9, #4294967295
  404218:	f8cd 9000 	str.w	r9, [sp]
  40421c:	461d      	mov	r5, r3
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
  40421e:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 404318 <vARPRefreshCacheEntry+0x12c>
  404222:	e016      	b.n	404252 <vARPRefreshCacheEntry+0x66>
				if( pxMACAddress == NULL )
  404224:	b33e      	cbz	r6, 404276 <vARPRefreshCacheEntry+0x8a>
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
  404226:	2206      	movs	r2, #6
  404228:	4631      	mov	r1, r6
  40422a:	4620      	mov	r0, r4
  40422c:	47d0      	blx	sl
  40422e:	b108      	cbz	r0, 404234 <vARPRefreshCacheEntry+0x48>
  404230:	9500      	str	r5, [sp, #0]
  404232:	e00a      	b.n	40424a <vARPRefreshCacheEntry+0x5e>
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
  404234:	4b37      	ldr	r3, [pc, #220]	; (404314 <vARPRefreshCacheEntry+0x128>)
  404236:	006a      	lsls	r2, r5, #1
  404238:	1951      	adds	r1, r2, r5
  40423a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40423e:	2096      	movs	r0, #150	; 0x96
  404240:	7288      	strb	r0, [r1, #10]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
  404242:	2201      	movs	r2, #1
  404244:	72ca      	strb	r2, [r1, #11]
					return;
  404246:	e041      	b.n	4042cc <vARPRefreshCacheEntry+0xe0>
  404248:	46a9      	mov	r9, r5
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
  40424a:	3501      	adds	r5, #1
  40424c:	340c      	adds	r4, #12
  40424e:	2d06      	cmp	r5, #6
  404250:	d012      	beq.n	404278 <vARPRefreshCacheEntry+0x8c>
  404252:	4627      	mov	r7, r4
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
  404254:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404258:	4598      	cmp	r8, r3
  40425a:	d0e3      	beq.n	404224 <vARPRefreshCacheEntry+0x38>
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
  40425c:	b12e      	cbz	r6, 40426a <vARPRefreshCacheEntry+0x7e>
  40425e:	2206      	movs	r2, #6
  404260:	4631      	mov	r1, r6
  404262:	4620      	mov	r0, r4
  404264:	47d0      	blx	sl
  404266:	2800      	cmp	r0, #0
  404268:	d0ee      	beq.n	404248 <vARPRefreshCacheEntry+0x5c>
				xMacEntry = x;
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
  40426a:	79bb      	ldrb	r3, [r7, #6]
  40426c:	455b      	cmp	r3, fp
  40426e:	d2ec      	bcs.n	40424a <vARPRefreshCacheEntry+0x5e>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
  404270:	469b      	mov	fp, r3
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
  404272:	9501      	str	r5, [sp, #4]
  404274:	e7e9      	b.n	40424a <vARPRefreshCacheEntry+0x5e>
  404276:	9500      	str	r5, [sp, #0]
				xUseEntry = x;
			}
		}

		if( xMacEntry >= 0 )
  404278:	f1b9 0f00 	cmp.w	r9, #0
  40427c:	db29      	blt.n	4042d2 <vARPRefreshCacheEntry+0xe6>
		{
			xUseEntry = xMacEntry;

			if( xIpEntry >= 0 )
  40427e:	9b00      	ldr	r3, [sp, #0]
  404280:	2b00      	cmp	r3, #0
  404282:	db2e      	blt.n	4042e2 <vARPRefreshCacheEntry+0xf6>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
  404284:	4823      	ldr	r0, [pc, #140]	; (404314 <vARPRefreshCacheEntry+0x128>)
  404286:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40428a:	009b      	lsls	r3, r3, #2
  40428c:	18c1      	adds	r1, r0, r3
  40428e:	2200      	movs	r2, #0
  404290:	50c2      	str	r2, [r0, r3]
  404292:	604a      	str	r2, [r1, #4]
  404294:	608a      	str	r2, [r1, #8]
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
  404296:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  40429a:	4a1e      	ldr	r2, [pc, #120]	; (404314 <vARPRefreshCacheEntry+0x128>)
  40429c:	f842 8023 	str.w	r8, [r2, r3, lsl #2]

		if( pxMACAddress != NULL )
  4042a0:	b1a6      	cbz	r6, 4042cc <vARPRefreshCacheEntry+0xe0>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
  4042a2:	4b1c      	ldr	r3, [pc, #112]	; (404314 <vARPRefreshCacheEntry+0x128>)
  4042a4:	ea4f 0149 	mov.w	r1, r9, lsl #1
  4042a8:	eb01 0209 	add.w	r2, r1, r9
  4042ac:	0092      	lsls	r2, r2, #2
  4042ae:	3204      	adds	r2, #4
  4042b0:	189c      	adds	r4, r3, r2
  4042b2:	6830      	ldr	r0, [r6, #0]
  4042b4:	5098      	str	r0, [r3, r2]
  4042b6:	88b2      	ldrh	r2, [r6, #4]
  4042b8:	80a2      	strh	r2, [r4, #4]

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
  4042ba:	eb01 0209 	add.w	r2, r1, r9
  4042be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4042c2:	2096      	movs	r0, #150	; 0x96
  4042c4:	7290      	strb	r0, [r2, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
  4042c6:	4613      	mov	r3, r2
  4042c8:	2201      	movs	r2, #1
  4042ca:	72da      	strb	r2, [r3, #11]
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
		}
	}
}
  4042cc:	b003      	add	sp, #12
  4042ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( xIpEntry >= 0 )
  4042d2:	9b00      	ldr	r3, [sp, #0]
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	db02      	blt.n	4042de <vARPRefreshCacheEntry+0xf2>
			xUseEntry = xIpEntry;
  4042d8:	f8dd 9000 	ldr.w	r9, [sp]
  4042dc:	e7db      	b.n	404296 <vARPRefreshCacheEntry+0xaa>
  4042de:	f8dd 9004 	ldr.w	r9, [sp, #4]
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
  4042e2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
  4042e6:	4a0b      	ldr	r2, [pc, #44]	; (404314 <vARPRefreshCacheEntry+0x128>)
  4042e8:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
		if( pxMACAddress != NULL )
  4042ec:	2e00      	cmp	r6, #0
  4042ee:	d1d8      	bne.n	4042a2 <vARPRefreshCacheEntry+0xb6>
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
  4042f0:	4b08      	ldr	r3, [pc, #32]	; (404314 <vARPRefreshCacheEntry+0x128>)
  4042f2:	ea4f 0249 	mov.w	r2, r9, lsl #1
  4042f6:	eb02 0109 	add.w	r1, r2, r9
  4042fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4042fe:	2005      	movs	r0, #5
  404300:	7288      	strb	r0, [r1, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
  404302:	2200      	movs	r2, #0
  404304:	72ca      	strb	r2, [r1, #11]
  404306:	e7e1      	b.n	4042cc <vARPRefreshCacheEntry+0xe0>
  404308:	200000d8 	.word	0x200000d8
  40430c:	20006d24 	.word	0x20006d24
  404310:	20006bf8 	.word	0x20006bf8
  404314:	20006bf4 	.word	0x20006bf4
  404318:	0040c379 	.word	0x0040c379

0040431c <eARPProcessPacket>:
{
  40431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
  40431e:	4b25      	ldr	r3, [pc, #148]	; (4043b4 <eARPProcessPacket+0x98>)
  404320:	695b      	ldr	r3, [r3, #20]
  404322:	2b00      	cmp	r3, #0
  404324:	d044      	beq.n	4043b0 <eARPProcessPacket+0x94>
  404326:	4604      	mov	r4, r0
	memcpy( ( void *)&( ulSenderProtocolAddress ), ( void * )pxARPHeader->ucSenderProtocolAddress, sizeof( ulSenderProtocolAddress ) );
  404328:	69c5      	ldr	r5, [r0, #28]
		switch( pxARPHeader->usOperation )
  40432a:	8a82      	ldrh	r2, [r0, #20]
  40432c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  404330:	d004      	beq.n	40433c <eARPProcessPacket+0x20>
  404332:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404336:	d035      	beq.n	4043a4 <eARPProcessPacket+0x88>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
  404338:	2000      	movs	r0, #0
  40433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
  40433c:	f8d0 6026 	ldr.w	r6, [r0, #38]	; 0x26
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
  404340:	429e      	cmp	r6, r3
  404342:	d001      	beq.n	404348 <eARPProcessPacket+0x2c>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
  404344:	2000      	movs	r0, #0
}
  404346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
  404348:	f100 0716 	add.w	r7, r0, #22
  40434c:	4629      	mov	r1, r5
  40434e:	4638      	mov	r0, r7
  404350:	4b19      	ldr	r3, [pc, #100]	; (4043b8 <eARPProcessPacket+0x9c>)
  404352:	4798      	blx	r3
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
  404354:	2300      	movs	r3, #0
  404356:	7523      	strb	r3, [r4, #20]
  404358:	2302      	movs	r3, #2
  40435a:	7563      	strb	r3, [r4, #21]
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
  40435c:	42b5      	cmp	r5, r6
  40435e:	d00f      	beq.n	404380 <eARPProcessPacket+0x64>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
  404360:	683b      	ldr	r3, [r7, #0]
  404362:	6223      	str	r3, [r4, #32]
  404364:	88bb      	ldrh	r3, [r7, #4]
  404366:	84a3      	strh	r3, [r4, #36]	; 0x24
						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
  404368:	f8c4 5026 	str.w	r5, [r4, #38]	; 0x26
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
  40436c:	4b11      	ldr	r3, [pc, #68]	; (4043b4 <eARPProcessPacket+0x98>)
  40436e:	6818      	ldr	r0, [r3, #0]
  404370:	f8c4 0016 	str.w	r0, [r4, #22]
  404374:	889a      	ldrh	r2, [r3, #4]
  404376:	80ba      	strh	r2, [r7, #4]
					memcpy( ( void* )pxARPHeader->ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
  404378:	695b      	ldr	r3, [r3, #20]
  40437a:	61e3      	str	r3, [r4, #28]
					eReturn = eReturnEthernetFrame;
  40437c:	2002      	movs	r0, #2
  40437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
  404380:	4b0e      	ldr	r3, [pc, #56]	; (4043bc <eARPProcessPacket+0xa0>)
  404382:	681a      	ldr	r2, [r3, #0]
  404384:	f8c4 2006 	str.w	r2, [r4, #6]
  404388:	889b      	ldrh	r3, [r3, #4]
  40438a:	8163      	strh	r3, [r4, #10]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
  40438c:	2300      	movs	r3, #0
  40438e:	6223      	str	r3, [r4, #32]
  404390:	84a3      	strh	r3, [r4, #36]	; 0x24
						pxARPHeader->ulTargetProtocolAddress = 0UL;
  404392:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  404396:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  40439a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40439e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  4043a2:	e7e3      	b.n	40436c <eARPProcessPacket+0x50>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
  4043a4:	4629      	mov	r1, r5
  4043a6:	3016      	adds	r0, #22
  4043a8:	4b03      	ldr	r3, [pc, #12]	; (4043b8 <eARPProcessPacket+0x9c>)
  4043aa:	4798      	blx	r3
eFrameProcessingResult_t eReturn = eReleaseBuffer;
  4043ac:	2000      	movs	r0, #0
				break;
  4043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
eFrameProcessingResult_t eReturn = eReleaseBuffer;
  4043b0:	2000      	movs	r0, #0
  4043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043b4:	200000d8 	.word	0x200000d8
  4043b8:	004041ed 	.word	0x004041ed
  4043bc:	00412f24 	.word	0x00412f24

004043c0 <eARPGetCacheEntry>:
{
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
  4043c0:	6803      	ldr	r3, [r0, #0]
  4043c2:	4a28      	ldr	r2, [pc, #160]	; (404464 <eARPGetCacheEntry+0xa4>)
  4043c4:	4293      	cmp	r3, r2
  4043c6:	d00b      	beq.n	4043e0 <eARPGetCacheEntry+0x20>
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
		eReturn = eARPCacheHit;
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
  4043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4043cc:	d00f      	beq.n	4043ee <eARPGetCacheEntry+0x2e>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
  4043ce:	4a26      	ldr	r2, [pc, #152]	; (404468 <eARPGetCacheEntry+0xa8>)
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
  4043d0:	6912      	ldr	r2, [r2, #16]
  4043d2:	4293      	cmp	r3, r2
  4043d4:	d00b      	beq.n	4043ee <eARPGetCacheEntry+0x2e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
		eReturn = eARPCacheHit;
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
  4043d6:	4a25      	ldr	r2, [pc, #148]	; (40446c <eARPGetCacheEntry+0xac>)
  4043d8:	6952      	ldr	r2, [r2, #20]
  4043da:	b97a      	cbnz	r2, 4043fc <eARPGetCacheEntry+0x3c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
  4043dc:	2002      	movs	r0, #2
  4043de:	4770      	bx	lr
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
  4043e0:	4b23      	ldr	r3, [pc, #140]	; (404470 <eARPGetCacheEntry+0xb0>)
  4043e2:	681a      	ldr	r2, [r3, #0]
  4043e4:	600a      	str	r2, [r1, #0]
  4043e6:	889b      	ldrh	r3, [r3, #4]
  4043e8:	808b      	strh	r3, [r1, #4]
		eReturn = eARPCacheHit;
  4043ea:	2001      	movs	r0, #1
  4043ec:	4770      	bx	lr
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
  4043ee:	4b21      	ldr	r3, [pc, #132]	; (404474 <eARPGetCacheEntry+0xb4>)
  4043f0:	681a      	ldr	r2, [r3, #0]
  4043f2:	600a      	str	r2, [r1, #0]
  4043f4:	889b      	ldrh	r3, [r3, #4]
  4043f6:	808b      	strh	r3, [r1, #4]
		eReturn = eARPCacheHit;
  4043f8:	2001      	movs	r0, #1
  4043fa:	4770      	bx	lr
{
  4043fc:	b430      	push	{r4, r5}
	}
	else
	{
		eReturn = eARPCacheMiss;

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
  4043fe:	405a      	eors	r2, r3
  404400:	4c19      	ldr	r4, [pc, #100]	; (404468 <eARPGetCacheEntry+0xa8>)
  404402:	6864      	ldr	r4, [r4, #4]
  404404:	4222      	tst	r2, r4
  404406:	d002      	beq.n	40440e <eARPGetCacheEntry+0x4e>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t )0u )
  404408:	4a17      	ldr	r2, [pc, #92]	; (404468 <eARPGetCacheEntry+0xa8>)
  40440a:	6894      	ldr	r4, [r2, #8]
  40440c:	b924      	cbnz	r4, 404418 <eARPGetCacheEntry+0x58>
			ulAddressToLookup = *pulIPAddress;
		}

		if( eReturn == eARPCacheMiss )
		{
			if( ulAddressToLookup == 0UL )
  40440e:	b913      	cbnz	r3, 404416 <eARPGetCacheEntry+0x56>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
  404410:	2002      	movs	r0, #2
			}
		}
	}

	return eReturn;
}
  404412:	bc30      	pop	{r4, r5}
  404414:	4770      	bx	lr
  404416:	461c      	mov	r4, r3
	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
  404418:	4b17      	ldr	r3, [pc, #92]	; (404478 <eARPGetCacheEntry+0xb8>)
  40441a:	681b      	ldr	r3, [r3, #0]
  40441c:	42a3      	cmp	r3, r4
  40441e:	d00b      	beq.n	404438 <eARPGetCacheEntry+0x78>
  404420:	4a15      	ldr	r2, [pc, #84]	; (404478 <eARPGetCacheEntry+0xb8>)
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
  404422:	2301      	movs	r3, #1
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
  404424:	68d5      	ldr	r5, [r2, #12]
  404426:	42a5      	cmp	r5, r4
  404428:	d007      	beq.n	40443a <eARPGetCacheEntry+0x7a>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
  40442a:	3301      	adds	r3, #1
  40442c:	320c      	adds	r2, #12
  40442e:	2b06      	cmp	r3, #6
  404430:	d1f8      	bne.n	404424 <eARPGetCacheEntry+0x64>
					*pulIPAddress = ulAddressToLookup;
  404432:	6004      	str	r4, [r0, #0]
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
  404434:	2000      	movs	r0, #0
  404436:	e7ec      	b.n	404412 <eARPGetCacheEntry+0x52>
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
  404438:	2300      	movs	r3, #0
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
  40443a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40443e:	480e      	ldr	r0, [pc, #56]	; (404478 <eARPGetCacheEntry+0xb8>)
  404440:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404444:	7ad2      	ldrb	r2, [r2, #11]
  404446:	b90a      	cbnz	r2, 40444c <eARPGetCacheEntry+0x8c>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
  404448:	2002      	movs	r0, #2
	return eReturn;
  40444a:	e7e2      	b.n	404412 <eARPGetCacheEntry+0x52>
			}
			else
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
  40444c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404450:	009b      	lsls	r3, r3, #2
  404452:	3304      	adds	r3, #4
  404454:	18c4      	adds	r4, r0, r3
  404456:	58c0      	ldr	r0, [r0, r3]
  404458:	6008      	str	r0, [r1, #0]
  40445a:	88a3      	ldrh	r3, [r4, #4]
  40445c:	808b      	strh	r3, [r1, #4]
				eReturn = eARPCacheHit;
  40445e:	2001      	movs	r0, #1
  404460:	e7d7      	b.n	404412 <eARPGetCacheEntry+0x52>
  404462:	bf00      	nop
  404464:	fc0000e0 	.word	0xfc0000e0
  404468:	20006d24 	.word	0x20006d24
  40446c:	200000d8 	.word	0x200000d8
  404470:	00412dc4 	.word	0x00412dc4
  404474:	00412f24 	.word	0x00412f24
  404478:	20006bf4 	.word	0x20006bf4

0040447c <vARPSendGratuitous>:
	}
}
/*-----------------------------------------------------------*/

void vARPSendGratuitous( void )
{
  40447c:	b508      	push	{r3, lr}
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
  40447e:	2200      	movs	r2, #0
  404480:	4b02      	ldr	r3, [pc, #8]	; (40448c <vARPSendGratuitous+0x10>)
  404482:	601a      	str	r2, [r3, #0]

	/* Let the IP-task call vARPAgeCache(). */
	xSendEventToIPTask( eARPTimerEvent );
  404484:	2002      	movs	r0, #2
  404486:	4b02      	ldr	r3, [pc, #8]	; (404490 <vARPSendGratuitous+0x14>)
  404488:	4798      	blx	r3
  40448a:	bd08      	pop	{r3, pc}
  40448c:	20006c3c 	.word	0x20006c3c
  404490:	00405731 	.word	0x00405731

00404494 <vARPGenerateRequestPacket>:
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
	}
}

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
  404494:	b5f0      	push	{r4, r5, r6, r7, lr}
  404496:	4686      	mov	lr, r0
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
  404498:	6987      	ldr	r7, [r0, #24]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) pxARPPacket, ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
  40449a:	4e12      	ldr	r6, [pc, #72]	; (4044e4 <vARPGenerateRequestPacket+0x50>)
  40449c:	463c      	mov	r4, r7
  40449e:	f106 0c20 	add.w	ip, r6, #32
  4044a2:	4635      	mov	r5, r6
  4044a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4044a6:	6020      	str	r0, [r4, #0]
  4044a8:	6061      	str	r1, [r4, #4]
  4044aa:	60a2      	str	r2, [r4, #8]
  4044ac:	60e3      	str	r3, [r4, #12]
  4044ae:	462e      	mov	r6, r5
  4044b0:	3410      	adds	r4, #16
  4044b2:	4565      	cmp	r5, ip
  4044b4:	d1f5      	bne.n	4044a2 <vARPGenerateRequestPacket+0xe>
  4044b6:	6828      	ldr	r0, [r5, #0]
  4044b8:	6020      	str	r0, [r4, #0]
  4044ba:	88ab      	ldrh	r3, [r5, #4]
  4044bc:	80a3      	strh	r3, [r4, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
  4044be:	4b0a      	ldr	r3, [pc, #40]	; (4044e8 <vARPGenerateRequestPacket+0x54>)
  4044c0:	6818      	ldr	r0, [r3, #0]
  4044c2:	f8c7 0006 	str.w	r0, [r7, #6]
  4044c6:	889a      	ldrh	r2, [r3, #4]
  4044c8:	817a      	strh	r2, [r7, #10]
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
  4044ca:	f8c7 0016 	str.w	r0, [r7, #22]
  4044ce:	837a      	strh	r2, [r7, #26]

	memcpy( ( void* )pxARPPacket->xARPHeader.ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
  4044d0:	695b      	ldr	r3, [r3, #20]
  4044d2:	61fb      	str	r3, [r7, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
  4044d4:	f8de 3014 	ldr.w	r3, [lr, #20]
  4044d8:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
  4044dc:	232a      	movs	r3, #42	; 0x2a
  4044de:	f8ce 301c 	str.w	r3, [lr, #28]
  4044e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044e4:	00412c18 	.word	0x00412c18
  4044e8:	200000d8 	.word	0x200000d8

004044ec <FreeRTOS_OutputARPRequest>:
{
  4044ec:	b538      	push	{r3, r4, r5, lr}
  4044ee:	4605      	mov	r5, r0
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
  4044f0:	2100      	movs	r1, #0
  4044f2:	202a      	movs	r0, #42	; 0x2a
  4044f4:	4b05      	ldr	r3, [pc, #20]	; (40450c <FreeRTOS_OutputARPRequest+0x20>)
  4044f6:	4798      	blx	r3
	if( pxNetworkBuffer != NULL )
  4044f8:	b138      	cbz	r0, 40450a <FreeRTOS_OutputARPRequest+0x1e>
  4044fa:	4604      	mov	r4, r0
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
  4044fc:	6145      	str	r5, [r0, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
  4044fe:	4b04      	ldr	r3, [pc, #16]	; (404510 <FreeRTOS_OutputARPRequest+0x24>)
  404500:	4798      	blx	r3
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
  404502:	2101      	movs	r1, #1
  404504:	4620      	mov	r0, r4
  404506:	4b03      	ldr	r3, [pc, #12]	; (404514 <FreeRTOS_OutputARPRequest+0x28>)
  404508:	4798      	blx	r3
  40450a:	bd38      	pop	{r3, r4, r5, pc}
  40450c:	00409dd1 	.word	0x00409dd1
  404510:	00404495 	.word	0x00404495
  404514:	0040a8c9 	.word	0x0040a8c9

00404518 <vARPAgeCache>:
{
  404518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40451c:	4c19      	ldr	r4, [pc, #100]	; (404584 <vARPAgeCache+0x6c>)
  40451e:	f104 0648 	add.w	r6, r4, #72	; 0x48
				xARPCache[ x ].ulIPAddress = 0UL;
  404522:	2700      	movs	r7, #0
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
  404524:	f8df 806c 	ldr.w	r8, [pc, #108]	; 404594 <vARPAgeCache+0x7c>
  404528:	e008      	b.n	40453c <vARPAgeCache+0x24>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
  40452a:	6820      	ldr	r0, [r4, #0]
  40452c:	47c0      	blx	r8
  40452e:	e011      	b.n	404554 <vARPAgeCache+0x3c>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
  404530:	6820      	ldr	r0, [r4, #0]
  404532:	47c0      	blx	r8
  404534:	e00e      	b.n	404554 <vARPAgeCache+0x3c>
  404536:	340c      	adds	r4, #12
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
  404538:	42b4      	cmp	r4, r6
  40453a:	d010      	beq.n	40455e <vARPAgeCache+0x46>
  40453c:	4625      	mov	r5, r4
		if( xARPCache[ x ].ucAge > 0U )
  40453e:	7aa3      	ldrb	r3, [r4, #10]
  404540:	2b00      	cmp	r3, #0
  404542:	d0f8      	beq.n	404536 <vARPAgeCache+0x1e>
			( xARPCache[ x ].ucAge )--;
  404544:	3b01      	subs	r3, #1
  404546:	b2db      	uxtb	r3, r3
  404548:	72a3      	strb	r3, [r4, #10]
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
  40454a:	7ae2      	ldrb	r2, [r4, #11]
  40454c:	2a00      	cmp	r2, #0
  40454e:	d0ec      	beq.n	40452a <vARPAgeCache+0x12>
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
  404550:	2b03      	cmp	r3, #3
  404552:	d9ed      	bls.n	404530 <vARPAgeCache+0x18>
			if( xARPCache[ x ].ucAge == 0u )
  404554:	7aab      	ldrb	r3, [r5, #10]
  404556:	2b00      	cmp	r3, #0
  404558:	d1ed      	bne.n	404536 <vARPAgeCache+0x1e>
				xARPCache[ x ].ulIPAddress = 0UL;
  40455a:	602f      	str	r7, [r5, #0]
  40455c:	e7eb      	b.n	404536 <vARPAgeCache+0x1e>
	xTimeNow = xTaskGetTickCount ();
  40455e:	4b0a      	ldr	r3, [pc, #40]	; (404588 <vARPAgeCache+0x70>)
  404560:	4798      	blx	r3
  404562:	4604      	mov	r4, r0
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
  404564:	4b09      	ldr	r3, [pc, #36]	; (40458c <vARPAgeCache+0x74>)
  404566:	681b      	ldr	r3, [r3, #0]
  404568:	b123      	cbz	r3, 404574 <vARPAgeCache+0x5c>
  40456a:	1ac3      	subs	r3, r0, r3
  40456c:	f644 6220 	movw	r2, #20000	; 0x4e20
  404570:	4293      	cmp	r3, r2
  404572:	d905      	bls.n	404580 <vARPAgeCache+0x68>
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
  404574:	4b06      	ldr	r3, [pc, #24]	; (404590 <vARPAgeCache+0x78>)
  404576:	6958      	ldr	r0, [r3, #20]
  404578:	4b06      	ldr	r3, [pc, #24]	; (404594 <vARPAgeCache+0x7c>)
  40457a:	4798      	blx	r3
		xLastGratuitousARPTime = xTimeNow;
  40457c:	4b03      	ldr	r3, [pc, #12]	; (40458c <vARPAgeCache+0x74>)
  40457e:	601c      	str	r4, [r3, #0]
  404580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404584:	20006bf4 	.word	0x20006bf4
  404588:	0040b649 	.word	0x0040b649
  40458c:	20006c3c 	.word	0x20006c3c
  404590:	200000d8 	.word	0x200000d8
  404594:	004044ed 	.word	0x004044ed

00404598 <FreeRTOS_ClearARP>:
	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
/*-----------------------------------------------------------*/

void FreeRTOS_ClearARP( void )
{
  404598:	b508      	push	{r3, lr}
	memset( xARPCache, '\0', sizeof( xARPCache ) );
  40459a:	2248      	movs	r2, #72	; 0x48
  40459c:	2100      	movs	r1, #0
  40459e:	4802      	ldr	r0, [pc, #8]	; (4045a8 <FreeRTOS_ClearARP+0x10>)
  4045a0:	4b02      	ldr	r3, [pc, #8]	; (4045ac <FreeRTOS_ClearARP+0x14>)
  4045a2:	4798      	blx	r3
  4045a4:	bd08      	pop	{r3, pc}
  4045a6:	bf00      	nop
  4045a8:	20006bf4 	.word	0x20006bf4
  4045ac:	0040c5d5 	.word	0x0040c5d5

004045b0 <prvCreatePartDHCPMessage>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
{
  4045b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045b4:	4607      	mov	r7, r0
  4045b6:	468a      	mov	sl, r1
  4045b8:	4691      	mov	r9, r2
  4045ba:	4698      	mov	r8, r3
DHCPMessage_t *pxDHCPMessage;
size_t xRequiredBufferSize = sizeof( DHCPMessage_t ) + *pxOptionsArraySize;
  4045bc:	681d      	ldr	r5, [r3, #0]
  4045be:	35f1      	adds	r5, #241	; 0xf1
	/* Get a buffer.  This uses a maximum delay, but the delay will be capped
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
	} while( ( pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xRequiredBufferSize, portMAX_DELAY ) ) == NULL );
  4045c0:	f04f 3bff 	mov.w	fp, #4294967295
  4045c4:	4e28      	ldr	r6, [pc, #160]	; (404668 <prvCreatePartDHCPMessage+0xb8>)
  4045c6:	4659      	mov	r1, fp
  4045c8:	4628      	mov	r0, r5
  4045ca:	47b0      	blx	r6
  4045cc:	4604      	mov	r4, r0
  4045ce:	2800      	cmp	r0, #0
  4045d0:	d0f9      	beq.n	4045c6 <prvCreatePartDHCPMessage+0x16>

	pxDHCPMessage = ( DHCPMessage_t * ) pucUDPPayloadBuffer;

	/* Most fields need to be zero. */
	memset( ( void * ) pxDHCPMessage, 0x00, sizeof( DHCPMessage_t ) );
  4045d2:	22f1      	movs	r2, #241	; 0xf1
  4045d4:	2100      	movs	r1, #0
  4045d6:	4b25      	ldr	r3, [pc, #148]	; (40466c <prvCreatePartDHCPMessage+0xbc>)
  4045d8:	4798      	blx	r3

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
  4045da:	f884 a000 	strb.w	sl, [r4]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
  4045de:	2301      	movs	r3, #1
  4045e0:	7063      	strb	r3, [r4, #1]
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
  4045e2:	2306      	movs	r3, #6
  4045e4:	70a3      	strb	r3, [r4, #2]
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( xDHCPData.ulTransactionId );
  4045e6:	4822      	ldr	r0, [pc, #136]	; (404670 <prvCreatePartDHCPMessage+0xc0>)
  4045e8:	6803      	ldr	r3, [r0, #0]
  4045ea:	0e1a      	lsrs	r2, r3, #24
  4045ec:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4045f0:	0219      	lsls	r1, r3, #8
  4045f2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4045f6:	430a      	orrs	r2, r1
  4045f8:	0a1b      	lsrs	r3, r3, #8
  4045fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4045fe:	4313      	orrs	r3, r2
  404600:	6063      	str	r3, [r4, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
  404602:	2363      	movs	r3, #99	; 0x63
  404604:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
  404608:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  40460c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
  404610:	2253      	movs	r2, #83	; 0x53
  404612:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  404616:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
	if( xDHCPData.xUseBroadcast != pdFALSE )
  40461a:	6983      	ldr	r3, [r0, #24]
  40461c:	b9eb      	cbnz	r3, 40465a <prvCreatePartDHCPMessage+0xaa>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
	}
	else
	{
		pxDHCPMessage->usFlags = 0u;
  40461e:	2300      	movs	r3, #0
  404620:	72a3      	strb	r3, [r4, #10]
  404622:	72e3      	strb	r3, [r4, #11]
	}

	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
  404624:	4d13      	ldr	r5, [pc, #76]	; (404674 <prvCreatePartDHCPMessage+0xc4>)
  404626:	6828      	ldr	r0, [r5, #0]
  404628:	61e0      	str	r0, [r4, #28]
  40462a:	88ab      	ldrh	r3, [r5, #4]
  40462c:	8423      	strh	r3, [r4, #32]

	/* Copy in the const part of the options options. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), ( void * ) pucOptionsArray, *pxOptionsArraySize );
  40462e:	f8d8 2000 	ldr.w	r2, [r8]
  404632:	4649      	mov	r1, r9
  404634:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
  404638:	4b0f      	ldr	r3, [pc, #60]	; (404678 <prvCreatePartDHCPMessage+0xc8>)
  40463a:	4798      	blx	r3
		*pxOptionsArraySize += ( 2 + xNameLength );
	}
	#endif

	/* Map in the client identifier. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
  40463c:	6828      	ldr	r0, [r5, #0]
  40463e:	f8c4 00f5 	str.w	r0, [r4, #245]	; 0xf5
  404642:	88ab      	ldrh	r3, [r5, #4]
  404644:	f8a4 30f9 	strh.w	r3, [r4, #249]	; 0xf9
		( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
  404648:	f04f 33ff 	mov.w	r3, #4294967295
  40464c:	607b      	str	r3, [r7, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT;
  40464e:	f44f 4386 	mov.w	r3, #17152	; 0x4300
  404652:	807b      	strh	r3, [r7, #2]

	return pucUDPPayloadBuffer;
}
  404654:	4620      	mov	r0, r4
  404656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
  40465a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  40465e:	72a3      	strb	r3, [r4, #10]
  404660:	2300      	movs	r3, #0
  404662:	72e3      	strb	r3, [r4, #11]
  404664:	e7de      	b.n	404624 <prvCreatePartDHCPMessage+0x74>
  404666:	bf00      	nop
  404668:	0040548d 	.word	0x0040548d
  40466c:	0040c5d5 	.word	0x0040c5d5
  404670:	20006c40 	.word	0x20006c40
  404674:	200000d8 	.word	0x200000d8
  404678:	0040c3d9 	.word	0x0040c3d9

0040467c <prvSendDHCPDiscover>:
	}
}
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
  40467c:	b530      	push	{r4, r5, lr}
  40467e:	b087      	sub	sp, #28
	dhcpMESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpPARAMETER_REQUEST_OPTION_CODE, 3, dhcpSUBNET_MASK_OPTION_CODE, dhcpGATEWAY_OPTION_CODE, dhcpDNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
  404680:	ab06      	add	r3, sp, #24
  404682:	2211      	movs	r2, #17
  404684:	f843 2d0c 	str.w	r2, [r3, #-12]!

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
  404688:	ac04      	add	r4, sp, #16
  40468a:	4a0d      	ldr	r2, [pc, #52]	; (4046c0 <prvSendDHCPDiscover+0x44>)
  40468c:	2101      	movs	r1, #1
  40468e:	4620      	mov	r0, r4
  404690:	4d0c      	ldr	r5, [pc, #48]	; (4046c4 <prvSendDHCPDiscover+0x48>)
  404692:	47a8      	blx	r5
  404694:	4605      	mov	r5, r0

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
  404696:	480c      	ldr	r0, [pc, #48]	; (4046c8 <prvSendDHCPDiscover+0x4c>)
  404698:	4b0c      	ldr	r3, [pc, #48]	; (4046cc <prvSendDHCPDiscover+0x50>)
  40469a:	4798      	blx	r3
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
  40469c:	4b0c      	ldr	r3, [pc, #48]	; (4046d0 <prvSendDHCPDiscover+0x54>)
  40469e:	6a18      	ldr	r0, [r3, #32]
  4046a0:	2308      	movs	r3, #8
  4046a2:	9301      	str	r3, [sp, #4]
  4046a4:	9400      	str	r4, [sp, #0]
  4046a6:	2301      	movs	r3, #1
  4046a8:	9a03      	ldr	r2, [sp, #12]
  4046aa:	32f1      	adds	r2, #241	; 0xf1
  4046ac:	4629      	mov	r1, r5
  4046ae:	4c09      	ldr	r4, [pc, #36]	; (4046d4 <prvSendDHCPDiscover+0x58>)
  4046b0:	47a0      	blx	r4
  4046b2:	b108      	cbz	r0, 4046b8 <prvSendDHCPDiscover+0x3c>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
	}
}
  4046b4:	b007      	add	sp, #28
  4046b6:	bd30      	pop	{r4, r5, pc}
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
  4046b8:	4628      	mov	r0, r5
  4046ba:	4b07      	ldr	r3, [pc, #28]	; (4046d8 <prvSendDHCPDiscover+0x5c>)
  4046bc:	4798      	blx	r3
}
  4046be:	e7f9      	b.n	4046b4 <prvSendDHCPDiscover+0x38>
  4046c0:	00412c90 	.word	0x00412c90
  4046c4:	004045b1 	.word	0x004045b1
  4046c8:	00412c5c 	.word	0x00412c5c
  4046cc:	0040c351 	.word	0x0040c351
  4046d0:	20006c40 	.word	0x20006c40
  4046d4:	00406329 	.word	0x00406329
  4046d8:	00405505 	.word	0x00405505

004046dc <prvSendDHCPRequest>:
{
  4046dc:	b570      	push	{r4, r5, r6, lr}
  4046de:	b086      	sub	sp, #24
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
  4046e0:	ab06      	add	r3, sp, #24
  4046e2:	2218      	movs	r2, #24
  4046e4:	f843 2d0c 	str.w	r2, [r3, #-12]!
	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
  4046e8:	ae04      	add	r6, sp, #16
  4046ea:	4a16      	ldr	r2, [pc, #88]	; (404744 <prvSendDHCPRequest+0x68>)
  4046ec:	2101      	movs	r1, #1
  4046ee:	4630      	mov	r0, r6
  4046f0:	4c15      	ldr	r4, [pc, #84]	; (404748 <prvSendDHCPRequest+0x6c>)
  4046f2:	47a0      	blx	r4
  4046f4:	4604      	mov	r4, r0
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
  4046f6:	4d15      	ldr	r5, [pc, #84]	; (40474c <prvSendDHCPRequest+0x70>)
  4046f8:	686b      	ldr	r3, [r5, #4]
  4046fa:	f8c0 30fd 	str.w	r3, [r0, #253]	; 0xfd
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ),
  4046fe:	68aa      	ldr	r2, [r5, #8]
  404700:	f8c0 2103 	str.w	r2, [r0, #259]	; 0x103
	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
  404704:	0e19      	lsrs	r1, r3, #24
  404706:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  40470a:	021a      	lsls	r2, r3, #8
  40470c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  404710:	4311      	orrs	r1, r2
  404712:	0a1b      	lsrs	r3, r3, #8
  404714:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  404718:	4319      	orrs	r1, r3
  40471a:	480d      	ldr	r0, [pc, #52]	; (404750 <prvSendDHCPRequest+0x74>)
  40471c:	4b0d      	ldr	r3, [pc, #52]	; (404754 <prvSendDHCPRequest+0x78>)
  40471e:	4798      	blx	r3
	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
  404720:	6a28      	ldr	r0, [r5, #32]
  404722:	2308      	movs	r3, #8
  404724:	9301      	str	r3, [sp, #4]
  404726:	9600      	str	r6, [sp, #0]
  404728:	2301      	movs	r3, #1
  40472a:	9a03      	ldr	r2, [sp, #12]
  40472c:	32f1      	adds	r2, #241	; 0xf1
  40472e:	4621      	mov	r1, r4
  404730:	4d09      	ldr	r5, [pc, #36]	; (404758 <prvSendDHCPRequest+0x7c>)
  404732:	47a8      	blx	r5
  404734:	b108      	cbz	r0, 40473a <prvSendDHCPRequest+0x5e>
}
  404736:	b006      	add	sp, #24
  404738:	bd70      	pop	{r4, r5, r6, pc}
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
  40473a:	4620      	mov	r0, r4
  40473c:	4b07      	ldr	r3, [pc, #28]	; (40475c <prvSendDHCPRequest+0x80>)
  40473e:	4798      	blx	r3
}
  404740:	e7f9      	b.n	404736 <prvSendDHCPRequest+0x5a>
  404742:	bf00      	nop
  404744:	00412ca4 	.word	0x00412ca4
  404748:	004045b1 	.word	0x004045b1
  40474c:	20006c40 	.word	0x20006c40
  404750:	00412c74 	.word	0x00412c74
  404754:	0040c351 	.word	0x0040c351
  404758:	00406329 	.word	0x00406329
  40475c:	00405505 	.word	0x00405505

00404760 <prvProcessDHCPReplies>:
{
  404760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404764:	b08b      	sub	sp, #44	; 0x2c
  404766:	4604      	mov	r4, r0
uint32_t xClientLength = sizeof( xClient );
  404768:	2308      	movs	r3, #8
  40476a:	9306      	str	r3, [sp, #24]
	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
  40476c:	4b90      	ldr	r3, [pc, #576]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  40476e:	6a18      	ldr	r0, [r3, #32]
  404770:	ab06      	add	r3, sp, #24
  404772:	9301      	str	r3, [sp, #4]
  404774:	ab07      	add	r3, sp, #28
  404776:	9300      	str	r3, [sp, #0]
  404778:	2301      	movs	r3, #1
  40477a:	2200      	movs	r2, #0
  40477c:	a909      	add	r1, sp, #36	; 0x24
  40477e:	4d8d      	ldr	r5, [pc, #564]	; (4049b4 <prvProcessDHCPReplies+0x254>)
  404780:	47a8      	blx	r5
	if( lBytes > 0 )
  404782:	1e06      	subs	r6, r0, #0
  404784:	f340 815a 	ble.w	404a3c <prvProcessDHCPReplies+0x2dc>
		if( ( lBytes >= sizeof( DHCPMessage_t ) ) &&
  404788:	2ef0      	cmp	r6, #240	; 0xf0
  40478a:	f240 8147 	bls.w	404a1c <prvProcessDHCPReplies+0x2bc>
		pxDHCPMessage = ( DHCPMessage_t * ) ( pucUDPPayload );
  40478e:	9d09      	ldr	r5, [sp, #36]	; 0x24
			( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
  404790:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
		if( ( lBytes >= sizeof( DHCPMessage_t ) ) &&
  404794:	4b88      	ldr	r3, [pc, #544]	; (4049b8 <prvProcessDHCPReplies+0x258>)
  404796:	429a      	cmp	r2, r3
  404798:	d001      	beq.n	40479e <prvProcessDHCPReplies+0x3e>
BaseType_t xReturn = pdFALSE;
  40479a:	2400      	movs	r4, #0
  40479c:	e13f      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
			( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
  40479e:	782b      	ldrb	r3, [r5, #0]
  4047a0:	2b02      	cmp	r3, #2
  4047a2:	d001      	beq.n	4047a8 <prvProcessDHCPReplies+0x48>
BaseType_t xReturn = pdFALSE;
  4047a4:	2400      	movs	r4, #0
  4047a6:	e13a      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
			( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( xDHCPData.ulTransactionId ) ) )
  4047a8:	4b81      	ldr	r3, [pc, #516]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4047aa:	681b      	ldr	r3, [r3, #0]
  4047ac:	6868      	ldr	r0, [r5, #4]
  4047ae:	0e1a      	lsrs	r2, r3, #24
  4047b0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4047b4:	0219      	lsls	r1, r3, #8
  4047b6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4047ba:	430a      	orrs	r2, r1
  4047bc:	0a1b      	lsrs	r3, r3, #8
  4047be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4047c2:	4313      	orrs	r3, r2
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
  4047c4:	4298      	cmp	r0, r3
  4047c6:	d001      	beq.n	4047cc <prvProcessDHCPReplies+0x6c>
BaseType_t xReturn = pdFALSE;
  4047c8:	2400      	movs	r4, #0
  4047ca:	e128      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
			if( memcmp( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress ),
  4047cc:	2206      	movs	r2, #6
  4047ce:	497b      	ldr	r1, [pc, #492]	; (4049bc <prvProcessDHCPReplies+0x25c>)
  4047d0:	f105 001c 	add.w	r0, r5, #28
  4047d4:	4b7a      	ldr	r3, [pc, #488]	; (4049c0 <prvProcessDHCPReplies+0x260>)
  4047d6:	4798      	blx	r3
  4047d8:	2800      	cmp	r0, #0
  4047da:	f040 8127 	bne.w	404a2c <prvProcessDHCPReplies+0x2cc>
				pucByte = &( pxDHCPMessage->ucFirstOptionByte );
  4047de:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
  4047e2:	1eb3      	subs	r3, r6, #2
  4047e4:	442b      	add	r3, r5
				while( pucByte < pucLastByte )
  4047e6:	429a      	cmp	r2, r3
  4047e8:	f080 8122 	bcs.w	404a30 <prvProcessDHCPReplies+0x2d0>
					ucOptionCode = pucByte[ 0 ];
  4047ec:	f895 10f0 	ldrb.w	r1, [r5, #240]	; 0xf0
					if( ucOptionCode == dhcpOPTION_END_BYTE )
  4047f0:	29ff      	cmp	r1, #255	; 0xff
  4047f2:	f000 811f 	beq.w	404a34 <prvProcessDHCPReplies+0x2d4>
  4047f6:	486e      	ldr	r0, [pc, #440]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4047f8:	f8d0 a008 	ldr.w	sl, [r0, #8]
  4047fc:	f890 b01c 	ldrb.w	fp, [r0, #28]
  404800:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  404804:	2000      	movs	r0, #0
  404806:	9004      	str	r0, [sp, #16]
  404808:	9003      	str	r0, [sp, #12]
  40480a:	9002      	str	r0, [sp, #8]
  40480c:	4681      	mov	r9, r0
					if( pucByte < pucLastByte - 1 )
  40480e:	f103 3cff 	add.w	ip, r3, #4294967295
							if( *pucByte == ( uint8_t ) xExpectedMessageType )
  404812:	fa5f f884 	uxtb.w	r8, r4
  404816:	9405      	str	r4, [sp, #20]
  404818:	e09d      	b.n	404956 <prvProcessDHCPReplies+0x1f6>
  40481a:	9b02      	ldr	r3, [sp, #8]
  40481c:	bb03      	cbnz	r3, 404860 <prvProcessDHCPReplies+0x100>
  40481e:	9b03      	ldr	r3, [sp, #12]
  404820:	b113      	cbz	r3, 404828 <prvProcessDHCPReplies+0xc8>
  404822:	4b63      	ldr	r3, [pc, #396]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  404824:	f8c3 a008 	str.w	sl, [r3, #8]
  404828:	9b04      	ldr	r3, [sp, #16]
  40482a:	b113      	cbz	r3, 404832 <prvProcessDHCPReplies+0xd2>
  40482c:	4b60      	ldr	r3, [pc, #384]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  40482e:	f8c3 e00c 	str.w	lr, [r3, #12]
				if( ulProcessed >= ulMandatoryOptions )
  404832:	f1b9 0f01 	cmp.w	r9, #1
  404836:	f240 80ff 	bls.w	404a38 <prvProcessDHCPReplies+0x2d8>
					xDHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
  40483a:	692b      	ldr	r3, [r5, #16]
  40483c:	4a5c      	ldr	r2, [pc, #368]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  40483e:	6053      	str	r3, [r2, #4]
					FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
  404840:	0e19      	lsrs	r1, r3, #24
  404842:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  404846:	021a      	lsls	r2, r3, #8
  404848:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  40484c:	4311      	orrs	r1, r2
  40484e:	0a1b      	lsrs	r3, r3, #8
  404850:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  404854:	4319      	orrs	r1, r3
  404856:	485b      	ldr	r0, [pc, #364]	; (4049c4 <prvProcessDHCPReplies+0x264>)
  404858:	4b5b      	ldr	r3, [pc, #364]	; (4049c8 <prvProcessDHCPReplies+0x268>)
  40485a:	4798      	blx	r3
					xReturn = pdPASS;
  40485c:	2401      	movs	r4, #1
  40485e:	e0de      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
  404860:	4b53      	ldr	r3, [pc, #332]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  404862:	f883 b01c 	strb.w	fp, [r3, #28]
  404866:	e7da      	b.n	40481e <prvProcessDHCPReplies+0xbe>
					if( pucByte < pucLastByte - 1 )
  404868:	4562      	cmp	r2, ip
  40486a:	d229      	bcs.n	4048c0 <prvProcessDHCPReplies+0x160>
						ucLength = pucByte[ 1 ];
  40486c:	7850      	ldrb	r0, [r2, #1]
						pucByte += 2;
  40486e:	1c96      	adds	r6, r2, #2
						if( pucByte >= pucLastByte - ucLength )
  404870:	1a1f      	subs	r7, r3, r0
  404872:	42be      	cmp	r6, r7
  404874:	d236      	bcs.n	4048e4 <prvProcessDHCPReplies+0x184>
					if( ucLength >= sizeof( ulParameter ) )
  404876:	2803      	cmp	r0, #3
						memcpy( ( void * ) &( ulParameter ),
  404878:	bf8c      	ite	hi
  40487a:	f8d2 7002 	ldrhi.w	r7, [r2, #2]
						ulParameter = 0;
  40487e:	2700      	movls	r7, #0
					switch( ucOptionCode )
  404880:	3901      	subs	r1, #1
  404882:	2935      	cmp	r1, #53	; 0x35
  404884:	d85e      	bhi.n	404944 <prvProcessDHCPReplies+0x1e4>
  404886:	e8df f001 	tbb	[pc, r1]
  40488a:	5d51      	.short	0x5d51
  40488c:	5b5d5d56 	.word	0x5b5d5d56
  404890:	5d5d5d5d 	.word	0x5d5d5d5d
  404894:	5d5d5d5d 	.word	0x5d5d5d5d
  404898:	5d5d5d5d 	.word	0x5d5d5d5d
  40489c:	5d5d5d5d 	.word	0x5d5d5d5d
  4048a0:	5d5d5d5d 	.word	0x5d5d5d5d
  4048a4:	5d5d5d5d 	.word	0x5d5d5d5d
  4048a8:	5d5d5d5d 	.word	0x5d5d5d5d
  4048ac:	5d5d5d5d 	.word	0x5d5d5d5d
  4048b0:	5d5d5d5d 	.word	0x5d5d5d5d
  4048b4:	5d5d5d5d 	.word	0x5d5d5d5d
  4048b8:	5d5d5d5d 	.word	0x5d5d5d5d
  4048bc:	6a3f5d7a 	.word	0x6a3f5d7a
  4048c0:	9b02      	ldr	r3, [sp, #8]
  4048c2:	b95b      	cbnz	r3, 4048dc <prvProcessDHCPReplies+0x17c>
  4048c4:	9b03      	ldr	r3, [sp, #12]
  4048c6:	b113      	cbz	r3, 4048ce <prvProcessDHCPReplies+0x16e>
  4048c8:	4b39      	ldr	r3, [pc, #228]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4048ca:	f8c3 a008 	str.w	sl, [r3, #8]
  4048ce:	9b04      	ldr	r3, [sp, #16]
  4048d0:	2b00      	cmp	r3, #0
  4048d2:	d0ae      	beq.n	404832 <prvProcessDHCPReplies+0xd2>
  4048d4:	4b36      	ldr	r3, [pc, #216]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4048d6:	f8c3 e00c 	str.w	lr, [r3, #12]
  4048da:	e7aa      	b.n	404832 <prvProcessDHCPReplies+0xd2>
  4048dc:	4b34      	ldr	r3, [pc, #208]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4048de:	f883 b01c 	strb.w	fp, [r3, #28]
  4048e2:	e7ef      	b.n	4048c4 <prvProcessDHCPReplies+0x164>
  4048e4:	9b02      	ldr	r3, [sp, #8]
  4048e6:	b95b      	cbnz	r3, 404900 <prvProcessDHCPReplies+0x1a0>
  4048e8:	9b03      	ldr	r3, [sp, #12]
  4048ea:	b113      	cbz	r3, 4048f2 <prvProcessDHCPReplies+0x192>
  4048ec:	4b30      	ldr	r3, [pc, #192]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4048ee:	f8c3 a008 	str.w	sl, [r3, #8]
  4048f2:	9b04      	ldr	r3, [sp, #16]
  4048f4:	2b00      	cmp	r3, #0
  4048f6:	d09c      	beq.n	404832 <prvProcessDHCPReplies+0xd2>
  4048f8:	4b2d      	ldr	r3, [pc, #180]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  4048fa:	f8c3 e00c 	str.w	lr, [r3, #12]
  4048fe:	e798      	b.n	404832 <prvProcessDHCPReplies+0xd2>
  404900:	4b2b      	ldr	r3, [pc, #172]	; (4049b0 <prvProcessDHCPReplies+0x250>)
  404902:	f883 b01c 	strb.w	fp, [r3, #28]
  404906:	e7ef      	b.n	4048e8 <prvProcessDHCPReplies+0x188>
							if( *pucByte == ( uint8_t ) xExpectedMessageType )
  404908:	7892      	ldrb	r2, [r2, #2]
  40490a:	4542      	cmp	r2, r8
  40490c:	d00b      	beq.n	404926 <prvProcessDHCPReplies+0x1c6>
							else if( *pucByte == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
  40490e:	2a06      	cmp	r2, #6
  404910:	d118      	bne.n	404944 <prvProcessDHCPReplies+0x1e4>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
  404912:	9905      	ldr	r1, [sp, #20]
  404914:	2905      	cmp	r1, #5
  404916:	9a02      	ldr	r2, [sp, #8]
  404918:	bf08      	it	eq
  40491a:	2201      	moveq	r2, #1
  40491c:	9202      	str	r2, [sp, #8]
  40491e:	bf08      	it	eq
  404920:	f04f 0b00 	moveq.w	fp, #0
  404924:	e00e      	b.n	404944 <prvProcessDHCPReplies+0x1e4>
								ulProcessed++;
  404926:	f109 0901 	add.w	r9, r9, #1
  40492a:	e00b      	b.n	404944 <prvProcessDHCPReplies+0x1e4>
							if( ucLength == sizeof( uint32_t ) )
  40492c:	2804      	cmp	r0, #4
  40492e:	d109      	bne.n	404944 <prvProcessDHCPReplies+0x1e4>
								xNetworkAddressing.ulNetMask = ulParameter;
  404930:	4a26      	ldr	r2, [pc, #152]	; (4049cc <prvProcessDHCPReplies+0x26c>)
  404932:	6057      	str	r7, [r2, #4]
  404934:	e008      	b.n	404948 <prvProcessDHCPReplies+0x1e8>
							if( ucLength == sizeof( uint32_t ) )
  404936:	2804      	cmp	r0, #4
  404938:	d104      	bne.n	404944 <prvProcessDHCPReplies+0x1e4>
								xNetworkAddressing.ulGatewayAddress = ulParameter;
  40493a:	4a24      	ldr	r2, [pc, #144]	; (4049cc <prvProcessDHCPReplies+0x26c>)
  40493c:	6097      	str	r7, [r2, #8]
  40493e:	e003      	b.n	404948 <prvProcessDHCPReplies+0x1e8>
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
  404940:	4a22      	ldr	r2, [pc, #136]	; (4049cc <prvProcessDHCPReplies+0x26c>)
  404942:	60d7      	str	r7, [r2, #12]
					if( ucLength == 0u )
  404944:	2800      	cmp	r0, #0
  404946:	d043      	beq.n	4049d0 <prvProcessDHCPReplies+0x270>
						pucByte += ucLength;
  404948:	1832      	adds	r2, r6, r0
				while( pucByte < pucLastByte )
  40494a:	429a      	cmp	r2, r3
  40494c:	d253      	bcs.n	4049f6 <prvProcessDHCPReplies+0x296>
					ucOptionCode = pucByte[ 0 ];
  40494e:	7811      	ldrb	r1, [r2, #0]
					if( ucOptionCode == dhcpOPTION_END_BYTE )
  404950:	29ff      	cmp	r1, #255	; 0xff
  404952:	f43f af62 	beq.w	40481a <prvProcessDHCPReplies+0xba>
					if( ucOptionCode == dhcpZERO_PAD_OPTION_CODE )
  404956:	2900      	cmp	r1, #0
  404958:	d186      	bne.n	404868 <prvProcessDHCPReplies+0x108>
						pucByte += 1;
  40495a:	3201      	adds	r2, #1
						continue;
  40495c:	e7f5      	b.n	40494a <prvProcessDHCPReplies+0x1ea>
							if( ucLength == sizeof( uint32_t ) )
  40495e:	2804      	cmp	r0, #4
  404960:	d1f0      	bne.n	404944 <prvProcessDHCPReplies+0x1e4>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
  404962:	9a05      	ldr	r2, [sp, #20]
  404964:	2a02      	cmp	r2, #2
  404966:	d004      	beq.n	404972 <prvProcessDHCPReplies+0x212>
									if( xDHCPData.ulDHCPServerAddress == ulParameter )
  404968:	4557      	cmp	r7, sl
  40496a:	d1ed      	bne.n	404948 <prvProcessDHCPReplies+0x1e8>
										ulProcessed++;
  40496c:	f109 0901 	add.w	r9, r9, #1
  404970:	e7ea      	b.n	404948 <prvProcessDHCPReplies+0x1e8>
									ulProcessed++;
  404972:	f109 0901 	add.w	r9, r9, #1
									xDHCPData.ulDHCPServerAddress = ulParameter;
  404976:	46ba      	mov	sl, r7
  404978:	2201      	movs	r2, #1
  40497a:	9203      	str	r2, [sp, #12]
  40497c:	e7e4      	b.n	404948 <prvProcessDHCPReplies+0x1e8>
							if( ucLength == sizeof( xDHCPData.ulLeaseTime ) )
  40497e:	2804      	cmp	r0, #4
  404980:	d1e0      	bne.n	404944 <prvProcessDHCPReplies+0x1e4>
								xDHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
  404982:	ea4f 6e17 	mov.w	lr, r7, lsr #24
  404986:	ea4e 6e07 	orr.w	lr, lr, r7, lsl #24
  40498a:	023a      	lsls	r2, r7, #8
  40498c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  404990:	ea4e 0e02 	orr.w	lr, lr, r2
  404994:	0a3a      	lsrs	r2, r7, #8
  404996:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  40499a:	ea4e 0e02 	orr.w	lr, lr, r2
								xDHCPData.ulLeaseTime >>= 1UL;
  40499e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
  4049a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4049a6:	fb02 fe0e 	mul.w	lr, r2, lr
  4049aa:	2201      	movs	r2, #1
  4049ac:	9204      	str	r2, [sp, #16]
  4049ae:	e7cb      	b.n	404948 <prvProcessDHCPReplies+0x1e8>
  4049b0:	20006c40 	.word	0x20006c40
  4049b4:	00406195 	.word	0x00406195
  4049b8:	63538263 	.word	0x63538263
  4049bc:	200000d8 	.word	0x200000d8
  4049c0:	0040c379 	.word	0x0040c379
  4049c4:	00412c40 	.word	0x00412c40
  4049c8:	0040c351 	.word	0x0040c351
  4049cc:	20006d24 	.word	0x20006d24
  4049d0:	9b02      	ldr	r3, [sp, #8]
  4049d2:	b963      	cbnz	r3, 4049ee <prvProcessDHCPReplies+0x28e>
  4049d4:	9b03      	ldr	r3, [sp, #12]
  4049d6:	b113      	cbz	r3, 4049de <prvProcessDHCPReplies+0x27e>
  4049d8:	4b19      	ldr	r3, [pc, #100]	; (404a40 <prvProcessDHCPReplies+0x2e0>)
  4049da:	f8c3 a008 	str.w	sl, [r3, #8]
  4049de:	9b04      	ldr	r3, [sp, #16]
  4049e0:	2b00      	cmp	r3, #0
  4049e2:	f43f af26 	beq.w	404832 <prvProcessDHCPReplies+0xd2>
  4049e6:	4b16      	ldr	r3, [pc, #88]	; (404a40 <prvProcessDHCPReplies+0x2e0>)
  4049e8:	f8c3 e00c 	str.w	lr, [r3, #12]
  4049ec:	e721      	b.n	404832 <prvProcessDHCPReplies+0xd2>
  4049ee:	4b14      	ldr	r3, [pc, #80]	; (404a40 <prvProcessDHCPReplies+0x2e0>)
  4049f0:	f883 b01c 	strb.w	fp, [r3, #28]
  4049f4:	e7ee      	b.n	4049d4 <prvProcessDHCPReplies+0x274>
  4049f6:	9b02      	ldr	r3, [sp, #8]
  4049f8:	b963      	cbnz	r3, 404a14 <prvProcessDHCPReplies+0x2b4>
  4049fa:	9b03      	ldr	r3, [sp, #12]
  4049fc:	b113      	cbz	r3, 404a04 <prvProcessDHCPReplies+0x2a4>
  4049fe:	4b10      	ldr	r3, [pc, #64]	; (404a40 <prvProcessDHCPReplies+0x2e0>)
  404a00:	f8c3 a008 	str.w	sl, [r3, #8]
  404a04:	9b04      	ldr	r3, [sp, #16]
  404a06:	2b00      	cmp	r3, #0
  404a08:	f43f af13 	beq.w	404832 <prvProcessDHCPReplies+0xd2>
  404a0c:	4b0c      	ldr	r3, [pc, #48]	; (404a40 <prvProcessDHCPReplies+0x2e0>)
  404a0e:	f8c3 e00c 	str.w	lr, [r3, #12]
  404a12:	e70e      	b.n	404832 <prvProcessDHCPReplies+0xd2>
  404a14:	4b0a      	ldr	r3, [pc, #40]	; (404a40 <prvProcessDHCPReplies+0x2e0>)
  404a16:	f883 b01c 	strb.w	fp, [r3, #28]
  404a1a:	e7ee      	b.n	4049fa <prvProcessDHCPReplies+0x29a>
BaseType_t xReturn = pdFALSE;
  404a1c:	2400      	movs	r4, #0
		FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayload );
  404a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404a20:	4b08      	ldr	r3, [pc, #32]	; (404a44 <prvProcessDHCPReplies+0x2e4>)
  404a22:	4798      	blx	r3
}
  404a24:	4620      	mov	r0, r4
  404a26:	b00b      	add	sp, #44	; 0x2c
  404a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xReturn = pdFALSE;
  404a2c:	2400      	movs	r4, #0
  404a2e:	e7f6      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
  404a30:	2400      	movs	r4, #0
  404a32:	e7f4      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
  404a34:	2400      	movs	r4, #0
  404a36:	e7f2      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
  404a38:	2400      	movs	r4, #0
  404a3a:	e7f0      	b.n	404a1e <prvProcessDHCPReplies+0x2be>
  404a3c:	2400      	movs	r4, #0
	return xReturn;
  404a3e:	e7f1      	b.n	404a24 <prvProcessDHCPReplies+0x2c4>
  404a40:	20006c40 	.word	0x20006c40
  404a44:	00405505 	.word	0x00405505

00404a48 <prvCreateDHCPSocket>:
{
  404a48:	b570      	push	{r4, r5, r6, lr}
  404a4a:	b086      	sub	sp, #24
TickType_t xTimeoutTime = ( TickType_t ) 0;
  404a4c:	2300      	movs	r3, #0
  404a4e:	9303      	str	r3, [sp, #12]
	if( xDHCPData.xDHCPSocket == NULL )
  404a50:	4b19      	ldr	r3, [pc, #100]	; (404ab8 <prvCreateDHCPSocket+0x70>)
  404a52:	6a1b      	ldr	r3, [r3, #32]
  404a54:	b10b      	cbz	r3, 404a5a <prvCreateDHCPSocket+0x12>
}
  404a56:	b006      	add	sp, #24
  404a58:	bd70      	pop	{r4, r5, r6, pc}
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
  404a5a:	2211      	movs	r2, #17
  404a5c:	2102      	movs	r1, #2
  404a5e:	4608      	mov	r0, r1
  404a60:	4b16      	ldr	r3, [pc, #88]	; (404abc <prvCreateDHCPSocket+0x74>)
  404a62:	4798      	blx	r3
  404a64:	4b14      	ldr	r3, [pc, #80]	; (404ab8 <prvCreateDHCPSocket+0x70>)
  404a66:	6218      	str	r0, [r3, #32]
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
  404a68:	f1b0 3fff 	cmp.w	r0, #4294967295
  404a6c:	d020      	beq.n	404ab0 <prvCreateDHCPSocket+0x68>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
  404a6e:	2604      	movs	r6, #4
  404a70:	9600      	str	r6, [sp, #0]
  404a72:	ab03      	add	r3, sp, #12
  404a74:	2200      	movs	r2, #0
  404a76:	4611      	mov	r1, r2
  404a78:	4d11      	ldr	r5, [pc, #68]	; (404ac0 <prvCreateDHCPSocket+0x78>)
  404a7a:	47a8      	blx	r5
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
  404a7c:	4c0e      	ldr	r4, [pc, #56]	; (404ab8 <prvCreateDHCPSocket+0x70>)
  404a7e:	9600      	str	r6, [sp, #0]
  404a80:	ab03      	add	r3, sp, #12
  404a82:	2201      	movs	r2, #1
  404a84:	2100      	movs	r1, #0
  404a86:	6a20      	ldr	r0, [r4, #32]
  404a88:	47a8      	blx	r5
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT;
  404a8a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
  404a8e:	f8ad 3012 	strh.w	r3, [sp, #18]
			xReturn = vSocketBind( xDHCPData.xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
  404a92:	2300      	movs	r3, #0
  404a94:	2208      	movs	r2, #8
  404a96:	a904      	add	r1, sp, #16
  404a98:	6a20      	ldr	r0, [r4, #32]
  404a9a:	4c0a      	ldr	r4, [pc, #40]	; (404ac4 <prvCreateDHCPSocket+0x7c>)
  404a9c:	47a0      	blx	r4
			if( xReturn != 0 )
  404a9e:	2800      	cmp	r0, #0
  404aa0:	d0d9      	beq.n	404a56 <prvCreateDHCPSocket+0xe>
				vSocketClose( xDHCPData.xDHCPSocket );
  404aa2:	4c05      	ldr	r4, [pc, #20]	; (404ab8 <prvCreateDHCPSocket+0x70>)
  404aa4:	6a20      	ldr	r0, [r4, #32]
  404aa6:	4b08      	ldr	r3, [pc, #32]	; (404ac8 <prvCreateDHCPSocket+0x80>)
  404aa8:	4798      	blx	r3
				xDHCPData.xDHCPSocket = NULL;
  404aaa:	2300      	movs	r3, #0
  404aac:	6223      	str	r3, [r4, #32]
  404aae:	e7d2      	b.n	404a56 <prvCreateDHCPSocket+0xe>
			xDHCPData.xDHCPSocket = NULL;
  404ab0:	2200      	movs	r2, #0
  404ab2:	4b01      	ldr	r3, [pc, #4]	; (404ab8 <prvCreateDHCPSocket+0x70>)
  404ab4:	621a      	str	r2, [r3, #32]
}
  404ab6:	e7ce      	b.n	404a56 <prvCreateDHCPSocket+0xe>
  404ab8:	20006c40 	.word	0x20006c40
  404abc:	0040608d 	.word	0x0040608d
  404ac0:	00406925 	.word	0x00406925
  404ac4:	0040641d 	.word	0x0040641d
  404ac8:	0040657d 	.word	0x0040657d

00404acc <xIsDHCPSocket>:
	if( xDHCPData.xDHCPSocket == xSocket )
  404acc:	4b03      	ldr	r3, [pc, #12]	; (404adc <xIsDHCPSocket+0x10>)
  404ace:	6a1b      	ldr	r3, [r3, #32]
}
  404ad0:	4283      	cmp	r3, r0
  404ad2:	bf14      	ite	ne
  404ad4:	2000      	movne	r0, #0
  404ad6:	2001      	moveq	r0, #1
  404ad8:	4770      	bx	lr
  404ada:	bf00      	nop
  404adc:	20006c40 	.word	0x20006c40

00404ae0 <vDHCPProcess>:
{
  404ae0:	b510      	push	{r4, lr}
	if( xReset != pdFALSE )
  404ae2:	2800      	cmp	r0, #0
  404ae4:	f000 80eb 	beq.w	404cbe <vDHCPProcess+0x1de>
		xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
  404ae8:	2200      	movs	r2, #0
  404aea:	4b7e      	ldr	r3, [pc, #504]	; (404ce4 <vDHCPProcess+0x204>)
  404aec:	771a      	strb	r2, [r3, #28]
	xDHCPData.ulTransactionId = ipconfigRAND32();
  404aee:	4b7e      	ldr	r3, [pc, #504]	; (404ce8 <vDHCPProcess+0x208>)
  404af0:	4798      	blx	r3
  404af2:	4b7c      	ldr	r3, [pc, #496]	; (404ce4 <vDHCPProcess+0x204>)
  404af4:	6018      	str	r0, [r3, #0]
	if( 0 != xDHCPData.ulTransactionId )
  404af6:	b978      	cbnz	r0, 404b18 <vDHCPProcess+0x38>
				if( xDHCPData.xDHCPSocket == NULL )
  404af8:	4b7a      	ldr	r3, [pc, #488]	; (404ce4 <vDHCPProcess+0x204>)
  404afa:	6a1b      	ldr	r3, [r3, #32]
  404afc:	2b00      	cmp	r3, #0
  404afe:	d059      	beq.n	404bb4 <vDHCPProcess+0xd4>
				*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
  404b00:	2200      	movs	r2, #0
  404b02:	4b7a      	ldr	r3, [pc, #488]	; (404cec <vDHCPProcess+0x20c>)
  404b04:	615a      	str	r2, [r3, #20]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
  404b06:	4b7a      	ldr	r3, [pc, #488]	; (404cf0 <vDHCPProcess+0x210>)
  404b08:	4798      	blx	r3
  404b0a:	4c76      	ldr	r4, [pc, #472]	; (404ce4 <vDHCPProcess+0x204>)
  404b0c:	6120      	str	r0, [r4, #16]
					prvSendDHCPDiscover( );
  404b0e:	4b79      	ldr	r3, [pc, #484]	; (404cf4 <vDHCPProcess+0x214>)
  404b10:	4798      	blx	r3
					xDHCPData.eDHCPState = eWaitingOffer;
  404b12:	2301      	movs	r3, #1
  404b14:	7723      	strb	r3, [r4, #28]
  404b16:	bd10      	pop	{r4, pc}
		xDHCPData.xUseBroadcast = 0;
  404b18:	2200      	movs	r2, #0
  404b1a:	619a      	str	r2, [r3, #24]
		xDHCPData.ulOfferedIPAddress = 0UL;
  404b1c:	605a      	str	r2, [r3, #4]
		xDHCPData.ulDHCPServerAddress = 0UL;
  404b1e:	609a      	str	r2, [r3, #8]
		xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
  404b20:	f241 3288 	movw	r2, #5000	; 0x1388
  404b24:	615a      	str	r2, [r3, #20]
		prvCreateDHCPSocket();
  404b26:	4b74      	ldr	r3, [pc, #464]	; (404cf8 <vDHCPProcess+0x218>)
  404b28:	4798      	blx	r3
		FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
  404b2a:	21fa      	movs	r1, #250	; 0xfa
  404b2c:	4873      	ldr	r0, [pc, #460]	; (404cfc <vDHCPProcess+0x21c>)
  404b2e:	4b74      	ldr	r3, [pc, #464]	; (404d00 <vDHCPProcess+0x220>)
  404b30:	4798      	blx	r3
		vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
  404b32:	20fa      	movs	r0, #250	; 0xfa
  404b34:	4b73      	ldr	r3, [pc, #460]	; (404d04 <vDHCPProcess+0x224>)
  404b36:	4798      	blx	r3
  404b38:	e7de      	b.n	404af8 <vDHCPProcess+0x18>
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
  404b3a:	2002      	movs	r0, #2
  404b3c:	4b72      	ldr	r3, [pc, #456]	; (404d08 <vDHCPProcess+0x228>)
  404b3e:	4798      	blx	r3
  404b40:	2801      	cmp	r0, #1
  404b42:	d023      	beq.n	404b8c <vDHCPProcess+0xac>
			else if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
  404b44:	4b6a      	ldr	r3, [pc, #424]	; (404cf0 <vDHCPProcess+0x210>)
  404b46:	4798      	blx	r3
  404b48:	4b66      	ldr	r3, [pc, #408]	; (404ce4 <vDHCPProcess+0x204>)
  404b4a:	6959      	ldr	r1, [r3, #20]
  404b4c:	691b      	ldr	r3, [r3, #16]
  404b4e:	1ac0      	subs	r0, r0, r3
  404b50:	4288      	cmp	r0, r1
  404b52:	f240 80c5 	bls.w	404ce0 <vDHCPProcess+0x200>
				xDHCPData.xDHCPTxPeriod <<= 1;
  404b56:	0049      	lsls	r1, r1, #1
  404b58:	4b62      	ldr	r3, [pc, #392]	; (404ce4 <vDHCPProcess+0x204>)
  404b5a:	6159      	str	r1, [r3, #20]
				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
  404b5c:	4b6b      	ldr	r3, [pc, #428]	; (404d0c <vDHCPProcess+0x22c>)
  404b5e:	4299      	cmp	r1, r3
  404b60:	d824      	bhi.n	404bac <vDHCPProcess+0xcc>
					xDHCPData.ulTransactionId = ipconfigRAND32( );
  404b62:	4b61      	ldr	r3, [pc, #388]	; (404ce8 <vDHCPProcess+0x208>)
  404b64:	4798      	blx	r3
  404b66:	4b5f      	ldr	r3, [pc, #380]	; (404ce4 <vDHCPProcess+0x204>)
  404b68:	6018      	str	r0, [r3, #0]
					if( 0 != xDHCPData.ulTransactionId )
  404b6a:	b1d8      	cbz	r0, 404ba4 <vDHCPProcess+0xc4>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount( );
  404b6c:	4b60      	ldr	r3, [pc, #384]	; (404cf0 <vDHCPProcess+0x210>)
  404b6e:	4798      	blx	r3
  404b70:	4c5c      	ldr	r4, [pc, #368]	; (404ce4 <vDHCPProcess+0x204>)
  404b72:	6120      	str	r0, [r4, #16]
						xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
  404b74:	69a3      	ldr	r3, [r4, #24]
  404b76:	fab3 f383 	clz	r3, r3
  404b7a:	095b      	lsrs	r3, r3, #5
  404b7c:	61a3      	str	r3, [r4, #24]
						prvSendDHCPDiscover( );
  404b7e:	4b5d      	ldr	r3, [pc, #372]	; (404cf4 <vDHCPProcess+0x214>)
  404b80:	4798      	blx	r3
						FreeRTOS_debug_printf( ( "vDHCPProcess: timeout %lu ticks\n", xDHCPData.xDHCPTxPeriod ) );
  404b82:	6961      	ldr	r1, [r4, #20]
  404b84:	4862      	ldr	r0, [pc, #392]	; (404d10 <vDHCPProcess+0x230>)
  404b86:	4b5e      	ldr	r3, [pc, #376]	; (404d00 <vDHCPProcess+0x220>)
  404b88:	4798      	blx	r3
  404b8a:	bd10      	pop	{r4, pc}
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
  404b8c:	4b58      	ldr	r3, [pc, #352]	; (404cf0 <vDHCPProcess+0x210>)
  404b8e:	4798      	blx	r3
  404b90:	4c54      	ldr	r4, [pc, #336]	; (404ce4 <vDHCPProcess+0x204>)
  404b92:	6120      	str	r0, [r4, #16]
					xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
  404b94:	f241 3388 	movw	r3, #5000	; 0x1388
  404b98:	6163      	str	r3, [r4, #20]
					prvSendDHCPRequest( );
  404b9a:	4b5e      	ldr	r3, [pc, #376]	; (404d14 <vDHCPProcess+0x234>)
  404b9c:	4798      	blx	r3
					xDHCPData.eDHCPState = eWaitingAcknowledge;
  404b9e:	2302      	movs	r3, #2
  404ba0:	7723      	strb	r3, [r4, #28]
					break;
  404ba2:	bd10      	pop	{r4, pc}
						FreeRTOS_debug_printf( ( "vDHCPProcess: failed to generate a random Transaction ID\n" ) );
  404ba4:	485c      	ldr	r0, [pc, #368]	; (404d18 <vDHCPProcess+0x238>)
  404ba6:	4b56      	ldr	r3, [pc, #344]	; (404d00 <vDHCPProcess+0x220>)
  404ba8:	4798      	blx	r3
  404baa:	bd10      	pop	{r4, pc}
					FreeRTOS_debug_printf( ( "vDHCPProcess: giving up %lu > %lu ticks\n", xDHCPData.xDHCPTxPeriod, ipconfigMAXIMUM_DISCOVER_TX_PERIOD ) );
  404bac:	4a57      	ldr	r2, [pc, #348]	; (404d0c <vDHCPProcess+0x22c>)
  404bae:	485b      	ldr	r0, [pc, #364]	; (404d1c <vDHCPProcess+0x23c>)
  404bb0:	4b53      	ldr	r3, [pc, #332]	; (404d00 <vDHCPProcess+0x220>)
  404bb2:	4798      	blx	r3
		taskENTER_CRITICAL();
  404bb4:	4b5a      	ldr	r3, [pc, #360]	; (404d20 <vDHCPProcess+0x240>)
  404bb6:	4798      	blx	r3
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
  404bb8:	4b5a      	ldr	r3, [pc, #360]	; (404d24 <vDHCPProcess+0x244>)
  404bba:	681a      	ldr	r2, [r3, #0]
  404bbc:	4b4b      	ldr	r3, [pc, #300]	; (404cec <vDHCPProcess+0x20c>)
  404bbe:	615a      	str	r2, [r3, #20]
		taskEXIT_CRITICAL();
  404bc0:	4b59      	ldr	r3, [pc, #356]	; (404d28 <vDHCPProcess+0x248>)
  404bc2:	4798      	blx	r3
		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
  404bc4:	4c47      	ldr	r4, [pc, #284]	; (404ce4 <vDHCPProcess+0x204>)
  404bc6:	2304      	movs	r3, #4
  404bc8:	7723      	strb	r3, [r4, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
  404bca:	2000      	movs	r0, #0
  404bcc:	4b57      	ldr	r3, [pc, #348]	; (404d2c <vDHCPProcess+0x24c>)
  404bce:	4798      	blx	r3
		vIPNetworkUpCalls( );
  404bd0:	4b57      	ldr	r3, [pc, #348]	; (404d30 <vDHCPProcess+0x250>)
  404bd2:	4798      	blx	r3
		if( xDHCPData.xDHCPSocket != NULL )
  404bd4:	6a20      	ldr	r0, [r4, #32]
  404bd6:	2800      	cmp	r0, #0
  404bd8:	f000 8082 	beq.w	404ce0 <vDHCPProcess+0x200>
			vSocketClose( xDHCPData.xDHCPSocket );
  404bdc:	4b55      	ldr	r3, [pc, #340]	; (404d34 <vDHCPProcess+0x254>)
  404bde:	4798      	blx	r3
			xDHCPData.xDHCPSocket = NULL;
  404be0:	2200      	movs	r2, #0
  404be2:	4b40      	ldr	r3, [pc, #256]	; (404ce4 <vDHCPProcess+0x204>)
  404be4:	621a      	str	r2, [r3, #32]
}
  404be6:	bd10      	pop	{r4, pc}
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
  404be8:	2005      	movs	r0, #5
  404bea:	4b47      	ldr	r3, [pc, #284]	; (404d08 <vDHCPProcess+0x228>)
  404bec:	4798      	blx	r3
  404bee:	2801      	cmp	r0, #1
  404bf0:	d011      	beq.n	404c16 <vDHCPProcess+0x136>
				if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
  404bf2:	4b3f      	ldr	r3, [pc, #252]	; (404cf0 <vDHCPProcess+0x210>)
  404bf4:	4798      	blx	r3
  404bf6:	4a3b      	ldr	r2, [pc, #236]	; (404ce4 <vDHCPProcess+0x204>)
  404bf8:	6953      	ldr	r3, [r2, #20]
  404bfa:	6912      	ldr	r2, [r2, #16]
  404bfc:	1a80      	subs	r0, r0, r2
  404bfe:	4298      	cmp	r0, r3
  404c00:	d96e      	bls.n	404ce0 <vDHCPProcess+0x200>
					xDHCPData.xDHCPTxPeriod <<= 1;
  404c02:	005b      	lsls	r3, r3, #1
  404c04:	4a37      	ldr	r2, [pc, #220]	; (404ce4 <vDHCPProcess+0x204>)
  404c06:	6153      	str	r3, [r2, #20]
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
  404c08:	4a40      	ldr	r2, [pc, #256]	; (404d0c <vDHCPProcess+0x22c>)
  404c0a:	4293      	cmp	r3, r2
  404c0c:	d938      	bls.n	404c80 <vDHCPProcess+0x1a0>
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
  404c0e:	2200      	movs	r2, #0
  404c10:	4b34      	ldr	r3, [pc, #208]	; (404ce4 <vDHCPProcess+0x204>)
  404c12:	771a      	strb	r2, [r3, #28]
  404c14:	bd10      	pop	{r4, pc}
				FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
  404c16:	4c33      	ldr	r4, [pc, #204]	; (404ce4 <vDHCPProcess+0x204>)
  404c18:	6863      	ldr	r3, [r4, #4]
  404c1a:	0e19      	lsrs	r1, r3, #24
  404c1c:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  404c20:	021a      	lsls	r2, r3, #8
  404c22:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  404c26:	4311      	orrs	r1, r2
  404c28:	0a1b      	lsrs	r3, r3, #8
  404c2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  404c2e:	4319      	orrs	r1, r3
  404c30:	4841      	ldr	r0, [pc, #260]	; (404d38 <vDHCPProcess+0x258>)
  404c32:	4b33      	ldr	r3, [pc, #204]	; (404d00 <vDHCPProcess+0x220>)
  404c34:	4798      	blx	r3
				*ipLOCAL_IP_ADDRESS_POINTER = xDHCPData.ulOfferedIPAddress;
  404c36:	6863      	ldr	r3, [r4, #4]
  404c38:	4a2c      	ldr	r2, [pc, #176]	; (404cec <vDHCPProcess+0x20c>)
  404c3a:	6153      	str	r3, [r2, #20]
				xNetworkAddressing.ulBroadcastAddress = ( xDHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
  404c3c:	4a39      	ldr	r2, [pc, #228]	; (404d24 <vDHCPProcess+0x244>)
  404c3e:	6851      	ldr	r1, [r2, #4]
  404c40:	ea63 0301 	orn	r3, r3, r1
  404c44:	6113      	str	r3, [r2, #16]
				xDHCPData.eDHCPState = eLeasedAddress;
  404c46:	2303      	movs	r3, #3
  404c48:	7723      	strb	r3, [r4, #28]
				vIPNetworkUpCalls( );
  404c4a:	4b39      	ldr	r3, [pc, #228]	; (404d30 <vDHCPProcess+0x250>)
  404c4c:	4798      	blx	r3
				vSocketClose( xDHCPData.xDHCPSocket );
  404c4e:	6a20      	ldr	r0, [r4, #32]
  404c50:	4b38      	ldr	r3, [pc, #224]	; (404d34 <vDHCPProcess+0x254>)
  404c52:	4798      	blx	r3
				xDHCPData.xDHCPSocket = NULL;
  404c54:	2300      	movs	r3, #0
  404c56:	6223      	str	r3, [r4, #32]
				if( xDHCPData.ulLeaseTime == 0UL )
  404c58:	68e3      	ldr	r3, [r4, #12]
  404c5a:	b943      	cbnz	r3, 404c6e <vDHCPProcess+0x18e>
					xDHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
  404c5c:	4a37      	ldr	r2, [pc, #220]	; (404d3c <vDHCPProcess+0x25c>)
  404c5e:	60e2      	str	r2, [r4, #12]
				vARPSendGratuitous();
  404c60:	4b37      	ldr	r3, [pc, #220]	; (404d40 <vDHCPProcess+0x260>)
  404c62:	4798      	blx	r3
				vIPReloadDHCPTimer( xDHCPData.ulLeaseTime );
  404c64:	4b1f      	ldr	r3, [pc, #124]	; (404ce4 <vDHCPProcess+0x204>)
  404c66:	68d8      	ldr	r0, [r3, #12]
  404c68:	4b26      	ldr	r3, [pc, #152]	; (404d04 <vDHCPProcess+0x224>)
  404c6a:	4798      	blx	r3
  404c6c:	bd10      	pop	{r4, pc}
				else if( xDHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
  404c6e:	f64e 225f 	movw	r2, #59999	; 0xea5f
  404c72:	4293      	cmp	r3, r2
  404c74:	d8f4      	bhi.n	404c60 <vDHCPProcess+0x180>
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
  404c76:	f64e 2260 	movw	r2, #60000	; 0xea60
  404c7a:	4b1a      	ldr	r3, [pc, #104]	; (404ce4 <vDHCPProcess+0x204>)
  404c7c:	60da      	str	r2, [r3, #12]
  404c7e:	e7ef      	b.n	404c60 <vDHCPProcess+0x180>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount();
  404c80:	4b1b      	ldr	r3, [pc, #108]	; (404cf0 <vDHCPProcess+0x210>)
  404c82:	4798      	blx	r3
  404c84:	4b17      	ldr	r3, [pc, #92]	; (404ce4 <vDHCPProcess+0x204>)
  404c86:	6118      	str	r0, [r3, #16]
						prvSendDHCPRequest( );
  404c88:	4b22      	ldr	r3, [pc, #136]	; (404d14 <vDHCPProcess+0x234>)
  404c8a:	4798      	blx	r3
  404c8c:	bd10      	pop	{r4, pc}
			prvCreateDHCPSocket();
  404c8e:	4b1a      	ldr	r3, [pc, #104]	; (404cf8 <vDHCPProcess+0x218>)
  404c90:	4798      	blx	r3
			if( xDHCPData.xDHCPSocket != NULL )
  404c92:	4b14      	ldr	r3, [pc, #80]	; (404ce4 <vDHCPProcess+0x204>)
  404c94:	6a1b      	ldr	r3, [r3, #32]
  404c96:	b31b      	cbz	r3, 404ce0 <vDHCPProcess+0x200>
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
  404c98:	4b15      	ldr	r3, [pc, #84]	; (404cf0 <vDHCPProcess+0x210>)
  404c9a:	4798      	blx	r3
  404c9c:	4c11      	ldr	r4, [pc, #68]	; (404ce4 <vDHCPProcess+0x204>)
  404c9e:	6120      	str	r0, [r4, #16]
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
  404ca0:	f241 3388 	movw	r3, #5000	; 0x1388
  404ca4:	6163      	str	r3, [r4, #20]
				prvSendDHCPRequest( );
  404ca6:	4b1b      	ldr	r3, [pc, #108]	; (404d14 <vDHCPProcess+0x234>)
  404ca8:	4798      	blx	r3
				xDHCPData.eDHCPState = eWaitingAcknowledge;
  404caa:	2302      	movs	r3, #2
  404cac:	7723      	strb	r3, [r4, #28]
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
  404cae:	20fa      	movs	r0, #250	; 0xfa
  404cb0:	4b14      	ldr	r3, [pc, #80]	; (404d04 <vDHCPProcess+0x224>)
  404cb2:	4798      	blx	r3
  404cb4:	bd10      	pop	{r4, pc}
			vIPSetDHCPTimerEnableState( pdFALSE );
  404cb6:	2000      	movs	r0, #0
  404cb8:	4b1c      	ldr	r3, [pc, #112]	; (404d2c <vDHCPProcess+0x24c>)
  404cba:	4798      	blx	r3
			break;
  404cbc:	bd10      	pop	{r4, pc}
	switch( xDHCPData.eDHCPState )
  404cbe:	4b09      	ldr	r3, [pc, #36]	; (404ce4 <vDHCPProcess+0x204>)
  404cc0:	7f1b      	ldrb	r3, [r3, #28]
  404cc2:	2b04      	cmp	r3, #4
  404cc4:	d80c      	bhi.n	404ce0 <vDHCPProcess+0x200>
  404cc6:	a201      	add	r2, pc, #4	; (adr r2, 404ccc <vDHCPProcess+0x1ec>)
  404cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404ccc:	00404aef 	.word	0x00404aef
  404cd0:	00404b3b 	.word	0x00404b3b
  404cd4:	00404be9 	.word	0x00404be9
  404cd8:	00404c8f 	.word	0x00404c8f
  404cdc:	00404cb7 	.word	0x00404cb7
  404ce0:	bd10      	pop	{r4, pc}
  404ce2:	bf00      	nop
  404ce4:	20006c40 	.word	0x20006c40
  404ce8:	0040bf89 	.word	0x0040bf89
  404cec:	200000d8 	.word	0x200000d8
  404cf0:	0040b649 	.word	0x0040b649
  404cf4:	0040467d 	.word	0x0040467d
  404cf8:	00404a49 	.word	0x00404a49
  404cfc:	00412cbc 	.word	0x00412cbc
  404d00:	0040c351 	.word	0x0040c351
  404d04:	00405f09 	.word	0x00405f09
  404d08:	00404761 	.word	0x00404761
  404d0c:	0001d4c0 	.word	0x0001d4c0
  404d10:	00412ce8 	.word	0x00412ce8
  404d14:	004046dd 	.word	0x004046dd
  404d18:	00412d0c 	.word	0x00412d0c
  404d1c:	00412d48 	.word	0x00412d48
  404d20:	00409f15 	.word	0x00409f15
  404d24:	20006d24 	.word	0x20006d24
  404d28:	00409f35 	.word	0x00409f35
  404d2c:	00405ee9 	.word	0x00405ee9
  404d30:	0040574d 	.word	0x0040574d
  404d34:	0040657d 	.word	0x0040657d
  404d38:	00412d74 	.word	0x00412d74
  404d3c:	0a4cb800 	.word	0x0a4cb800
  404d40:	0040447d 	.word	0x0040447d

00404d44 <prvSkipNameField>:

static uint8_t *prvSkipNameField( uint8_t *pucByte, size_t xSourceLen )
{
	size_t xChunkLength;

	if( 0 == xSourceLen )
  404d44:	460a      	mov	r2, r1
  404d46:	b1e9      	cbz	r1, 404d84 <prvSkipNameField+0x40>
		return NULL;
	}

	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
  404d48:	7803      	ldrb	r3, [r0, #0]
  404d4a:	f003 01c0 	and.w	r1, r3, #192	; 0xc0
  404d4e:	29c0      	cmp	r1, #192	; 0xc0
  404d50:	d012      	beq.n	404d78 <prvSkipNameField+0x34>
		}
	}
	else
	{
		/* pucByte points to the full name. Walk over the string. */
		while( ( *pucByte != 0x00 ) && ( xSourceLen > 1 ) )
  404d52:	b1eb      	cbz	r3, 404d90 <prvSkipNameField+0x4c>
  404d54:	2a01      	cmp	r2, #1
  404d56:	d917      	bls.n	404d88 <prvSkipNameField+0x44>
		{
			xChunkLength = *pucByte + 1;
  404d58:	3301      	adds	r3, #1

			if( xSourceLen > xChunkLength )
  404d5a:	429a      	cmp	r2, r3
  404d5c:	d90a      	bls.n	404d74 <prvSkipNameField+0x30>
			{
				xSourceLen -= xChunkLength;
  404d5e:	1ad2      	subs	r2, r2, r3
				pucByte += xChunkLength;
  404d60:	4418      	add	r0, r3
		while( ( *pucByte != 0x00 ) && ( xSourceLen > 1 ) )
  404d62:	7803      	ldrb	r3, [r0, #0]
  404d64:	b1a3      	cbz	r3, 404d90 <prvSkipNameField+0x4c>
  404d66:	2a01      	cmp	r2, #1
  404d68:	d90a      	bls.n	404d80 <prvSkipNameField+0x3c>
			xChunkLength = *pucByte + 1;
  404d6a:	3301      	adds	r3, #1
			if( xSourceLen > xChunkLength )
  404d6c:	4293      	cmp	r3, r2
  404d6e:	d3f6      	bcc.n	404d5e <prvSkipNameField+0x1a>
  404d70:	2000      	movs	r0, #0
  404d72:	4770      	bx	lr
  404d74:	2000      	movs	r0, #0
  404d76:	4770      	bx	lr
		if( xSourceLen > sizeof( uint16_t ) )
  404d78:	2a02      	cmp	r2, #2
  404d7a:	d907      	bls.n	404d8c <prvSkipNameField+0x48>
			pucByte += sizeof( uint16_t );
  404d7c:	3002      	adds	r0, #2
  404d7e:	4770      	bx	lr
  404d80:	2000      	movs	r0, #0
  404d82:	4770      	bx	lr
		return NULL;
  404d84:	2000      	movs	r0, #0
  404d86:	4770      	bx	lr
		while( ( *pucByte != 0x00 ) && ( xSourceLen > 1 ) )
  404d88:	2000      	movs	r0, #0
  404d8a:	4770      	bx	lr
			pucByte = NULL;
  404d8c:	2000      	movs	r0, #0
  404d8e:	4770      	bx	lr
				break;
			}
		}

		/* Confirm that a fully formed name was found. */
		if( NULL != pucByte )
  404d90:	b108      	cbz	r0, 404d96 <prvSkipNameField+0x52>
		{
			if( 0x00 == *pucByte )
			{
				pucByte++;
  404d92:	3001      	adds	r0, #1
  404d94:	4770      	bx	lr
			}
		}
	}

	return pucByte;
}
  404d96:	4770      	bx	lr

00404d98 <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, uint32_t ulTTL, BaseType_t xLookUp )
	{
  404d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d9c:	b083      	sub	sp, #12
  404d9e:	9001      	str	r0, [sp, #4]
  404da0:	4689      	mov	r9, r1
  404da2:	4693      	mov	fp, r2
  404da4:	469a      	mov	sl, r3
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
	uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000;
  404da6:	4b49      	ldr	r3, [pc, #292]	; (404ecc <prvProcessDNSCache+0x134>)
  404da8:	4798      	blx	r3
  404daa:	4f49      	ldr	r7, [pc, #292]	; (404ed0 <prvProcessDNSCache+0x138>)
  404dac:	fba7 3700 	umull	r3, r7, r7, r0
  404db0:	09bf      	lsrs	r7, r7, #6
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
  404db2:	4b48      	ldr	r3, [pc, #288]	; (404ed4 <prvProcessDNSCache+0x13c>)
  404db4:	791b      	ldrb	r3, [r3, #4]
  404db6:	b16b      	cbz	r3, 404dd4 <prvProcessDNSCache+0x3c>
  404db8:	4d47      	ldr	r5, [pc, #284]	; (404ed8 <prvProcessDNSCache+0x140>)
  404dba:	2400      	movs	r4, #0
			{
				break;
			}

			if( 0 == strcmp( xDNSCache[ x ].pcName, pcName ) )
  404dbc:	4e47      	ldr	r6, [pc, #284]	; (404edc <prvProcessDNSCache+0x144>)
  404dbe:	9901      	ldr	r1, [sp, #4]
  404dc0:	4628      	mov	r0, r5
  404dc2:	47b0      	blx	r6
  404dc4:	b180      	cbz	r0, 404de8 <prvProcessDNSCache+0x50>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
  404dc6:	3401      	adds	r4, #1
  404dc8:	2c04      	cmp	r4, #4
  404dca:	d003      	beq.n	404dd4 <prvProcessDNSCache+0x3c>
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
  404dcc:	f815 3f1c 	ldrb.w	r3, [r5, #28]!
  404dd0:	2b00      	cmp	r3, #0
  404dd2:	d1f4      	bne.n	404dbe <prvProcessDNSCache+0x26>
			}
		}

		if( xFound == pdFALSE )
		{
			if( xLookUp != pdFALSE )
  404dd4:	f1ba 0f00 	cmp.w	sl, #0
  404dd8:	d152      	bne.n	404e80 <prvProcessDNSCache+0xe8>
				*pulIP = 0;
			}
			else
			{
				/* Add or update the item. */
				if( strlen( pcName ) < ipconfigDNS_CACHE_NAME_LENGTH )
  404dda:	9801      	ldr	r0, [sp, #4]
  404ddc:	4b40      	ldr	r3, [pc, #256]	; (404ee0 <prvProcessDNSCache+0x148>)
  404dde:	4798      	blx	r3
  404de0:	280f      	cmp	r0, #15
  404de2:	d951      	bls.n	404e88 <prvProcessDNSCache+0xf0>
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
  404de4:	493f      	ldr	r1, [pc, #252]	; (404ee4 <prvProcessDNSCache+0x14c>)
  404de6:	e022      	b.n	404e2e <prvProcessDNSCache+0x96>
				if( xLookUp != pdFALSE )
  404de8:	f1ba 0f00 	cmp.w	sl, #0
  404dec:	d03b      	beq.n	404e66 <prvProcessDNSCache+0xce>
					if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
  404dee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
  404df2:	4b38      	ldr	r3, [pc, #224]	; (404ed4 <prvProcessDNSCache+0x13c>)
  404df4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  404df8:	694a      	ldr	r2, [r1, #20]
  404dfa:	0e13      	lsrs	r3, r2, #24
  404dfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404e00:	0210      	lsls	r0, r2, #8
  404e02:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
  404e06:	4303      	orrs	r3, r0
  404e08:	0a12      	lsrs	r2, r2, #8
  404e0a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  404e0e:	4313      	orrs	r3, r2
  404e10:	698a      	ldr	r2, [r1, #24]
  404e12:	4413      	add	r3, r2
  404e14:	429f      	cmp	r7, r3
  404e16:	d21e      	bcs.n	404e56 <prvProcessDNSCache+0xbe>
						*pulIP = xDNSCache[ x ].ulIPAddress;
  404e18:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  404e1c:	4b2d      	ldr	r3, [pc, #180]	; (404ed4 <prvProcessDNSCache+0x13c>)
  404e1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  404e22:	f8c9 3000 	str.w	r3, [r9]
		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
  404e26:	f8d9 3000 	ldr.w	r3, [r9]
  404e2a:	b18b      	cbz	r3, 404e50 <prvProcessDNSCache+0xb8>
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
  404e2c:	492e      	ldr	r1, [pc, #184]	; (404ee8 <prvProcessDNSCache+0x150>)
  404e2e:	f8d9 2000 	ldr.w	r2, [r9]
  404e32:	0e13      	lsrs	r3, r2, #24
  404e34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404e38:	0210      	lsls	r0, r2, #8
  404e3a:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
  404e3e:	4303      	orrs	r3, r0
  404e40:	0a12      	lsrs	r2, r2, #8
  404e42:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  404e46:	4313      	orrs	r3, r2
  404e48:	9a01      	ldr	r2, [sp, #4]
  404e4a:	4828      	ldr	r0, [pc, #160]	; (404eec <prvProcessDNSCache+0x154>)
  404e4c:	4c28      	ldr	r4, [pc, #160]	; (404ef0 <prvProcessDNSCache+0x158>)
  404e4e:	47a0      	blx	r4
		}
	}
  404e50:	b003      	add	sp, #12
  404e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						xDNSCache[ x ].pcName[ 0 ] = 0;
  404e56:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  404e5a:	4b1e      	ldr	r3, [pc, #120]	; (404ed4 <prvProcessDNSCache+0x13c>)
  404e5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  404e60:	2200      	movs	r2, #0
  404e62:	711a      	strb	r2, [r3, #4]
  404e64:	e7df      	b.n	404e26 <prvProcessDNSCache+0x8e>
					xDNSCache[ x ].ulIPAddress = *pulIP;
  404e66:	f8d9 0000 	ldr.w	r0, [r9]
  404e6a:	4b1a      	ldr	r3, [pc, #104]	; (404ed4 <prvProcessDNSCache+0x13c>)
  404e6c:	00e2      	lsls	r2, r4, #3
  404e6e:	1b11      	subs	r1, r2, r4
  404e70:	0089      	lsls	r1, r1, #2
  404e72:	185d      	adds	r5, r3, r1
  404e74:	5058      	str	r0, [r3, r1]
					xDNSCache[ x ].ulTTL = ulTTL;
  404e76:	f8c5 b014 	str.w	fp, [r5, #20]
					xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
  404e7a:	61af      	str	r7, [r5, #24]
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
  404e7c:	4919      	ldr	r1, [pc, #100]	; (404ee4 <prvProcessDNSCache+0x14c>)
  404e7e:	e7d6      	b.n	404e2e <prvProcessDNSCache+0x96>
				*pulIP = 0;
  404e80:	2300      	movs	r3, #0
  404e82:	f8c9 3000 	str.w	r3, [r9]
  404e86:	e7e3      	b.n	404e50 <prvProcessDNSCache+0xb8>
					strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
  404e88:	4b1a      	ldr	r3, [pc, #104]	; (404ef4 <prvProcessDNSCache+0x15c>)
  404e8a:	681d      	ldr	r5, [r3, #0]
  404e8c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 404ed4 <prvProcessDNSCache+0x13c>
  404e90:	00ec      	lsls	r4, r5, #3
  404e92:	1b60      	subs	r0, r4, r5
  404e94:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  404e98:	9901      	ldr	r1, [sp, #4]
  404e9a:	3004      	adds	r0, #4
  404e9c:	4b16      	ldr	r3, [pc, #88]	; (404ef8 <prvProcessDNSCache+0x160>)
  404e9e:	4798      	blx	r3
					xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
  404ea0:	f8d9 2000 	ldr.w	r2, [r9]
  404ea4:	1b64      	subs	r4, r4, r5
  404ea6:	00a4      	lsls	r4, r4, #2
  404ea8:	eb08 0304 	add.w	r3, r8, r4
  404eac:	f848 2004 	str.w	r2, [r8, r4]
					xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
  404eb0:	f8c3 b014 	str.w	fp, [r3, #20]
					xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
  404eb4:	619f      	str	r7, [r3, #24]
					xFreeEntry++;
  404eb6:	3501      	adds	r5, #1
					if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
  404eb8:	2d04      	cmp	r5, #4
  404eba:	d002      	beq.n	404ec2 <prvProcessDNSCache+0x12a>
					xFreeEntry++;
  404ebc:	4b0d      	ldr	r3, [pc, #52]	; (404ef4 <prvProcessDNSCache+0x15c>)
  404ebe:	601d      	str	r5, [r3, #0]
  404ec0:	e790      	b.n	404de4 <prvProcessDNSCache+0x4c>
						xFreeEntry = 0;
  404ec2:	2200      	movs	r2, #0
  404ec4:	4b0b      	ldr	r3, [pc, #44]	; (404ef4 <prvProcessDNSCache+0x15c>)
  404ec6:	601a      	str	r2, [r3, #0]
  404ec8:	e78c      	b.n	404de4 <prvProcessDNSCache+0x4c>
  404eca:	bf00      	nop
  404ecc:	0040b649 	.word	0x0040b649
  404ed0:	10624dd3 	.word	0x10624dd3
  404ed4:	20006c64 	.word	0x20006c64
  404ed8:	20006c68 	.word	0x20006c68
  404edc:	0040c909 	.word	0x0040c909
  404ee0:	0040ccc1 	.word	0x0040ccc1
  404ee4:	00412d98 	.word	0x00412d98
  404ee8:	00412d90 	.word	0x00412d90
  404eec:	00412d9c 	.word	0x00412d9c
  404ef0:	0040c351 	.word	0x0040c351
  404ef4:	20006cd4 	.word	0x20006cd4
  404ef8:	0040cbdd 	.word	0x0040cbdd

00404efc <prvReplyDNSMessage>:
	{
  404efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404efe:	4606      	mov	r6, r0
  404f00:	460d      	mov	r5, r1
		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
  404f02:	6984      	ldr	r4, [r0, #24]
		pxIPHeader->usLength			   = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
  404f04:	b28b      	uxth	r3, r1
  404f06:	f103 011c 	add.w	r1, r3, #28
  404f0a:	f105 021c 	add.w	r2, r5, #28
  404f0e:	0a12      	lsrs	r2, r2, #8
  404f10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  404f14:	8222      	strh	r2, [r4, #16]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
  404f16:	f8d4 201a 	ldr.w	r2, [r4, #26]
  404f1a:	f8c4 201e 	str.w	r2, [r4, #30]
		pxIPHeader->ulSourceIPAddress	   = *ipLOCAL_IP_ADDRESS_POINTER;
  404f1e:	4a1a      	ldr	r2, [pc, #104]	; (404f88 <prvReplyDNSMessage+0x8c>)
  404f20:	6952      	ldr	r2, [r2, #20]
  404f22:	f8c4 201a 	str.w	r2, [r4, #26]
		pxIPHeader->ucTimeToLive		   = ipconfigUDP_TIME_TO_LIVE;
  404f26:	2280      	movs	r2, #128	; 0x80
  404f28:	75a2      	strb	r2, [r4, #22]
		pxIPHeader->usIdentification	   = FreeRTOS_htons( usPacketIdentifier );
  404f2a:	4818      	ldr	r0, [pc, #96]	; (404f8c <prvReplyDNSMessage+0x90>)
  404f2c:	8802      	ldrh	r2, [r0, #0]
  404f2e:	0a11      	lsrs	r1, r2, #8
  404f30:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  404f34:	8261      	strh	r1, [r4, #18]
		usPacketIdentifier++;
  404f36:	3201      	adds	r2, #1
  404f38:	8002      	strh	r2, [r0, #0]
		pxUDPHeader->usLength			   = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
  404f3a:	f103 0208 	add.w	r2, r3, #8
  404f3e:	f105 0308 	add.w	r3, r5, #8
  404f42:	0a1b      	lsrs	r3, r3, #8
  404f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  404f48:	84e3      	strh	r3, [r4, #38]	; 0x26
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
  404f4a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  404f4c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
  404f4e:	8462      	strh	r2, [r4, #34]	; 0x22
  404f50:	84a3      	strh	r3, [r4, #36]	; 0x24
			pxIPHeader->usHeaderChecksum	   = 0x00;
  404f52:	2700      	movs	r7, #0
  404f54:	7627      	strb	r7, [r4, #24]
  404f56:	7667      	strb	r7, [r4, #25]
			pxIPHeader->usHeaderChecksum	   = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
  404f58:	2214      	movs	r2, #20
  404f5a:	f104 010e 	add.w	r1, r4, #14
  404f5e:	4638      	mov	r0, r7
  404f60:	4b0b      	ldr	r3, [pc, #44]	; (404f90 <prvReplyDNSMessage+0x94>)
  404f62:	4798      	blx	r3
			pxIPHeader->usHeaderChecksum	   = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
  404f64:	0a03      	lsrs	r3, r0, #8
  404f66:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  404f6a:	43c0      	mvns	r0, r0
  404f6c:	8320      	strh	r0, [r4, #24]
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, lNetLength, pdTRUE );
  404f6e:	2201      	movs	r2, #1
  404f70:	4629      	mov	r1, r5
  404f72:	4620      	mov	r0, r4
  404f74:	4b07      	ldr	r3, [pc, #28]	; (404f94 <prvReplyDNSMessage+0x98>)
  404f76:	4798      	blx	r3
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
  404f78:	352a      	adds	r5, #42	; 0x2a
  404f7a:	61f5      	str	r5, [r6, #28]
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
  404f7c:	4639      	mov	r1, r7
  404f7e:	4630      	mov	r0, r6
  404f80:	4b05      	ldr	r3, [pc, #20]	; (404f98 <prvReplyDNSMessage+0x9c>)
  404f82:	4798      	blx	r3
  404f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f86:	bf00      	nop
  404f88:	200000d8 	.word	0x200000d8
  404f8c:	20006cd8 	.word	0x20006cd8
  404f90:	00405789 	.word	0x00405789
  404f94:	0040586d 	.word	0x0040586d
  404f98:	00405a39 	.word	0x00405a39

00404f9c <prvParseDNSReply>:
{
  404f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fa0:	b087      	sub	sp, #28
uint32_t ulIPAddress = 0UL;
  404fa2:	2300      	movs	r3, #0
  404fa4:	9305      	str	r3, [sp, #20]
	char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
  404fa6:	9301      	str	r3, [sp, #4]
  404fa8:	9302      	str	r3, [sp, #8]
  404faa:	9303      	str	r3, [sp, #12]
  404fac:	9304      	str	r3, [sp, #16]
	if( xBufferLength < sizeof( DNSMessage_t ) )
  404fae:	290b      	cmp	r1, #11
  404fb0:	f240 8126 	bls.w	405200 <prvParseDNSReply+0x264>
  404fb4:	4606      	mov	r6, r0
  404fb6:	460f      	mov	r7, r1
	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
  404fb8:	8803      	ldrh	r3, [r0, #0]
  404fba:	b292      	uxth	r2, r2
  404fbc:	4293      	cmp	r3, r2
  404fbe:	d003      	beq.n	404fc8 <prvParseDNSReply+0x2c>
	return ulIPAddress;
  404fc0:	9805      	ldr	r0, [sp, #20]
}
  404fc2:	b007      	add	sp, #28
  404fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
  404fc8:	f100 050c 	add.w	r5, r0, #12
		xSourceBytesRemaining -= sizeof( DNSMessage_t );
  404fcc:	390c      	subs	r1, #12
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
  404fce:	8883      	ldrh	r3, [r0, #4]
  404fd0:	ea4f 2813 	mov.w	r8, r3, lsr #8
  404fd4:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
  404fd8:	fa1f f888 	uxth.w	r8, r8
		for( x = 0; x < usQuestions; x++ )
  404fdc:	f1b8 0f00 	cmp.w	r8, #0
  404fe0:	f000 8094 	beq.w	40510c <prvParseDNSReply+0x170>
  404fe4:	2400      	movs	r4, #0
  404fe6:	46a2      	mov	sl, r4
				pucByte = prvSkipNameField( pucByte,
  404fe8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 40527c <prvParseDNSReply+0x2e0>
					pcName[ xNameLen++ ] = '.';
  404fec:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
				if( x == 0 )
  404ff0:	2c00      	cmp	r4, #0
  404ff2:	f000 8111 	beq.w	405218 <prvParseDNSReply+0x27c>
				pucByte = prvSkipNameField( pucByte,
  404ff6:	4628      	mov	r0, r5
  404ff8:	47c8      	blx	r9
				if( NULL == pucByte )
  404ffa:	4603      	mov	r3, r0
  404ffc:	2800      	cmp	r0, #0
  404ffe:	f000 8109 	beq.w	405214 <prvParseDNSReply+0x278>
					xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
  405002:	19f1      	adds	r1, r6, r7
  405004:	1ac9      	subs	r1, r1, r3
			if( xSourceBytesRemaining >= sizeof( uint32_t ) )
  405006:	2903      	cmp	r1, #3
  405008:	f240 80fe 	bls.w	405208 <prvParseDNSReply+0x26c>
				pucByte += sizeof( uint32_t );
  40500c:	1d1d      	adds	r5, r3, #4
				xSourceBytesRemaining -= sizeof( uint32_t );
  40500e:	3904      	subs	r1, #4
		for( x = 0; x < usQuestions; x++ )
  405010:	3401      	adds	r4, #1
  405012:	b2a4      	uxth	r4, r4
  405014:	45a0      	cmp	r8, r4
  405016:	d1eb      	bne.n	404ff0 <prvParseDNSReply+0x54>

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
  405018:	7818      	ldrb	r0, [r3, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
  40501a:	785a      	ldrb	r2, [r3, #1]
	return ( uint16_t )
  40501c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			( ( ( ( uint32_t )apChr[0] ) << 8) |
  405020:	7898      	ldrb	r0, [r3, #2]
			  ( ( ( uint32_t )apChr[1] ) ) );
  405022:	78db      	ldrb	r3, [r3, #3]
	return ( uint16_t )
  405024:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
  405028:	88f3      	ldrh	r3, [r6, #6]
  40502a:	ea4f 2913 	mov.w	r9, r3, lsr #8
  40502e:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
  405032:	fa1f f989 	uxth.w	r9, r9
  405036:	f8a6 9006 	strh.w	r9, [r6, #6]
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
  40503a:	8873      	ldrh	r3, [r6, #2]
  40503c:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
  405040:	2b80      	cmp	r3, #128	; 0x80
  405042:	d068      	beq.n	405116 <prvParseDNSReply+0x17a>
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
  405044:	f1b8 0f00 	cmp.w	r8, #0
  405048:	d0ba      	beq.n	404fc0 <prvParseDNSReply+0x24>
  40504a:	2a01      	cmp	r2, #1
  40504c:	d1b8      	bne.n	404fc0 <prvParseDNSReply+0x24>
  40504e:	2801      	cmp	r0, #1
  405050:	d1b6      	bne.n	404fc0 <prvParseDNSReply+0x24>
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
  405052:	f10a 0001 	add.w	r0, sl, #1
  405056:	4b81      	ldr	r3, [pc, #516]	; (40525c <prvParseDNSReply+0x2c0>)
  405058:	4798      	blx	r3
  40505a:	2800      	cmp	r0, #0
  40505c:	d0b0      	beq.n	404fc0 <prvParseDNSReply+0x24>
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
  40505e:	4630      	mov	r0, r6
  405060:	4b7f      	ldr	r3, [pc, #508]	; (405260 <prvParseDNSReply+0x2c4>)
  405062:	4798      	blx	r3
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
  405064:	4b7f      	ldr	r3, [pc, #508]	; (405264 <prvParseDNSReply+0x2c8>)
  405066:	681b      	ldr	r3, [r3, #0]
  405068:	2b00      	cmp	r3, #0
  40506a:	f040 8092 	bne.w	405192 <prvParseDNSReply+0x1f6>
  40506e:	2800      	cmp	r0, #0
  405070:	d0a6      	beq.n	404fc0 <prvParseDNSReply+0x24>
				BaseType_t xDataLength = xBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
  405072:	f107 032a 	add.w	r3, r7, #42	; 0x2a
					pxNetworkBuffer->xDataLength = xDataLength;
  405076:	61c3      	str	r3, [r0, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
  405078:	f107 013a 	add.w	r1, r7, #58	; 0x3a
  40507c:	4b7a      	ldr	r3, [pc, #488]	; (405268 <prvParseDNSReply+0x2cc>)
  40507e:	4798      	blx	r3
					if( pxNewBuffer != NULL )
  405080:	4604      	mov	r4, r0
  405082:	2800      	cmp	r0, #0
  405084:	d09c      	beq.n	404fc0 <prvParseDNSReply+0x24>
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
  405086:	4633      	mov	r3, r6
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
  405088:	6986      	ldr	r6, [r0, #24]
  40508a:	362a      	adds	r6, #42	; 0x2a
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
  40508c:	1aed      	subs	r5, r5, r3
						pucByte = pucUDPPayloadBuffer + xOffset1;
  40508e:	4435      	add	r5, r6
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
  405090:	ebaa 0a03 	sub.w	sl, sl, r3
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
  405094:	44b2      	add	sl, r6
  405096:	e080      	b.n	40519a <prvParseDNSReply+0x1fe>
			if( xSourceLen > sizeof( uint16_t ) )
  405098:	2902      	cmp	r1, #2
  40509a:	d932      	bls.n	405102 <prvParseDNSReply+0x166>
				pucByte += sizeof( uint16_t );
  40509c:	1cab      	adds	r3, r5, #2
  40509e:	e0d6      	b.n	40524e <prvParseDNSReply+0x2b2>
				for( xCount = *(pucByte++), xSourceLen--;
  4050a0:	4661      	mov	r1, ip
  4050a2:	4603      	mov	r3, r0
			while( ( NULL != pucByte ) && ( *pucByte != 0x00 ) && ( xSourceLen > 1 ) )
  4050a4:	2b00      	cmp	r3, #0
  4050a6:	f000 80c8 	beq.w	40523a <prvParseDNSReply+0x29e>
  4050aa:	7818      	ldrb	r0, [r3, #0]
  4050ac:	2800      	cmp	r0, #0
  4050ae:	f000 80c8 	beq.w	405242 <prvParseDNSReply+0x2a6>
  4050b2:	2901      	cmp	r1, #1
  4050b4:	d925      	bls.n	405102 <prvParseDNSReply+0x166>
				if( ( xNameLen > 0 ) && ( xNameLen < ( xDestLen - 1 ) ) )
  4050b6:	b132      	cbz	r2, 4050c6 <prvParseDNSReply+0x12a>
  4050b8:	2a0e      	cmp	r2, #14
  4050ba:	d804      	bhi.n	4050c6 <prvParseDNSReply+0x12a>
					pcName[ xNameLen++ ] = '.';
  4050bc:	a806      	add	r0, sp, #24
  4050be:	4410      	add	r0, r2
  4050c0:	f800 bc14 	strb.w	fp, [r0, #-20]
  4050c4:	3201      	adds	r2, #1
				for( xCount = *(pucByte++), xSourceLen--;
  4050c6:	1c58      	adds	r0, r3, #1
  4050c8:	781b      	ldrb	r3, [r3, #0]
  4050ca:	f101 3cff 	add.w	ip, r1, #4294967295
  4050ce:	2b00      	cmp	r3, #0
  4050d0:	d0e6      	beq.n	4050a0 <prvParseDNSReply+0x104>
					 xCount-- && xSourceLen > 1;
  4050d2:	f1bc 0f01 	cmp.w	ip, #1
  4050d6:	d916      	bls.n	405106 <prvParseDNSReply+0x16a>
					if( xNameLen < xDestLen - 1 )
  4050d8:	2a0e      	cmp	r2, #14
  4050da:	d812      	bhi.n	405102 <prvParseDNSReply+0x166>
  4050dc:	3902      	subs	r1, #2
  4050de:	f10d 0e04 	add.w	lr, sp, #4
  4050e2:	4496      	add	lr, r2
  4050e4:	ebac 0c03 	sub.w	ip, ip, r3
						pcName[ xNameLen++ ] = *( ( char * )pucByte );
  4050e8:	3201      	adds	r2, #1
  4050ea:	f810 3b01 	ldrb.w	r3, [r0], #1
  4050ee:	f80e 3b01 	strb.w	r3, [lr], #1
					 pucByte++, xSourceLen-- )
  4050f2:	4603      	mov	r3, r0
				for( xCount = *(pucByte++), xSourceLen--;
  4050f4:	4561      	cmp	r1, ip
  4050f6:	d0d5      	beq.n	4050a4 <prvParseDNSReply+0x108>
					 xCount-- && xSourceLen > 1;
  4050f8:	2901      	cmp	r1, #1
  4050fa:	d0d3      	beq.n	4050a4 <prvParseDNSReply+0x108>
  4050fc:	3901      	subs	r1, #1
					if( xNameLen < xDestLen - 1 )
  4050fe:	2a0f      	cmp	r2, #15
  405100:	d1f2      	bne.n	4050e8 <prvParseDNSReply+0x14c>
					return dnsPARSE_ERROR;
  405102:	2000      	movs	r0, #0
  405104:	e75d      	b.n	404fc2 <prvParseDNSReply+0x26>
				for( xCount = *(pucByte++), xSourceLen--;
  405106:	4661      	mov	r1, ip
  405108:	4603      	mov	r3, r0
  40510a:	e7cb      	b.n	4050a4 <prvParseDNSReply+0x108>
	uint16_t usType = 0, usClass = 0;
  40510c:	4640      	mov	r0, r8
  40510e:	4642      	mov	r2, r8
	char *pcRequestedName = NULL;
  405110:	f04f 0a00 	mov.w	sl, #0
  405114:	e788      	b.n	405028 <prvParseDNSReply+0x8c>
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
  405116:	f1b9 0f00 	cmp.w	r9, #0
  40511a:	f43f af51 	beq.w	404fc0 <prvParseDNSReply+0x24>
  40511e:	2400      	movs	r4, #0
				pucByte = prvSkipNameField( pucByte,
  405120:	f8df 8158 	ldr.w	r8, [pc, #344]	; 40527c <prvParseDNSReply+0x2e0>
					xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
  405124:	443e      	add	r6, r7
  405126:	e017      	b.n	405158 <prvParseDNSReply+0x1bc>
					if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == sizeof( uint32_t ) )
  405128:	8902      	ldrh	r2, [r0, #8]
  40512a:	0a13      	lsrs	r3, r2, #8
  40512c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405130:	b21b      	sxth	r3, r3
  405132:	2b04      	cmp	r3, #4
  405134:	f47f af44 	bne.w	404fc0 <prvParseDNSReply+0x24>
						memcpy( &ulIPAddress,
  405138:	f8d0 300a 	ldr.w	r3, [r0, #10]
  40513c:	a906      	add	r1, sp, #24
  40513e:	f841 3d04 	str.w	r3, [r1, #-4]!
							prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
  405142:	2300      	movs	r3, #0
  405144:	6842      	ldr	r2, [r0, #4]
  405146:	a801      	add	r0, sp, #4
  405148:	4c48      	ldr	r4, [pc, #288]	; (40526c <prvParseDNSReply+0x2d0>)
  40514a:	47a0      	blx	r4
  40514c:	e738      	b.n	404fc0 <prvParseDNSReply+0x24>
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
  40514e:	3401      	adds	r4, #1
  405150:	b2a4      	uxth	r4, r4
  405152:	45a1      	cmp	r9, r4
  405154:	f43f af34 	beq.w	404fc0 <prvParseDNSReply+0x24>
				pucByte = prvSkipNameField( pucByte,
  405158:	4628      	mov	r0, r5
  40515a:	47c0      	blx	r8
				if( NULL == pucByte )
  40515c:	4605      	mov	r5, r0
  40515e:	2800      	cmp	r0, #0
  405160:	d054      	beq.n	40520c <prvParseDNSReply+0x270>
					xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
  405162:	1a31      	subs	r1, r6, r0
				if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) &&
  405164:	290d      	cmp	r1, #13
  405166:	d905      	bls.n	405174 <prvParseDNSReply+0x1d8>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
  405168:	7802      	ldrb	r2, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
  40516a:	7843      	ldrb	r3, [r0, #1]
  40516c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405170:	2b01      	cmp	r3, #1
  405172:	d0d9      	beq.n	405128 <prvParseDNSReply+0x18c>
				else if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
  405174:	2909      	cmp	r1, #9
  405176:	d9ea      	bls.n	40514e <prvParseDNSReply+0x1b2>
					xSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
  405178:	390a      	subs	r1, #10
					usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
  40517a:	892a      	ldrh	r2, [r5, #8]
  40517c:	0a13      	lsrs	r3, r2, #8
  40517e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					if( xSourceBytesRemaining >= usDataLength )
  405182:	b29b      	uxth	r3, r3
  405184:	4299      	cmp	r1, r3
  405186:	d343      	bcc.n	405210 <prvParseDNSReply+0x274>
						pucByte += usDataLength;
  405188:	f103 020a 	add.w	r2, r3, #10
  40518c:	4415      	add	r5, r2
						xSourceBytesRemaining -= usDataLength;
  40518e:	1ac9      	subs	r1, r1, r3
  405190:	e7dd      	b.n	40514e <prvParseDNSReply+0x1b2>
				if( pxNetworkBuffer != NULL )
  405192:	2800      	cmp	r0, #0
  405194:	f43f af14 	beq.w	404fc0 <prvParseDNSReply+0x24>
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
  405198:	2400      	movs	r4, #0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
  40519a:	2380      	movs	r3, #128	; 0x80
  40519c:	70b3      	strb	r3, [r6, #2]
  40519e:	2300      	movs	r3, #0
  4051a0:	70f3      	strb	r3, [r6, #3]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
  4051a2:	71b3      	strb	r3, [r6, #6]
  4051a4:	2201      	movs	r2, #1
  4051a6:	71f2      	strb	r2, [r6, #7]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
  4051a8:	7233      	strb	r3, [r6, #8]
  4051aa:	7273      	strb	r3, [r6, #9]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
  4051ac:	72b3      	strb	r3, [r6, #10]
  4051ae:	72f3      	strb	r3, [r6, #11]
					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
  4051b0:	21c0      	movs	r1, #192	; 0xc0
  4051b2:	7029      	strb	r1, [r5, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
  4051b4:	ebaa 0a06 	sub.w	sl, sl, r6
  4051b8:	f885 a001 	strb.w	sl, [r5, #1]
					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
  4051bc:	70ab      	strb	r3, [r5, #2]
  4051be:	70ea      	strb	r2, [r5, #3]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
  4051c0:	712b      	strb	r3, [r5, #4]
  4051c2:	716a      	strb	r2, [r5, #5]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
  4051c4:	71ab      	strb	r3, [r5, #6]
  4051c6:	2204      	movs	r2, #4
  4051c8:	71ea      	strb	r2, [r5, #7]
  4051ca:	2193      	movs	r1, #147	; 0x93
  4051cc:	7229      	strb	r1, [r5, #8]
  4051ce:	21e0      	movs	r1, #224	; 0xe0
  4051d0:	7269      	strb	r1, [r5, #9]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
  4051d2:	72ab      	strb	r3, [r5, #10]
  4051d4:	72ea      	strb	r2, [r5, #11]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
  4051d6:	4b26      	ldr	r3, [pc, #152]	; (405270 <prvParseDNSReply+0x2d4>)
  4051d8:	7d1a      	ldrb	r2, [r3, #20]
  4051da:	732a      	strb	r2, [r5, #12]
  4051dc:	7d5a      	ldrb	r2, [r3, #21]
  4051de:	736a      	strb	r2, [r5, #13]
  4051e0:	7d9a      	ldrb	r2, [r3, #22]
  4051e2:	73aa      	strb	r2, [r5, #14]
  4051e4:	7ddb      	ldrb	r3, [r3, #23]
  4051e6:	73eb      	strb	r3, [r5, #15]
					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
  4051e8:	1ba9      	subs	r1, r5, r6
  4051ea:	3110      	adds	r1, #16
					prvReplyDNSMessage( pxNetworkBuffer, usLength );
  4051ec:	b209      	sxth	r1, r1
  4051ee:	4b21      	ldr	r3, [pc, #132]	; (405274 <prvParseDNSReply+0x2d8>)
  4051f0:	4798      	blx	r3
					if( pxNewBuffer != NULL )
  4051f2:	2c00      	cmp	r4, #0
  4051f4:	f43f aee4 	beq.w	404fc0 <prvParseDNSReply+0x24>
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
  4051f8:	4620      	mov	r0, r4
  4051fa:	4b1f      	ldr	r3, [pc, #124]	; (405278 <prvParseDNSReply+0x2dc>)
  4051fc:	4798      	blx	r3
  4051fe:	e6df      	b.n	404fc0 <prvParseDNSReply+0x24>
		return dnsPARSE_ERROR;
  405200:	2000      	movs	r0, #0
  405202:	e6de      	b.n	404fc2 <prvParseDNSReply+0x26>
					return dnsPARSE_ERROR;
  405204:	2000      	movs	r0, #0
  405206:	e6dc      	b.n	404fc2 <prvParseDNSReply+0x26>
				return dnsPARSE_ERROR;
  405208:	2000      	movs	r0, #0
  40520a:	e6da      	b.n	404fc2 <prvParseDNSReply+0x26>
					return dnsPARSE_ERROR;
  40520c:	2000      	movs	r0, #0
  40520e:	e6d8      	b.n	404fc2 <prvParseDNSReply+0x26>
						return dnsPARSE_ERROR;
  405210:	2000      	movs	r0, #0
  405212:	e6d6      	b.n	404fc2 <prvParseDNSReply+0x26>
					return dnsPARSE_ERROR;
  405214:	2000      	movs	r0, #0
  405216:	e6d4      	b.n	404fc2 <prvParseDNSReply+0x26>
		if( 0 == xSourceLen )
  405218:	2900      	cmp	r1, #0
  40521a:	f43f af72 	beq.w	405102 <prvParseDNSReply+0x166>
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
  40521e:	782b      	ldrb	r3, [r5, #0]
  405220:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
  405224:	2ac0      	cmp	r2, #192	; 0xc0
  405226:	f43f af37 	beq.w	405098 <prvParseDNSReply+0xfc>
			while( ( NULL != pucByte ) && ( *pucByte != 0x00 ) && ( xSourceLen > 1 ) )
  40522a:	b135      	cbz	r5, 40523a <prvParseDNSReply+0x29e>
  40522c:	b13b      	cbz	r3, 40523e <prvParseDNSReply+0x2a2>
  40522e:	2901      	cmp	r1, #1
  405230:	f67f af67 	bls.w	405102 <prvParseDNSReply+0x166>
  405234:	462b      	mov	r3, r5
  405236:	2200      	movs	r2, #0
  405238:	e745      	b.n	4050c6 <prvParseDNSReply+0x12a>
					return dnsPARSE_ERROR;
  40523a:	2000      	movs	r0, #0
  40523c:	e6c1      	b.n	404fc2 <prvParseDNSReply+0x26>
			while( ( NULL != pucByte ) && ( *pucByte != 0x00 ) && ( xSourceLen > 1 ) )
  40523e:	462b      	mov	r3, r5
  405240:	2200      	movs	r2, #0
					pucByte++;
  405242:	3301      	adds	r3, #1
					pcName[ xNameLen++ ] = '\0';
  405244:	a906      	add	r1, sp, #24
  405246:	440a      	add	r2, r1
  405248:	2100      	movs	r1, #0
  40524a:	f802 1c14 	strb.w	r1, [r2, #-20]
				if( NULL == pucByte )
  40524e:	2b00      	cmp	r3, #0
  405250:	d0d8      	beq.n	405204 <prvParseDNSReply+0x268>
					xSourceBytesRemaining = ( pucUDPPayloadBuffer + xBufferLength ) - pucByte;
  405252:	19f1      	adds	r1, r6, r7
  405254:	1ac9      	subs	r1, r1, r3
  405256:	46aa      	mov	sl, r5
  405258:	e6d5      	b.n	405006 <prvParseDNSReply+0x6a>
  40525a:	bf00      	nop
  40525c:	0040bfa5 	.word	0x0040bfa5
  405260:	004054ed 	.word	0x004054ed
  405264:	00413fc8 	.word	0x00413fc8
  405268:	004054b5 	.word	0x004054b5
  40526c:	00404d99 	.word	0x00404d99
  405270:	200000d8 	.word	0x200000d8
  405274:	00404efd 	.word	0x00404efd
  405278:	00409d79 	.word	0x00409d79
  40527c:	00404d45 	.word	0x00404d45

00405280 <ulDNSHandlePacket>:
{
  405280:	b508      	push	{r3, lr}
	xPlayloadBufferLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
  405282:	69c3      	ldr	r3, [r0, #28]
	if( pxNetworkBuffer->xDataLength > sizeof( UDPPacket_t ) )
  405284:	2b35      	cmp	r3, #53	; 0x35
  405286:	d801      	bhi.n	40528c <ulDNSHandlePacket+0xc>
}
  405288:	2000      	movs	r0, #0
  40528a:	bd08      	pop	{r3, pc}
  40528c:	f1a3 012a 	sub.w	r1, r3, #42	; 0x2a
			( uint32_t )pxDNSMessageHeader->usIdentifier );
  405290:	6980      	ldr	r0, [r0, #24]
		prvParseDNSReply( pucUDPPayloadBuffer,
  405292:	f830 2f2a 	ldrh.w	r2, [r0, #42]!
  405296:	4b01      	ldr	r3, [pc, #4]	; (40529c <ulDNSHandlePacket+0x1c>)
  405298:	4798      	blx	r3
  40529a:	e7f5      	b.n	405288 <ulDNSHandlePacket+0x8>
  40529c:	00404f9d 	.word	0x00404f9d

004052a0 <ulNBNSHandlePacket>:
		if( pxNetworkBuffer->xDataLength > sizeof( UDPPacket_t) )
  4052a0:	69c3      	ldr	r3, [r0, #28]
  4052a2:	2b2a      	cmp	r3, #42	; 0x2a
  4052a4:	d801      	bhi.n	4052aa <ulNBNSHandlePacket+0xa>
	}
  4052a6:	2000      	movs	r0, #0
  4052a8:	4770      	bx	lr
	{
  4052aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4052ac:	b087      	sub	sp, #28
	UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
  4052ae:	6984      	ldr	r4, [r0, #24]
			prvTreatNBNS( pucUDPPayloadBuffer,
  4052b0:	f8d4 201a 	ldr.w	r2, [r4, #26]
  4052b4:	9200      	str	r2, [sp, #0]
  4052b6:	3b2a      	subs	r3, #42	; 0x2a
		if( xBufferLength < sizeof( NBNSRequest_t ) )
  4052b8:	2b31      	cmp	r3, #49	; 0x31
  4052ba:	d92f      	bls.n	40531c <ulNBNSHandlePacket+0x7c>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
  4052bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
			  ( ( ( uint32_t )apChr[1] ) ) );
  4052c0:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
	return ( uint16_t )
  4052c4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
		if( ( usFlags & dnsNBNS_FLAGS_OPCODE_MASK ) == dnsNBNS_FLAGS_OPCODE_QUERY )
  4052c8:	f416 4ff0 	tst.w	r6, #30720	; 0x7800
  4052cc:	d126      	bne.n	40531c <ulNBNSHandlePacket+0x7c>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
  4052ce:	f894 7058 	ldrb.w	r7, [r4, #88]	; 0x58
			  ( ( ( uint32_t )apChr[1] ) ) );
  4052d2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	return ( uint16_t )
  4052d6:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
			pucTarget[ 1 ] = '\0';
  4052da:	2300      	movs	r3, #0
  4052dc:	f88d 3014 	strb.w	r3, [sp, #20]
  4052e0:	f104 0253 	add.w	r2, r4, #83	; 0x53
  4052e4:	a805      	add	r0, sp, #20
  4052e6:	ad01      	add	r5, sp, #4
  4052e8:	e004      	b.n	4052f4 <ulNBNSHandlePacket+0x54>
				*pucTarget = ucByte;
  4052ea:	f800 3d01 	strb.w	r3, [r0, #-1]!
  4052ee:	3a02      	subs	r2, #2
				if( pucTarget == ucNBNSName )
  4052f0:	4285      	cmp	r5, r0
  4052f2:	d00e      	beq.n	405312 <ulNBNSHandlePacket+0x72>
				ucByte = ( uint8_t ) ( ( ( pucSource[ 0 ] - 0x41 ) << 4 ) | ( pucSource[ 1 ] - 0x41 ) );
  4052f4:	7893      	ldrb	r3, [r2, #2]
  4052f6:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
  4052fa:	78d3      	ldrb	r3, [r2, #3]
  4052fc:	3b41      	subs	r3, #65	; 0x41
  4052fe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  405302:	b2db      	uxtb	r3, r3
				if( ( ucByte == ' ' ) && ( pucTarget[ 1 ] == '\0' ) )
  405304:	2b20      	cmp	r3, #32
  405306:	d1f0      	bne.n	4052ea <ulNBNSHandlePacket+0x4a>
  405308:	7801      	ldrb	r1, [r0, #0]
					ucByte = '\0';
  40530a:	2900      	cmp	r1, #0
  40530c:	bf08      	it	eq
  40530e:	460b      	moveq	r3, r1
  405310:	e7eb      	b.n	4052ea <ulNBNSHandlePacket+0x4a>
				if( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) != 0 )
  405312:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  405316:	d104      	bne.n	405322 <ulNBNSHandlePacket+0x82>
			if( ( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) == 0 ) &&
  405318:	2f20      	cmp	r7, #32
  40531a:	d009      	beq.n	405330 <ulNBNSHandlePacket+0x90>
	}
  40531c:	2000      	movs	r0, #0
  40531e:	b007      	add	sp, #28
  405320:	bdf0      	pop	{r4, r5, r6, r7, pc}
					prvProcessDNSCache( ( char * ) ucNBNSName, &ulIPAddress, 0, pdFALSE );
  405322:	2300      	movs	r3, #0
  405324:	461a      	mov	r2, r3
  405326:	4669      	mov	r1, sp
  405328:	a801      	add	r0, sp, #4
  40532a:	4c34      	ldr	r4, [pc, #208]	; (4053fc <ulNBNSHandlePacket+0x15c>)
  40532c:	47a0      	blx	r4
  40532e:	e7f5      	b.n	40531c <ulNBNSHandlePacket+0x7c>
				( xApplicationDNSQueryHook( ( const char * ) ucNBNSName ) != pdFALSE ) )
  405330:	a801      	add	r0, sp, #4
  405332:	4b33      	ldr	r3, [pc, #204]	; (405400 <ulNBNSHandlePacket+0x160>)
  405334:	4798      	blx	r3
				( usType == dnsNBNS_TYPE_NET_BIOS ) &&
  405336:	2800      	cmp	r0, #0
  405338:	d0f0      	beq.n	40531c <ulNBNSHandlePacket+0x7c>
	uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
  40533a:	342a      	adds	r4, #42	; 0x2a
				NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
  40533c:	4620      	mov	r0, r4
  40533e:	4b31      	ldr	r3, [pc, #196]	; (405404 <ulNBNSHandlePacket+0x164>)
  405340:	4798      	blx	r3
  405342:	4605      	mov	r5, r0
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
  405344:	4b30      	ldr	r3, [pc, #192]	; (405408 <ulNBNSHandlePacket+0x168>)
  405346:	681b      	ldr	r3, [r3, #0]
  405348:	b973      	cbnz	r3, 405368 <ulNBNSHandlePacket+0xc8>
  40534a:	2800      	cmp	r0, #0
  40534c:	d0e6      	beq.n	40531c <ulNBNSHandlePacket+0x7c>
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
  40534e:	69c1      	ldr	r1, [r0, #28]
  405350:	f101 032a 	add.w	r3, r1, #42	; 0x2a
					pxNetworkBuffer->xDataLength = xDataLength;
  405354:	61c3      	str	r3, [r0, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
  405356:	313a      	adds	r1, #58	; 0x3a
  405358:	4b2c      	ldr	r3, [pc, #176]	; (40540c <ulNBNSHandlePacket+0x16c>)
  40535a:	4798      	blx	r3
					if( pxNewBuffer != NULL )
  40535c:	4605      	mov	r5, r0
  40535e:	2800      	cmp	r0, #0
  405360:	d0dc      	beq.n	40531c <ulNBNSHandlePacket+0x7c>
						pucUDPPayloadBuffer = pxNewBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
  405362:	6984      	ldr	r4, [r0, #24]
  405364:	342a      	adds	r4, #42	; 0x2a
  405366:	e001      	b.n	40536c <ulNBNSHandlePacket+0xcc>
				if( pxNetworkBuffer != NULL )
  405368:	2800      	cmp	r0, #0
  40536a:	d0d7      	beq.n	40531c <ulNBNSHandlePacket+0x7c>
					vSetField16( pxMessage, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */
  40536c:	2385      	movs	r3, #133	; 0x85
  40536e:	70a3      	strb	r3, [r4, #2]
  405370:	2300      	movs	r3, #0
  405372:	70e3      	strb	r3, [r4, #3]
					vSetField16( pxMessage, DNSMessage_t, usQuestions, 0 );
  405374:	7123      	strb	r3, [r4, #4]
  405376:	7163      	strb	r3, [r4, #5]
					vSetField16( pxMessage, DNSMessage_t, usAnswers, 1 );
  405378:	71a3      	strb	r3, [r4, #6]
  40537a:	2201      	movs	r2, #1
  40537c:	71e2      	strb	r2, [r4, #7]
					vSetField16( pxMessage, DNSMessage_t, usAuthorityRRs, 0 );
  40537e:	7223      	strb	r3, [r4, #8]
  405380:	7263      	strb	r3, [r4, #9]
					vSetField16( pxMessage, DNSMessage_t, usAdditionalRRs, 0 );
  405382:	72a3      	strb	r3, [r4, #10]
  405384:	72e3      	strb	r3, [r4, #11]
					vSetField16( pxAnswer, NBNSAnswer_t, usType, usType );	/* Type */
  405386:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  40538a:	2120      	movs	r1, #32
  40538c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
					vSetField16( pxAnswer, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN );	/* Class */
  405390:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  405394:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
					vSetField32( pxAnswer, NBNSAnswer_t, ulTTL, dnsNBNS_TTL_VALUE );
  405398:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40539c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  4053a0:	220e      	movs	r2, #14
  4053a2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  4053a6:	2210      	movs	r2, #16
  4053a8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
					vSetField16( pxAnswer, NBNSAnswer_t, usDataLength, 6 ); /* 6 bytes including the length field */
  4053ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  4053b0:	2206      	movs	r2, #6
  4053b2:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
					vSetField16( pxAnswer, NBNSAnswer_t, usNbFlags, dnsNBNS_NAME_FLAGS );
  4053b6:	2260      	movs	r2, #96	; 0x60
  4053b8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  4053bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
					vSetField32( pxAnswer, NBNSAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
  4053c0:	4b13      	ldr	r3, [pc, #76]	; (405410 <ulNBNSHandlePacket+0x170>)
  4053c2:	695a      	ldr	r2, [r3, #20]
  4053c4:	0e11      	lsrs	r1, r2, #24
  4053c6:	0213      	lsls	r3, r2, #8
  4053c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  4053cc:	ea41 6002 	orr.w	r0, r1, r2, lsl #24
  4053d0:	4303      	orrs	r3, r0
  4053d2:	0a12      	lsrs	r2, r2, #8
  4053d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  4053d8:	4313      	orrs	r3, r2
  4053da:	0e1a      	lsrs	r2, r3, #24
  4053dc:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  4053e0:	0c1a      	lsrs	r2, r3, #16
  4053e2:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  4053e6:	0a1b      	lsrs	r3, r3, #8
  4053e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  4053ec:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
					prvReplyDNSMessage( pxNetworkBuffer, usLength );
  4053f0:	213e      	movs	r1, #62	; 0x3e
  4053f2:	4628      	mov	r0, r5
  4053f4:	4b07      	ldr	r3, [pc, #28]	; (405414 <ulNBNSHandlePacket+0x174>)
  4053f6:	4798      	blx	r3
		return pdFAIL;
  4053f8:	e790      	b.n	40531c <ulNBNSHandlePacket+0x7c>
  4053fa:	bf00      	nop
  4053fc:	00404d99 	.word	0x00404d99
  405400:	0040bfa5 	.word	0x0040bfa5
  405404:	004054ed 	.word	0x004054ed
  405408:	00413fc8 	.word	0x00413fc8
  40540c:	004054b5 	.word	0x004054b5
  405410:	200000d8 	.word	0x200000d8
  405414:	00404efd 	.word	0x00404efd

00405418 <prvIPTimerCheck>:
	prvIPTimerStart( pxTimer, xTime );
}
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
  405418:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
  40541a:	7803      	ldrb	r3, [r0, #0]
  40541c:	f013 0f01 	tst.w	r3, #1
  405420:	d01e      	beq.n	405460 <prvIPTimerCheck+0x48>
  405422:	4604      	mov	r4, r0
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
  405424:	f013 0f02 	tst.w	r3, #2
  405428:	d105      	bne.n	405436 <prvIPTimerCheck+0x1e>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
  40542a:	f100 010c 	add.w	r1, r0, #12
  40542e:	3004      	adds	r0, #4
  405430:	4b0d      	ldr	r3, [pc, #52]	; (405468 <prvIPTimerCheck+0x50>)
  405432:	4798      	blx	r3
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
  405434:	b1b0      	cbz	r0, 405464 <prvIPTimerCheck+0x4c>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
  405436:	6925      	ldr	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
  405438:	1d20      	adds	r0, r4, #4
  40543a:	4b0c      	ldr	r3, [pc, #48]	; (40546c <prvIPTimerCheck+0x54>)
  40543c:	4798      	blx	r3
	pxTimer->ulRemainingTime = xTime;
  40543e:	60e5      	str	r5, [r4, #12]
	if( xTime == ( TickType_t ) 0 )
  405440:	b14d      	cbz	r5, 405456 <prvIPTimerCheck+0x3e>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
  405442:	7823      	ldrb	r3, [r4, #0]
  405444:	f36f 0341 	bfc	r3, #1, #1
  405448:	7023      	strb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
  40544a:	7823      	ldrb	r3, [r4, #0]
  40544c:	f043 0301 	orr.w	r3, r3, #1
  405450:	7023      	strb	r3, [r4, #0]
			xReturn = pdTRUE;
  405452:	2001      	movs	r0, #1
  405454:	bd38      	pop	{r3, r4, r5, pc}
		pxTimer->bExpired = pdTRUE_UNSIGNED;
  405456:	7823      	ldrb	r3, [r4, #0]
  405458:	f043 0302 	orr.w	r3, r3, #2
  40545c:	7023      	strb	r3, [r4, #0]
  40545e:	e7f4      	b.n	40544a <prvIPTimerCheck+0x32>
		xReturn = pdFALSE;
  405460:	2000      	movs	r0, #0
  405462:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			xReturn = pdFALSE;
  405464:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
  405466:	bd38      	pop	{r3, r4, r5, pc}
  405468:	0040ba99 	.word	0x0040ba99
  40546c:	0040ba55 	.word	0x0040ba55

00405470 <xIsCallingFromIPTask>:
{
  405470:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
  405472:	4b04      	ldr	r3, [pc, #16]	; (405484 <xIsCallingFromIPTask+0x14>)
  405474:	4798      	blx	r3
  405476:	4b04      	ldr	r3, [pc, #16]	; (405488 <xIsCallingFromIPTask+0x18>)
  405478:	681b      	ldr	r3, [r3, #0]
}
  40547a:	4283      	cmp	r3, r0
  40547c:	bf14      	ite	ne
  40547e:	2000      	movne	r0, #0
  405480:	2001      	moveq	r0, #1
  405482:	bd08      	pop	{r3, pc}
  405484:	0040bb09 	.word	0x0040bb09
  405488:	20006d1c 	.word	0x20006d1c

0040548c <FreeRTOS_GetUDPPayloadBuffer>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
  40548c:	b510      	push	{r4, lr}
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
  40548e:	f100 042a 	add.w	r4, r0, #42	; 0x2a
  405492:	f241 3388 	movw	r3, #5000	; 0x1388
  405496:	4299      	cmp	r1, r3
  405498:	bf28      	it	cs
  40549a:	4619      	movcs	r1, r3
  40549c:	4620      	mov	r0, r4
  40549e:	4b04      	ldr	r3, [pc, #16]	; (4054b0 <FreeRTOS_GetUDPPayloadBuffer+0x24>)
  4054a0:	4798      	blx	r3

	if( pxNetworkBuffer != NULL )
  4054a2:	b118      	cbz	r0, 4054ac <FreeRTOS_GetUDPPayloadBuffer+0x20>
	{
		/* Set the actual packet size in case a bigger buffer was returned. */
		pxNetworkBuffer->xDataLength = sizeof( UDPPacket_t ) + xRequestedSizeBytes;
  4054a4:	61c4      	str	r4, [r0, #28]

		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
  4054a6:	6980      	ldr	r0, [r0, #24]
  4054a8:	302a      	adds	r0, #42	; 0x2a
  4054aa:	bd10      	pop	{r4, pc}
	}
	else
	{
		pvReturn = NULL;
  4054ac:	2000      	movs	r0, #0
	}

	return ( void * ) pvReturn;
}
  4054ae:	bd10      	pop	{r4, pc}
  4054b0:	00409dd1 	.word	0x00409dd1

004054b4 <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
  4054b4:	b570      	push	{r4, r5, r6, lr}
  4054b6:	4605      	mov	r5, r0
  4054b8:	460e      	mov	r6, r1
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
  4054ba:	2100      	movs	r1, #0
  4054bc:	4630      	mov	r0, r6
  4054be:	4b09      	ldr	r3, [pc, #36]	; (4054e4 <pxDuplicateNetworkBufferWithDescriptor+0x30>)
  4054c0:	4798      	blx	r3

	if( pxNewBuffer != NULL )
  4054c2:	4604      	mov	r4, r0
  4054c4:	b158      	cbz	r0, 4054de <pxDuplicateNetworkBufferWithDescriptor+0x2a>
	{
		/* Set the actual packet size in case a bigger buffer than requested
		was returned. */
		pxNewBuffer->xDataLength = xNewLength;
  4054c6:	61c6      	str	r6, [r0, #28]

		/* Copy the original packet information. */
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
  4054c8:	696b      	ldr	r3, [r5, #20]
  4054ca:	6143      	str	r3, [r0, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
  4054cc:	8c2b      	ldrh	r3, [r5, #32]
  4054ce:	8403      	strh	r3, [r0, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
  4054d0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  4054d2:	8443      	strh	r3, [r0, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
  4054d4:	69ea      	ldr	r2, [r5, #28]
  4054d6:	69a9      	ldr	r1, [r5, #24]
  4054d8:	6980      	ldr	r0, [r0, #24]
  4054da:	4b03      	ldr	r3, [pc, #12]	; (4054e8 <pxDuplicateNetworkBufferWithDescriptor+0x34>)
  4054dc:	4798      	blx	r3
	}

	return pxNewBuffer;
}
  4054de:	4620      	mov	r0, r4
  4054e0:	bd70      	pop	{r4, r5, r6, pc}
  4054e2:	bf00      	nop
  4054e4:	00409dd1 	.word	0x00409dd1
  4054e8:	0040c3d9 	.word	0x0040c3d9

004054ec <pxUDPPayloadBuffer_to_NetworkBuffer>:
NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
  4054ec:	b128      	cbz	r0, 4054fa <pxUDPPayloadBuffer_to_NetworkBuffer+0xe>
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
  4054ee:	f010 0f03 	tst.w	r0, #3
  4054f2:	d104      	bne.n	4054fe <pxUDPPayloadBuffer_to_NetworkBuffer+0x12>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
  4054f4:	f850 0c34 	ldr.w	r0, [r0, #-52]
  4054f8:	4770      	bx	lr
		pxResult = NULL;
  4054fa:	2000      	movs	r0, #0
  4054fc:	4770      	bx	lr
		}
		else
		{
			pxResult = NULL;
  4054fe:	2000      	movs	r0, #0
		}
	}

	return pxResult;
}
  405500:	4770      	bx	lr
	...

00405504 <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
  405504:	b508      	push	{r3, lr}
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
  405506:	4b02      	ldr	r3, [pc, #8]	; (405510 <FreeRTOS_ReleaseUDPPayloadBuffer+0xc>)
  405508:	4798      	blx	r3
  40550a:	4b02      	ldr	r3, [pc, #8]	; (405514 <FreeRTOS_ReleaseUDPPayloadBuffer+0x10>)
  40550c:	4798      	blx	r3
  40550e:	bd08      	pop	{r3, pc}
  405510:	004054ed 	.word	0x004054ed
  405514:	00409d79 	.word	0x00409d79

00405518 <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
  405518:	b5f0      	push	{r4, r5, r6, r7, lr}
  40551a:	b083      	sub	sp, #12
  40551c:	4604      	mov	r4, r0
  40551e:	460f      	mov	r7, r1
  405520:	4616      	mov	r6, r2
  405522:	461d      	mov	r5, r3
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
  405524:	2200      	movs	r2, #0
  405526:	2108      	movs	r1, #8
  405528:	2041      	movs	r0, #65	; 0x41
  40552a:	4b33      	ldr	r3, [pc, #204]	; (4055f8 <FreeRTOS_IPInit+0xe0>)
  40552c:	4798      	blx	r3
  40552e:	4b33      	ldr	r3, [pc, #204]	; (4055fc <FreeRTOS_IPInit+0xe4>)
  405530:	6018      	str	r0, [r3, #0]
	configASSERT( xNetworkEventQueue );

	if( xNetworkEventQueue != NULL )
  405532:	2800      	cmp	r0, #0
  405534:	d05a      	beq.n	4055ec <FreeRTOS_IPInit+0xd4>
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
  405536:	4b32      	ldr	r3, [pc, #200]	; (405600 <FreeRTOS_IPInit+0xe8>)
  405538:	4798      	blx	r3
  40553a:	2801      	cmp	r0, #1
  40553c:	d00a      	beq.n	405554 <FreeRTOS_IPInit+0x3c>

			}
		}
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );
  40553e:	4831      	ldr	r0, [pc, #196]	; (405604 <FreeRTOS_IPInit+0xec>)
  405540:	4b31      	ldr	r3, [pc, #196]	; (405608 <FreeRTOS_IPInit+0xf0>)
  405542:	4798      	blx	r3

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
  405544:	4c2d      	ldr	r4, [pc, #180]	; (4055fc <FreeRTOS_IPInit+0xe4>)
  405546:	6820      	ldr	r0, [r4, #0]
  405548:	4b30      	ldr	r3, [pc, #192]	; (40560c <FreeRTOS_IPInit+0xf4>)
  40554a:	4798      	blx	r3
			xNetworkEventQueue = NULL;
  40554c:	2000      	movs	r0, #0
  40554e:	6020      	str	r0, [r4, #0]
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
}
  405550:	b003      	add	sp, #12
  405552:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
  405554:	78e2      	ldrb	r2, [r4, #3]
  405556:	78a3      	ldrb	r3, [r4, #2]
  405558:	041b      	lsls	r3, r3, #16
  40555a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40555e:	7822      	ldrb	r2, [r4, #0]
  405560:	4313      	orrs	r3, r2
  405562:	7862      	ldrb	r2, [r4, #1]
  405564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405568:	4c29      	ldr	r4, [pc, #164]	; (405610 <FreeRTOS_IPInit+0xf8>)
  40556a:	6023      	str	r3, [r4, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
  40556c:	78f9      	ldrb	r1, [r7, #3]
  40556e:	78ba      	ldrb	r2, [r7, #2]
  405570:	0412      	lsls	r2, r2, #16
  405572:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  405576:	7839      	ldrb	r1, [r7, #0]
  405578:	430a      	orrs	r2, r1
  40557a:	7879      	ldrb	r1, [r7, #1]
  40557c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  405580:	6062      	str	r2, [r4, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
  405582:	78f0      	ldrb	r0, [r6, #3]
  405584:	78b1      	ldrb	r1, [r6, #2]
  405586:	0409      	lsls	r1, r1, #16
  405588:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  40558c:	7830      	ldrb	r0, [r6, #0]
  40558e:	4301      	orrs	r1, r0
  405590:	7870      	ldrb	r0, [r6, #1]
  405592:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  405596:	60a1      	str	r1, [r4, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
  405598:	78e8      	ldrb	r0, [r5, #3]
  40559a:	78a9      	ldrb	r1, [r5, #2]
  40559c:	0409      	lsls	r1, r1, #16
  40559e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  4055a2:	7828      	ldrb	r0, [r5, #0]
  4055a4:	4301      	orrs	r1, r0
  4055a6:	7868      	ldrb	r0, [r5, #1]
  4055a8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  4055ac:	60e1      	str	r1, [r4, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
  4055ae:	ea63 0602 	orn	r6, r3, r2
  4055b2:	6126      	str	r6, [r4, #16]
			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
  4055b4:	4d17      	ldr	r5, [pc, #92]	; (405614 <FreeRTOS_IPInit+0xfc>)
  4055b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4055b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4055ba:	602e      	str	r6, [r5, #0]
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
  4055bc:	4b16      	ldr	r3, [pc, #88]	; (405618 <FreeRTOS_IPInit+0x100>)
  4055be:	2200      	movs	r2, #0
  4055c0:	615a      	str	r2, [r3, #20]
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
  4055c2:	9a08      	ldr	r2, [sp, #32]
  4055c4:	6810      	ldr	r0, [r2, #0]
  4055c6:	6018      	str	r0, [r3, #0]
  4055c8:	8892      	ldrh	r2, [r2, #4]
  4055ca:	809a      	strh	r2, [r3, #4]
			xReturn = vNetworkSocketsInit();
  4055cc:	4b13      	ldr	r3, [pc, #76]	; (40561c <FreeRTOS_IPInit+0x104>)
  4055ce:	4798      	blx	r3
			if( pdTRUE == xReturn )
  4055d0:	2801      	cmp	r0, #1
  4055d2:	d1bd      	bne.n	405550 <FreeRTOS_IPInit+0x38>
				xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t )ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t )ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
  4055d4:	4b12      	ldr	r3, [pc, #72]	; (405620 <FreeRTOS_IPInit+0x108>)
  4055d6:	9301      	str	r3, [sp, #4]
  4055d8:	2302      	movs	r3, #2
  4055da:	9300      	str	r3, [sp, #0]
  4055dc:	2300      	movs	r3, #0
  4055de:	f44f 7220 	mov.w	r2, #640	; 0x280
  4055e2:	4910      	ldr	r1, [pc, #64]	; (405624 <FreeRTOS_IPInit+0x10c>)
  4055e4:	4810      	ldr	r0, [pc, #64]	; (405628 <FreeRTOS_IPInit+0x110>)
  4055e6:	4c11      	ldr	r4, [pc, #68]	; (40562c <FreeRTOS_IPInit+0x114>)
  4055e8:	47a0      	blx	r4
  4055ea:	e7b1      	b.n	405550 <FreeRTOS_IPInit+0x38>
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
  4055ec:	4810      	ldr	r0, [pc, #64]	; (405630 <FreeRTOS_IPInit+0x118>)
  4055ee:	4b06      	ldr	r3, [pc, #24]	; (405608 <FreeRTOS_IPInit+0xf0>)
  4055f0:	4798      	blx	r3
BaseType_t xReturn = pdFALSE;
  4055f2:	2000      	movs	r0, #0
	return xReturn;
  4055f4:	e7ac      	b.n	405550 <FreeRTOS_IPInit+0x38>
  4055f6:	bf00      	nop
  4055f8:	0040ad89 	.word	0x0040ad89
  4055fc:	20006d3c 	.word	0x20006d3c
  405600:	00409ced 	.word	0x00409ced
  405604:	00412dd4 	.word	0x00412dd4
  405608:	0040c351 	.word	0x0040c351
  40560c:	0040b2f5 	.word	0x0040b2f5
  405610:	20006d24 	.word	0x20006d24
  405614:	20006d08 	.word	0x20006d08
  405618:	200000d8 	.word	0x200000d8
  40561c:	00406071 	.word	0x00406071
  405620:	20006d1c 	.word	0x20006d1c
  405624:	00412dcc 	.word	0x00412dcc
  405628:	00405a69 	.word	0x00405a69
  40562c:	0040b401 	.word	0x0040b401
  405630:	00412e0c 	.word	0x00412e0c

00405634 <FreeRTOS_GetAddressConfiguration>:

void FreeRTOS_GetAddressConfiguration( uint32_t *pulIPAddress, uint32_t *pulNetMask, uint32_t *pulGatewayAddress, uint32_t *pulDNSServerAddress )
{
	/* Return the address configuration to the caller. */

	if( pulIPAddress != NULL )
  405634:	b198      	cbz	r0, 40565e <FreeRTOS_GetAddressConfiguration+0x2a>
{
  405636:	b410      	push	{r4}
  405638:	4604      	mov	r4, r0
	{
		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
  40563a:	4810      	ldr	r0, [pc, #64]	; (40567c <FreeRTOS_GetAddressConfiguration+0x48>)
  40563c:	6940      	ldr	r0, [r0, #20]
  40563e:	6020      	str	r0, [r4, #0]
	}

	if( pulNetMask != NULL )
  405640:	b111      	cbz	r1, 405648 <FreeRTOS_GetAddressConfiguration+0x14>
	{
		*pulNetMask = xNetworkAddressing.ulNetMask;
  405642:	480f      	ldr	r0, [pc, #60]	; (405680 <FreeRTOS_GetAddressConfiguration+0x4c>)
  405644:	6840      	ldr	r0, [r0, #4]
  405646:	6008      	str	r0, [r1, #0]
	}

	if( pulGatewayAddress != NULL )
  405648:	b112      	cbz	r2, 405650 <FreeRTOS_GetAddressConfiguration+0x1c>
	{
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
  40564a:	490d      	ldr	r1, [pc, #52]	; (405680 <FreeRTOS_GetAddressConfiguration+0x4c>)
  40564c:	6889      	ldr	r1, [r1, #8]
  40564e:	6011      	str	r1, [r2, #0]
	}

	if( pulDNSServerAddress != NULL )
  405650:	b113      	cbz	r3, 405658 <FreeRTOS_GetAddressConfiguration+0x24>
	{
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
  405652:	4a0b      	ldr	r2, [pc, #44]	; (405680 <FreeRTOS_GetAddressConfiguration+0x4c>)
  405654:	68d2      	ldr	r2, [r2, #12]
  405656:	601a      	str	r2, [r3, #0]
	}
}
  405658:	f85d 4b04 	ldr.w	r4, [sp], #4
  40565c:	4770      	bx	lr
	if( pulNetMask != NULL )
  40565e:	b111      	cbz	r1, 405666 <FreeRTOS_GetAddressConfiguration+0x32>
		*pulNetMask = xNetworkAddressing.ulNetMask;
  405660:	4807      	ldr	r0, [pc, #28]	; (405680 <FreeRTOS_GetAddressConfiguration+0x4c>)
  405662:	6840      	ldr	r0, [r0, #4]
  405664:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
  405666:	b112      	cbz	r2, 40566e <FreeRTOS_GetAddressConfiguration+0x3a>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
  405668:	4905      	ldr	r1, [pc, #20]	; (405680 <FreeRTOS_GetAddressConfiguration+0x4c>)
  40566a:	6889      	ldr	r1, [r1, #8]
  40566c:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
  40566e:	2b00      	cmp	r3, #0
  405670:	d0f4      	beq.n	40565c <FreeRTOS_GetAddressConfiguration+0x28>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
  405672:	4a03      	ldr	r2, [pc, #12]	; (405680 <FreeRTOS_GetAddressConfiguration+0x4c>)
  405674:	68d2      	ldr	r2, [r2, #12]
  405676:	601a      	str	r2, [r3, #0]
  405678:	4770      	bx	lr
  40567a:	bf00      	nop
  40567c:	200000d8 	.word	0x200000d8
  405680:	20006d24 	.word	0x20006d24

00405684 <xSendEventStructToIPTask>:
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
}
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
  405684:	b538      	push	{r3, r4, r5, lr}
  405686:	4604      	mov	r4, r0
  405688:	460d      	mov	r5, r1
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
	return xIPTaskInitialised;
  40568a:	4b18      	ldr	r3, [pc, #96]	; (4056ec <xSendEventStructToIPTask+0x68>)
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
  40568c:	681b      	ldr	r3, [r3, #0]
  40568e:	b92b      	cbnz	r3, 40569c <xSendEventStructToIPTask+0x18>
  405690:	f990 3000 	ldrsb.w	r3, [r0]
  405694:	b133      	cbz	r3, 4056a4 <xSendEventStructToIPTask+0x20>
		xReturn = pdFAIL;
  405696:	2500      	movs	r5, #0
}
  405698:	4628      	mov	r0, r5
  40569a:	bd38      	pop	{r3, r4, r5, pc}
			if( pxEvent->eEventType == eTCPTimerEvent )
  40569c:	f990 3000 	ldrsb.w	r3, [r0]
  4056a0:	2b05      	cmp	r3, #5
  4056a2:	d015      	beq.n	4056d0 <xSendEventStructToIPTask+0x4c>
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
  4056a4:	4b12      	ldr	r3, [pc, #72]	; (4056f0 <xSendEventStructToIPTask+0x6c>)
  4056a6:	4798      	blx	r3
  4056a8:	2801      	cmp	r0, #1
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
  4056aa:	f04f 0300 	mov.w	r3, #0
  4056ae:	bf14      	ite	ne
  4056b0:	462a      	movne	r2, r5
  4056b2:	461a      	moveq	r2, r3
  4056b4:	4621      	mov	r1, r4
  4056b6:	480f      	ldr	r0, [pc, #60]	; (4056f4 <xSendEventStructToIPTask+0x70>)
  4056b8:	6800      	ldr	r0, [r0, #0]
  4056ba:	4d0f      	ldr	r5, [pc, #60]	; (4056f8 <xSendEventStructToIPTask+0x74>)
  4056bc:	47a8      	blx	r5
			if( xReturn == pdFAIL )
  4056be:	4605      	mov	r5, r0
  4056c0:	2800      	cmp	r0, #0
  4056c2:	d1e9      	bne.n	405698 <xSendEventStructToIPTask+0x14>
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
  4056c4:	f994 1000 	ldrsb.w	r1, [r4]
  4056c8:	480c      	ldr	r0, [pc, #48]	; (4056fc <xSendEventStructToIPTask+0x78>)
  4056ca:	4b0d      	ldr	r3, [pc, #52]	; (405700 <xSendEventStructToIPTask+0x7c>)
  4056cc:	4798      	blx	r3
  4056ce:	e7e3      	b.n	405698 <xSendEventStructToIPTask+0x14>
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
  4056d0:	4a0c      	ldr	r2, [pc, #48]	; (405704 <xSendEventStructToIPTask+0x80>)
  4056d2:	7813      	ldrb	r3, [r2, #0]
  4056d4:	f043 0302 	orr.w	r3, r3, #2
  4056d8:	7013      	strb	r3, [r2, #0]
				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
  4056da:	4b06      	ldr	r3, [pc, #24]	; (4056f4 <xSendEventStructToIPTask+0x70>)
  4056dc:	6818      	ldr	r0, [r3, #0]
  4056de:	4b0a      	ldr	r3, [pc, #40]	; (405708 <xSendEventStructToIPTask+0x84>)
  4056e0:	4798      	blx	r3
		if( xSendMessage != pdFALSE )
  4056e2:	2800      	cmp	r0, #0
  4056e4:	d0de      	beq.n	4056a4 <xSendEventStructToIPTask+0x20>
			xReturn = pdPASS;
  4056e6:	2501      	movs	r5, #1
	return xReturn;
  4056e8:	e7d6      	b.n	405698 <xSendEventStructToIPTask+0x14>
  4056ea:	bf00      	nop
  4056ec:	20006d20 	.word	0x20006d20
  4056f0:	00405471 	.word	0x00405471
  4056f4:	20006d3c 	.word	0x20006d3c
  4056f8:	0040addd 	.word	0x0040addd
  4056fc:	00412f34 	.word	0x00412f34
  405700:	0040c351 	.word	0x0040c351
  405704:	20006d48 	.word	0x20006d48
  405708:	0040b2d9 	.word	0x0040b2d9

0040570c <FreeRTOS_NetworkDown>:
{
  40570c:	b508      	push	{r3, lr}
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
  40570e:	2100      	movs	r1, #0
  405710:	4804      	ldr	r0, [pc, #16]	; (405724 <FreeRTOS_NetworkDown+0x18>)
  405712:	4b05      	ldr	r3, [pc, #20]	; (405728 <FreeRTOS_NetworkDown+0x1c>)
  405714:	4798      	blx	r3
  405716:	2801      	cmp	r0, #1
		xNetworkDownEventPending = pdTRUE;
  405718:	bf14      	ite	ne
  40571a:	2201      	movne	r2, #1
		xNetworkDownEventPending = pdFALSE;
  40571c:	2200      	moveq	r2, #0
  40571e:	4b03      	ldr	r3, [pc, #12]	; (40572c <FreeRTOS_NetworkDown+0x20>)
  405720:	601a      	str	r2, [r3, #0]
  405722:	bd08      	pop	{r3, pc}
  405724:	00412f2c 	.word	0x00412f2c
  405728:	00405685 	.word	0x00405685
  40572c:	20006d38 	.word	0x20006d38

00405730 <xSendEventToIPTask>:
{
  405730:	b500      	push	{lr}
  405732:	b083      	sub	sp, #12
	xEventMessage.eEventType = eEvent;
  405734:	f88d 0000 	strb.w	r0, [sp]
	xEventMessage.pvData = ( void* )NULL;
  405738:	2100      	movs	r1, #0
  40573a:	9101      	str	r1, [sp, #4]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
  40573c:	4668      	mov	r0, sp
  40573e:	4b02      	ldr	r3, [pc, #8]	; (405748 <xSendEventToIPTask+0x18>)
  405740:	4798      	blx	r3
}
  405742:	b003      	add	sp, #12
  405744:	f85d fb04 	ldr.w	pc, [sp], #4
  405748:	00405685 	.word	0x00405685

0040574c <vIPNetworkUpCalls>:
{
  40574c:	b538      	push	{r3, r4, r5, lr}
	xNetworkUp = pdTRUE;
  40574e:	2201      	movs	r2, #1
  405750:	4b09      	ldr	r3, [pc, #36]	; (405778 <vIPNetworkUpCalls+0x2c>)
  405752:	601a      	str	r2, [r3, #0]
		vApplicationIPNetworkEventHook( eNetworkUp );
  405754:	2000      	movs	r0, #0
  405756:	4b09      	ldr	r3, [pc, #36]	; (40577c <vIPNetworkUpCalls+0x30>)
  405758:	4798      	blx	r3
	pxTimer->ulReloadTime = xTime;
  40575a:	4c09      	ldr	r4, [pc, #36]	; (405780 <vIPNetworkUpCalls+0x34>)
  40575c:	f242 7510 	movw	r5, #10000	; 0x2710
  405760:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
  405762:	1d20      	adds	r0, r4, #4
  405764:	4b07      	ldr	r3, [pc, #28]	; (405784 <vIPNetworkUpCalls+0x38>)
  405766:	4798      	blx	r3
	pxTimer->ulRemainingTime = xTime;
  405768:	60e5      	str	r5, [r4, #12]
		pxTimer->bExpired = pdFALSE_UNSIGNED;
  40576a:	7823      	ldrb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
  40576c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  405770:	f043 0301 	orr.w	r3, r3, #1
  405774:	7023      	strb	r3, [r4, #0]
  405776:	bd38      	pop	{r3, r4, r5, pc}
  405778:	20006d40 	.word	0x20006d40
  40577c:	0040c171 	.word	0x0040c171
  405780:	20006cdc 	.word	0x20006cdc
  405784:	0040ba55 	.word	0x0040ba55

00405788 <usGenerateChecksum>:
{
  405788:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSum.u32 = FreeRTOS_ntohs( ulSum );
  40578a:	0a03      	lsrs	r3, r0, #8
  40578c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  405790:	b29b      	uxth	r3, r3
  405792:	4618      	mov	r0, r3
	xTerm.u32 = 0ul;
  405794:	2700      	movs	r7, #0
	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03u ); /* gives 0, 1, 2, or 3 */
  405796:	f001 0403 	and.w	r4, r1, #3
	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
  40579a:	f011 0e01 	ands.w	lr, r1, #1
  40579e:	d005      	beq.n	4057ac <usGenerateChecksum+0x24>
  4057a0:	b13a      	cbz	r2, 4057b2 <usGenerateChecksum+0x2a>
		xTerm.u8[ 1 ] = *( xSource.u8ptr );
  4057a2:	f811 5b01 	ldrb.w	r5, [r1], #1
  4057a6:	f365 270f 	bfi	r7, r5, #8, #8
		uxDataLengthBytes--;
  4057aa:	3a01      	subs	r2, #1
	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
  4057ac:	3c01      	subs	r4, #1
  4057ae:	2c01      	cmp	r4, #1
  4057b0:	d953      	bls.n	40585a <usGenerateChecksum+0xd2>
	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
  4057b2:	f022 0603 	bic.w	r6, r2, #3
  4057b6:	3e0c      	subs	r6, #12
  4057b8:	440e      	add	r6, r1
	while( xSource.u32ptr < xLastSource.u32ptr )
  4057ba:	428e      	cmp	r6, r1
  4057bc:	d954      	bls.n	405868 <usGenerateChecksum+0xe0>
  4057be:	460b      	mov	r3, r1
  4057c0:	2400      	movs	r4, #0
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
  4057c2:	681d      	ldr	r5, [r3, #0]
		if( xSum2.u32 < xSum.u32 )
  4057c4:	1940      	adds	r0, r0, r5
			ulCarry++;
  4057c6:	bf28      	it	cs
  4057c8:	3401      	addcs	r4, #1
		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
  4057ca:	685d      	ldr	r5, [r3, #4]
		if( xSum2.u32 > xSum.u32 )
  4057cc:	1940      	adds	r0, r0, r5
			ulCarry++;
  4057ce:	bf28      	it	cs
  4057d0:	3401      	addcs	r4, #1
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
  4057d2:	689d      	ldr	r5, [r3, #8]
		if( xSum2.u32 < xSum.u32 )
  4057d4:	1940      	adds	r0, r0, r5
			ulCarry++;
  4057d6:	bf28      	it	cs
  4057d8:	3401      	addcs	r4, #1
		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
  4057da:	68dd      	ldr	r5, [r3, #12]
		if( xSum2.u32 > xSum.u32 )
  4057dc:	1940      	adds	r0, r0, r5
			ulCarry++;
  4057de:	bf28      	it	cs
  4057e0:	3401      	addcs	r4, #1
		xSource.u32ptr += 4;
  4057e2:	3310      	adds	r3, #16
	while( xSource.u32ptr < xLastSource.u32ptr )
  4057e4:	429e      	cmp	r6, r3
  4057e6:	d8ec      	bhi.n	4057c2 <usGenerateChecksum+0x3a>
  4057e8:	43cb      	mvns	r3, r1
  4057ea:	441e      	add	r6, r3
  4057ec:	f026 060f 	bic.w	r6, r6, #15
  4057f0:	3610      	adds	r6, #16
  4057f2:	4431      	add	r1, r6
	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
  4057f4:	0c03      	lsrs	r3, r0, #16
  4057f6:	fa13 f080 	uxtah	r0, r3, r0
  4057fa:	4420      	add	r0, r4
  4057fc:	4604      	mov	r4, r0
	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
  4057fe:	f002 050e 	and.w	r5, r2, #14
  405802:	440d      	add	r5, r1
	while( xSource.u16ptr < xLastSource.u16ptr )
  405804:	428d      	cmp	r5, r1
  405806:	d90c      	bls.n	405822 <usGenerateChecksum+0x9a>
  405808:	460b      	mov	r3, r1
		xSum.u32 += xSource.u16ptr[ 0 ];
  40580a:	f833 0b02 	ldrh.w	r0, [r3], #2
  40580e:	4404      	add	r4, r0
	while( xSource.u16ptr < xLastSource.u16ptr )
  405810:	429d      	cmp	r5, r3
  405812:	d8fa      	bhi.n	40580a <usGenerateChecksum+0x82>
  405814:	43cb      	mvns	r3, r1
  405816:	441d      	add	r5, r3
  405818:	f025 0501 	bic.w	r5, r5, #1
  40581c:	3502      	adds	r5, #2
  40581e:	4620      	mov	r0, r4
		xSource.u16ptr++;
  405820:	4429      	add	r1, r5
	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0u )	/* Maybe one more ? */
  405822:	f012 0f01 	tst.w	r2, #1
		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
  405826:	bf1c      	itt	ne
  405828:	780b      	ldrbne	r3, [r1, #0]
  40582a:	f363 0707 	bfine	r7, r3, #0, #8
	xSum.u32 += xTerm.u32;
  40582e:	4438      	add	r0, r7
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
  405830:	0c03      	lsrs	r3, r0, #16
  405832:	fa13 f080 	uxtah	r0, r3, r0
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
  405836:	0c03      	lsrs	r3, r0, #16
  405838:	fa13 f080 	uxtah	r0, r3, r0
	if( ( ulAlignBits & 1u ) != 0u )
  40583c:	f1be 0f00 	cmp.w	lr, #0
  405840:	d004      	beq.n	40584c <usGenerateChecksum+0xc4>
		xSum.u32 = ( ( xSum.u32 & 0xffu ) << 8 ) | ( ( xSum.u32 & 0xff00u ) >> 8 );
  405842:	0203      	lsls	r3, r0, #8
  405844:	b29b      	uxth	r3, r3
  405846:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40584a:	4318      	orrs	r0, r3
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
  40584c:	0203      	lsls	r3, r0, #8
  40584e:	f3c0 2007 	ubfx	r0, r0, #8, #8
  405852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
}
  405856:	4318      	orrs	r0, r3
  405858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
  40585a:	2a01      	cmp	r2, #1
  40585c:	d9a9      	bls.n	4057b2 <usGenerateChecksum+0x2a>
		xSum.u32 += *(xSource.u16ptr);
  40585e:	f831 0b02 	ldrh.w	r0, [r1], #2
  405862:	4418      	add	r0, r3
		uxDataLengthBytes -= 2u;
  405864:	3a02      	subs	r2, #2
  405866:	e7a4      	b.n	4057b2 <usGenerateChecksum+0x2a>
uint32_t ulAlignBits, ulCarry = 0ul;
  405868:	2400      	movs	r4, #0
  40586a:	e7c3      	b.n	4057f4 <usGenerateChecksum+0x6c>

0040586c <usGenerateProtocolChecksum>:
{
  40586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405870:	b082      	sub	sp, #8
	if( uxBufferLength < sizeof( IPPacket_t ) )
  405872:	2921      	cmp	r1, #33	; 0x21
  405874:	d805      	bhi.n	405882 <usGenerateProtocolChecksum+0x16>
		return ipINVALID_LENGTH;
  405876:	f241 2434 	movw	r4, #4660	; 0x1234
}
  40587a:	4620      	mov	r0, r4
  40587c:	b002      	add	sp, #8
  40587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxIPHeaderLength = ( UBaseType_t ) ( sizeof( uint32_t ) * ( pxIPPacket->xIPHeader.ucVersionHeaderLength & 0x0Fu ) );
  405882:	7b83      	ldrb	r3, [r0, #14]
  405884:	f003 030f 	and.w	r3, r3, #15
  405888:	009b      	lsls	r3, r3, #2
	if( uxBufferLength < sizeof( IPPacket_t ) + uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER )
  40588a:	f103 040e 	add.w	r4, r3, #14
  40588e:	42a1      	cmp	r1, r4
  405890:	d202      	bcs.n	405898 <usGenerateProtocolChecksum+0x2c>
		return ipINVALID_LENGTH;
  405892:	f241 2434 	movw	r4, #4660	; 0x1234
  405896:	e7f0      	b.n	40587a <usGenerateProtocolChecksum+0xe>
	if( uxBufferLength < FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) )
  405898:	8a05      	ldrh	r5, [r0, #16]
  40589a:	0a2c      	lsrs	r4, r5, #8
  40589c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  4058a0:	b2a4      	uxth	r4, r4
  4058a2:	42a1      	cmp	r1, r4
  4058a4:	d202      	bcs.n	4058ac <usGenerateProtocolChecksum+0x40>
		return ipINVALID_LENGTH;
  4058a6:	f241 2434 	movw	r4, #4660	; 0x1234
  4058aa:	e7e6      	b.n	40587a <usGenerateProtocolChecksum+0xe>
	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
  4058ac:	7dc4      	ldrb	r4, [r0, #23]
	pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) );
  4058ae:	f1a3 0514 	sub.w	r5, r3, #20
  4058b2:	eb00 0e05 	add.w	lr, r0, r5
	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
  4058b6:	2c11      	cmp	r4, #17
  4058b8:	d008      	beq.n	4058cc <usGenerateProtocolChecksum+0x60>
	else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
  4058ba:	2c06      	cmp	r4, #6
  4058bc:	d028      	beq.n	405910 <usGenerateProtocolChecksum+0xa4>
	else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
  4058be:	1e65      	subs	r5, r4, #1
  4058c0:	b2ed      	uxtb	r5, r5
  4058c2:	2d01      	cmp	r5, #1
  4058c4:	d92f      	bls.n	405926 <usGenerateProtocolChecksum+0xba>
		return ipUNHANDLED_PROTOCOL;
  4058c6:	f244 3421 	movw	r4, #17185	; 0x4321
  4058ca:	e7d6      	b.n	40587a <usGenerateProtocolChecksum+0xe>
		if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER ) )
  4058cc:	f103 0516 	add.w	r5, r3, #22
  4058d0:	42a9      	cmp	r1, r5
  4058d2:	d202      	bcs.n	4058da <usGenerateProtocolChecksum+0x6e>
			return ipINVALID_LENGTH;
  4058d4:	f241 2434 	movw	r4, #4660	; 0x1234
  4058d8:	e7cf      	b.n	40587a <usGenerateProtocolChecksum+0xe>
		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
  4058da:	f10e 0628 	add.w	r6, lr, #40	; 0x28
			pcType = "UDP";
  4058de:	4f4d      	ldr	r7, [pc, #308]	; (405a14 <usGenerateProtocolChecksum+0x1a8>)
	if( xOutgoingPacket != pdFALSE )
  4058e0:	b382      	cbz	r2, 405944 <usGenerateProtocolChecksum+0xd8>
		*( pusChecksum ) = 0u;
  4058e2:	2100      	movs	r1, #0
  4058e4:	8031      	strh	r1, [r6, #0]
  4058e6:	4615      	mov	r5, r2
  4058e8:	4680      	mov	r8, r0
		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* normally minus 20 */
  4058ea:	8a01      	ldrh	r1, [r0, #16]
  4058ec:	0a0a      	lsrs	r2, r1, #8
  4058ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4058f2:	b292      	uxth	r2, r2
  4058f4:	1ad2      	subs	r2, r2, r3
	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
  4058f6:	2a07      	cmp	r2, #7
  4058f8:	d903      	bls.n	405902 <usGenerateProtocolChecksum+0x96>
		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
  4058fa:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
  4058fe:	429a      	cmp	r2, r3
  405900:	d928      	bls.n	405954 <usGenerateProtocolChecksum+0xe8>
			FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: len invalid: %lu\n", pcType, ulLength ) );
  405902:	4639      	mov	r1, r7
  405904:	4844      	ldr	r0, [pc, #272]	; (405a18 <usGenerateProtocolChecksum+0x1ac>)
  405906:	4b45      	ldr	r3, [pc, #276]	; (405a1c <usGenerateProtocolChecksum+0x1b0>)
  405908:	4798      	blx	r3
		return ipINVALID_LENGTH;
  40590a:	f241 2434 	movw	r4, #4660	; 0x1234
  40590e:	e7b4      	b.n	40587a <usGenerateProtocolChecksum+0xe>
		if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER ) )
  405910:	f103 0522 	add.w	r5, r3, #34	; 0x22
  405914:	42a9      	cmp	r1, r5
  405916:	d202      	bcs.n	40591e <usGenerateProtocolChecksum+0xb2>
			return ipINVALID_LENGTH;
  405918:	f241 2434 	movw	r4, #4660	; 0x1234
  40591c:	e7ad      	b.n	40587a <usGenerateProtocolChecksum+0xe>
		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
  40591e:	f10e 0632 	add.w	r6, lr, #50	; 0x32
			pcType = "TCP";
  405922:	4f3f      	ldr	r7, [pc, #252]	; (405a20 <usGenerateProtocolChecksum+0x1b4>)
  405924:	e7dc      	b.n	4058e0 <usGenerateProtocolChecksum+0x74>
		if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER ) )
  405926:	f103 0516 	add.w	r5, r3, #22
  40592a:	42a9      	cmp	r1, r5
  40592c:	d202      	bcs.n	405934 <usGenerateProtocolChecksum+0xc8>
			return ipINVALID_LENGTH;
  40592e:	f241 2434 	movw	r4, #4660	; 0x1234
  405932:	e7a2      	b.n	40587a <usGenerateProtocolChecksum+0xe>
		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
  405934:	f10e 0624 	add.w	r6, lr, #36	; 0x24
				pcType = "IGMP";
  405938:	493a      	ldr	r1, [pc, #232]	; (405a24 <usGenerateProtocolChecksum+0x1b8>)
  40593a:	4f3b      	ldr	r7, [pc, #236]	; (405a28 <usGenerateProtocolChecksum+0x1bc>)
  40593c:	2c01      	cmp	r4, #1
  40593e:	bf18      	it	ne
  405940:	460f      	movne	r7, r1
  405942:	e7cd      	b.n	4058e0 <usGenerateProtocolChecksum+0x74>
	else if( ( *pusChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
  405944:	8831      	ldrh	r1, [r6, #0]
  405946:	2900      	cmp	r1, #0
  405948:	d1cd      	bne.n	4058e6 <usGenerateProtocolChecksum+0x7a>
  40594a:	2c11      	cmp	r4, #17
  40594c:	d1cb      	bne.n	4058e6 <usGenerateProtocolChecksum+0x7a>
		return ipCORRECT_CRC;
  40594e:	f64f 74ff 	movw	r4, #65535	; 0xffff
  405952:	e792      	b.n	40587a <usGenerateProtocolChecksum+0xe>
	if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
  405954:	2c02      	cmp	r4, #2
  405956:	d83f      	bhi.n	4059d8 <usGenerateProtocolChecksum+0x16c>
			( ~usGenerateChecksum( 0UL,
  405958:	f10e 0122 	add.w	r1, lr, #34	; 0x22
  40595c:	2000      	movs	r0, #0
  40595e:	4b33      	ldr	r3, [pc, #204]	; (405a2c <usGenerateProtocolChecksum+0x1c0>)
  405960:	4798      	blx	r3
		usChecksum = ( uint16_t )
  405962:	43c3      	mvns	r3, r0
  405964:	b29b      	uxth	r3, r3
	if( xOutgoingPacket == pdFALSE )
  405966:	2d00      	cmp	r5, #0
  405968:	d140      	bne.n	4059ec <usGenerateProtocolChecksum+0x180>
		if( usChecksum == 0u )
  40596a:	2b00      	cmp	r3, #0
  40596c:	d04f      	beq.n	405a0e <usGenerateProtocolChecksum+0x1a2>
	usChecksum = FreeRTOS_htons( usChecksum );
  40596e:	0a1c      	lsrs	r4, r3, #8
  405970:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
  405974:	b29c      	uxth	r4, r3
	else if( ( xOutgoingPacket == pdFALSE ) && ( usChecksum != ipCORRECT_CRC ) )
  405976:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40597a:	429c      	cmp	r4, r3
  40597c:	f43f af7d 	beq.w	40587a <usGenerateProtocolChecksum+0xe>
		FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: ID %04X: from %lxip to %lxip bad crc: %04X\n",
  405980:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  405984:	f8d8 201a 	ldr.w	r2, [r8, #26]
  405988:	f8d8 101e 	ldr.w	r1, [r8, #30]
  40598c:	8836      	ldrh	r6, [r6, #0]
  40598e:	0e15      	lsrs	r5, r2, #24
  405990:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
  405994:	0213      	lsls	r3, r2, #8
  405996:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  40599a:	431d      	orrs	r5, r3
  40599c:	0a12      	lsrs	r2, r2, #8
  40599e:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
  4059a2:	0a02      	lsrs	r2, r0, #8
  4059a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4059a8:	0a30      	lsrs	r0, r6, #8
  4059aa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  4059ae:	b280      	uxth	r0, r0
  4059b0:	9001      	str	r0, [sp, #4]
  4059b2:	0e08      	lsrs	r0, r1, #24
  4059b4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
  4059b8:	020e      	lsls	r6, r1, #8
  4059ba:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
  4059be:	4330      	orrs	r0, r6
  4059c0:	0a09      	lsrs	r1, r1, #8
  4059c2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  4059c6:	4301      	orrs	r1, r0
  4059c8:	9100      	str	r1, [sp, #0]
  4059ca:	432b      	orrs	r3, r5
  4059cc:	b292      	uxth	r2, r2
  4059ce:	4639      	mov	r1, r7
  4059d0:	4817      	ldr	r0, [pc, #92]	; (405a30 <usGenerateProtocolChecksum+0x1c4>)
  4059d2:	4d12      	ldr	r5, [pc, #72]	; (405a1c <usGenerateProtocolChecksum+0x1b0>)
  4059d4:	47a8      	blx	r5
  4059d6:	e750      	b.n	40587a <usGenerateProtocolChecksum+0xe>
		usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
  4059d8:	1910      	adds	r0, r2, r4
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
  4059da:	3208      	adds	r2, #8
  4059dc:	f108 011a 	add.w	r1, r8, #26
  4059e0:	b280      	uxth	r0, r0
  4059e2:	4b12      	ldr	r3, [pc, #72]	; (405a2c <usGenerateProtocolChecksum+0x1c0>)
  4059e4:	4798      	blx	r3
		usChecksum = ( uint16_t )
  4059e6:	43c3      	mvns	r3, r0
  4059e8:	b29b      	uxth	r3, r3
  4059ea:	e7bc      	b.n	405966 <usGenerateProtocolChecksum+0xfa>
		if( ( usChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
  4059ec:	b90b      	cbnz	r3, 4059f2 <usGenerateProtocolChecksum+0x186>
  4059ee:	2c11      	cmp	r4, #17
  4059f0:	d005      	beq.n	4059fe <usGenerateProtocolChecksum+0x192>
	usChecksum = FreeRTOS_htons( usChecksum );
  4059f2:	0a1c      	lsrs	r4, r3, #8
  4059f4:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
  4059f8:	b29c      	uxth	r4, r3
		*( pusChecksum ) = usChecksum;
  4059fa:	8034      	strh	r4, [r6, #0]
  4059fc:	e73d      	b.n	40587a <usGenerateProtocolChecksum+0xe>
					FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum ) );
  4059fe:	2200      	movs	r2, #0
  405a00:	4639      	mov	r1, r7
  405a02:	480c      	ldr	r0, [pc, #48]	; (405a34 <usGenerateProtocolChecksum+0x1c8>)
  405a04:	4b05      	ldr	r3, [pc, #20]	; (405a1c <usGenerateProtocolChecksum+0x1b0>)
  405a06:	4798      	blx	r3
			usChecksum = ( uint16_t )0xffffu;
  405a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405a0c:	e7f1      	b.n	4059f2 <usGenerateProtocolChecksum+0x186>
	return usChecksum;
  405a0e:	f64f 74ff 	movw	r4, #65535	; 0xffff
  405a12:	e732      	b.n	40587a <usGenerateProtocolChecksum+0xe>
  405a14:	00412e5c 	.word	0x00412e5c
  405a18:	00412e74 	.word	0x00412e74
  405a1c:	0040c351 	.word	0x0040c351
  405a20:	00412e60 	.word	0x00412e60
  405a24:	00412e64 	.word	0x00412e64
  405a28:	00412e6c 	.word	0x00412e6c
  405a2c:	00405789 	.word	0x00405789
  405a30:	00412ed8 	.word	0x00412ed8
  405a34:	00412ea8 	.word	0x00412ea8

00405a38 <vReturnEthernetFrame>:
{
  405a38:	b538      	push	{r3, r4, r5, lr}
  405a3a:	4604      	mov	r4, r0
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  405a3c:	6982      	ldr	r2, [r0, #24]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
  405a3e:	4613      	mov	r3, r2
  405a40:	f853 0f06 	ldr.w	r0, [r3, #6]!
  405a44:	6010      	str	r0, [r2, #0]
  405a46:	8898      	ldrh	r0, [r3, #4]
  405a48:	8090      	strh	r0, [r2, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
  405a4a:	4d05      	ldr	r5, [pc, #20]	; (405a60 <vReturnEthernetFrame+0x28>)
  405a4c:	6828      	ldr	r0, [r5, #0]
  405a4e:	f8c2 0006 	str.w	r0, [r2, #6]
  405a52:	88aa      	ldrh	r2, [r5, #4]
  405a54:	809a      	strh	r2, [r3, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
  405a56:	4620      	mov	r0, r4
  405a58:	4b02      	ldr	r3, [pc, #8]	; (405a64 <vReturnEthernetFrame+0x2c>)
  405a5a:	4798      	blx	r3
  405a5c:	bd38      	pop	{r3, r4, r5, pc}
  405a5e:	bf00      	nop
  405a60:	200000d8 	.word	0x200000d8
  405a64:	0040a8c9 	.word	0x0040a8c9

00405a68 <prvIPTask>:
{
  405a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a6c:	b089      	sub	sp, #36	; 0x24
	FreeRTOS_NetworkDown();
  405a6e:	4bae      	ldr	r3, [pc, #696]	; (405d28 <prvIPTask+0x2c0>)
  405a70:	4798      	blx	r3
	pxTimer->ulReloadTime = xTime;
  405a72:	4cae      	ldr	r4, [pc, #696]	; (405d2c <prvIPTask+0x2c4>)
  405a74:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  405a78:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
  405a7a:	1d20      	adds	r0, r4, #4
  405a7c:	4bac      	ldr	r3, [pc, #688]	; (405d30 <prvIPTask+0x2c8>)
  405a7e:	4798      	blx	r3
	pxTimer->ulRemainingTime = xTime;
  405a80:	60e5      	str	r5, [r4, #12]
		pxTimer->bExpired = pdFALSE_UNSIGNED;
  405a82:	7823      	ldrb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
  405a84:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  405a88:	f043 0301 	orr.w	r3, r3, #1
  405a8c:	7023      	strb	r3, [r4, #0]
	xIPTaskInitialised = pdTRUE;
  405a8e:	2201      	movs	r2, #1
  405a90:	4ba8      	ldr	r3, [pc, #672]	; (405d34 <prvIPTask+0x2cc>)
  405a92:	601a      	str	r2, [r3, #0]
	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
  405a94:	48a8      	ldr	r0, [pc, #672]	; (405d38 <prvIPTask+0x2d0>)
  405a96:	4ba9      	ldr	r3, [pc, #676]	; (405d3c <prvIPTask+0x2d4>)
  405a98:	4798      	blx	r3
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
  405a9a:	4ea9      	ldr	r6, [pc, #676]	; (405d40 <prvIPTask+0x2d8>)
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
  405a9c:	1d23      	adds	r3, r4, #4
  405a9e:	9301      	str	r3, [sp, #4]
		FreeRTOS_NetworkDown();
  405aa0:	f8df a284 	ldr.w	sl, [pc, #644]	; 405d28 <prvIPTask+0x2c0>
  405aa4:	e1fc      	b.n	405ea0 <prvIPTask+0x438>
		xSendEventToIPTask( eARPTimerEvent );
  405aa6:	2002      	movs	r0, #2
  405aa8:	4ba6      	ldr	r3, [pc, #664]	; (405d44 <prvIPTask+0x2dc>)
  405aaa:	4798      	blx	r3
  405aac:	e043      	b.n	405b36 <prvIPTask+0xce>
			xSendEventToIPTask( eDHCPEvent );
  405aae:	2004      	movs	r0, #4
  405ab0:	4ba4      	ldr	r3, [pc, #656]	; (405d44 <prvIPTask+0x2dc>)
  405ab2:	4798      	blx	r3
  405ab4:	e043      	b.n	405b3e <prvIPTask+0xd6>
			xNextTime = xTCPTimerCheck( xWillSleep );
  405ab6:	fab9 f089 	clz	r0, r9
  405aba:	0940      	lsrs	r0, r0, #5
  405abc:	4ba2      	ldr	r3, [pc, #648]	; (405d48 <prvIPTask+0x2e0>)
  405abe:	4798      	blx	r3
  405ac0:	4681      	mov	r9, r0
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
  405ac2:	9801      	ldr	r0, [sp, #4]
  405ac4:	4b9a      	ldr	r3, [pc, #616]	; (405d30 <prvIPTask+0x2c8>)
  405ac6:	4798      	blx	r3
	pxTimer->ulRemainingTime = xTime;
  405ac8:	f8c4 900c 	str.w	r9, [r4, #12]
	if( xTime == ( TickType_t ) 0 )
  405acc:	f1b9 0f00 	cmp.w	r9, #0
  405ad0:	d00b      	beq.n	405aea <prvIPTask+0x82>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
  405ad2:	7823      	ldrb	r3, [r4, #0]
  405ad4:	f36f 0341 	bfc	r3, #1, #1
  405ad8:	7023      	strb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
  405ada:	7823      	ldrb	r3, [r4, #0]
  405adc:	f043 0301 	orr.w	r3, r3, #1
  405ae0:	7023      	strb	r3, [r4, #0]
			xProcessedTCPMessage = 0;
  405ae2:	2200      	movs	r2, #0
  405ae4:	4b99      	ldr	r3, [pc, #612]	; (405d4c <prvIPTask+0x2e4>)
  405ae6:	601a      	str	r2, [r3, #0]
  405ae8:	e038      	b.n	405b5c <prvIPTask+0xf4>
		pxTimer->bExpired = pdTRUE_UNSIGNED;
  405aea:	7823      	ldrb	r3, [r4, #0]
  405aec:	f043 0302 	orr.w	r3, r3, #2
  405af0:	7023      	strb	r3, [r4, #0]
  405af2:	e7f2      	b.n	405ada <prvIPTask+0x72>
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
  405af4:	f242 7310 	movw	r3, #10000	; 0x2710
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
  405af8:	783a      	ldrb	r2, [r7, #0]
  405afa:	f012 0f01 	tst.w	r2, #1
  405afe:	d003      	beq.n	405b08 <prvIPTask+0xa0>
  405b00:	68fa      	ldr	r2, [r7, #12]
  405b02:	4293      	cmp	r3, r2
  405b04:	bf28      	it	cs
  405b06:	4613      	movcs	r3, r2
		if ( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE ) 
  405b08:	68e2      	ldr	r2, [r4, #12]
  405b0a:	429a      	cmp	r2, r3
  405b0c:	bf28      	it	cs
  405b0e:	461a      	movcs	r2, r3
  405b10:	a906      	add	r1, sp, #24
  405b12:	f8d8 0000 	ldr.w	r0, [r8]
  405b16:	4b8e      	ldr	r3, [pc, #568]	; (405d50 <prvIPTask+0x2e8>)
  405b18:	4798      	blx	r3
  405b1a:	2800      	cmp	r0, #0
  405b1c:	d12c      	bne.n	405b78 <prvIPTask+0x110>
			xReceivedEvent.eEventType = eNoEvent;
  405b1e:	23ff      	movs	r3, #255	; 0xff
  405b20:	f88d 3018 	strb.w	r3, [sp, #24]
		if( xNetworkDownEventPending != pdFALSE )
  405b24:	4b8b      	ldr	r3, [pc, #556]	; (405d54 <prvIPTask+0x2ec>)
  405b26:	681b      	ldr	r3, [r3, #0]
  405b28:	2b00      	cmp	r3, #0
  405b2a:	f040 81b8 	bne.w	405e9e <prvIPTask+0x436>
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
  405b2e:	4628      	mov	r0, r5
  405b30:	47b0      	blx	r6
  405b32:	2800      	cmp	r0, #0
  405b34:	d1b7      	bne.n	405aa6 <prvIPTask+0x3e>
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
  405b36:	4638      	mov	r0, r7
  405b38:	47b0      	blx	r6
  405b3a:	2800      	cmp	r0, #0
  405b3c:	d1b7      	bne.n	405aae <prvIPTask+0x46>
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
  405b3e:	f8d8 0000 	ldr.w	r0, [r8]
  405b42:	4b85      	ldr	r3, [pc, #532]	; (405d58 <prvIPTask+0x2f0>)
  405b44:	4798      	blx	r3
  405b46:	4681      	mov	r9, r0
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
  405b48:	4620      	mov	r0, r4
  405b4a:	47b0      	blx	r6
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
  405b4c:	4b7f      	ldr	r3, [pc, #508]	; (405d4c <prvIPTask+0x2e4>)
  405b4e:	681b      	ldr	r3, [r3, #0]
  405b50:	b113      	cbz	r3, 405b58 <prvIPTask+0xf0>
  405b52:	f1b9 0f00 	cmp.w	r9, #0
  405b56:	d0ae      	beq.n	405ab6 <prvIPTask+0x4e>
		if( xCheckTCPSockets != pdFALSE )
  405b58:	2800      	cmp	r0, #0
  405b5a:	d1ac      	bne.n	405ab6 <prvIPTask+0x4e>
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
  405b5c:	782b      	ldrb	r3, [r5, #0]
  405b5e:	f013 0f01 	tst.w	r3, #1
  405b62:	d0c7      	beq.n	405af4 <prvIPTask+0x8c>
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
  405b64:	68ea      	ldr	r2, [r5, #12]
  405b66:	f242 730f 	movw	r3, #9999	; 0x270f
  405b6a:	429a      	cmp	r2, r3
  405b6c:	d801      	bhi.n	405b72 <prvIPTask+0x10a>
			xMaximumSleepTime = xARPTimer.ulReloadTime;
  405b6e:	692b      	ldr	r3, [r5, #16]
  405b70:	e7c2      	b.n	405af8 <prvIPTask+0x90>
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
  405b72:	f242 7310 	movw	r3, #10000	; 0x2710
  405b76:	e7bf      	b.n	405af8 <prvIPTask+0x90>
		switch( xReceivedEvent.eEventType )
  405b78:	f99d 3018 	ldrsb.w	r3, [sp, #24]
  405b7c:	2b0a      	cmp	r3, #10
  405b7e:	d8d1      	bhi.n	405b24 <prvIPTask+0xbc>
  405b80:	e8df f013 	tbh	[pc, r3, lsl #1]
  405b84:	0030000b 	.word	0x0030000b
  405b88:	01670143 	.word	0x01670143
  405b8c:	0173016b 	.word	0x0173016b
  405b90:	018a0178 	.word	0x018a0178
  405b94:	01630146 	.word	0x01630146
  405b98:	016f      	.short	0x016f
				xNetworkUp = pdFALSE;
  405b9a:	2200      	movs	r2, #0
  405b9c:	4b6f      	ldr	r3, [pc, #444]	; (405d5c <prvIPTask+0x2f4>)
  405b9e:	601a      	str	r2, [r3, #0]
	xARPTimer.bActive = pdFALSE_UNSIGNED;
  405ba0:	782b      	ldrb	r3, [r5, #0]
  405ba2:	f362 0300 	bfi	r3, r2, #0, #1
  405ba6:	702b      	strb	r3, [r5, #0]
		if( xCallEventHook == pdTRUE )
  405ba8:	4b6d      	ldr	r3, [pc, #436]	; (405d60 <prvIPTask+0x2f8>)
  405baa:	681b      	ldr	r3, [r3, #0]
  405bac:	2b01      	cmp	r3, #1
  405bae:	d00e      	beq.n	405bce <prvIPTask+0x166>
		xCallEventHook = pdTRUE;
  405bb0:	2201      	movs	r2, #1
  405bb2:	4b6b      	ldr	r3, [pc, #428]	; (405d60 <prvIPTask+0x2f8>)
  405bb4:	601a      	str	r2, [r3, #0]
	FreeRTOS_ClearARP( );
  405bb6:	4b6b      	ldr	r3, [pc, #428]	; (405d64 <prvIPTask+0x2fc>)
  405bb8:	4798      	blx	r3
	if( xNetworkInterfaceInitialise() != pdPASS )
  405bba:	4b6b      	ldr	r3, [pc, #428]	; (405d68 <prvIPTask+0x300>)
  405bbc:	4798      	blx	r3
  405bbe:	2801      	cmp	r0, #1
  405bc0:	d009      	beq.n	405bd6 <prvIPTask+0x16e>
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
  405bc2:	f640 30b8 	movw	r0, #3000	; 0xbb8
  405bc6:	4b69      	ldr	r3, [pc, #420]	; (405d6c <prvIPTask+0x304>)
  405bc8:	4798      	blx	r3
		FreeRTOS_NetworkDown();
  405bca:	47d0      	blx	sl
  405bcc:	e7aa      	b.n	405b24 <prvIPTask+0xbc>
			vApplicationIPNetworkEventHook( eNetworkDown );
  405bce:	2001      	movs	r0, #1
  405bd0:	4b67      	ldr	r3, [pc, #412]	; (405d70 <prvIPTask+0x308>)
  405bd2:	4798      	blx	r3
  405bd4:	e7ec      	b.n	405bb0 <prvIPTask+0x148>
			vDHCPProcess( pdTRUE );
  405bd6:	2001      	movs	r0, #1
  405bd8:	4b66      	ldr	r3, [pc, #408]	; (405d74 <prvIPTask+0x30c>)
  405bda:	4798      	blx	r3
			xSendEventToIPTask( eDHCPEvent );
  405bdc:	2004      	movs	r0, #4
  405bde:	4b59      	ldr	r3, [pc, #356]	; (405d44 <prvIPTask+0x2dc>)
  405be0:	4798      	blx	r3
  405be2:	e79f      	b.n	405b24 <prvIPTask+0xbc>
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
  405be4:	f8dd 901c 	ldr.w	r9, [sp, #28]
	if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
  405be8:	f8d9 301c 	ldr.w	r3, [r9, #28]
  405bec:	2b0d      	cmp	r3, #13
  405bee:	d90b      	bls.n	405c08 <prvIPTask+0x1a0>
		pxEthernetHeader = ( EthernetHeader_t * )( pxNetworkBuffer->pucEthernetBuffer );
  405bf0:	f8d9 b018 	ldr.w	fp, [r9, #24]
			switch( pxEthernetHeader->usFrameType )
  405bf4:	f8bb 200c 	ldrh.w	r2, [fp, #12]
  405bf8:	2a08      	cmp	r2, #8
  405bfa:	d00d      	beq.n	405c18 <prvIPTask+0x1b0>
  405bfc:	f5b2 6fc1 	cmp.w	r2, #1544	; 0x608
  405c00:	f040 80f9 	bne.w	405df6 <prvIPTask+0x38e>
				if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
  405c04:	2b29      	cmp	r3, #41	; 0x29
  405c06:	d803      	bhi.n	405c10 <prvIPTask+0x1a8>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  405c08:	4648      	mov	r0, r9
  405c0a:	4b5b      	ldr	r3, [pc, #364]	; (405d78 <prvIPTask+0x310>)
  405c0c:	4798      	blx	r3
  405c0e:	e789      	b.n	405b24 <prvIPTask+0xbc>
					eReturned = eARPProcessPacket( ( ARPPacket_t * )pxNetworkBuffer->pucEthernetBuffer );
  405c10:	4658      	mov	r0, fp
  405c12:	4b5a      	ldr	r3, [pc, #360]	; (405d7c <prvIPTask+0x314>)
  405c14:	4798      	blx	r3
  405c16:	e0ef      	b.n	405df8 <prvIPTask+0x390>
				if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
  405c18:	2b21      	cmp	r3, #33	; 0x21
  405c1a:	d9f5      	bls.n	405c08 <prvIPTask+0x1a0>
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
  405c1c:	f89b 100e 	ldrb.w	r1, [fp, #14]
  405c20:	008a      	lsls	r2, r1, #2
  405c22:	f002 023c 	and.w	r2, r2, #60	; 0x3c
	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
  405c26:	f1a3 000e 	sub.w	r0, r3, #14
  405c2a:	4282      	cmp	r2, r0
  405c2c:	d8ec      	bhi.n	405c08 <prvIPTask+0x1a0>
  405c2e:	2a13      	cmp	r2, #19
  405c30:	d9ea      	bls.n	405c08 <prvIPTask+0x1a0>
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
  405c32:	f8bb 0014 	ldrh.w	r0, [fp, #20]
  405c36:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  405c3a:	b280      	uxth	r0, r0
  405c3c:	2800      	cmp	r0, #0
  405c3e:	d1e3      	bne.n	405c08 <prvIPTask+0x1a0>
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
  405c40:	3945      	subs	r1, #69	; 0x45
  405c42:	b2c9      	uxtb	r1, r1
  405c44:	290a      	cmp	r1, #10
  405c46:	d8df      	bhi.n	405c08 <prvIPTask+0x1a0>
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
  405c48:	f8db 101e 	ldr.w	r1, [fp, #30]
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
  405c4c:	484c      	ldr	r0, [pc, #304]	; (405d80 <prvIPTask+0x318>)
  405c4e:	6940      	ldr	r0, [r0, #20]
  405c50:	4281      	cmp	r1, r0
  405c52:	d00e      	beq.n	405c72 <prvIPTask+0x20a>
  405c54:	f1b1 3fff 	cmp.w	r1, #4294967295
  405c58:	d00b      	beq.n	405c72 <prvIPTask+0x20a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
  405c5a:	f8df e134 	ldr.w	lr, [pc, #308]	; 405d90 <prvIPTask+0x328>
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
  405c5e:	f8de e010 	ldr.w	lr, [lr, #16]
  405c62:	4571      	cmp	r1, lr
  405c64:	d005      	beq.n	405c72 <prvIPTask+0x20a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
  405c66:	f8df e12c 	ldr.w	lr, [pc, #300]	; 405d94 <prvIPTask+0x32c>
  405c6a:	4571      	cmp	r1, lr
  405c6c:	d001      	beq.n	405c72 <prvIPTask+0x20a>
	if( eReturn == eProcessBuffer )
  405c6e:	2800      	cmp	r0, #0
  405c70:	d1ca      	bne.n	405c08 <prvIPTask+0x1a0>
	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
  405c72:	f89b 1017 	ldrb.w	r1, [fp, #23]
  405c76:	9102      	str	r1, [sp, #8]
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
  405c78:	2a14      	cmp	r2, #20
  405c7a:	d839      	bhi.n	405cf0 <prvIPTask+0x288>
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
  405c7c:	9b02      	ldr	r3, [sp, #8]
  405c7e:	2b11      	cmp	r3, #17
  405c80:	f000 808a 	beq.w	405d98 <prvIPTask+0x330>
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
  405c84:	f8db 101a 	ldr.w	r1, [fp, #26]
  405c88:	f10b 0006 	add.w	r0, fp, #6
  405c8c:	4b3d      	ldr	r3, [pc, #244]	; (405d84 <prvIPTask+0x31c>)
  405c8e:	4798      	blx	r3
		switch( ucProtocol )
  405c90:	9b02      	ldr	r3, [sp, #8]
  405c92:	2b06      	cmp	r3, #6
  405c94:	f000 80a3 	beq.w	405dde <prvIPTask+0x376>
  405c98:	2b11      	cmp	r3, #17
  405c9a:	d07d      	beq.n	405d98 <prvIPTask+0x330>
  405c9c:	2b01      	cmp	r3, #1
  405c9e:	d1b3      	bne.n	405c08 <prvIPTask+0x1a0>
					if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
  405ca0:	f8d9 301c 	ldr.w	r3, [r9, #28]
  405ca4:	2b29      	cmp	r3, #41	; 0x29
  405ca6:	d9af      	bls.n	405c08 <prvIPTask+0x1a0>
						if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
  405ca8:	f8db 201e 	ldr.w	r2, [fp, #30]
  405cac:	4b34      	ldr	r3, [pc, #208]	; (405d80 <prvIPTask+0x318>)
  405cae:	695b      	ldr	r3, [r3, #20]
  405cb0:	429a      	cmp	r2, r3
  405cb2:	d1a9      	bne.n	405c08 <prvIPTask+0x1a0>
						ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * )( pxNetworkBuffer->pucEthernetBuffer );
  405cb4:	f8d9 3018 	ldr.w	r3, [r9, #24]
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
  405cb8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
  405cbc:	2908      	cmp	r1, #8
  405cbe:	f040 80a2 	bne.w	405e06 <prvIPTask+0x39e>
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
  405cc2:	2100      	movs	r1, #0
  405cc4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
  405cc8:	f8d3 101a 	ldr.w	r1, [r3, #26]
  405ccc:	f8c3 101e 	str.w	r1, [r3, #30]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
  405cd0:	f8c3 201a 	str.w	r2, [r3, #26]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
  405cd4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  405cd6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
  405cda:	428a      	cmp	r2, r1
			pxICMPHeader->usChecksum = ( uint16_t )
  405cdc:	bf8c      	ite	hi
  405cde:	f502 7284 	addhi.w	r2, r2, #264	; 0x108
			pxICMPHeader->usChecksum = ( uint16_t )
  405ce2:	3208      	addls	r2, #8
  405ce4:	849a      	strh	r2, [r3, #36]	; 0x24
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
  405ce6:	2101      	movs	r1, #1
  405ce8:	4648      	mov	r0, r9
  405cea:	4b27      	ldr	r3, [pc, #156]	; (405d88 <prvIPTask+0x320>)
  405cec:	4798      	blx	r3
  405cee:	e719      	b.n	405b24 <prvIPTask+0xbc>
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
  405cf0:	f1a2 0114 	sub.w	r1, r2, #20
  405cf4:	4608      	mov	r0, r1
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
  405cf6:	3b22      	subs	r3, #34	; 0x22
			uint8_t *pucSource = ( uint8_t* )(pxNetworkBuffer->pucEthernetBuffer + sizeof( EthernetHeader_t ) + uxHeaderLength);
  405cf8:	f102 010e 	add.w	r1, r2, #14
			memmove( pucTarget, pucSource, xMoveLen );
  405cfc:	9003      	str	r0, [sp, #12]
  405cfe:	1a1a      	subs	r2, r3, r0
  405d00:	4459      	add	r1, fp
  405d02:	f10b 0022 	add.w	r0, fp, #34	; 0x22
  405d06:	4b21      	ldr	r3, [pc, #132]	; (405d8c <prvIPTask+0x324>)
  405d08:	4798      	blx	r3
			pxNetworkBuffer->xDataLength -= optlen;
  405d0a:	f8d9 301c 	ldr.w	r3, [r9, #28]
  405d0e:	9a03      	ldr	r2, [sp, #12]
  405d10:	1a9b      	subs	r3, r3, r2
  405d12:	f8c9 301c 	str.w	r3, [r9, #28]
			pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0 ) | /* High nibble is the version. */
  405d16:	f89b 300e 	ldrb.w	r3, [fp, #14]
  405d1a:	f023 030f 	bic.w	r3, r3, #15
  405d1e:	f043 0305 	orr.w	r3, r3, #5
  405d22:	f88b 300e 	strb.w	r3, [fp, #14]
  405d26:	e7a9      	b.n	405c7c <prvIPTask+0x214>
  405d28:	0040570d 	.word	0x0040570d
  405d2c:	20006d48 	.word	0x20006d48
  405d30:	0040ba55 	.word	0x0040ba55
  405d34:	20006d20 	.word	0x20006d20
  405d38:	00412e48 	.word	0x00412e48
  405d3c:	0040c351 	.word	0x0040c351
  405d40:	00405419 	.word	0x00405419
  405d44:	00405731 	.word	0x00405731
  405d48:	004066f9 	.word	0x004066f9
  405d4c:	20006d44 	.word	0x20006d44
  405d50:	0040b00d 	.word	0x0040b00d
  405d54:	20006d38 	.word	0x20006d38
  405d58:	0040b2d9 	.word	0x0040b2d9
  405d5c:	20006d40 	.word	0x20006d40
  405d60:	20006cf0 	.word	0x20006cf0
  405d64:	00404599 	.word	0x00404599
  405d68:	0040a72d 	.word	0x0040a72d
  405d6c:	0040b871 	.word	0x0040b871
  405d70:	0040c171 	.word	0x0040c171
  405d74:	00404ae1 	.word	0x00404ae1
  405d78:	00409d79 	.word	0x00409d79
  405d7c:	0040431d 	.word	0x0040431d
  405d80:	200000d8 	.word	0x200000d8
  405d84:	004041ed 	.word	0x004041ed
  405d88:	00405a39 	.word	0x00405a39
  405d8c:	0040c50d 	.word	0x0040c50d
  405d90:	20006d24 	.word	0x20006d24
  405d94:	fc0000e0 	.word	0xfc0000e0
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  405d98:	f8d9 1018 	ldr.w	r1, [r9, #24]
					if ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
  405d9c:	f8d9 201c 	ldr.w	r2, [r9, #28]
  405da0:	2a29      	cmp	r2, #41	; 0x29
  405da2:	f67f af31 	bls.w	405c08 <prvIPTask+0x1a0>
						pxNetworkBuffer->xDataLength -= sizeof( UDPPacket_t );
  405da6:	3a2a      	subs	r2, #42	; 0x2a
  405da8:	f8c9 201c 	str.w	r2, [r9, #28]
						if( ( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t ) ) <
  405dac:	8cc8      	ldrh	r0, [r1, #38]	; 0x26
  405dae:	0a03      	lsrs	r3, r0, #8
  405db0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  405db4:	b29b      	uxth	r3, r3
  405db6:	3b08      	subs	r3, #8
  405db8:	429a      	cmp	r2, r3
							pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
  405dba:	bf88      	it	hi
  405dbc:	f8c9 301c 	strhi.w	r3, [r9, #28]
						pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
  405dc0:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
  405dc2:	f8a9 3020 	strh.w	r3, [r9, #32]
						pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
  405dc6:	f8d1 301a 	ldr.w	r3, [r1, #26]
  405dca:	f8c9 3014 	str.w	r3, [r9, #20]
						if( xProcessReceivedUDPPacket( pxNetworkBuffer,
  405dce:	8c89      	ldrh	r1, [r1, #36]	; 0x24
  405dd0:	4648      	mov	r0, r9
  405dd2:	4b36      	ldr	r3, [pc, #216]	; (405eac <prvIPTask+0x444>)
  405dd4:	4798      	blx	r3
  405dd6:	2801      	cmp	r0, #1
  405dd8:	f47f af16 	bne.w	405c08 <prvIPTask+0x1a0>
  405ddc:	e6a2      	b.n	405b24 <prvIPTask+0xbc>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
  405dde:	4648      	mov	r0, r9
  405de0:	4b33      	ldr	r3, [pc, #204]	; (405eb0 <prvIPTask+0x448>)
  405de2:	4798      	blx	r3
						eReturn = eFrameConsumed;
  405de4:	2801      	cmp	r0, #1
  405de6:	bf14      	ite	ne
  405de8:	2001      	movne	r0, #1
  405dea:	2003      	moveq	r0, #3
					xProcessedTCPMessage++;
  405dec:	4a31      	ldr	r2, [pc, #196]	; (405eb4 <prvIPTask+0x44c>)
  405dee:	6813      	ldr	r3, [r2, #0]
  405df0:	3301      	adds	r3, #1
  405df2:	6013      	str	r3, [r2, #0]
  405df4:	e000      	b.n	405df8 <prvIPTask+0x390>
				eReturned = eReleaseBuffer;
  405df6:	2000      	movs	r0, #0
	switch( eReturned )
  405df8:	2802      	cmp	r0, #2
  405dfa:	f43f af74 	beq.w	405ce6 <prvIPTask+0x27e>
  405dfe:	2803      	cmp	r0, #3
  405e00:	f43f ae90 	beq.w	405b24 <prvIPTask+0xbc>
  405e04:	e700      	b.n	405c08 <prvIPTask+0x1a0>
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
  405e06:	2000      	movs	r0, #0
  405e08:	e7f6      	b.n	405df8 <prvIPTask+0x390>
				vARPAgeCache();
  405e0a:	4b2b      	ldr	r3, [pc, #172]	; (405eb8 <prvIPTask+0x450>)
  405e0c:	4798      	blx	r3
				break;
  405e0e:	e689      	b.n	405b24 <prvIPTask+0xbc>
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
  405e10:	f8dd 901c 	ldr.w	r9, [sp, #28]
				xAddress.sin_addr = 0u;	/* For the moment. */
  405e14:	2300      	movs	r3, #0
  405e16:	9305      	str	r3, [sp, #20]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
  405e18:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
  405e1c:	0a0a      	lsrs	r2, r1, #8
  405e1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  405e22:	f8ad 2012 	strh.w	r2, [sp, #18]
				pxSocket->usLocalPort = 0u;
  405e26:	f8a9 3024 	strh.w	r3, [r9, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
  405e2a:	2208      	movs	r2, #8
  405e2c:	a904      	add	r1, sp, #16
  405e2e:	4648      	mov	r0, r9
  405e30:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 405ee0 <prvIPTask+0x478>
  405e34:	47d8      	blx	fp
				pxSocket->xEventBits |= eSOCKET_BOUND;
  405e36:	f8d9 3000 	ldr.w	r3, [r9]
  405e3a:	f043 0310 	orr.w	r3, r3, #16
  405e3e:	f8c9 3000 	str.w	r3, [r9]
				vSocketWakeUpUser( pxSocket );
  405e42:	4648      	mov	r0, r9
  405e44:	4b1d      	ldr	r3, [pc, #116]	; (405ebc <prvIPTask+0x454>)
  405e46:	4798      	blx	r3
				break;
  405e48:	e66c      	b.n	405b24 <prvIPTask+0xbc>
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
  405e4a:	9807      	ldr	r0, [sp, #28]
  405e4c:	4b1c      	ldr	r3, [pc, #112]	; (405ec0 <prvIPTask+0x458>)
  405e4e:	4798      	blx	r3
				break;
  405e50:	e668      	b.n	405b24 <prvIPTask+0xbc>
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
  405e52:	9807      	ldr	r0, [sp, #28]
  405e54:	4b1b      	ldr	r3, [pc, #108]	; (405ec4 <prvIPTask+0x45c>)
  405e56:	4798      	blx	r3
				break;
  405e58:	e664      	b.n	405b24 <prvIPTask+0xbc>
					vDHCPProcess( pdFALSE );
  405e5a:	2000      	movs	r0, #0
  405e5c:	4b1a      	ldr	r3, [pc, #104]	; (405ec8 <prvIPTask+0x460>)
  405e5e:	4798      	blx	r3
				break;
  405e60:	e660      	b.n	405b24 <prvIPTask+0xbc>
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
  405e62:	9807      	ldr	r0, [sp, #28]
  405e64:	4b19      	ldr	r3, [pc, #100]	; (405ecc <prvIPTask+0x464>)
  405e66:	4798      	blx	r3
				break;
  405e68:	e65c      	b.n	405b24 <prvIPTask+0xbc>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
  405e6a:	7823      	ldrb	r3, [r4, #0]
  405e6c:	f043 0302 	orr.w	r3, r3, #2
  405e70:	7023      	strb	r3, [r4, #0]
				break;
  405e72:	e657      	b.n	405b24 <prvIPTask+0xbc>
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
  405e74:	f8dd 901c 	ldr.w	r9, [sp, #28]
					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
  405e78:	4648      	mov	r0, r9
  405e7a:	4b15      	ldr	r3, [pc, #84]	; (405ed0 <prvIPTask+0x468>)
  405e7c:	4798      	blx	r3
  405e7e:	2800      	cmp	r0, #0
  405e80:	f43f ae50 	beq.w	405b24 <prvIPTask+0xbc>
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
  405e84:	f8d9 3000 	ldr.w	r3, [r9]
  405e88:	f043 0304 	orr.w	r3, r3, #4
  405e8c:	f8c9 3000 	str.w	r3, [r9]
						vSocketWakeUpUser( pxSocket );
  405e90:	4648      	mov	r0, r9
  405e92:	4b0a      	ldr	r3, [pc, #40]	; (405ebc <prvIPTask+0x454>)
  405e94:	4798      	blx	r3
  405e96:	e645      	b.n	405b24 <prvIPTask+0xbc>
					vTCPNetStat();
  405e98:	4b0e      	ldr	r3, [pc, #56]	; (405ed4 <prvIPTask+0x46c>)
  405e9a:	4798      	blx	r3
				break;
  405e9c:	e642      	b.n	405b24 <prvIPTask+0xbc>
			FreeRTOS_NetworkDown();
  405e9e:	47d0      	blx	sl
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
  405ea0:	4d0d      	ldr	r5, [pc, #52]	; (405ed8 <prvIPTask+0x470>)
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
  405ea2:	4f0e      	ldr	r7, [pc, #56]	; (405edc <prvIPTask+0x474>)
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
  405ea4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 405ee4 <prvIPTask+0x47c>
  405ea8:	e641      	b.n	405b2e <prvIPTask+0xc6>
  405eaa:	bf00      	nop
  405eac:	00409b79 	.word	0x00409b79
  405eb0:	00407fa1 	.word	0x00407fa1
  405eb4:	20006d44 	.word	0x20006d44
  405eb8:	00404519 	.word	0x00404519
  405ebc:	004066bd 	.word	0x004066bd
  405ec0:	0040657d 	.word	0x0040657d
  405ec4:	00409a6d 	.word	0x00409a6d
  405ec8:	00404ae1 	.word	0x00404ae1
  405ecc:	00406d31 	.word	0x00406d31
  405ed0:	00408e61 	.word	0x00408e61
  405ed4:	00406be5 	.word	0x00406be5
  405ed8:	20006cdc 	.word	0x20006cdc
  405edc:	20006cf4 	.word	0x20006cf4
  405ee0:	0040641d 	.word	0x0040641d
  405ee4:	20006d3c 	.word	0x20006d3c

00405ee8 <vIPSetDHCPTimerEnableState>:
		if( xEnableState != pdFALSE )
  405ee8:	b928      	cbnz	r0, 405ef6 <vIPSetDHCPTimerEnableState+0xe>
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
  405eea:	4b06      	ldr	r3, [pc, #24]	; (405f04 <vIPSetDHCPTimerEnableState+0x1c>)
  405eec:	781a      	ldrb	r2, [r3, #0]
  405eee:	f36f 0200 	bfc	r2, #0, #1
  405ef2:	701a      	strb	r2, [r3, #0]
  405ef4:	4770      	bx	lr
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
  405ef6:	4a03      	ldr	r2, [pc, #12]	; (405f04 <vIPSetDHCPTimerEnableState+0x1c>)
  405ef8:	7813      	ldrb	r3, [r2, #0]
  405efa:	f043 0301 	orr.w	r3, r3, #1
  405efe:	7013      	strb	r3, [r2, #0]
  405f00:	4770      	bx	lr
  405f02:	bf00      	nop
  405f04:	20006cf4 	.word	0x20006cf4

00405f08 <vIPReloadDHCPTimer>:
	{
  405f08:	b538      	push	{r3, r4, r5, lr}
  405f0a:	4604      	mov	r4, r0
	pxTimer->ulReloadTime = xTime;
  405f0c:	4d0b      	ldr	r5, [pc, #44]	; (405f3c <vIPReloadDHCPTimer+0x34>)
  405f0e:	6128      	str	r0, [r5, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
  405f10:	1d28      	adds	r0, r5, #4
  405f12:	4b0b      	ldr	r3, [pc, #44]	; (405f40 <vIPReloadDHCPTimer+0x38>)
  405f14:	4798      	blx	r3
	pxTimer->ulRemainingTime = xTime;
  405f16:	60ec      	str	r4, [r5, #12]
	if( xTime == ( TickType_t ) 0 )
  405f18:	b154      	cbz	r4, 405f30 <vIPReloadDHCPTimer+0x28>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
  405f1a:	4b08      	ldr	r3, [pc, #32]	; (405f3c <vIPReloadDHCPTimer+0x34>)
  405f1c:	781a      	ldrb	r2, [r3, #0]
  405f1e:	f36f 0241 	bfc	r2, #1, #1
  405f22:	701a      	strb	r2, [r3, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
  405f24:	4a05      	ldr	r2, [pc, #20]	; (405f3c <vIPReloadDHCPTimer+0x34>)
  405f26:	7813      	ldrb	r3, [r2, #0]
  405f28:	f043 0301 	orr.w	r3, r3, #1
  405f2c:	7013      	strb	r3, [r2, #0]
  405f2e:	bd38      	pop	{r3, r4, r5, pc}
		pxTimer->bExpired = pdTRUE_UNSIGNED;
  405f30:	782b      	ldrb	r3, [r5, #0]
  405f32:	f043 0302 	orr.w	r3, r3, #2
  405f36:	702b      	strb	r3, [r5, #0]
  405f38:	e7f4      	b.n	405f24 <vIPReloadDHCPTimer+0x1c>
  405f3a:	bf00      	nop
  405f3c:	20006cf4 	.word	0x20006cf4
  405f40:	0040ba55 	.word	0x0040ba55

00405f44 <xIPIsNetworkTaskReady>:
}
  405f44:	4b01      	ldr	r3, [pc, #4]	; (405f4c <xIPIsNetworkTaskReady+0x8>)
  405f46:	6818      	ldr	r0, [r3, #0]
  405f48:	4770      	bx	lr
  405f4a:	bf00      	nop
  405f4c:	20006d20 	.word	0x20006d20

00405f50 <prvValidSocket>:

static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
BaseType_t xReturn = pdTRUE;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
  405f50:	1e43      	subs	r3, r0, #1
  405f52:	f113 0f03 	cmn.w	r3, #3
  405f56:	d80a      	bhi.n	405f6e <prvValidSocket+0x1e>
	{
		xReturn = pdFALSE;
	}
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
  405f58:	b10a      	cbz	r2, 405f5e <prvValidSocket+0xe>
  405f5a:	6983      	ldr	r3, [r0, #24]
  405f5c:	b14b      	cbz	r3, 405f72 <prvValidSocket+0x22>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
  405f5e:	f890 0027 	ldrb.w	r0, [r0, #39]	; 0x27
  405f62:	b2c9      	uxtb	r1, r1
  405f64:	4288      	cmp	r0, r1
  405f66:	bf14      	ite	ne
  405f68:	2000      	movne	r0, #0
  405f6a:	2001      	moveq	r0, #1
  405f6c:	4770      	bx	lr
		xReturn = pdFALSE;
  405f6e:	2000      	movs	r0, #0
  405f70:	4770      	bx	lr
		xReturn = pdFALSE;
  405f72:	2000      	movs	r0, #0
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
	}

	return xReturn;
}
  405f74:	4770      	bx	lr
	...

00405f78 <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
  405f78:	b538      	push	{r3, r4, r5, lr}
  405f7a:	4605      	mov	r5, r0
  405f7c:	460c      	mov	r4, r1
const ListItem_t * pxResult = NULL;

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
  405f7e:	4b0e      	ldr	r3, [pc, #56]	; (405fb8 <pxListFindListItemWithValue+0x40>)
  405f80:	4798      	blx	r3
  405f82:	b190      	cbz	r0, 405faa <pxListFindListItemWithValue+0x32>
  405f84:	b19d      	cbz	r5, 405fae <pxListFindListItemWithValue+0x36>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
  405f86:	f105 0208 	add.w	r2, r5, #8
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  405f8a:	68e8      	ldr	r0, [r5, #12]
  405f8c:	4282      	cmp	r2, r0
  405f8e:	d010      	beq.n	405fb2 <pxListFindListItemWithValue+0x3a>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
  405f90:	6803      	ldr	r3, [r0, #0]
  405f92:	429c      	cmp	r4, r3
  405f94:	d006      	beq.n	405fa4 <pxListFindListItemWithValue+0x2c>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
  405f96:	6840      	ldr	r0, [r0, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  405f98:	4282      	cmp	r2, r0
  405f9a:	d004      	beq.n	405fa6 <pxListFindListItemWithValue+0x2e>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
  405f9c:	6803      	ldr	r3, [r0, #0]
  405f9e:	42a3      	cmp	r3, r4
  405fa0:	d1f9      	bne.n	405f96 <pxListFindListItemWithValue+0x1e>
			}
		}
	}

	return pxResult;
} /* Tested */
  405fa2:	bd38      	pop	{r3, r4, r5, pc}
  405fa4:	bd38      	pop	{r3, r4, r5, pc}
const ListItem_t * pxResult = NULL;
  405fa6:	2000      	movs	r0, #0
  405fa8:	bd38      	pop	{r3, r4, r5, pc}
  405faa:	2000      	movs	r0, #0
  405fac:	bd38      	pop	{r3, r4, r5, pc}
  405fae:	2000      	movs	r0, #0
  405fb0:	bd38      	pop	{r3, r4, r5, pc}
  405fb2:	2000      	movs	r0, #0
	return pxResult;
  405fb4:	e7f5      	b.n	405fa2 <pxListFindListItemWithValue+0x2a>
  405fb6:	bf00      	nop
  405fb8:	00405f45 	.word	0x00405f45

00405fbc <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
  405fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405fc0:	4606      	mov	r6, r0
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
  405fc2:	4688      	mov	r8, r1
  405fc4:	b189      	cbz	r1, 405fea <prvTCPCreateStream+0x2e>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
  405fc6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
  405fc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
  405fca:	b92b      	cbnz	r3, 405fd8 <prvTCPCreateStream+0x1c>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
  405fcc:	f1a3 3333 	sub.w	r3, r3, #858993459	; 0x33333333
  405fd0:	fba3 2304 	umull	r2, r3, r3, r4
  405fd4:	089b      	lsrs	r3, r3, #2
  405fd6:	6643      	str	r3, [r0, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
  405fd8:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  405fda:	b93b      	cbnz	r3, 405fec <prvTCPCreateStream+0x30>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
  405fdc:	00a3      	lsls	r3, r4, #2
  405fde:	4a1d      	ldr	r2, [pc, #116]	; (406054 <prvTCPCreateStream+0x98>)
  405fe0:	fba2 2303 	umull	r2, r3, r2, r3
  405fe4:	089b      	lsrs	r3, r3, #2
  405fe6:	66b3      	str	r3, [r6, #104]	; 0x68
  405fe8:	e000      	b.n	405fec <prvTCPCreateStream+0x30>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
  405fea:	6f04      	ldr	r4, [r0, #112]	; 0x70
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
  405fec:	3404      	adds	r4, #4

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
  405fee:	f024 0403 	bic.w	r4, r4, #3

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
  405ff2:	f104 0714 	add.w	r7, r4, #20

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
  405ff6:	4638      	mov	r0, r7
  405ff8:	4b17      	ldr	r3, [pc, #92]	; (406058 <prvTCPCreateStream+0x9c>)
  405ffa:	4798      	blx	r3

		if( pxBuffer == NULL )
  405ffc:	4605      	mov	r5, r0
  405ffe:	b1c8      	cbz	r0, 406034 <prvTCPCreateStream+0x78>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
  406000:	2300      	movs	r3, #0
  406002:	6003      	str	r3, [r0, #0]
  406004:	6043      	str	r3, [r0, #4]
  406006:	6083      	str	r3, [r0, #8]
  406008:	60c3      	str	r3, [r0, #12]
			pxBuffer->LENGTH = ( size_t ) uxLength ;
  40600a:	6104      	str	r4, [r0, #16]

			if( xTCPWindowLoggingLevel != 0 )
  40600c:	4b13      	ldr	r3, [pc, #76]	; (40605c <prvTCPCreateStream+0xa0>)
  40600e:	681b      	ldr	r3, [r3, #0]
  406010:	b14b      	cbz	r3, 406026 <prvTCPCreateStream+0x6a>
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
  406012:	f1b8 0f00 	cmp.w	r8, #0
  406016:	463b      	mov	r3, r7
  406018:	4622      	mov	r2, r4
  40601a:	bf14      	ite	ne
  40601c:	2152      	movne	r1, #82	; 0x52
  40601e:	2154      	moveq	r1, #84	; 0x54
  406020:	480f      	ldr	r0, [pc, #60]	; (406060 <prvTCPCreateStream+0xa4>)
  406022:	4c10      	ldr	r4, [pc, #64]	; (406064 <prvTCPCreateStream+0xa8>)
  406024:	47a0      	blx	r4
			}

			if( xIsInputStream != 0 )
  406026:	f1b8 0f00 	cmp.w	r8, #0
  40602a:	d111      	bne.n	406050 <prvTCPCreateStream+0x94>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
  40602c:	67b5      	str	r5, [r6, #120]	; 0x78
			}
		}

		return pxBuffer;
	}
  40602e:	4628      	mov	r0, r5
  406030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
  406034:	480c      	ldr	r0, [pc, #48]	; (406068 <prvTCPCreateStream+0xac>)
  406036:	4b0b      	ldr	r3, [pc, #44]	; (406064 <prvTCPCreateStream+0xa8>)
  406038:	4798      	blx	r3
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
  40603a:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
  40603e:	f043 0308 	orr.w	r3, r3, #8
  406042:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
  406046:	2108      	movs	r1, #8
  406048:	4630      	mov	r0, r6
  40604a:	4b08      	ldr	r3, [pc, #32]	; (40606c <prvTCPCreateStream+0xb0>)
  40604c:	4798      	blx	r3
  40604e:	e7ee      	b.n	40602e <prvTCPCreateStream+0x72>
				pxSocket->u.xTCP.rxStream = pxBuffer;
  406050:	6775      	str	r5, [r6, #116]	; 0x74
  406052:	e7ec      	b.n	40602e <prvTCPCreateStream+0x72>
  406054:	cccccccd 	.word	0xcccccccd
  406058:	0040a0a1 	.word	0x0040a0a1
  40605c:	20006d84 	.word	0x20006d84
  406060:	004130e8 	.word	0x004130e8
  406064:	0040c351 	.word	0x0040c351
  406068:	004130c4 	.word	0x004130c4
  40606c:	004074f5 	.word	0x004074f5

00406070 <vNetworkSocketsInit>:
{
  406070:	b510      	push	{r4, lr}
	vListInitialise( &xBoundUDPSocketsList );
  406072:	4803      	ldr	r0, [pc, #12]	; (406080 <vNetworkSocketsInit+0x10>)
  406074:	4c03      	ldr	r4, [pc, #12]	; (406084 <vNetworkSocketsInit+0x14>)
  406076:	47a0      	blx	r4
		vListInitialise( &xBoundTCPSocketsList );
  406078:	4803      	ldr	r0, [pc, #12]	; (406088 <vNetworkSocketsInit+0x18>)
  40607a:	47a0      	blx	r4
}
  40607c:	2001      	movs	r0, #1
  40607e:	bd10      	pop	{r4, pc}
  406080:	20013480 	.word	0x20013480
  406084:	00409c5d 	.word	0x00409c5d
  406088:	2001346c 	.word	0x2001346c

0040608c <FreeRTOS_socket>:
{
  40608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40608e:	460c      	mov	r4, r1
  406090:	4615      	mov	r5, r2
	if( xIPIsNetworkTaskReady() == pdFALSE )
  406092:	4b39      	ldr	r3, [pc, #228]	; (406178 <FreeRTOS_socket+0xec>)
  406094:	4798      	blx	r3
  406096:	2800      	cmp	r0, #0
  406098:	d064      	beq.n	406164 <FreeRTOS_socket+0xd8>
		if( xProtocol == FREERTOS_IPPROTO_UDP )
  40609a:	2d11      	cmp	r5, #17
  40609c:	d004      	beq.n	4060a8 <FreeRTOS_socket+0x1c>
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
  40609e:	2d06      	cmp	r5, #6
  4060a0:	d02d      	beq.n	4060fe <FreeRTOS_socket+0x72>
		xReturn = FREERTOS_INVALID_SOCKET;
  4060a2:	f04f 30ff 	mov.w	r0, #4294967295
  4060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xType != FREERTOS_SOCK_DGRAM )
  4060a8:	2c02      	cmp	r4, #2
  4060aa:	bf14      	ite	ne
  4060ac:	2400      	movne	r4, #0
  4060ae:	2401      	moveq	r4, #1
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
  4060b0:	264c      	movs	r6, #76	; 0x4c
	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
  4060b2:	2c00      	cmp	r4, #0
  4060b4:	d059      	beq.n	40616a <FreeRTOS_socket+0xde>
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
  4060b6:	4630      	mov	r0, r6
  4060b8:	4b30      	ldr	r3, [pc, #192]	; (40617c <FreeRTOS_socket+0xf0>)
  4060ba:	4798      	blx	r3
		if( pxSocket == NULL )
  4060bc:	4604      	mov	r4, r0
  4060be:	2800      	cmp	r0, #0
  4060c0:	d056      	beq.n	406170 <FreeRTOS_socket+0xe4>
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
  4060c2:	4b2f      	ldr	r3, [pc, #188]	; (406180 <FreeRTOS_socket+0xf4>)
  4060c4:	4798      	blx	r3
  4060c6:	4607      	mov	r7, r0
  4060c8:	b300      	cbz	r0, 40610c <FreeRTOS_socket+0x80>
			memset( pxSocket, '\0', uxSocketSize );
  4060ca:	4632      	mov	r2, r6
  4060cc:	2100      	movs	r1, #0
  4060ce:	4620      	mov	r0, r4
  4060d0:	4b2c      	ldr	r3, [pc, #176]	; (406184 <FreeRTOS_socket+0xf8>)
  4060d2:	4798      	blx	r3
			pxSocket->xEventGroup = xEventGroup;
  4060d4:	6067      	str	r7, [r4, #4]
			if( xProtocol == FREERTOS_IPPROTO_UDP )
  4060d6:	2d11      	cmp	r5, #17
  4060d8:	d01e      	beq.n	406118 <FreeRTOS_socket+0x8c>
			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
  4060da:	f104 0008 	add.w	r0, r4, #8
  4060de:	4b2a      	ldr	r3, [pc, #168]	; (406188 <FreeRTOS_socket+0xfc>)
  4060e0:	4798      	blx	r3
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
  4060e2:	6164      	str	r4, [r4, #20]
			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
  4060e4:	f241 3388 	movw	r3, #5000	; 0x1388
  4060e8:	61e3      	str	r3, [r4, #28]
			pxSocket->xSendBlockTime	= ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
  4060ea:	6223      	str	r3, [r4, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
  4060ec:	2302      	movs	r3, #2
  4060ee:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
  4060f2:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
				if( xProtocol == FREERTOS_IPPROTO_TCP )
  4060f6:	2d06      	cmp	r5, #6
  4060f8:	d023      	beq.n	406142 <FreeRTOS_socket+0xb6>
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
  4060fa:	4620      	mov	r0, r4
}
  4060fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xType != FREERTOS_SOCK_STREAM )
  4060fe:	2c01      	cmp	r4, #1
  406100:	bf14      	ite	ne
  406102:	2400      	movne	r4, #0
  406104:	2401      	moveq	r4, #1
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
  406106:	f44f 76d0 	mov.w	r6, #416	; 0x1a0
  40610a:	e7d2      	b.n	4060b2 <FreeRTOS_socket+0x26>
			vPortFreeSocket( pxSocket );
  40610c:	4620      	mov	r0, r4
  40610e:	4b1f      	ldr	r3, [pc, #124]	; (40618c <FreeRTOS_socket+0x100>)
  406110:	4798      	blx	r3
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
  406112:	f04f 30ff 	mov.w	r0, #4294967295
  406116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
  406118:	f104 0038 	add.w	r0, r4, #56	; 0x38
  40611c:	4b1c      	ldr	r3, [pc, #112]	; (406190 <FreeRTOS_socket+0x104>)
  40611e:	4798      	blx	r3
			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
  406120:	f104 0008 	add.w	r0, r4, #8
  406124:	4b18      	ldr	r3, [pc, #96]	; (406188 <FreeRTOS_socket+0xfc>)
  406126:	4798      	blx	r3
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
  406128:	6164      	str	r4, [r4, #20]
			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
  40612a:	f241 3388 	movw	r3, #5000	; 0x1388
  40612e:	61e3      	str	r3, [r4, #28]
			pxSocket->xSendBlockTime	= ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
  406130:	6223      	str	r3, [r4, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
  406132:	2302      	movs	r3, #2
  406134:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
  406138:	2311      	movs	r3, #17
  40613a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
  40613e:	4620      	mov	r0, r4
  406140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxSocket->u.xTCP.usInitMSS	= pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
  406142:	f44f 6391 	mov.w	r3, #1160	; 0x488
  406146:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  40614a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
  40614e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  406152:	66e2      	str	r2, [r4, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
  406154:	6723      	str	r3, [r4, #112]	; 0x70
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
  406156:	2301      	movs	r3, #1
  406158:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
  40615c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
  406160:	4620      	mov	r0, r4
  406162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xReturn = FREERTOS_INVALID_SOCKET;
  406164:	f04f 30ff 	mov.w	r0, #4294967295
  406168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40616a:	f04f 30ff 	mov.w	r0, #4294967295
  40616e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
  406170:	f04f 30ff 	mov.w	r0, #4294967295
  406174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406176:	bf00      	nop
  406178:	00405f45 	.word	0x00405f45
  40617c:	0040a0a1 	.word	0x0040a0a1
  406180:	00404009 	.word	0x00404009
  406184:	0040c5d5 	.word	0x0040c5d5
  406188:	00409c73 	.word	0x00409c73
  40618c:	0040a1b9 	.word	0x0040a1b9
  406190:	00409c5d 	.word	0x00409c5d

00406194 <FreeRTOS_recvfrom>:
{
  406194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406198:	b087      	sub	sp, #28
  40619a:	4604      	mov	r4, r0
  40619c:	468a      	mov	sl, r1
  40619e:	4693      	mov	fp, r2
  4061a0:	461f      	mov	r7, r3
  4061a2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
  4061a6:	2300      	movs	r3, #0
  4061a8:	9305      	str	r3, [sp, #20]
	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
  4061aa:	2201      	movs	r2, #1
  4061ac:	2111      	movs	r1, #17
  4061ae:	4b31      	ldr	r3, [pc, #196]	; (406274 <FreeRTOS_recvfrom+0xe0>)
  4061b0:	4798      	blx	r3
  4061b2:	2800      	cmp	r0, #0
  4061b4:	d02c      	beq.n	406210 <FreeRTOS_recvfrom+0x7c>
	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
  4061b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	while( lPacketCount == 0 )
  4061b8:	2b00      	cmp	r3, #0
  4061ba:	d135      	bne.n	406228 <FreeRTOS_recvfrom+0x94>
			vTaskSetTimeOutState( &xTimeOut );
  4061bc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 406294 <FreeRTOS_recvfrom+0x100>
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
  4061c0:	4d2d      	ldr	r5, [pc, #180]	; (406278 <FreeRTOS_recvfrom+0xe4>)
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
  4061c2:	4e2e      	ldr	r6, [pc, #184]	; (40627c <FreeRTOS_recvfrom+0xe8>)
  4061c4:	e00d      	b.n	4061e2 <FreeRTOS_recvfrom+0x4e>
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
  4061c6:	9b05      	ldr	r3, [sp, #20]
  4061c8:	9300      	str	r3, [sp, #0]
  4061ca:	2300      	movs	r3, #0
  4061cc:	2201      	movs	r2, #1
  4061ce:	2141      	movs	r1, #65	; 0x41
  4061d0:	6860      	ldr	r0, [r4, #4]
  4061d2:	47a8      	blx	r5
		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
  4061d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( lPacketCount != 0 )
  4061d6:	bb3b      	cbnz	r3, 406228 <FreeRTOS_recvfrom+0x94>
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
  4061d8:	a905      	add	r1, sp, #20
  4061da:	a803      	add	r0, sp, #12
  4061dc:	47b0      	blx	r6
  4061de:	2301      	movs	r3, #1
  4061e0:	b9f8      	cbnz	r0, 406222 <FreeRTOS_recvfrom+0x8e>
		if( xTimed == pdFALSE )
  4061e2:	2b00      	cmp	r3, #0
  4061e4:	d1ef      	bne.n	4061c6 <FreeRTOS_recvfrom+0x32>
			xRemainingTime = pxSocket->xReceiveBlockTime;
  4061e6:	69e3      	ldr	r3, [r4, #28]
  4061e8:	9305      	str	r3, [sp, #20]
			if( xRemainingTime == ( TickType_t ) 0 )
  4061ea:	b1a3      	cbz	r3, 406216 <FreeRTOS_recvfrom+0x82>
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
  4061ec:	f017 0f10 	tst.w	r7, #16
  4061f0:	d114      	bne.n	40621c <FreeRTOS_recvfrom+0x88>
			vTaskSetTimeOutState( &xTimeOut );
  4061f2:	a803      	add	r0, sp, #12
  4061f4:	47c0      	blx	r8
  4061f6:	e7e6      	b.n	4061c6 <FreeRTOS_recvfrom+0x32>
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
  4061f8:	4620      	mov	r0, r4
  4061fa:	4b21      	ldr	r3, [pc, #132]	; (406280 <FreeRTOS_recvfrom+0xec>)
  4061fc:	4798      	blx	r3
  4061fe:	e01a      	b.n	406236 <FreeRTOS_recvfrom+0xa2>
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
  406200:	69a3      	ldr	r3, [r4, #24]
  406202:	332a      	adds	r3, #42	; 0x2a
  406204:	f8ca 3000 	str.w	r3, [sl]
}
  406208:	4628      	mov	r0, r5
  40620a:	b007      	add	sp, #28
  40620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -pdFREERTOS_ERRNO_EINVAL;
  406210:	f06f 0515 	mvn.w	r5, #21
  406214:	e7f8      	b.n	406208 <FreeRTOS_recvfrom+0x74>
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
  406216:	f06f 050a 	mvn.w	r5, #10
  40621a:	e7f5      	b.n	406208 <FreeRTOS_recvfrom+0x74>
  40621c:	f06f 050a 	mvn.w	r5, #10
  406220:	e7f2      	b.n	406208 <FreeRTOS_recvfrom+0x74>
  406222:	f06f 050a 	mvn.w	r5, #10
  406226:	e7ef      	b.n	406208 <FreeRTOS_recvfrom+0x74>
		taskENTER_CRITICAL();
  406228:	4b16      	ldr	r3, [pc, #88]	; (406284 <FreeRTOS_recvfrom+0xf0>)
  40622a:	4798      	blx	r3
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
  40622c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40622e:	68dc      	ldr	r4, [r3, #12]
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
  406230:	f017 0604 	ands.w	r6, r7, #4
  406234:	d0e0      	beq.n	4061f8 <FreeRTOS_recvfrom+0x64>
		taskEXIT_CRITICAL();
  406236:	4b14      	ldr	r3, [pc, #80]	; (406288 <FreeRTOS_recvfrom+0xf4>)
  406238:	4798      	blx	r3
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
  40623a:	69e5      	ldr	r5, [r4, #28]
		if( pxSourceAddress != NULL )
  40623c:	f1b9 0f00 	cmp.w	r9, #0
  406240:	d005      	beq.n	40624e <FreeRTOS_recvfrom+0xba>
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
  406242:	8c23      	ldrh	r3, [r4, #32]
  406244:	f8a9 3002 	strh.w	r3, [r9, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
  406248:	6963      	ldr	r3, [r4, #20]
  40624a:	f8c9 3004 	str.w	r3, [r9, #4]
		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
  40624e:	f017 0f01 	tst.w	r7, #1
  406252:	d1d5      	bne.n	406200 <FreeRTOS_recvfrom+0x6c>
  406254:	455d      	cmp	r5, fp
  406256:	bfa8      	it	ge
  406258:	465d      	movge	r5, fp
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
  40625a:	69a1      	ldr	r1, [r4, #24]
  40625c:	462a      	mov	r2, r5
  40625e:	312a      	adds	r1, #42	; 0x2a
  406260:	4650      	mov	r0, sl
  406262:	4b0a      	ldr	r3, [pc, #40]	; (40628c <FreeRTOS_recvfrom+0xf8>)
  406264:	4798      	blx	r3
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
  406266:	2e00      	cmp	r6, #0
  406268:	d1ce      	bne.n	406208 <FreeRTOS_recvfrom+0x74>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  40626a:	4620      	mov	r0, r4
  40626c:	4b08      	ldr	r3, [pc, #32]	; (406290 <FreeRTOS_recvfrom+0xfc>)
  40626e:	4798      	blx	r3
  406270:	e7ca      	b.n	406208 <FreeRTOS_recvfrom+0x74>
  406272:	bf00      	nop
  406274:	00405f51 	.word	0x00405f51
  406278:	0040402d 	.word	0x0040402d
  40627c:	0040ba99 	.word	0x0040ba99
  406280:	00409cc5 	.word	0x00409cc5
  406284:	00409f15 	.word	0x00409f15
  406288:	00409f35 	.word	0x00409f35
  40628c:	0040c3d9 	.word	0x0040c3d9
  406290:	00409d79 	.word	0x00409d79
  406294:	0040ba55 	.word	0x0040ba55

00406298 <FreeRTOS_bind>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
  406298:	1e43      	subs	r3, r0, #1
  40629a:	f113 0f03 	cmn.w	r3, #3
  40629e:	d836      	bhi.n	40630e <FreeRTOS_bind+0x76>
{
  4062a0:	b530      	push	{r4, r5, lr}
  4062a2:	b085      	sub	sp, #20
  4062a4:	4604      	mov	r4, r0
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
  4062a6:	6983      	ldr	r3, [r0, #24]
  4062a8:	bb0b      	cbnz	r3, 4062ee <FreeRTOS_bind+0x56>
		xBindEvent.eEventType = eSocketBindEvent;
  4062aa:	2308      	movs	r3, #8
  4062ac:	f88d 3008 	strb.w	r3, [sp, #8]
		xBindEvent.pvData = ( void * ) xSocket;
  4062b0:	9003      	str	r0, [sp, #12]
		if( pxAddress != NULL )
  4062b2:	b319      	cbz	r1, 4062fc <FreeRTOS_bind+0x64>
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
  4062b4:	884a      	ldrh	r2, [r1, #2]
  4062b6:	fa22 f303 	lsr.w	r3, r2, r3
  4062ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4062be:	8483      	strh	r3, [r0, #36]	; 0x24
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
  4062c0:	f04f 31ff 	mov.w	r1, #4294967295
  4062c4:	a802      	add	r0, sp, #8
  4062c6:	4b13      	ldr	r3, [pc, #76]	; (406314 <FreeRTOS_bind+0x7c>)
  4062c8:	4798      	blx	r3
  4062ca:	b1d0      	cbz	r0, 406302 <FreeRTOS_bind+0x6a>
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
  4062cc:	f04f 33ff 	mov.w	r3, #4294967295
  4062d0:	9300      	str	r3, [sp, #0]
  4062d2:	2300      	movs	r3, #0
  4062d4:	2201      	movs	r2, #1
  4062d6:	2110      	movs	r1, #16
  4062d8:	6860      	ldr	r0, [r4, #4]
  4062da:	4d0f      	ldr	r5, [pc, #60]	; (406318 <FreeRTOS_bind+0x80>)
  4062dc:	47a8      	blx	r5
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
  4062de:	69a3      	ldr	r3, [r4, #24]
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
  4062e0:	2b00      	cmp	r3, #0
  4062e2:	bf14      	ite	ne
  4062e4:	2000      	movne	r0, #0
  4062e6:	f06f 0015 	mvneq.w	r0, #21
}
  4062ea:	b005      	add	sp, #20
  4062ec:	bd30      	pop	{r4, r5, pc}
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
  4062ee:	8c81      	ldrh	r1, [r0, #36]	; 0x24
  4062f0:	480a      	ldr	r0, [pc, #40]	; (40631c <FreeRTOS_bind+0x84>)
  4062f2:	4b0b      	ldr	r3, [pc, #44]	; (406320 <FreeRTOS_bind+0x88>)
  4062f4:	4798      	blx	r3
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
  4062f6:	f06f 0015 	mvn.w	r0, #21
  4062fa:	e7f6      	b.n	4062ea <FreeRTOS_bind+0x52>
			pxSocket->usLocalPort = 0u;
  4062fc:	2300      	movs	r3, #0
  4062fe:	8483      	strh	r3, [r0, #36]	; 0x24
  406300:	e7de      	b.n	4062c0 <FreeRTOS_bind+0x28>
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
  406302:	4808      	ldr	r0, [pc, #32]	; (406324 <FreeRTOS_bind+0x8c>)
  406304:	4b06      	ldr	r3, [pc, #24]	; (406320 <FreeRTOS_bind+0x88>)
  406306:	4798      	blx	r3
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
  406308:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  40630c:	e7ed      	b.n	4062ea <FreeRTOS_bind+0x52>
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
  40630e:	f06f 0015 	mvn.w	r0, #21
  406312:	4770      	bx	lr
  406314:	00405685 	.word	0x00405685
  406318:	0040402d 	.word	0x0040402d
  40631c:	00412f60 	.word	0x00412f60
  406320:	0040c351 	.word	0x0040c351
  406324:	00412f8c 	.word	0x00412f8c

00406328 <FreeRTOS_sendto>:
{
  406328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40632c:	b087      	sub	sp, #28
  40632e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
  406330:	2603      	movs	r6, #3
  406332:	f88d 6010 	strb.w	r6, [sp, #16]
  406336:	2600      	movs	r6, #0
  406338:	9605      	str	r6, [sp, #20]
	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
  40633a:	f240 4694 	movw	r6, #1172	; 0x494
  40633e:	42b2      	cmp	r2, r6
  406340:	d853      	bhi.n	4063ea <FreeRTOS_sendto+0xc2>
  406342:	4699      	mov	r9, r3
  406344:	4616      	mov	r6, r2
  406346:	4688      	mov	r8, r1
  406348:	4604      	mov	r4, r0
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
  40634a:	6983      	ldr	r3, [r0, #24]
  40634c:	b313      	cbz	r3, 406394 <FreeRTOS_sendto+0x6c>
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
  40634e:	f019 0f10 	tst.w	r9, #16
			xTicksToWait = pxSocket->xSendBlockTime;
  406352:	bf0c      	ite	eq
  406354:	6a23      	ldreq	r3, [r4, #32]
				xTicksToWait = ( TickType_t ) 0;
  406356:	2300      	movne	r3, #0
  406358:	9301      	str	r3, [sp, #4]
			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
  40635a:	f019 0901 	ands.w	r9, r9, #1
  40635e:	d121      	bne.n	4063a4 <FreeRTOS_sendto+0x7c>
				vTaskSetTimeOutState( &xTimeOut );
  406360:	a802      	add	r0, sp, #8
  406362:	4b26      	ldr	r3, [pc, #152]	; (4063fc <FreeRTOS_sendto+0xd4>)
  406364:	4798      	blx	r3
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
  406366:	9901      	ldr	r1, [sp, #4]
  406368:	f106 002a 	add.w	r0, r6, #42	; 0x2a
  40636c:	4b24      	ldr	r3, [pc, #144]	; (406400 <FreeRTOS_sendto+0xd8>)
  40636e:	4798      	blx	r3
				if( pxNetworkBuffer != NULL )
  406370:	4605      	mov	r5, r0
  406372:	2800      	cmp	r0, #0
  406374:	d03d      	beq.n	4063f2 <FreeRTOS_sendto+0xca>
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
  406376:	6980      	ldr	r0, [r0, #24]
  406378:	4632      	mov	r2, r6
  40637a:	4641      	mov	r1, r8
  40637c:	302a      	adds	r0, #42	; 0x2a
  40637e:	4b21      	ldr	r3, [pc, #132]	; (406404 <FreeRTOS_sendto+0xdc>)
  406380:	4798      	blx	r3
					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
  406382:	a901      	add	r1, sp, #4
  406384:	a802      	add	r0, sp, #8
  406386:	4b20      	ldr	r3, [pc, #128]	; (406408 <FreeRTOS_sendto+0xe0>)
  406388:	4798      	blx	r3
  40638a:	2801      	cmp	r0, #1
  40638c:	d10f      	bne.n	4063ae <FreeRTOS_sendto+0x86>
						xTicksToWait = ( TickType_t ) 0;
  40638e:	2300      	movs	r3, #0
  406390:	9301      	str	r3, [sp, #4]
  406392:	e00c      	b.n	4063ae <FreeRTOS_sendto+0x86>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
  406394:	2200      	movs	r2, #0
  406396:	4611      	mov	r1, r2
  406398:	4b1c      	ldr	r3, [pc, #112]	; (40640c <FreeRTOS_sendto+0xe4>)
  40639a:	4798      	blx	r3
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
  40639c:	2800      	cmp	r0, #0
  40639e:	d0d6      	beq.n	40634e <FreeRTOS_sendto+0x26>
int32_t lReturn = 0;
  4063a0:	2000      	movs	r0, #0
  4063a2:	e023      	b.n	4063ec <FreeRTOS_sendto+0xc4>
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
  4063a4:	4640      	mov	r0, r8
  4063a6:	4b1a      	ldr	r3, [pc, #104]	; (406410 <FreeRTOS_sendto+0xe8>)
  4063a8:	4798      	blx	r3
			if( pxNetworkBuffer != NULL )
  4063aa:	4605      	mov	r5, r0
  4063ac:	b318      	cbz	r0, 4063f6 <FreeRTOS_sendto+0xce>
				pxNetworkBuffer->xDataLength = xTotalDataLength;
  4063ae:	61ee      	str	r6, [r5, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
  4063b0:	887b      	ldrh	r3, [r7, #2]
  4063b2:	842b      	strh	r3, [r5, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
  4063b4:	68a3      	ldr	r3, [r4, #8]
  4063b6:	846b      	strh	r3, [r5, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
  4063b8:	687b      	ldr	r3, [r7, #4]
  4063ba:	616b      	str	r3, [r5, #20]
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
  4063bc:	69ab      	ldr	r3, [r5, #24]
  4063be:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
  4063c2:	719a      	strb	r2, [r3, #6]
				xStackTxEvent.pvData = pxNetworkBuffer;
  4063c4:	9505      	str	r5, [sp, #20]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
  4063c6:	9901      	ldr	r1, [sp, #4]
  4063c8:	a804      	add	r0, sp, #16
  4063ca:	4b12      	ldr	r3, [pc, #72]	; (406414 <FreeRTOS_sendto+0xec>)
  4063cc:	4798      	blx	r3
  4063ce:	2801      	cmp	r0, #1
  4063d0:	d004      	beq.n	4063dc <FreeRTOS_sendto+0xb4>
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
  4063d2:	f1b9 0f00 	cmp.w	r9, #0
  4063d6:	d003      	beq.n	4063e0 <FreeRTOS_sendto+0xb8>
int32_t lReturn = 0;
  4063d8:	2000      	movs	r0, #0
	return lReturn;
  4063da:	e007      	b.n	4063ec <FreeRTOS_sendto+0xc4>
					lReturn = ( int32_t ) xTotalDataLength;
  4063dc:	4630      	mov	r0, r6
  4063de:	e005      	b.n	4063ec <FreeRTOS_sendto+0xc4>
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  4063e0:	4628      	mov	r0, r5
  4063e2:	4b0d      	ldr	r3, [pc, #52]	; (406418 <FreeRTOS_sendto+0xf0>)
  4063e4:	4798      	blx	r3
int32_t lReturn = 0;
  4063e6:	2000      	movs	r0, #0
  4063e8:	e000      	b.n	4063ec <FreeRTOS_sendto+0xc4>
  4063ea:	2000      	movs	r0, #0
} /* Tested */
  4063ec:	b007      	add	sp, #28
  4063ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
int32_t lReturn = 0;
  4063f2:	2000      	movs	r0, #0
  4063f4:	e7fa      	b.n	4063ec <FreeRTOS_sendto+0xc4>
  4063f6:	2000      	movs	r0, #0
  4063f8:	e7f8      	b.n	4063ec <FreeRTOS_sendto+0xc4>
  4063fa:	bf00      	nop
  4063fc:	0040ba55 	.word	0x0040ba55
  406400:	00409dd1 	.word	0x00409dd1
  406404:	0040c3d9 	.word	0x0040c3d9
  406408:	0040ba99 	.word	0x0040ba99
  40640c:	00406299 	.word	0x00406299
  406410:	004054ed 	.word	0x004054ed
  406414:	00405685 	.word	0x00405685
  406418:	00409d79 	.word	0x00409d79

0040641c <vSocketBind>:
{
  40641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406420:	b083      	sub	sp, #12
  406422:	4604      	mov	r4, r0
  406424:	4698      	mov	r8, r3
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406426:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
		pxSocketList = &xBoundUDPSocketsList;
  40642a:	4b39      	ldr	r3, [pc, #228]	; (406510 <vSocketBind+0xf4>)
  40642c:	4e39      	ldr	r6, [pc, #228]	; (406514 <vSocketBind+0xf8>)
  40642e:	2a06      	cmp	r2, #6
  406430:	bf18      	it	ne
  406432:	461e      	movne	r6, r3
		if( pxAddress == NULL )
  406434:	b1f9      	cbz	r1, 406476 <vSocketBind+0x5a>
  406436:	460d      	mov	r5, r1
		if( pxAddress->sin_port == 0u )
  406438:	884b      	ldrh	r3, [r1, #2]
  40643a:	b303      	cbz	r3, 40647e <vSocketBind+0x62>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
  40643c:	f1b8 0f00 	cmp.w	r8, #0
  406440:	d003      	beq.n	40644a <vSocketBind+0x2e>
  406442:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
  406446:	2b06      	cmp	r3, #6
  406448:	d005      	beq.n	406456 <vSocketBind+0x3a>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
  40644a:	8869      	ldrh	r1, [r5, #2]
  40644c:	4630      	mov	r0, r6
  40644e:	4b32      	ldr	r3, [pc, #200]	; (406518 <vSocketBind+0xfc>)
  406450:	4798      	blx	r3
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
  406452:	2800      	cmp	r0, #0
  406454:	d145      	bne.n	4064e2 <vSocketBind+0xc6>
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
  406456:	886b      	ldrh	r3, [r5, #2]
  406458:	60a3      	str	r3, [r4, #8]
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
  40645a:	886a      	ldrh	r2, [r5, #2]
  40645c:	0a13      	lsrs	r3, r2, #8
  40645e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  406462:	84a3      	strh	r3, [r4, #36]	; 0x24
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
  406464:	f104 0108 	add.w	r1, r4, #8
  406468:	4630      	mov	r0, r6
  40646a:	4b2c      	ldr	r3, [pc, #176]	; (40651c <vSocketBind+0x100>)
  40646c:	4798      	blx	r3
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
  40646e:	2000      	movs	r0, #0
} /* Tested */
  406470:	b003      	add	sp, #12
  406472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxAddress->sin_port = 0u;
  406476:	2300      	movs	r3, #0
  406478:	f8ad 3002 	strh.w	r3, [sp, #2]
			pxAddress = &xAddress;
  40647c:	466d      	mov	r5, sp
  40647e:	f04f 0a00 	mov.w	sl, #0
  406482:	f44f 477c 	mov.w	r7, #64512	; 0xfc00
		ulRandomSeed = ipconfigRAND32( );
  406486:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 406534 <vSocketBind+0x118>
  40648a:	e019      	b.n	4064c0 <vSocketBind+0xa4>
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
  40648c:	b283      	uxth	r3, r0
  40648e:	0a9a      	lsrs	r2, r3, #10
  406490:	4923      	ldr	r1, [pc, #140]	; (406520 <vSocketBind+0x104>)
  406492:	fba1 1202 	umull	r1, r2, r1, r2
  406496:	0191      	lsls	r1, r2, #6
  406498:	1a8a      	subs	r2, r1, r2
  40649a:	eba3 2382 	sub.w	r3, r3, r2, lsl #10
		usResult =
  40649e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4064a2:	b29b      	uxth	r3, r3
			( TickType_t )FreeRTOS_htons( usResult ) ) )
  4064a4:	ea4f 2913 	mov.w	r9, r3, lsr #8
  4064a8:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
  4064ac:	fa1f f989 	uxth.w	r9, r9
		if( NULL == pxListFindListItemWithValue(
  4064b0:	4649      	mov	r1, r9
  4064b2:	4630      	mov	r0, r6
  4064b4:	4b18      	ldr	r3, [pc, #96]	; (406518 <vSocketBind+0xfc>)
  4064b6:	4798      	blx	r3
  4064b8:	b158      	cbz	r0, 4064d2 <vSocketBind+0xb6>
		usIterations--;
  4064ba:	3f01      	subs	r7, #1
  4064bc:	b2bf      	uxth	r7, r7
	while( usIterations > 0 );
  4064be:	b317      	cbz	r7, 406506 <vSocketBind+0xea>
		ulRandomSeed = ipconfigRAND32( );
  4064c0:	47d8      	blx	fp
		if( 0 == ulRandomSeed )
  4064c2:	2800      	cmp	r0, #0
  4064c4:	d1e2      	bne.n	40648c <vSocketBind+0x70>
			if( pdFALSE == xGotZeroOnce )
  4064c6:	f1ba 0f00 	cmp.w	sl, #0
  4064ca:	d11c      	bne.n	406506 <vSocketBind+0xea>
				xGotZeroOnce = pdTRUE;
  4064cc:	f04f 0a01 	mov.w	sl, #1
  4064d0:	e7f5      	b.n	4064be <vSocketBind+0xa2>
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t )pxSocket->ucProtocol );
  4064d2:	f8a5 9002 	strh.w	r9, [r5, #2]
			if( 0 == pxAddress->sin_port )
  4064d6:	f1b9 0f00 	cmp.w	r9, #0
  4064da:	d1af      	bne.n	40643c <vSocketBind+0x20>
				return -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
  4064dc:	f06f 007c 	mvn.w	r0, #124	; 0x7c
  4064e0:	e7c6      	b.n	406470 <vSocketBind+0x54>
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
  4064e2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
  4064e6:	886b      	ldrh	r3, [r5, #2]
  4064e8:	0a1a      	lsrs	r2, r3, #8
  4064ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  4064ee:	b292      	uxth	r2, r2
  4064f0:	4b0c      	ldr	r3, [pc, #48]	; (406524 <vSocketBind+0x108>)
  4064f2:	490d      	ldr	r1, [pc, #52]	; (406528 <vSocketBind+0x10c>)
  4064f4:	2806      	cmp	r0, #6
  4064f6:	bf18      	it	ne
  4064f8:	4619      	movne	r1, r3
  4064fa:	480c      	ldr	r0, [pc, #48]	; (40652c <vSocketBind+0x110>)
  4064fc:	4b0c      	ldr	r3, [pc, #48]	; (406530 <vSocketBind+0x114>)
  4064fe:	4798      	blx	r3
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
  406500:	f06f 006f 	mvn.w	r0, #111	; 0x6f
  406504:	e7b4      	b.n	406470 <vSocketBind+0x54>
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t )pxSocket->ucProtocol );
  406506:	2300      	movs	r3, #0
  406508:	806b      	strh	r3, [r5, #2]
				return -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
  40650a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
  40650e:	e7af      	b.n	406470 <vSocketBind+0x54>
  406510:	20013480 	.word	0x20013480
  406514:	2001346c 	.word	0x2001346c
  406518:	00405f79 	.word	0x00405f79
  40651c:	00409c79 	.word	0x00409c79
  406520:	04104114 	.word	0x04104114
  406524:	0041312c 	.word	0x0041312c
  406528:	00413128 	.word	0x00413128
  40652c:	00413130 	.word	0x00413130
  406530:	0040c351 	.word	0x0040c351
  406534:	0040bf89 	.word	0x0040bf89

00406538 <FreeRTOS_closesocket>:
{
  406538:	b500      	push	{lr}
  40653a:	b083      	sub	sp, #12
xCloseEvent.eEventType = eSocketCloseEvent;
  40653c:	2309      	movs	r3, #9
  40653e:	f88d 3000 	strb.w	r3, [sp]
xCloseEvent.pvData = ( void * ) xSocket;
  406542:	9001      	str	r0, [sp, #4]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
  406544:	3801      	subs	r0, #1
  406546:	f110 0f03 	cmn.w	r0, #3
  40654a:	d903      	bls.n	406554 <FreeRTOS_closesocket+0x1c>
		xResult = 0;
  40654c:	2000      	movs	r0, #0
}
  40654e:	b003      	add	sp, #12
  406550:	f85d fb04 	ldr.w	pc, [sp], #4
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
  406554:	2100      	movs	r1, #0
  406556:	4668      	mov	r0, sp
  406558:	4b05      	ldr	r3, [pc, #20]	; (406570 <FreeRTOS_closesocket+0x38>)
  40655a:	4798      	blx	r3
  40655c:	b108      	cbz	r0, 406562 <FreeRTOS_closesocket+0x2a>
			xResult = 1;
  40655e:	2001      	movs	r0, #1
	return xResult;
  406560:	e7f5      	b.n	40654e <FreeRTOS_closesocket+0x16>
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
  406562:	4804      	ldr	r0, [pc, #16]	; (406574 <FreeRTOS_closesocket+0x3c>)
  406564:	4b04      	ldr	r3, [pc, #16]	; (406578 <FreeRTOS_closesocket+0x40>)
  406566:	4798      	blx	r3
			xResult = -1;
  406568:	f04f 30ff 	mov.w	r0, #4294967295
  40656c:	e7ef      	b.n	40654e <FreeRTOS_closesocket+0x16>
  40656e:	bf00      	nop
  406570:	00405685 	.word	0x00405685
  406574:	00412fb0 	.word	0x00412fb0
  406578:	0040c351 	.word	0x0040c351

0040657c <vSocketClose>:
{
  40657c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40657e:	b083      	sub	sp, #12
  406580:	4604      	mov	r4, r0
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406582:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406586:	2b06      	cmp	r3, #6
  406588:	d014      	beq.n	4065b4 <vSocketClose+0x38>
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
  40658a:	69a3      	ldr	r3, [r4, #24]
  40658c:	2b00      	cmp	r3, #0
  40658e:	d148      	bne.n	406622 <vSocketClose+0xa6>
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
  406590:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
  406594:	2b11      	cmp	r3, #17
  406596:	d049      	beq.n	40662c <vSocketClose+0xb0>
	if( pxSocket->xEventGroup )
  406598:	6860      	ldr	r0, [r4, #4]
  40659a:	b108      	cbz	r0, 4065a0 <vSocketClose+0x24>
		vEventGroupDelete( pxSocket->xEventGroup );
  40659c:	4b34      	ldr	r3, [pc, #208]	; (406670 <vSocketClose+0xf4>)
  40659e:	4798      	blx	r3
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
  4065a0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
  4065a4:	2b06      	cmp	r3, #6
  4065a6:	d04f      	beq.n	406648 <vSocketClose+0xcc>
	vPortFreeSocket( pxSocket );
  4065a8:	4620      	mov	r0, r4
  4065aa:	4b32      	ldr	r3, [pc, #200]	; (406674 <vSocketClose+0xf8>)
  4065ac:	4798      	blx	r3
} /* Tested */
  4065ae:	2000      	movs	r0, #0
  4065b0:	b003      	add	sp, #12
  4065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
  4065b4:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  4065b6:	b108      	cbz	r0, 4065bc <vSocketClose+0x40>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
  4065b8:	4b2f      	ldr	r3, [pc, #188]	; (406678 <vSocketClose+0xfc>)
  4065ba:	4798      	blx	r3
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
  4065bc:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
  4065c0:	4b2e      	ldr	r3, [pc, #184]	; (40667c <vSocketClose+0x100>)
  4065c2:	4798      	blx	r3
			if( pxSocket->u.xTCP.rxStream != NULL )
  4065c4:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4065c6:	b108      	cbz	r0, 4065cc <vSocketClose+0x50>
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
  4065c8:	4b2a      	ldr	r3, [pc, #168]	; (406674 <vSocketClose+0xf8>)
  4065ca:	4798      	blx	r3
			if( pxSocket->u.xTCP.txStream != NULL )
  4065cc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  4065ce:	b108      	cbz	r0, 4065d4 <vSocketClose+0x58>
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
  4065d0:	4b28      	ldr	r3, [pc, #160]	; (406674 <vSocketClose+0xf8>)
  4065d2:	4798      	blx	r3
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
  4065d4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  4065d6:	4a2a      	ldr	r2, [pc, #168]	; (406680 <vSocketClose+0x104>)
  4065d8:	68d3      	ldr	r3, [r2, #12]
  4065da:	3208      	adds	r2, #8
  4065dc:	4293      	cmp	r3, r2
  4065de:	d0d4      	beq.n	40658a <vSocketClose+0xe>
  4065e0:	4615      	mov	r5, r2
  4065e2:	e002      	b.n	4065ea <vSocketClose+0x6e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
  4065e4:	685b      	ldr	r3, [r3, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  4065e6:	42ab      	cmp	r3, r5
  4065e8:	d0cf      	beq.n	40658a <vSocketClose+0xe>
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4065ea:	68d8      	ldr	r0, [r3, #12]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
  4065ec:	f890 2053 	ldrb.w	r2, [r0, #83]	; 0x53
  4065f0:	2a01      	cmp	r2, #1
  4065f2:	d1f7      	bne.n	4065e4 <vSocketClose+0x68>
  4065f4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
  4065f6:	428a      	cmp	r2, r1
  4065f8:	d1f4      	bne.n	4065e4 <vSocketClose+0x68>
				( pxOtherSocket->u.xTCP.usChildCount ) )
  4065fa:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
  4065fe:	2a00      	cmp	r2, #0
  406600:	d0f0      	beq.n	4065e4 <vSocketClose+0x68>
				pxOtherSocket->u.xTCP.usChildCount--;
  406602:	3a01      	subs	r2, #1
  406604:	b292      	uxth	r2, r2
  406606:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
  40660a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  40660e:	4d1d      	ldr	r5, [pc, #116]	; (406684 <vSocketClose+0x108>)
  406610:	481d      	ldr	r0, [pc, #116]	; (406688 <vSocketClose+0x10c>)
  406612:	2a01      	cmp	r2, #1
  406614:	bf18      	it	ne
  406616:	4628      	movne	r0, r5
  406618:	9000      	str	r0, [sp, #0]
  40661a:	481c      	ldr	r0, [pc, #112]	; (40668c <vSocketClose+0x110>)
  40661c:	4d1c      	ldr	r5, [pc, #112]	; (406690 <vSocketClose+0x114>)
  40661e:	47a8      	blx	r5
  406620:	e7b3      	b.n	40658a <vSocketClose+0xe>
		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
  406622:	f104 0008 	add.w	r0, r4, #8
  406626:	4b1b      	ldr	r3, [pc, #108]	; (406694 <vSocketClose+0x118>)
  406628:	4798      	blx	r3
  40662a:	e7b1      	b.n	406590 <vSocketClose+0x14>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
  40662c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40662e:	b1db      	cbz	r3, 406668 <vSocketClose+0xec>
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
  406630:	4f18      	ldr	r7, [pc, #96]	; (406694 <vSocketClose+0x118>)
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  406632:	4e11      	ldr	r6, [pc, #68]	; (406678 <vSocketClose+0xfc>)
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
  406634:	6c63      	ldr	r3, [r4, #68]	; 0x44
  406636:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
  406638:	4628      	mov	r0, r5
  40663a:	47b8      	blx	r7
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  40663c:	4628      	mov	r0, r5
  40663e:	47b0      	blx	r6
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
  406640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406642:	2b00      	cmp	r3, #0
  406644:	d1f6      	bne.n	406634 <vSocketClose+0xb8>
  406646:	e7a7      	b.n	406598 <vSocketClose+0x1c>
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
  406648:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
  40664a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  40664c:	8fa7      	ldrh	r7, [r4, #60]	; 0x3c
  40664e:	4b12      	ldr	r3, [pc, #72]	; (406698 <vSocketClose+0x11c>)
  406650:	4798      	blx	r3
  406652:	4b0b      	ldr	r3, [pc, #44]	; (406680 <vSocketClose+0x104>)
  406654:	681b      	ldr	r3, [r3, #0]
  406656:	9301      	str	r3, [sp, #4]
  406658:	9000      	str	r0, [sp, #0]
  40665a:	463b      	mov	r3, r7
  40665c:	4632      	mov	r2, r6
  40665e:	4629      	mov	r1, r5
  406660:	480e      	ldr	r0, [pc, #56]	; (40669c <vSocketClose+0x120>)
  406662:	4d0b      	ldr	r5, [pc, #44]	; (406690 <vSocketClose+0x114>)
  406664:	47a8      	blx	r5
  406666:	e79f      	b.n	4065a8 <vSocketClose+0x2c>
	if( pxSocket->xEventGroup )
  406668:	6860      	ldr	r0, [r4, #4]
  40666a:	2800      	cmp	r0, #0
  40666c:	d196      	bne.n	40659c <vSocketClose+0x20>
  40666e:	e79b      	b.n	4065a8 <vSocketClose+0x2c>
  406670:	004041b1 	.word	0x004041b1
  406674:	0040a1b9 	.word	0x0040a1b9
  406678:	00409d79 	.word	0x00409d79
  40667c:	00409201 	.word	0x00409201
  406680:	2001346c 	.word	0x2001346c
  406684:	00413154 	.word	0x00413154
  406688:	0041417c 	.word	0x0041417c
  40668c:	00413158 	.word	0x00413158
  406690:	0040c351 	.word	0x0040c351
  406694:	00409cc5 	.word	0x00409cc5
  406698:	00409e69 	.word	0x00409e69
  40669c:	00413184 	.word	0x00413184

004066a0 <pxUDPSocketLookup>:
{
  4066a0:	b508      	push	{r3, lr}
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
  4066a2:	4601      	mov	r1, r0
  4066a4:	4803      	ldr	r0, [pc, #12]	; (4066b4 <pxUDPSocketLookup+0x14>)
  4066a6:	4b04      	ldr	r3, [pc, #16]	; (4066b8 <pxUDPSocketLookup+0x18>)
  4066a8:	4798      	blx	r3
	if( pxListItem != NULL )
  4066aa:	b108      	cbz	r0, 4066b0 <pxUDPSocketLookup+0x10>
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
  4066ac:	68c0      	ldr	r0, [r0, #12]
  4066ae:	bd08      	pop	{r3, pc}
FreeRTOS_Socket_t *pxSocket = NULL;
  4066b0:	2000      	movs	r0, #0
}
  4066b2:	bd08      	pop	{r3, pc}
  4066b4:	20013480 	.word	0x20013480
  4066b8:	00405f79 	.word	0x00405f79

004066bc <vSocketWakeUpUser>:
{
  4066bc:	b510      	push	{r4, lr}
  4066be:	4604      	mov	r4, r0
		if( pxSocket->pxSocketSet != NULL )
  4066c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  4066c2:	b11b      	cbz	r3, 4066cc <vSocketWakeUpUser+0x10>
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
  4066c4:	6801      	ldr	r1, [r0, #0]
  4066c6:	f3c1 2103 	ubfx	r1, r1, #8, #4
			if( xSelectBits != 0ul )
  4066ca:	b949      	cbnz	r1, 4066e0 <vSocketWakeUpUser+0x24>
		pxSocket->xEventBits &= eSOCKET_ALL;
  4066cc:	6821      	ldr	r1, [r4, #0]
  4066ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  4066d2:	6021      	str	r1, [r4, #0]
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
  4066d4:	6860      	ldr	r0, [r4, #4]
  4066d6:	b100      	cbz	r0, 4066da <vSocketWakeUpUser+0x1e>
  4066d8:	b949      	cbnz	r1, 4066ee <vSocketWakeUpUser+0x32>
	pxSocket->xEventBits = 0ul;
  4066da:	2300      	movs	r3, #0
  4066dc:	6023      	str	r3, [r4, #0]
  4066de:	bd10      	pop	{r4, pc}
				pxSocket->xSocketBits |= xSelectBits;
  4066e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4066e2:	430a      	orrs	r2, r1
  4066e4:	6302      	str	r2, [r0, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
  4066e6:	6818      	ldr	r0, [r3, #0]
  4066e8:	4b02      	ldr	r3, [pc, #8]	; (4066f4 <vSocketWakeUpUser+0x38>)
  4066ea:	4798      	blx	r3
  4066ec:	e7ee      	b.n	4066cc <vSocketWakeUpUser+0x10>
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
  4066ee:	4b01      	ldr	r3, [pc, #4]	; (4066f4 <vSocketWakeUpUser+0x38>)
  4066f0:	4798      	blx	r3
  4066f2:	e7f2      	b.n	4066da <vSocketWakeUpUser+0x1e>
  4066f4:	00404129 	.word	0x00404129

004066f8 <xTCPTimerCheck>:
	{
  4066f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066fc:	4681      	mov	r9, r0
	TickType_t xNow = xTaskGetTickCount();
  4066fe:	4b21      	ldr	r3, [pc, #132]	; (406784 <xTCPTimerCheck+0x8c>)
  406700:	4798      	blx	r3
	TickType_t xDelta = xNow - xLastTime;
  406702:	4b21      	ldr	r3, [pc, #132]	; (406788 <xTCPTimerCheck+0x90>)
  406704:	681e      	ldr	r6, [r3, #0]
  406706:	1b86      	subs	r6, r0, r6
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
  406708:	4a20      	ldr	r2, [pc, #128]	; (40678c <xTCPTimerCheck+0x94>)
  40670a:	68d4      	ldr	r4, [r2, #12]
		xLastTime = xNow;
  40670c:	6018      	str	r0, [r3, #0]
			xDelta = 1u;
  40670e:	2e00      	cmp	r6, #0
  406710:	bf08      	it	eq
  406712:	2601      	moveq	r6, #1
		while( pxIterator != pxEnd )
  406714:	f102 0308 	add.w	r3, r2, #8
  406718:	429c      	cmp	r4, r3
  40671a:	d02d      	beq.n	406778 <xTCPTimerCheck+0x80>
  40671c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
					vSocketWakeUpUser( pxSocket );
  406720:	f8df b06c 	ldr.w	fp, [pc, #108]	; 406790 <xTCPTimerCheck+0x98>
				rc = xTCPSocketCheck( pxSocket );
  406724:	f8df a06c 	ldr.w	sl, [pc, #108]	; 406794 <xTCPTimerCheck+0x9c>
		while( pxIterator != pxEnd )
  406728:	461f      	mov	r7, r3
  40672a:	e011      	b.n	406750 <xTCPTimerCheck+0x58>
				pxSocket->u.xTCP.usTimeout = 0u;
  40672c:	2300      	movs	r3, #0
  40672e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
				rc = xTCPSocketCheck( pxSocket );
  406732:	4628      	mov	r0, r5
  406734:	47d0      	blx	sl
				if( rc < 0 )
  406736:	2800      	cmp	r0, #0
  406738:	da15      	bge.n	406766 <xTCPTimerCheck+0x6e>
  40673a:	e007      	b.n	40674c <xTCPTimerCheck+0x54>
					vSocketWakeUpUser( pxSocket );
  40673c:	4628      	mov	r0, r5
  40673e:	47d8      	blx	fp
			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
  406740:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
  406744:	b113      	cbz	r3, 40674c <xTCPTimerCheck+0x54>
  406746:	4598      	cmp	r8, r3
  406748:	bf28      	it	cs
  40674a:	4698      	movcs	r8, r3
		while( pxIterator != pxEnd )
  40674c:	42bc      	cmp	r4, r7
  40674e:	d015      	beq.n	40677c <xTCPTimerCheck+0x84>
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
  406750:	68e5      	ldr	r5, [r4, #12]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
  406752:	6864      	ldr	r4, [r4, #4]
			if( pxSocket->u.xTCP.usTimeout == 0u )
  406754:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
  406758:	2b00      	cmp	r3, #0
  40675a:	d0f7      	beq.n	40674c <xTCPTimerCheck+0x54>
			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
  40675c:	42b3      	cmp	r3, r6
  40675e:	d9e5      	bls.n	40672c <xTCPTimerCheck+0x34>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
  406760:	1b9b      	subs	r3, r3, r6
  406762:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
			if( pxSocket->xEventBits != 0u )
  406766:	682b      	ldr	r3, [r5, #0]
  406768:	2b00      	cmp	r3, #0
  40676a:	d0e9      	beq.n	406740 <xTCPTimerCheck+0x48>
				if( xWillSleep != pdFALSE )
  40676c:	f1b9 0f00 	cmp.w	r9, #0
  406770:	d1e4      	bne.n	40673c <xTCPTimerCheck+0x44>
					xShortest = ( TickType_t ) 0;
  406772:	f04f 0800 	mov.w	r8, #0
  406776:	e7e3      	b.n	406740 <xTCPTimerCheck+0x48>
		while( pxIterator != pxEnd )
  406778:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	}
  40677c:	4640      	mov	r0, r8
  40677e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406782:	bf00      	nop
  406784:	0040b649 	.word	0x0040b649
  406788:	20006d5c 	.word	0x20006d5c
  40678c:	2001346c 	.word	0x2001346c
  406790:	004066bd 	.word	0x004066bd
  406794:	00407aad 	.word	0x00407aad

00406798 <pxTCPSocketLookup>:
	{
  406798:	b4f0      	push	{r4, r5, r6, r7}
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
  40679a:	4811      	ldr	r0, [pc, #68]	; (4067e0 <pxTCPSocketLookup+0x48>)
  40679c:	68c4      	ldr	r4, [r0, #12]
  40679e:	3008      	adds	r0, #8
  4067a0:	4284      	cmp	r4, r0
  4067a2:	d01b      	beq.n	4067dc <pxTCPSocketLookup+0x44>
  4067a4:	2000      	movs	r0, #0
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
  4067a6:	b289      	uxth	r1, r1
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
  4067a8:	b29b      	uxth	r3, r3
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
  4067aa:	4f0e      	ldr	r7, [pc, #56]	; (4067e4 <pxTCPSocketLookup+0x4c>)
  4067ac:	e003      	b.n	4067b6 <pxTCPSocketLookup+0x1e>
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4067ae:	4628      	mov	r0, r5
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
  4067b0:	6864      	ldr	r4, [r4, #4]
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
  4067b2:	42bc      	cmp	r4, r7
  4067b4:	d010      	beq.n	4067d8 <pxTCPSocketLookup+0x40>
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4067b6:	68e5      	ldr	r5, [r4, #12]
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
  4067b8:	8cae      	ldrh	r6, [r5, #36]	; 0x24
  4067ba:	428e      	cmp	r6, r1
  4067bc:	d1f8      	bne.n	4067b0 <pxTCPSocketLookup+0x18>
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
  4067be:	f895 6053 	ldrb.w	r6, [r5, #83]	; 0x53
  4067c2:	2e01      	cmp	r6, #1
  4067c4:	d0f3      	beq.n	4067ae <pxTCPSocketLookup+0x16>
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
  4067c6:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
  4067c8:	429e      	cmp	r6, r3
  4067ca:	d1f1      	bne.n	4067b0 <pxTCPSocketLookup+0x18>
  4067cc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  4067ce:	4296      	cmp	r6, r2
  4067d0:	d1ee      	bne.n	4067b0 <pxTCPSocketLookup+0x18>
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4067d2:	2d00      	cmp	r5, #0
  4067d4:	bf18      	it	ne
  4067d6:	4628      	movne	r0, r5
	}
  4067d8:	bcf0      	pop	{r4, r5, r6, r7}
  4067da:	4770      	bx	lr
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
  4067dc:	2000      	movs	r0, #0
  4067de:	e7fb      	b.n	4067d8 <pxTCPSocketLookup+0x40>
  4067e0:	2001346c 	.word	0x2001346c
  4067e4:	20013474 	.word	0x20013474

004067e8 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
  4067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067ec:	b084      	sub	sp, #16
  4067ee:	4605      	mov	r5, r0
  4067f0:	460f      	mov	r7, r1
  4067f2:	4616      	mov	r6, r2
  4067f4:	4698      	mov	r8, r3
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
  4067f6:	6f44      	ldr	r4, [r0, #116]	; 0x74
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
  4067f8:	2c00      	cmp	r4, #0
  4067fa:	d043      	beq.n	406884 <lTCPAddRxdata+0x9c>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
  4067fc:	4643      	mov	r3, r8
  4067fe:	4632      	mov	r2, r6
  406800:	4639      	mov	r1, r7
  406802:	4620      	mov	r0, r4
  406804:	4e2d      	ldr	r6, [pc, #180]	; (4068bc <lTCPAddRxdata+0xd4>)
  406806:	47b0      	blx	r6
  406808:	4606      	mov	r6, r0

		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
		{
			if( xResult != ( int32_t ) ulByteCount )
  40680a:	4540      	cmp	r0, r8
  40680c:	d017      	beq.n	40683e <lTCPAddRxdata+0x56>
			{
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %ld: %ld/%lu bytes (tail %lu head %lu space %lu front %lu)\n",
  40680e:	6821      	ldr	r1, [r4, #0]
  406810:	68a0      	ldr	r0, [r4, #8]
{
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
  406812:	f8d4 e00c 	ldr.w	lr, [r4, #12]
size_t uxTail = pxBuffer->uxTail;
  406816:	6823      	ldr	r3, [r4, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  406818:	6922      	ldr	r2, [r4, #16]
  40681a:	4413      	add	r3, r2
  40681c:	3b01      	subs	r3, #1
  40681e:	eba3 030e 	sub.w	r3, r3, lr
	if( uxCount >= pxBuffer->LENGTH )
  406822:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
  406824:	bf98      	it	ls
  406826:	1a9b      	subls	r3, r3, r2
  406828:	68e2      	ldr	r2, [r4, #12]
  40682a:	9203      	str	r2, [sp, #12]
  40682c:	9302      	str	r3, [sp, #8]
  40682e:	9001      	str	r0, [sp, #4]
  406830:	9100      	str	r1, [sp, #0]
  406832:	4643      	mov	r3, r8
  406834:	4632      	mov	r2, r6
  406836:	4639      	mov	r1, r7
  406838:	4821      	ldr	r0, [pc, #132]	; (4068c0 <lTCPAddRxdata+0xd8>)
  40683a:	4c22      	ldr	r4, [pc, #136]	; (4068c4 <lTCPAddRxdata+0xdc>)
  40683c:	47a0      	blx	r4
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
  40683e:	b9ef      	cbnz	r7, 40687c <lTCPAddRxdata+0x94>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
  406840:	f995 3040 	ldrsb.w	r3, [r5, #64]	; 0x40
  406844:	2b00      	cmp	r3, #0
  406846:	db0c      	blt.n	406862 <lTCPAddRxdata+0x7a>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
  406848:	6f6a      	ldr	r2, [r5, #116]	; 0x74
size_t uxFront = pxBuffer->uxFront;
  40684a:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
  40684c:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  40684e:	6912      	ldr	r2, [r2, #16]
  406850:	4413      	add	r3, r2
  406852:	3b01      	subs	r3, #1
  406854:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
  406856:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
  406858:	bf98      	it	ls
  40685a:	1a9b      	subls	r3, r3, r2
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
  40685c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  40685e:	429a      	cmp	r2, r3
  406860:	d219      	bcs.n	406896 <lTCPAddRxdata+0xae>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
  406862:	682b      	ldr	r3, [r5, #0]
  406864:	f043 0201 	orr.w	r2, r3, #1
  406868:	602a      	str	r2, [r5, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
  40686a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40686c:	f012 0f01 	tst.w	r2, #1
  406870:	d004      	beq.n	40687c <lTCPAddRxdata+0x94>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
  406872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  406876:	f043 0301 	orr.w	r3, r3, #1
  40687a:	602b      	str	r3, [r5, #0]
				#endif
			}
		}

		return xResult;
	}
  40687c:	4630      	mov	r0, r6
  40687e:	b004      	add	sp, #16
  406880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
  406884:	2101      	movs	r1, #1
  406886:	4b10      	ldr	r3, [pc, #64]	; (4068c8 <lTCPAddRxdata+0xe0>)
  406888:	4798      	blx	r3
			if( pxStream == NULL )
  40688a:	4604      	mov	r4, r0
  40688c:	2800      	cmp	r0, #0
  40688e:	d1b5      	bne.n	4067fc <lTCPAddRxdata+0x14>
				return -1;
  406890:	f04f 36ff 	mov.w	r6, #4294967295
  406894:	e7f2      	b.n	40687c <lTCPAddRxdata+0x94>
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
  406896:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
  40689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40689e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
  4068a2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  4068a6:	f043 0301 	orr.w	r3, r3, #1
  4068aa:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
						pxSocket->u.xTCP.usTimeout = 1u;
  4068ae:	2301      	movs	r3, #1
  4068b0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
  4068b4:	2005      	movs	r0, #5
  4068b6:	4b05      	ldr	r3, [pc, #20]	; (4068cc <lTCPAddRxdata+0xe4>)
  4068b8:	4798      	blx	r3
  4068ba:	e7d2      	b.n	406862 <lTCPAddRxdata+0x7a>
  4068bc:	00406ead 	.word	0x00406ead
  4068c0:	00413074 	.word	0x00413074
  4068c4:	0040c351 	.word	0x0040c351
  4068c8:	00405fbd 	.word	0x00405fbd
  4068cc:	00405731 	.word	0x00405731

004068d0 <FreeRTOS_tx_space>:
	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  4068d0:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  4068d4:	2b06      	cmp	r3, #6
  4068d6:	d10d      	bne.n	4068f4 <FreeRTOS_tx_space+0x24>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
  4068d8:	6f83      	ldr	r3, [r0, #120]	; 0x78
  4068da:	b14b      	cbz	r3, 4068f0 <FreeRTOS_tx_space+0x20>
size_t uxHead = pxBuffer->uxHead;
  4068dc:	689a      	ldr	r2, [r3, #8]
size_t uxTail = pxBuffer->uxTail;
  4068de:	6818      	ldr	r0, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  4068e0:	691b      	ldr	r3, [r3, #16]
  4068e2:	4418      	add	r0, r3
  4068e4:	3801      	subs	r0, #1
  4068e6:	1a80      	subs	r0, r0, r2
	if( uxCount >= pxBuffer->LENGTH )
  4068e8:	4283      	cmp	r3, r0
  4068ea:	d805      	bhi.n	4068f8 <FreeRTOS_tx_space+0x28>
		uxCount -= pxBuffer->LENGTH;
  4068ec:	1ac0      	subs	r0, r0, r3
  4068ee:	4770      	bx	lr
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
  4068f0:	6f00      	ldr	r0, [r0, #112]	; 0x70
  4068f2:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
  4068f4:	f06f 0015 	mvn.w	r0, #21
			}
		}

		return xReturn;
	}
  4068f8:	4770      	bx	lr

004068fa <FreeRTOS_tx_size>:
	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  4068fa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  4068fe:	2b06      	cmp	r3, #6
  406900:	d10a      	bne.n	406918 <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
  406902:	6f83      	ldr	r3, [r0, #120]	; 0x78
  406904:	b15b      	cbz	r3, 40691e <FreeRTOS_tx_size+0x24>
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
  406906:	6898      	ldr	r0, [r3, #8]
size_t uxTail = pxBuffer->uxTail;
  406908:	681a      	ldr	r2, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  40690a:	691b      	ldr	r3, [r3, #16]
  40690c:	4418      	add	r0, r3
  40690e:	1a80      	subs	r0, r0, r2
	if ( uxCount >= pxBuffer->LENGTH )
  406910:	4283      	cmp	r3, r0
  406912:	d805      	bhi.n	406920 <FreeRTOS_tx_size+0x26>
		uxCount -= pxBuffer->LENGTH;
  406914:	1ac0      	subs	r0, r0, r3
  406916:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406918:	f06f 0015 	mvn.w	r0, #21
  40691c:	4770      	bx	lr
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
			}
			else
			{
				xReturn = 0;
  40691e:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  406920:	4770      	bx	lr
	...

00406924 <FreeRTOS_setsockopt>:
{
  406924:	b570      	push	{r4, r5, r6, lr}
  406926:	b082      	sub	sp, #8
  406928:	4604      	mov	r4, r0
  40692a:	461d      	mov	r5, r3
	switch( lOptionName )
  40692c:	2a0f      	cmp	r2, #15
  40692e:	f200 811e 	bhi.w	406b6e <FreeRTOS_setsockopt+0x24a>
  406932:	e8df f012 	tbh	[pc, r2, lsl #1]
  406936:	0010      	.short	0x0010
  406938:	00260016 	.word	0x00260016
  40693c:	0037011c 	.word	0x0037011c
  406940:	011c0037 	.word	0x011c0037
  406944:	011c011c 	.word	0x011c011c
  406948:	011c011c 	.word	0x011c011c
  40694c:	00b900a4 	.word	0x00b900a4
  406950:	00ce0069 	.word	0x00ce0069
  406954:	00fb      	.short	0x00fb
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
  406956:	682b      	ldr	r3, [r5, #0]
  406958:	61c3      	str	r3, [r0, #28]
			xReturn = 0;
  40695a:	2300      	movs	r3, #0
} /* Tested */
  40695c:	4618      	mov	r0, r3
  40695e:	b002      	add	sp, #8
  406960:	bd70      	pop	{r4, r5, r6, pc}
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
  406962:	682b      	ldr	r3, [r5, #0]
  406964:	6203      	str	r3, [r0, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
  406966:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
  40696a:	2a11      	cmp	r2, #17
  40696c:	d001      	beq.n	406972 <FreeRTOS_setsockopt+0x4e>
			xReturn = 0;
  40696e:	2300      	movs	r3, #0
  406970:	e7f4      	b.n	40695c <FreeRTOS_setsockopt+0x38>
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
  406972:	f241 3288 	movw	r2, #5000	; 0x1388
  406976:	4293      	cmp	r3, r2
  406978:	f240 80fc 	bls.w	406b74 <FreeRTOS_setsockopt+0x250>
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
  40697c:	6222      	str	r2, [r4, #32]
			xReturn = 0;
  40697e:	2300      	movs	r3, #0
  406980:	e7ec      	b.n	40695c <FreeRTOS_setsockopt+0x38>
			lOptionValue = ( BaseType_t ) pvOptionValue;
  406982:	462b      	mov	r3, r5
			if( lOptionValue == 0 )
  406984:	b935      	cbnz	r5, 406994 <FreeRTOS_setsockopt+0x70>
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
  406986:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
  40698a:	f022 0202 	bic.w	r2, r2, #2
  40698e:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  406992:	e7e3      	b.n	40695c <FreeRTOS_setsockopt+0x38>
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
  406994:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  406998:	f043 0302 	orr.w	r3, r3, #2
  40699c:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
			xReturn = 0;
  4069a0:	2300      	movs	r3, #0
  4069a2:	e7db      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  4069a4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  4069a8:	2b06      	cmp	r3, #6
  4069aa:	d107      	bne.n	4069bc <FreeRTOS_setsockopt+0x98>
					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
  4069ac:	2a04      	cmp	r2, #4
  4069ae:	d010      	beq.n	4069d2 <FreeRTOS_setsockopt+0xae>
  4069b0:	2a05      	cmp	r2, #5
  4069b2:	d01c      	beq.n	4069ee <FreeRTOS_setsockopt+0xca>
					ulNewValue = *( ( uint32_t * ) pvOptionValue );
  4069b4:	682b      	ldr	r3, [r5, #0]
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
  4069b6:	66e3      	str	r3, [r4, #108]	; 0x6c
				xReturn = 0;
  4069b8:	2300      	movs	r3, #0
  4069ba:	e7cf      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
  4069bc:	4b76      	ldr	r3, [pc, #472]	; (406b98 <FreeRTOS_setsockopt+0x274>)
  4069be:	4977      	ldr	r1, [pc, #476]	; (406b9c <FreeRTOS_setsockopt+0x278>)
  4069c0:	2a04      	cmp	r2, #4
  4069c2:	bf18      	it	ne
  4069c4:	4619      	movne	r1, r3
  4069c6:	4876      	ldr	r0, [pc, #472]	; (406ba0 <FreeRTOS_setsockopt+0x27c>)
  4069c8:	4b76      	ldr	r3, [pc, #472]	; (406ba4 <FreeRTOS_setsockopt+0x280>)
  4069ca:	4798      	blx	r3
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
  4069cc:	f06f 0315 	mvn.w	r3, #21
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
  4069d0:	e7c4      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
  4069d2:	6f83      	ldr	r3, [r0, #120]	; 0x78
  4069d4:	b98b      	cbnz	r3, 4069fa <FreeRTOS_setsockopt+0xd6>
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
  4069d6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c

	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
  4069da:	682b      	ldr	r3, [r5, #0]
  4069dc:	3b01      	subs	r3, #1
  4069de:	4413      	add	r3, r2
  4069e0:	fbb3 f3f2 	udiv	r3, r3, r2
  4069e4:	fb02 f303 	mul.w	r3, r2, r3
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
  4069e8:	6703      	str	r3, [r0, #112]	; 0x70
				xReturn = 0;
  4069ea:	2300      	movs	r3, #0
  4069ec:	e7b6      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
  4069ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4069f0:	b90b      	cbnz	r3, 4069f6 <FreeRTOS_setsockopt+0xd2>
					ulNewValue = *( ( uint32_t * ) pvOptionValue );
  4069f2:	682b      	ldr	r3, [r5, #0]
  4069f4:	e7df      	b.n	4069b6 <FreeRTOS_setsockopt+0x92>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
  4069f6:	4968      	ldr	r1, [pc, #416]	; (406b98 <FreeRTOS_setsockopt+0x274>)
  4069f8:	e000      	b.n	4069fc <FreeRTOS_setsockopt+0xd8>
  4069fa:	4968      	ldr	r1, [pc, #416]	; (406b9c <FreeRTOS_setsockopt+0x278>)
  4069fc:	486a      	ldr	r0, [pc, #424]	; (406ba8 <FreeRTOS_setsockopt+0x284>)
  4069fe:	4b69      	ldr	r3, [pc, #420]	; (406ba4 <FreeRTOS_setsockopt+0x280>)
  406a00:	4798      	blx	r3
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406a02:	f06f 0315 	mvn.w	r3, #21
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
  406a06:	e7a9      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406a08:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406a0c:	2b06      	cmp	r3, #6
  406a0e:	d12a      	bne.n	406a66 <FreeRTOS_setsockopt+0x142>
					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
  406a10:	6f83      	ldr	r3, [r0, #120]	; 0x78
  406a12:	bb73      	cbnz	r3, 406a72 <FreeRTOS_setsockopt+0x14e>
  406a14:	6f43      	ldr	r3, [r0, #116]	; 0x74
  406a16:	bb63      	cbnz	r3, 406a72 <FreeRTOS_setsockopt+0x14e>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
  406a18:	2604      	movs	r6, #4
  406a1a:	9600      	str	r6, [sp, #0]
  406a1c:	462b      	mov	r3, r5
  406a1e:	4632      	mov	r2, r6
  406a20:	2100      	movs	r1, #0
  406a22:	f7ff ff7f 	bl	406924 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
  406a26:	9600      	str	r6, [sp, #0]
  406a28:	f105 0308 	add.w	r3, r5, #8
  406a2c:	2205      	movs	r2, #5
  406a2e:	2100      	movs	r1, #0
  406a30:	4620      	mov	r0, r4
  406a32:	f7ff ff77 	bl	406924 <FreeRTOS_setsockopt>
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
  406a36:	68eb      	ldr	r3, [r5, #12]
  406a38:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
  406a3c:	686a      	ldr	r2, [r5, #4]
  406a3e:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
  406a42:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
  406a46:	f011 0f01 	tst.w	r1, #1
  406a4a:	f000 8095 	beq.w	406b78 <FreeRTOS_setsockopt+0x254>
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
  406a4e:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
  406a52:	fb01 f303 	mul.w	r3, r1, r3
  406a56:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
						pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
  406a5a:	fb01 f202 	mul.w	r2, r1, r2
  406a5e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
				xReturn = 0;
  406a62:	2300      	movs	r3, #0
  406a64:	e77a      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
  406a66:	4851      	ldr	r0, [pc, #324]	; (406bac <FreeRTOS_setsockopt+0x288>)
  406a68:	4b4e      	ldr	r3, [pc, #312]	; (406ba4 <FreeRTOS_setsockopt+0x280>)
  406a6a:	4798      	blx	r3
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406a6c:	f06f 0315 	mvn.w	r3, #21
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
  406a70:	e774      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
  406a72:	484f      	ldr	r0, [pc, #316]	; (406bb0 <FreeRTOS_setsockopt+0x28c>)
  406a74:	4b4b      	ldr	r3, [pc, #300]	; (406ba4 <FreeRTOS_setsockopt+0x280>)
  406a76:	4798      	blx	r3
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406a78:	f06f 0315 	mvn.w	r3, #21
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
  406a7c:	e76e      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406a7e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406a82:	2b06      	cmp	r3, #6
  406a84:	d17a      	bne.n	406b7c <FreeRTOS_setsockopt+0x258>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
  406a86:	682b      	ldr	r3, [r5, #0]
  406a88:	b13b      	cbz	r3, 406a9a <FreeRTOS_setsockopt+0x176>
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
  406a8a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  406a8e:	f043 0308 	orr.w	r3, r3, #8
  406a92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
				xReturn = 0;
  406a96:	2300      	movs	r3, #0
  406a98:	e760      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
  406a9a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  406a9e:	f36f 02c3 	bfc	r2, #3, #1
  406aa2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  406aa6:	e759      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406aa8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406aac:	2b06      	cmp	r3, #6
  406aae:	d168      	bne.n	406b82 <FreeRTOS_setsockopt+0x25e>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
  406ab0:	682b      	ldr	r3, [r5, #0]
  406ab2:	b13b      	cbz	r3, 406ac4 <FreeRTOS_setsockopt+0x1a0>
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
  406ab4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  406ab8:	f043 0310 	orr.w	r3, r3, #16
  406abc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
				xReturn = 0;
  406ac0:	2300      	movs	r3, #0
  406ac2:	e74b      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
  406ac4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  406ac8:	f36f 1204 	bfc	r2, #4, #1
  406acc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  406ad0:	e744      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406ad2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406ad6:	2b06      	cmp	r3, #6
  406ad8:	d156      	bne.n	406b88 <FreeRTOS_setsockopt+0x264>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
  406ada:	682b      	ldr	r3, [r5, #0]
  406adc:	b183      	cbz	r3, 406b00 <FreeRTOS_setsockopt+0x1dc>
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
  406ade:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
  406ae2:	f043 0302 	orr.w	r3, r3, #2
  406ae6:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
  406aea:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
  406aee:	f013 0f02 	tst.w	r3, #2
  406af2:	d14c      	bne.n	406b8e <FreeRTOS_setsockopt+0x26a>
  406af4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  406af8:	2b04      	cmp	r3, #4
  406afa:	d808      	bhi.n	406b0e <FreeRTOS_setsockopt+0x1ea>
				xReturn = 0;
  406afc:	2300      	movs	r3, #0
  406afe:	e72d      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
  406b00:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
  406b04:	f36f 0341 	bfc	r3, #1, #1
  406b08:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  406b0c:	e7ed      	b.n	406aea <FreeRTOS_setsockopt+0x1c6>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
  406b0e:	4620      	mov	r0, r4
  406b10:	4b28      	ldr	r3, [pc, #160]	; (406bb4 <FreeRTOS_setsockopt+0x290>)
  406b12:	4798      	blx	r3
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
  406b14:	4603      	mov	r3, r0
  406b16:	2800      	cmp	r0, #0
  406b18:	f43f af20 	beq.w	40695c <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
  406b1c:	2301      	movs	r3, #1
  406b1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
  406b22:	2005      	movs	r0, #5
  406b24:	4b24      	ldr	r3, [pc, #144]	; (406bb8 <FreeRTOS_setsockopt+0x294>)
  406b26:	4798      	blx	r3
				xReturn = 0;
  406b28:	2300      	movs	r3, #0
  406b2a:	e717      	b.n	40695c <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406b2c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406b30:	2b06      	cmp	r3, #6
  406b32:	d12e      	bne.n	406b92 <FreeRTOS_setsockopt+0x26e>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
  406b34:	682b      	ldr	r3, [r5, #0]
  406b36:	b19b      	cbz	r3, 406b60 <FreeRTOS_setsockopt+0x23c>
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
  406b38:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  406b3c:	f043 0304 	orr.w	r3, r3, #4
  406b40:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
  406b44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  406b48:	f043 0301 	orr.w	r3, r3, #1
  406b4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
  406b50:	2301      	movs	r3, #1
  406b52:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
  406b56:	2005      	movs	r0, #5
  406b58:	4b17      	ldr	r3, [pc, #92]	; (406bb8 <FreeRTOS_setsockopt+0x294>)
  406b5a:	4798      	blx	r3
				xReturn = 0;
  406b5c:	2300      	movs	r3, #0
				break;
  406b5e:	e6fd      	b.n	40695c <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
  406b60:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  406b64:	f36f 0382 	bfc	r3, #2, #1
  406b68:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  406b6c:	e7ea      	b.n	406b44 <FreeRTOS_setsockopt+0x220>
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
  406b6e:	f06f 036c 	mvn.w	r3, #108	; 0x6c
  406b72:	e6f3      	b.n	40695c <FreeRTOS_setsockopt+0x38>
			xReturn = 0;
  406b74:	2300      	movs	r3, #0
  406b76:	e6f1      	b.n	40695c <FreeRTOS_setsockopt+0x38>
				xReturn = 0;
  406b78:	2300      	movs	r3, #0
  406b7a:	e6ef      	b.n	40695c <FreeRTOS_setsockopt+0x38>
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406b7c:	f06f 0315 	mvn.w	r3, #21
  406b80:	e6ec      	b.n	40695c <FreeRTOS_setsockopt+0x38>
  406b82:	f06f 0315 	mvn.w	r3, #21
  406b86:	e6e9      	b.n	40695c <FreeRTOS_setsockopt+0x38>
  406b88:	f06f 0315 	mvn.w	r3, #21
  406b8c:	e6e6      	b.n	40695c <FreeRTOS_setsockopt+0x38>
				xReturn = 0;
  406b8e:	2300      	movs	r3, #0
  406b90:	e6e4      	b.n	40695c <FreeRTOS_setsockopt+0x38>
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406b92:	f06f 0315 	mvn.w	r3, #21
	return xReturn;
  406b96:	e6e1      	b.n	40695c <FreeRTOS_setsockopt+0x38>
  406b98:	00412fd4 	.word	0x00412fd4
  406b9c:	00412fd0 	.word	0x00412fd0
  406ba0:	00412fd8 	.word	0x00412fd8
  406ba4:	0040c351 	.word	0x0040c351
  406ba8:	00412ffc 	.word	0x00412ffc
  406bac:	00413024 	.word	0x00413024
  406bb0:	00413048 	.word	0x00413048
  406bb4:	004068fb 	.word	0x004068fb
  406bb8:	00405731 	.word	0x00405731

00406bbc <FreeRTOS_rx_size>:
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
  406bbc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
  406bc0:	2b06      	cmp	r3, #6
  406bc2:	d10a      	bne.n	406bda <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
  406bc4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  406bc6:	b15b      	cbz	r3, 406be0 <FreeRTOS_rx_size+0x24>
size_t uxHead = pxBuffer->uxHead;
  406bc8:	6898      	ldr	r0, [r3, #8]
size_t uxTail = pxBuffer->uxTail;
  406bca:	681a      	ldr	r2, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  406bcc:	691b      	ldr	r3, [r3, #16]
  406bce:	4418      	add	r0, r3
  406bd0:	1a80      	subs	r0, r0, r2
	if ( uxCount >= pxBuffer->LENGTH )
  406bd2:	4283      	cmp	r3, r0
  406bd4:	d805      	bhi.n	406be2 <FreeRTOS_rx_size+0x26>
		uxCount -= pxBuffer->LENGTH;
  406bd6:	1ac0      	subs	r0, r0, r3
  406bd8:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
  406bda:	f06f 0015 	mvn.w	r0, #21
  406bde:	4770      	bx	lr
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
		}
		else
		{
			xReturn = 0;
  406be0:	2000      	movs	r0, #0
		}

		return xReturn;
	}
  406be2:	4770      	bx	lr

00406be4 <vTCPNetStat>:
/*-----------------------------------------------------------*/

#if( ( ipconfigHAS_PRINTF != 0 ) && ( ipconfigUSE_TCP == 1 ) )

	void vTCPNetStat( void )
	{
  406be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406be8:	b08d      	sub	sp, #52	; 0x34
	/* Show a simple listing of all created sockets and their connections */
	ListItem_t *pxIterator;
	BaseType_t count = 0;

		if( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) == pdFALSE )
  406bea:	4b41      	ldr	r3, [pc, #260]	; (406cf0 <vTCPNetStat+0x10c>)
  406bec:	689b      	ldr	r3, [r3, #8]
  406bee:	f1b3 3fff 	cmp.w	r3, #4294967295
  406bf2:	d005      	beq.n	406c00 <vTCPNetStat+0x1c>
		{
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
  406bf4:	483f      	ldr	r0, [pc, #252]	; (406cf4 <vTCPNetStat+0x110>)
  406bf6:	4b40      	ldr	r3, [pc, #256]	; (406cf8 <vTCPNetStat+0x114>)
  406bf8:	4798      	blx	r3
				count,
				uxGetMinimumFreeNetworkBuffers( ),
				uxGetNumberOfFreeNetworkBuffers( ),
				ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
		}
	}
  406bfa:	b00d      	add	sp, #52	; 0x34
  406bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			FreeRTOS_printf( ( "Prot Port IP-Remote	   : Port  R/T Status	   Alive  tmout Child\n" ) );
  406c00:	483e      	ldr	r0, [pc, #248]	; (406cfc <vTCPNetStat+0x118>)
  406c02:	4b3d      	ldr	r3, [pc, #244]	; (406cf8 <vTCPNetStat+0x114>)
  406c04:	4798      	blx	r3
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
  406c06:	4b3a      	ldr	r3, [pc, #232]	; (406cf0 <vTCPNetStat+0x10c>)
  406c08:	68de      	ldr	r6, [r3, #12]
  406c0a:	3308      	adds	r3, #8
  406c0c:	429e      	cmp	r6, r3
  406c0e:	d06c      	beq.n	406cea <vTCPNetStat+0x106>
  406c10:	2700      	movs	r7, #0
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
  406c12:	46b9      	mov	r9, r7
  406c14:	e02d      	b.n	406c72 <vTCPNetStat+0x8e>
				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
  406c16:	f8b4 a024 	ldrh.w	sl, [r4, #36]	; 0x24
  406c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406c1c:	9307      	str	r3, [sp, #28]
  406c1e:	f8b4 b03c 	ldrh.w	fp, [r4, #60]	; 0x3c
  406c22:	6f67      	ldr	r7, [r4, #116]	; 0x74
  406c24:	3700      	adds	r7, #0
  406c26:	bf18      	it	ne
  406c28:	2701      	movne	r7, #1
  406c2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  406c2c:	f113 0800 	adds.w	r8, r3, #0
  406c30:	bf18      	it	ne
  406c32:	f04f 0801 	movne.w	r8, #1
  406c36:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  406c3a:	4b31      	ldr	r3, [pc, #196]	; (406d00 <vTCPNetStat+0x11c>)
  406c3c:	4798      	blx	r3
  406c3e:	a908      	add	r1, sp, #32
  406c40:	9105      	str	r1, [sp, #20]
  406c42:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  406c46:	9304      	str	r3, [sp, #16]
  406c48:	4b2e      	ldr	r3, [pc, #184]	; (406d04 <vTCPNetStat+0x120>)
  406c4a:	429d      	cmp	r5, r3
  406c4c:	bf28      	it	cs
  406c4e:	461d      	movcs	r5, r3
  406c50:	9503      	str	r5, [sp, #12]
  406c52:	9002      	str	r0, [sp, #8]
  406c54:	f8cd 8004 	str.w	r8, [sp, #4]
  406c58:	9700      	str	r7, [sp, #0]
  406c5a:	465b      	mov	r3, fp
  406c5c:	9a07      	ldr	r2, [sp, #28]
  406c5e:	4651      	mov	r1, sl
  406c60:	4829      	ldr	r0, [pc, #164]	; (406d08 <vTCPNetStat+0x124>)
  406c62:	4c25      	ldr	r4, [pc, #148]	; (406cf8 <vTCPNetStat+0x114>)
  406c64:	47a0      	blx	r4
				count++;
  406c66:	f109 0901 	add.w	r9, r9, #1
				 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
  406c6a:	6876      	ldr	r6, [r6, #4]
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
  406c6c:	4b27      	ldr	r3, [pc, #156]	; (406d0c <vTCPNetStat+0x128>)
  406c6e:	429e      	cmp	r6, r3
  406c70:	d018      	beq.n	406ca4 <vTCPNetStat+0xc0>
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  406c72:	68f4      	ldr	r4, [r6, #12]
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
  406c74:	4b26      	ldr	r3, [pc, #152]	; (406d10 <vTCPNetStat+0x12c>)
  406c76:	4798      	blx	r3
  406c78:	6de5      	ldr	r5, [r4, #92]	; 0x5c
  406c7a:	1b45      	subs	r5, r0, r5
				char ucChildText[16] = "";
  406c7c:	2300      	movs	r3, #0
  406c7e:	9308      	str	r3, [sp, #32]
  406c80:	9309      	str	r3, [sp, #36]	; 0x24
  406c82:	930a      	str	r3, [sp, #40]	; 0x28
  406c84:	930b      	str	r3, [sp, #44]	; 0x2c
				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
  406c86:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  406c8a:	2b01      	cmp	r3, #1
  406c8c:	d1c3      	bne.n	406c16 <vTCPNetStat+0x32>
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
  406c8e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  406c92:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
  406c96:	9200      	str	r2, [sp, #0]
  406c98:	4a1e      	ldr	r2, [pc, #120]	; (406d14 <vTCPNetStat+0x130>)
  406c9a:	2110      	movs	r1, #16
  406c9c:	a808      	add	r0, sp, #32
  406c9e:	4f1e      	ldr	r7, [pc, #120]	; (406d18 <vTCPNetStat+0x134>)
  406ca0:	47b8      	blx	r7
  406ca2:	e7b8      	b.n	406c16 <vTCPNetStat+0x32>
  406ca4:	464f      	mov	r7, r9
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
  406ca6:	4b1d      	ldr	r3, [pc, #116]	; (406d1c <vTCPNetStat+0x138>)
  406ca8:	68dc      	ldr	r4, [r3, #12]
  406caa:	3308      	adds	r3, #8
  406cac:	429c      	cmp	r4, r3
  406cae:	d00e      	beq.n	406cce <vTCPNetStat+0xea>
				FreeRTOS_printf( ( "UDP Port %5u\n",
  406cb0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 406d2c <vTCPNetStat+0x148>
  406cb4:	4e10      	ldr	r6, [pc, #64]	; (406cf8 <vTCPNetStat+0x114>)
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
  406cb6:	461d      	mov	r5, r3
				FreeRTOS_printf( ( "UDP Port %5u\n",
  406cb8:	6823      	ldr	r3, [r4, #0]
  406cba:	0a19      	lsrs	r1, r3, #8
  406cbc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  406cc0:	b289      	uxth	r1, r1
  406cc2:	4640      	mov	r0, r8
  406cc4:	47b0      	blx	r6
				count++;
  406cc6:	3701      	adds	r7, #1
				 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
  406cc8:	6864      	ldr	r4, [r4, #4]
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
  406cca:	42ac      	cmp	r4, r5
  406ccc:	d1f4      	bne.n	406cb8 <vTCPNetStat+0xd4>
			FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %d buffers free\n",
  406cce:	4b14      	ldr	r3, [pc, #80]	; (406d20 <vTCPNetStat+0x13c>)
  406cd0:	4798      	blx	r3
  406cd2:	4604      	mov	r4, r0
  406cd4:	4b13      	ldr	r3, [pc, #76]	; (406d24 <vTCPNetStat+0x140>)
  406cd6:	4798      	blx	r3
  406cd8:	233c      	movs	r3, #60	; 0x3c
  406cda:	9300      	str	r3, [sp, #0]
  406cdc:	4603      	mov	r3, r0
  406cde:	4622      	mov	r2, r4
  406ce0:	4639      	mov	r1, r7
  406ce2:	4811      	ldr	r0, [pc, #68]	; (406d28 <vTCPNetStat+0x144>)
  406ce4:	4c04      	ldr	r4, [pc, #16]	; (406cf8 <vTCPNetStat+0x114>)
  406ce6:	47a0      	blx	r4
	}
  406ce8:	e787      	b.n	406bfa <vTCPNetStat+0x16>
	BaseType_t count = 0;
  406cea:	2700      	movs	r7, #0
  406cec:	e7db      	b.n	406ca6 <vTCPNetStat+0xc2>
  406cee:	bf00      	nop
  406cf0:	2001346c 	.word	0x2001346c
  406cf4:	004131c4 	.word	0x004131c4
  406cf8:	0040c351 	.word	0x0040c351
  406cfc:	004131e0 	.word	0x004131e0
  406d00:	00408e4d 	.word	0x00408e4d
  406d04:	000f423f 	.word	0x000f423f
  406d08:	0041322c 	.word	0x0041322c
  406d0c:	20013474 	.word	0x20013474
  406d10:	0040b649 	.word	0x0040b649
  406d14:	00413224 	.word	0x00413224
  406d18:	0040c811 	.word	0x0040c811
  406d1c:	20013480 	.word	0x20013480
  406d20:	00409e75 	.word	0x00409e75
  406d24:	00409e69 	.word	0x00409e69
  406d28:	0041326c 	.word	0x0041326c
  406d2c:	0041325c 	.word	0x0041325c

00406d30 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
  406d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d34:	b083      	sub	sp, #12
  406d36:	4606      	mov	r6, r0
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
		pxSocketSet->pxSocket = NULL;
  406d38:	2300      	movs	r3, #0
  406d3a:	6083      	str	r3, [r0, #8]
  406d3c:	f04f 0a01 	mov.w	sl, #1
		EventBits_t xGroupBits = 0;
  406d40:	4698      	mov	r8, r3
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
  406d42:	4b53      	ldr	r3, [pc, #332]	; (406e90 <vSocketSelect+0x160>)
  406d44:	3308      	adds	r3, #8
  406d46:	9301      	str	r3, [sp, #4]
  406d48:	e078      	b.n	406e3c <vSocketSelect+0x10c>
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
  406d4a:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
  406d4e:	f002 0b06 	and.w	fp, r2, #6
								bAccepted = pdTRUE;
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
  406d52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  406d54:	f013 0f01 	tst.w	r3, #1
  406d58:	d020      	beq.n	406d9c <vSocketSelect+0x6c>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
  406d5a:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
  406d5e:	2901      	cmp	r1, #1
  406d60:	d009      	beq.n	406d76 <vSocketSelect+0x46>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
								{
									xSocketBits |= eSELECT_READ;
								}
							}
							else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
  406d62:	f002 020a 	and.w	r2, r2, #10
  406d66:	2a0a      	cmp	r2, #10
  406d68:	d03c      	beq.n	406de4 <vSocketSelect+0xb4>
							{
								/* This socket has the re-use flag. After connecting it turns into
								aconnected socket. Set the READ event, so that accept() will be called. */
								xSocketBits |= eSELECT_READ;
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
  406d6a:	f1bb 0f00 	cmp.w	fp, #0
  406d6e:	d00b      	beq.n	406d88 <vSocketSelect+0x58>
				xSocketBits = 0;
  406d70:	f04f 0900 	mov.w	r9, #0
  406d74:	e014      	b.n	406da0 <vSocketSelect+0x70>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
  406d76:	6d6a      	ldr	r2, [r5, #84]	; 0x54
  406d78:	2a00      	cmp	r2, #0
  406d7a:	f000 8085 	beq.w	406e88 <vSocketSelect+0x158>
  406d7e:	f892 9040 	ldrb.w	r9, [r2, #64]	; 0x40
  406d82:	f3c9 0940 	ubfx	r9, r9, #1, #1
  406d86:	e016      	b.n	406db6 <vSocketSelect+0x86>
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
  406d88:	4628      	mov	r0, r5
  406d8a:	4b42      	ldr	r3, [pc, #264]	; (406e94 <vSocketSelect+0x164>)
  406d8c:	4798      	blx	r3
  406d8e:	2800      	cmp	r0, #0
  406d90:	bfd4      	ite	le
  406d92:	f04f 0900 	movle.w	r9, #0
  406d96:	f04f 0901 	movgt.w	r9, #1
  406d9a:	e001      	b.n	406da0 <vSocketSelect+0x70>
				xSocketBits = 0;
  406d9c:	f04f 0900 	mov.w	r9, #0
							{
								xSocketBits |= eSELECT_READ;
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
  406da0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  406da2:	f013 0f04 	tst.w	r3, #4
  406da6:	d006      	beq.n	406db6 <vSocketSelect+0x86>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
  406da8:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
  406dac:	f012 0ff7 	tst.w	r2, #247	; 0xf7
							{
								xSocketBits |= eSELECT_EXCEPT;
  406db0:	bf08      	it	eq
  406db2:	f049 0904 	orreq.w	r9, r9, #4
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
  406db6:	f013 0f02 	tst.w	r3, #2
  406dba:	d020      	beq.n	406dfe <vSocketSelect+0xce>
						{
							BaseType_t bMatch = pdFALSE;

							if( bAccepted != 0 )
  406dbc:	f1bb 0f00 	cmp.w	fp, #0
  406dc0:	d013      	beq.n	406dea <vSocketSelect+0xba>
								}
							}

							if( bMatch == pdFALSE )
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
  406dc2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  406dc6:	f013 0f08 	tst.w	r3, #8
  406dca:	d018      	beq.n	406dfe <vSocketSelect+0xce>
  406dcc:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
  406dd0:	2a04      	cmp	r2, #4
  406dd2:	d914      	bls.n	406dfe <vSocketSelect+0xce>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
  406dd4:	f013 0f10 	tst.w	r3, #16
  406dd8:	d111      	bne.n	406dfe <vSocketSelect+0xce>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
  406dda:	f043 0310 	orr.w	r3, r3, #16
  406dde:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
  406de2:	e007      	b.n	406df4 <vSocketSelect+0xc4>
								xSocketBits |= eSELECT_READ;
  406de4:	f04f 0901 	mov.w	r9, #1
  406de8:	e7da      	b.n	406da0 <vSocketSelect+0x70>
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
  406dea:	4628      	mov	r0, r5
  406dec:	4b2a      	ldr	r3, [pc, #168]	; (406e98 <vSocketSelect+0x168>)
  406dee:	4798      	blx	r3
							if( bMatch == pdFALSE )
  406df0:	2800      	cmp	r0, #0
  406df2:	dde6      	ble.n	406dc2 <vSocketSelect+0x92>
								}
							}

							if( bMatch != pdFALSE )
							{
								xSocketBits |= eSELECT_WRITE;
  406df4:	f049 0902 	orr.w	r9, r9, #2
  406df8:	e001      	b.n	406dfe <vSocketSelect+0xce>
				xSocketBits = 0;
  406dfa:	f04f 0900 	mov.w	r9, #0
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
  406dfe:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
  406e02:	ea48 0809 	orr.w	r8, r8, r9
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
  406e06:	6864      	ldr	r4, [r4, #4]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
  406e08:	42bc      	cmp	r4, r7
  406e0a:	d012      	beq.n	406e32 <vSocketSelect+0x102>
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  406e0c:	68e5      	ldr	r5, [r4, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
  406e0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  406e10:	429e      	cmp	r6, r3
  406e12:	d1f8      	bne.n	406e06 <vSocketSelect+0xd6>
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
  406e14:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
  406e18:	2b06      	cmp	r3, #6
  406e1a:	d096      	beq.n	406d4a <vSocketSelect+0x1a>
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
  406e1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  406e1e:	f013 0f01 	tst.w	r3, #1
  406e22:	d0ea      	beq.n	406dfa <vSocketSelect+0xca>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
  406e24:	6bab      	ldr	r3, [r5, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
  406e26:	f113 0900 	adds.w	r9, r3, #0
  406e2a:	bf18      	it	ne
  406e2c:	f04f 0901 	movne.w	r9, #1
  406e30:	e7e5      	b.n	406dfe <vSocketSelect+0xce>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
  406e32:	f1ba 0f01 	cmp.w	sl, #1
  406e36:	dc0b      	bgt.n	406e50 <vSocketSelect+0x120>
  406e38:	f10a 0a01 	add.w	sl, sl, #1
			if( xRound == 0 )
  406e3c:	f1ba 0f01 	cmp.w	sl, #1
  406e40:	d01b      	beq.n	406e7a <vSocketSelect+0x14a>
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
  406e42:	4b16      	ldr	r3, [pc, #88]	; (406e9c <vSocketSelect+0x16c>)
  406e44:	68dc      	ldr	r4, [r3, #12]
  406e46:	3308      	adds	r3, #8
  406e48:	429c      	cmp	r4, r3
  406e4a:	d0f2      	beq.n	406e32 <vSocketSelect+0x102>
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
  406e4c:	461f      	mov	r7, r3
  406e4e:	e7dd      	b.n	406e0c <vSocketSelect+0xdc>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
  406e50:	2100      	movs	r1, #0
  406e52:	6830      	ldr	r0, [r6, #0]
  406e54:	4b12      	ldr	r3, [pc, #72]	; (406ea0 <vSocketSelect+0x170>)
  406e56:	4798      	blx	r3
  406e58:	f000 000f 	and.w	r0, r0, #15
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
  406e5c:	ea30 0108 	bics.w	r1, r0, r8
  406e60:	d107      	bne.n	406e72 <vSocketSelect+0x142>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
  406e62:	f048 0110 	orr.w	r1, r8, #16
  406e66:	6830      	ldr	r0, [r6, #0]
  406e68:	4b0e      	ldr	r3, [pc, #56]	; (406ea4 <vSocketSelect+0x174>)
  406e6a:	4798      	blx	r3
	}
  406e6c:	b003      	add	sp, #12
  406e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
  406e72:	6830      	ldr	r0, [r6, #0]
  406e74:	4b0a      	ldr	r3, [pc, #40]	; (406ea0 <vSocketSelect+0x170>)
  406e76:	4798      	blx	r3
  406e78:	e7f3      	b.n	406e62 <vSocketSelect+0x132>
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
  406e7a:	4b05      	ldr	r3, [pc, #20]	; (406e90 <vSocketSelect+0x160>)
  406e7c:	68dc      	ldr	r4, [r3, #12]
  406e7e:	9b01      	ldr	r3, [sp, #4]
  406e80:	429c      	cmp	r4, r3
  406e82:	d0d9      	beq.n	406e38 <vSocketSelect+0x108>
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
  406e84:	4f08      	ldr	r7, [pc, #32]	; (406ea8 <vSocketSelect+0x178>)
  406e86:	e7c1      	b.n	406e0c <vSocketSelect+0xdc>
  406e88:	f04f 0900 	mov.w	r9, #0
  406e8c:	e793      	b.n	406db6 <vSocketSelect+0x86>
  406e8e:	bf00      	nop
  406e90:	20013480 	.word	0x20013480
  406e94:	00406bbd 	.word	0x00406bbd
  406e98:	004068d1 	.word	0x004068d1
  406e9c:	2001346c 	.word	0x2001346c
  406ea0:	00404105 	.word	0x00404105
  406ea4:	00404129 	.word	0x00404129
  406ea8:	20013488 	.word	0x20013488

00406eac <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
  406eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
size_t uxHead = pxBuffer->uxHead;
  406eb0:	6884      	ldr	r4, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
  406eb2:	6805      	ldr	r5, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  406eb4:	6906      	ldr	r6, [r0, #16]
  406eb6:	4435      	add	r5, r6
  406eb8:	3d01      	subs	r5, #1
  406eba:	1b2c      	subs	r4, r5, r4
	if( uxCount >= pxBuffer->LENGTH )
  406ebc:	42a6      	cmp	r6, r4
		uxCount -= pxBuffer->LENGTH;
  406ebe:	bf98      	it	ls
  406ec0:	1ba4      	subls	r4, r4, r6
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
  406ec2:	42a1      	cmp	r1, r4
  406ec4:	d22b      	bcs.n	406f1e <uxStreamBufferAdd+0x72>
	{
		uxSpace -= uxOffset;
  406ec6:	1a64      	subs	r4, r4, r1
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
  406ec8:	429c      	cmp	r4, r3
  406eca:	bf28      	it	cs
  406ecc:	461c      	movcs	r4, r3

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );

	if( uxCount != 0u )
  406ece:	b33c      	cbz	r4, 406f20 <uxStreamBufferAdd+0x74>
  406ed0:	4690      	mov	r8, r2
  406ed2:	460f      	mov	r7, r1
  406ed4:	4681      	mov	r9, r0
	{
		uxNextHead = pxBuffer->uxHead;
  406ed6:	6885      	ldr	r5, [r0, #8]

		if( uxOffset != 0u )
  406ed8:	b329      	cbz	r1, 406f26 <uxStreamBufferAdd+0x7a>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
  406eda:	440d      	add	r5, r1
			if( uxNextHead >= pxBuffer->LENGTH )
  406edc:	42b5      	cmp	r5, r6
  406ede:	d300      	bcc.n	406ee2 <uxStreamBufferAdd+0x36>
			{
				uxNextHead -= pxBuffer->LENGTH;
  406ee0:	1bad      	subs	r5, r5, r6
			}
		}

		if( pucData != NULL )
  406ee2:	f1b8 0f00 	cmp.w	r8, #0
  406ee6:	d035      	beq.n	406f54 <uxStreamBufferAdd+0xa8>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
  406ee8:	1b76      	subs	r6, r6, r5
  406eea:	42a6      	cmp	r6, r4
  406eec:	bf28      	it	cs
  406eee:	4626      	movcs	r6, r4

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
  406ef0:	f109 0a14 	add.w	sl, r9, #20
  406ef4:	4632      	mov	r2, r6
  406ef6:	4641      	mov	r1, r8
  406ef8:	eb0a 0005 	add.w	r0, sl, r5
  406efc:	4b1f      	ldr	r3, [pc, #124]	; (406f7c <uxStreamBufferAdd+0xd0>)
  406efe:	4798      	blx	r3

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
  406f00:	42b4      	cmp	r4, r6
  406f02:	d927      	bls.n	406f54 <uxStreamBufferAdd+0xa8>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
  406f04:	1ba2      	subs	r2, r4, r6
  406f06:	eb08 0106 	add.w	r1, r8, r6
  406f0a:	4650      	mov	r0, sl
  406f0c:	4b1b      	ldr	r3, [pc, #108]	; (406f7c <uxStreamBufferAdd+0xd0>)
  406f0e:	4798      	blx	r3
			}
		}

		if( uxOffset == 0u )
  406f10:	bb07      	cbnz	r7, 406f54 <uxStreamBufferAdd+0xa8>
  406f12:	e017      	b.n	406f44 <uxStreamBufferAdd+0x98>
			xReturn = pdFALSE;
		}
	}
	else
	{
		if( uxLeft <= uxRight )
  406f14:	428d      	cmp	r5, r1
  406f16:	bf34      	ite	cc
  406f18:	2200      	movcc	r2, #0
  406f1a:	2201      	movcs	r2, #1
  406f1c:	e028      	b.n	406f70 <uxStreamBufferAdd+0xc4>
  406f1e:	2400      	movs	r4, #0
			pxBuffer->uxFront = uxNextHead;
		}
	}

	return uxCount;
}
  406f20:	4620      	mov	r0, r4
  406f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if( pucData != NULL )
  406f26:	b16a      	cbz	r2, 406f44 <uxStreamBufferAdd+0x98>
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
  406f28:	1b76      	subs	r6, r6, r5
  406f2a:	42a6      	cmp	r6, r4
  406f2c:	bf28      	it	cs
  406f2e:	4626      	movcs	r6, r4
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
  406f30:	f100 0a14 	add.w	sl, r0, #20
  406f34:	4632      	mov	r2, r6
  406f36:	4641      	mov	r1, r8
  406f38:	eb0a 0005 	add.w	r0, sl, r5
  406f3c:	4b0f      	ldr	r3, [pc, #60]	; (406f7c <uxStreamBufferAdd+0xd0>)
  406f3e:	4798      	blx	r3
			if( uxCount > uxFirst )
  406f40:	42b4      	cmp	r4, r6
  406f42:	d8df      	bhi.n	406f04 <uxStreamBufferAdd+0x58>
			uxNextHead += uxCount;
  406f44:	4425      	add	r5, r4
			if( uxNextHead >= pxBuffer->LENGTH )
  406f46:	f8d9 3010 	ldr.w	r3, [r9, #16]
  406f4a:	429d      	cmp	r5, r3
				uxNextHead -= pxBuffer->LENGTH;
  406f4c:	bf28      	it	cs
  406f4e:	1aed      	subcs	r5, r5, r3
			pxBuffer->uxHead = uxNextHead;
  406f50:	f8c9 5008 	str.w	r5, [r9, #8]
		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
  406f54:	f8d9 100c 	ldr.w	r1, [r9, #12]
size_t uxTail = pxBuffer->uxTail;
  406f58:	f8d9 3000 	ldr.w	r3, [r9]
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
  406f5c:	429d      	cmp	r5, r3
  406f5e:	bf2c      	ite	cs
  406f60:	2200      	movcs	r2, #0
  406f62:	2201      	movcc	r2, #1
  406f64:	4299      	cmp	r1, r3
  406f66:	bf2c      	ite	cs
  406f68:	2300      	movcs	r3, #0
  406f6a:	2301      	movcc	r3, #1
  406f6c:	4293      	cmp	r3, r2
  406f6e:	d0d1      	beq.n	406f14 <uxStreamBufferAdd+0x68>
  406f70:	2a00      	cmp	r2, #0
  406f72:	d0d5      	beq.n	406f20 <uxStreamBufferAdd+0x74>
			pxBuffer->uxFront = uxNextHead;
  406f74:	f8c9 500c 	str.w	r5, [r9, #12]
  406f78:	e7d2      	b.n	406f20 <uxStreamBufferAdd+0x74>
  406f7a:	bf00      	nop
  406f7c:	0040c3d9 	.word	0x0040c3d9

00406f80 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
  406f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
size_t uxHead = pxBuffer->uxHead;
  406f84:	6885      	ldr	r5, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
  406f86:	6804      	ldr	r4, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  406f88:	6906      	ldr	r6, [r0, #16]
  406f8a:	4435      	add	r5, r6
  406f8c:	1b2c      	subs	r4, r5, r4
	if ( uxCount >= pxBuffer->LENGTH )
  406f8e:	42a6      	cmp	r6, r4
		uxCount -= pxBuffer->LENGTH;
  406f90:	bf98      	it	ls
  406f92:	1ba4      	subls	r4, r4, r6
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );

	if( uxSize > uxOffset )
  406f94:	42a1      	cmp	r1, r4
  406f96:	d22f      	bcs.n	406ff8 <uxStreamBufferGet+0x78>
	{
		uxSize -= uxOffset;
  406f98:	1a64      	subs	r4, r4, r1
  406f9a:	429c      	cmp	r4, r3
  406f9c:	bf28      	it	cs
  406f9e:	461c      	movcs	r4, r3
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );

	if( uxCount > 0u )
  406fa0:	b35c      	cbz	r4, 406ffa <uxStreamBufferGet+0x7a>
	{
		uxNextTail = pxBuffer->uxTail;
  406fa2:	6807      	ldr	r7, [r0, #0]

		if( uxOffset != 0u )
  406fa4:	b119      	cbz	r1, 406fae <uxStreamBufferGet+0x2e>
		{
			uxNextTail += uxOffset;
  406fa6:	440f      	add	r7, r1
			if( uxNextTail >= pxBuffer->LENGTH )
  406fa8:	42b7      	cmp	r7, r6
			{
				uxNextTail -= pxBuffer->LENGTH;
  406faa:	bf28      	it	cs
  406fac:	1bbf      	subcs	r7, r7, r6
  406fae:	4690      	mov	r8, r2
  406fb0:	460d      	mov	r5, r1
  406fb2:	4681      	mov	r9, r0
			}
		}

		if( pucData != NULL )
  406fb4:	b16a      	cbz	r2, 406fd2 <uxStreamBufferGet+0x52>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
  406fb6:	1bf6      	subs	r6, r6, r7
  406fb8:	42a6      	cmp	r6, r4
  406fba:	bf28      	it	cs
  406fbc:	4626      	movcs	r6, r4

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
  406fbe:	f100 0a14 	add.w	sl, r0, #20
  406fc2:	4632      	mov	r2, r6
  406fc4:	eb0a 0107 	add.w	r1, sl, r7
  406fc8:	4640      	mov	r0, r8
  406fca:	4b0d      	ldr	r3, [pc, #52]	; (407000 <uxStreamBufferGet+0x80>)
  406fcc:	4798      	blx	r3

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
  406fce:	42b4      	cmp	r4, r6
  406fd0:	d80b      	bhi.n	406fea <uxStreamBufferGet+0x6a>
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
  406fd2:	9b08      	ldr	r3, [sp, #32]
  406fd4:	b98b      	cbnz	r3, 406ffa <uxStreamBufferGet+0x7a>
  406fd6:	b985      	cbnz	r5, 406ffa <uxStreamBufferGet+0x7a>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
  406fd8:	4427      	add	r7, r4

			if( uxNextTail >= pxBuffer->LENGTH )
  406fda:	f8d9 3010 	ldr.w	r3, [r9, #16]
  406fde:	429f      	cmp	r7, r3
			{
				uxNextTail -= pxBuffer->LENGTH;
  406fe0:	bf28      	it	cs
  406fe2:	1aff      	subcs	r7, r7, r3
			}

			pxBuffer->uxTail = uxNextTail;
  406fe4:	f8c9 7000 	str.w	r7, [r9]
  406fe8:	e007      	b.n	406ffa <uxStreamBufferGet+0x7a>
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
  406fea:	1ba2      	subs	r2, r4, r6
  406fec:	4651      	mov	r1, sl
  406fee:	eb08 0006 	add.w	r0, r8, r6
  406ff2:	4b03      	ldr	r3, [pc, #12]	; (407000 <uxStreamBufferGet+0x80>)
  406ff4:	4798      	blx	r3
  406ff6:	e7ec      	b.n	406fd2 <uxStreamBufferGet+0x52>
  406ff8:	2400      	movs	r4, #0
		}
	}

	return uxCount;
}
  406ffa:	4620      	mov	r0, r4
  406ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407000:	0040c3d9 	.word	0x0040c3d9

00407004 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
  407004:	b538      	push	{r3, r4, r5, lr}
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
  407006:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
  40700a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  40700e:	fb01 f302 	mul.w	r3, r1, r2
		ucFactor = 0u;
		while( uxWinSize > 0xfffful )
  407012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  407016:	d30c      	bcc.n	407032 <prvWinScaleFactor+0x2e>
  407018:	2400      	movs	r4, #0
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
  40701a:	085b      	lsrs	r3, r3, #1
			ucFactor++;
  40701c:	3401      	adds	r4, #1
  40701e:	b2e4      	uxtb	r4, r4
		while( uxWinSize > 0xfffful )
  407020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  407024:	d2f9      	bcs.n	40701a <prvWinScaleFactor+0x16>
		}

		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
  407026:	4623      	mov	r3, r4
  407028:	4803      	ldr	r0, [pc, #12]	; (407038 <prvWinScaleFactor+0x34>)
  40702a:	4d04      	ldr	r5, [pc, #16]	; (40703c <prvWinScaleFactor+0x38>)
  40702c:	47a8      	blx	r5
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
	}
  40702e:	4620      	mov	r0, r4
  407030:	bd38      	pop	{r3, r4, r5, pc}
		ucFactor = 0u;
  407032:	2400      	movs	r4, #0
  407034:	e7f7      	b.n	407026 <prvWinScaleFactor+0x22>
  407036:	bf00      	nop
  407038:	00413484 	.word	0x00413484
  40703c:	0040c351 	.word	0x0040c351

00407040 <prvTCPAddTxData>:
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
}
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
  407040:	b538      	push	{r3, r4, r5, lr}
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
  407042:	6f82      	ldr	r2, [r0, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
  407044:	6891      	ldr	r1, [r2, #8]
size_t uxMid = pxBuffer->uxMid;
  407046:	6854      	ldr	r4, [r2, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  407048:	6913      	ldr	r3, [r2, #16]
  40704a:	4419      	add	r1, r3
  40704c:	1b09      	subs	r1, r1, r4
	if ( uxCount >= pxBuffer->LENGTH )
  40704e:	428b      	cmp	r3, r1
		uxCount -= pxBuffer->LENGTH;
  407050:	bf98      	it	ls
  407052:	1ac9      	subls	r1, r1, r3

	if( lLength > 0 )
  407054:	2900      	cmp	r1, #0
  407056:	dd1b      	ble.n	407090 <prvTCPAddTxData+0x50>
  407058:	4604      	mov	r4, r0
		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
  40705a:	6852      	ldr	r2, [r2, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
  40705c:	30dc      	adds	r0, #220	; 0xdc
  40705e:	4d0d      	ldr	r5, [pc, #52]	; (407094 <prvTCPAddTxData+0x54>)
  407060:	47a8      	blx	r5
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
  407062:	2800      	cmp	r0, #0
  407064:	dd14      	ble.n	407090 <prvTCPAddTxData+0x50>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
  407066:	6fa3      	ldr	r3, [r4, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
  407068:	689a      	ldr	r2, [r3, #8]
size_t uxMid = pxBuffer->uxMid;
  40706a:	685c      	ldr	r4, [r3, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  40706c:	6919      	ldr	r1, [r3, #16]
  40706e:	440a      	add	r2, r1
  407070:	1b12      	subs	r2, r2, r4
	if ( uxCount >= pxBuffer->LENGTH )
  407072:	4291      	cmp	r1, r2
		uxCount -= pxBuffer->LENGTH;
  407074:	bf98      	it	ls
  407076:	1a52      	subls	r2, r2, r1
	pxBuffer->uxMid += uxCount;
  407078:	685c      	ldr	r4, [r3, #4]
  40707a:	4290      	cmp	r0, r2
  40707c:	bf94      	ite	ls
  40707e:	1822      	addls	r2, r4, r0
  407080:	18a2      	addhi	r2, r4, r2
  407082:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
  407084:	685a      	ldr	r2, [r3, #4]
  407086:	4291      	cmp	r1, r2
  407088:	d802      	bhi.n	407090 <prvTCPAddTxData+0x50>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
  40708a:	685a      	ldr	r2, [r3, #4]
  40708c:	1a51      	subs	r1, r2, r1
  40708e:	6059      	str	r1, [r3, #4]
  407090:	bd38      	pop	{r3, r4, r5, pc}
  407092:	bf00      	nop
  407094:	004095dd 	.word	0x004095dd

00407098 <prvTCPReturnPacket>:
{
  407098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40709c:	b08e      	sub	sp, #56	; 0x38
  40709e:	4605      	mov	r5, r0
  4070a0:	4616      	mov	r6, r2
  4070a2:	4698      	mov	r8, r3
	if( pxNetworkBuffer == NULL )
  4070a4:	460f      	mov	r7, r1
  4070a6:	2900      	cmp	r1, #0
  4070a8:	f000 80f1 	beq.w	40728e <prvTCPReturnPacket+0x1f6>
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  4070ac:	69bc      	ldr	r4, [r7, #24]
		if( pxSocket != NULL )
  4070ae:	2d00      	cmp	r5, #0
  4070b0:	f000 8130 	beq.w	407314 <prvTCPReturnPacket+0x27c>
			if( pxSocket->u.xTCP.rxStream != NULL )
  4070b4:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4070b6:	2a00      	cmp	r2, #0
  4070b8:	f000 80f2 	beq.w	4072a0 <prvTCPReturnPacket+0x208>
size_t uxFront = pxBuffer->uxFront;
  4070bc:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
  4070be:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  4070c0:	6912      	ldr	r2, [r2, #16]
  4070c2:	4413      	add	r3, r2
  4070c4:	3b01      	subs	r3, #1
  4070c6:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
  4070c8:	429a      	cmp	r2, r3
  4070ca:	f200 80ec 	bhi.w	4072a6 <prvTCPReturnPacket+0x20e>
		uxCount -= pxBuffer->LENGTH;
  4070ce:	eba3 0e02 	sub.w	lr, r3, r2
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
  4070d2:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
  4070d6:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
  4070da:	4aa0      	ldr	r2, [pc, #640]	; (40735c <prvTCPReturnPacket+0x2c4>)
  4070dc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  4070de:	401a      	ands	r2, r3
  4070e0:	2a00      	cmp	r2, #0
  4070e2:	f040 80e2 	bne.w	4072aa <prvTCPReturnPacket+0x212>
  4070e6:	4281      	cmp	r1, r0
  4070e8:	bf28      	it	cs
  4070ea:	4601      	movcs	r1, r0
  4070ec:	4689      	mov	r9, r1
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
  4070ee:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
  4070f2:	4591      	cmp	r9, r2
  4070f4:	d202      	bcs.n	4070fc <prvTCPReturnPacket+0x64>
				ulSpace = pxSocket->u.xTCP.usCurMSS;
  4070f6:	4596      	cmp	lr, r2
  4070f8:	bf28      	it	cs
  4070fa:	4691      	movcs	r9, r2
				ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
  4070fc:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
  407100:	fa29 f303 	lsr.w	r3, r9, r3
  407104:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  407108:	4293      	cmp	r3, r2
  40710a:	bf28      	it	cs
  40710c:	4613      	movcs	r3, r2
			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
  40710e:	021a      	lsls	r2, r3, #8
  407110:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  407114:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  407118:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40711c:	4313      	orrs	r3, r2
  40711e:	8623      	strh	r3, [r4, #48]	; 0x30
				if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE )
  407120:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  407122:	2b17      	cmp	r3, #23
  407124:	d02e      	beq.n	407184 <prvTCPReturnPacket+0xec>
					if( ( xTCPWindowLoggingLevel != 0 ) && ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) )
  407126:	4b8e      	ldr	r3, [pc, #568]	; (407360 <prvTCPReturnPacket+0x2c8>)
  407128:	681b      	ldr	r3, [r3, #0]
  40712a:	b35b      	cbz	r3, 407184 <prvTCPReturnPacket+0xec>
  40712c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  407130:	f013 0f01 	tst.w	r3, #1
  407134:	d026      	beq.n	407184 <prvTCPReturnPacket+0xec>
						if(pxSocket->u.xTCP.rxStream != NULL)
  407136:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  407138:	2b00      	cmp	r3, #0
  40713a:	f000 80b9 	beq.w	4072b0 <prvTCPReturnPacket+0x218>
size_t uxFront = pxBuffer->uxFront;
  40713e:	68da      	ldr	r2, [r3, #12]
size_t uxTail = pxBuffer->uxTail;
  407140:	6818      	ldr	r0, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  407142:	691b      	ldr	r3, [r3, #16]
  407144:	4418      	add	r0, r3
  407146:	3801      	subs	r0, #1
  407148:	1a80      	subs	r0, r0, r2
	if( uxCount >= pxBuffer->LENGTH )
  40714a:	4283      	cmp	r3, r0
  40714c:	d800      	bhi.n	407150 <prvTCPReturnPacket+0xb8>
		uxCount -= pxBuffer->LENGTH;
  40714e:	1ac0      	subs	r0, r0, r3
						FreeRTOS_debug_printf( ( "%s: %lxip:%u: [%lu < %lu] winSize %ld\n",
  407150:	f995 3040 	ldrsb.w	r3, [r5, #64]	; 0x40
  407154:	2b00      	cmp	r3, #0
  407156:	f2c0 80fa 	blt.w	40734e <prvTCPReturnPacket+0x2b6>
  40715a:	6baa      	ldr	r2, [r5, #56]	; 0x38
  40715c:	f8b5 c03c 	ldrh.w	ip, [r5, #60]	; 0x3c
  407160:	4980      	ldr	r1, [pc, #512]	; (407364 <prvTCPReturnPacket+0x2cc>)
  407162:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
  407166:	469e      	mov	lr, r3
  407168:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
  40716c:	ebae 0e03 	sub.w	lr, lr, r3
  407170:	f8cd e008 	str.w	lr, [sp, #8]
  407174:	6eab      	ldr	r3, [r5, #104]	; 0x68
  407176:	9301      	str	r3, [sp, #4]
  407178:	9000      	str	r0, [sp, #0]
  40717a:	4663      	mov	r3, ip
  40717c:	487a      	ldr	r0, [pc, #488]	; (407368 <prvTCPReturnPacket+0x2d0>)
  40717e:	f8df a208 	ldr.w	sl, [pc, #520]	; 407388 <prvTCPReturnPacket+0x2f0>
  407182:	47d0      	blx	sl
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
  407184:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  407188:	f36f 0300 	bfc	r3, #0, #1
  40718c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
  407190:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
  407194:	444a      	add	r2, r9
  407196:	646a      	str	r2, [r5, #68]	; 0x44
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
  407198:	f013 0f02 	tst.w	r3, #2
  40719c:	f000 808a 	beq.w	4072b4 <prvTCPReturnPacket+0x21c>
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
  4071a0:	b2db      	uxtb	r3, r3
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
  4071a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4071a6:	f043 0304 	orr.w	r3, r3, #4
  4071aa:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
  4071ae:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
  4071b2:	3b01      	subs	r3, #1
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
  4071b4:	0e1a      	lsrs	r2, r3, #24
  4071b6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4071ba:	0219      	lsls	r1, r3, #8
  4071bc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4071c0:	430a      	orrs	r2, r1
  4071c2:	0a1b      	lsrs	r3, r3, #8
  4071c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4071c8:	4313      	orrs	r3, r2
  4071ca:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
  4071ce:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
  4071d2:	0e1a      	lsrs	r2, r3, #24
  4071d4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4071d8:	0219      	lsls	r1, r3, #8
  4071da:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4071de:	430a      	orrs	r2, r1
  4071e0:	0a1b      	lsrs	r3, r3, #8
  4071e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4071e6:	4313      	orrs	r3, r2
  4071e8:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
		pxIPHeader->ucTimeToLive		   = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
  4071ec:	2380      	movs	r3, #128	; 0x80
  4071ee:	75a3      	strb	r3, [r4, #22]
		pxIPHeader->usLength			   = FreeRTOS_htons( ulLen );
  4071f0:	0a33      	lsrs	r3, r6, #8
  4071f2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  4071f6:	8223      	strh	r3, [r4, #16]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
  4071f8:	4b5c      	ldr	r3, [pc, #368]	; (40736c <prvTCPReturnPacket+0x2d4>)
  4071fa:	695b      	ldr	r3, [r3, #20]
  4071fc:	b90b      	cbnz	r3, 407202 <prvTCPReturnPacket+0x16a>
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
  4071fe:	f8d4 301e 	ldr.w	r3, [r4, #30]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
  407202:	f8d4 201a 	ldr.w	r2, [r4, #26]
  407206:	f8c4 201e 	str.w	r2, [r4, #30]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
  40720a:	f8c4 301a 	str.w	r3, [r4, #26]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
  40720e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  407210:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
  407212:	8462      	strh	r2, [r4, #34]	; 0x22
  407214:	84a3      	strh	r3, [r4, #36]	; 0x24
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
  407216:	4956      	ldr	r1, [pc, #344]	; (407370 <prvTCPReturnPacket+0x2d8>)
  407218:	880b      	ldrh	r3, [r1, #0]
  40721a:	0a1a      	lsrs	r2, r3, #8
  40721c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  407220:	8262      	strh	r2, [r4, #18]
		usPacketIdentifier++;
  407222:	3301      	adds	r3, #1
  407224:	800b      	strh	r3, [r1, #0]
		pxIPHeader->usFragmentOffset = 0u;
  407226:	2000      	movs	r0, #0
  407228:	7520      	strb	r0, [r4, #20]
  40722a:	7560      	strb	r0, [r4, #21]
			pxIPHeader->usHeaderChecksum = 0x00u;
  40722c:	7620      	strb	r0, [r4, #24]
  40722e:	7660      	strb	r0, [r4, #25]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
  407230:	2214      	movs	r2, #20
  407232:	f104 010e 	add.w	r1, r4, #14
  407236:	4b4f      	ldr	r3, [pc, #316]	; (407374 <prvTCPReturnPacket+0x2dc>)
  407238:	4798      	blx	r3
			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
  40723a:	0a03      	lsrs	r3, r0, #8
  40723c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  407240:	43c0      	mvns	r0, r0
  407242:	8320      	strh	r0, [r4, #24]
			usGenerateProtocolChecksum( (uint8_t*)pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
  407244:	2201      	movs	r2, #1
  407246:	69f9      	ldr	r1, [r7, #28]
  407248:	4620      	mov	r0, r4
  40724a:	4b4b      	ldr	r3, [pc, #300]	; (407378 <prvTCPReturnPacket+0x2e0>)
  40724c:	4798      	blx	r3
			if( pxTCPPacket->xTCPHeader.usChecksum == 0x00u )
  40724e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  407250:	b92b      	cbnz	r3, 40725e <prvTCPReturnPacket+0x1c6>
				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
  407252:	f04f 33ff 	mov.w	r3, #4294967295
  407256:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40725a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
  40725e:	360e      	adds	r6, #14
  407260:	61fe      	str	r6, [r7, #28]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
  407262:	4625      	mov	r5, r4
  407264:	f855 3f06 	ldr.w	r3, [r5, #6]!
  407268:	6023      	str	r3, [r4, #0]
  40726a:	88ab      	ldrh	r3, [r5, #4]
  40726c:	80a3      	strh	r3, [r4, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
  40726e:	4b3f      	ldr	r3, [pc, #252]	; (40736c <prvTCPReturnPacket+0x2d4>)
  407270:	6818      	ldr	r0, [r3, #0]
  407272:	f8c4 0006 	str.w	r0, [r4, #6]
  407276:	889b      	ldrh	r3, [r3, #4]
  407278:	80ab      	strh	r3, [r5, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
  40727a:	4641      	mov	r1, r8
  40727c:	4638      	mov	r0, r7
  40727e:	4b3f      	ldr	r3, [pc, #252]	; (40737c <prvTCPReturnPacket+0x2e4>)
  407280:	4798      	blx	r3
		if( xReleaseAfterSend == pdFALSE )
  407282:	f1b8 0f00 	cmp.w	r8, #0
  407286:	d054      	beq.n	407332 <prvTCPReturnPacket+0x29a>
}
  407288:	b00e      	add	sp, #56	; 0x38
  40728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
  40728e:	f100 0382 	add.w	r3, r0, #130	; 0x82
  407292:	930b      	str	r3, [sp, #44]	; 0x2c
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
  407294:	2346      	movs	r3, #70	; 0x46
  407296:	930c      	str	r3, [sp, #48]	; 0x30
		xReleaseAfterSend = pdFALSE;
  407298:	f04f 0800 	mov.w	r8, #0
		pxNetworkBuffer = &xTempBuffer;
  40729c:	af05      	add	r7, sp, #20
  40729e:	e705      	b.n	4070ac <prvTCPReturnPacket+0x14>
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
  4072a0:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
  4072a4:	e715      	b.n	4070d2 <prvTCPReturnPacket+0x3a>
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  4072a6:	469e      	mov	lr, r3
  4072a8:	e713      	b.n	4070d2 <prvTCPReturnPacket+0x3a>
				ulSpace = 0u;
  4072aa:	f04f 0900 	mov.w	r9, #0
  4072ae:	e71e      	b.n	4070ee <prvTCPReturnPacket+0x56>
							uxFrontSpace = 0u;
  4072b0:	2000      	movs	r0, #0
  4072b2:	e74d      	b.n	407150 <prvTCPReturnPacket+0xb8>
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
  4072b4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
  4072b8:	0e1a      	lsrs	r2, r3, #24
  4072ba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4072be:	0219      	lsls	r1, r3, #8
  4072c0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4072c4:	430a      	orrs	r2, r1
  4072c6:	0a1b      	lsrs	r3, r3, #8
  4072c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4072cc:	4313      	orrs	r3, r2
  4072ce:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
  4072d2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  4072d6:	f013 0f01 	tst.w	r3, #1
  4072da:	f43f af78 	beq.w	4071ce <prvTCPReturnPacket+0x136>
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
  4072de:	f1a6 0228 	sub.w	r2, r6, #40	; 0x28
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
  4072e2:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
  4072e6:	4411      	add	r1, r2
  4072e8:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
  4072ec:	4281      	cmp	r1, r0
  4072ee:	f43f af6e 	beq.w	4071ce <prvTCPReturnPacket+0x136>
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
  4072f2:	f023 0301 	bic.w	r3, r3, #1
  4072f6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
						FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
  4072fa:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
  4072fe:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
  407302:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
  407306:	1a1b      	subs	r3, r3, r0
  407308:	1a09      	subs	r1, r1, r0
  40730a:	481d      	ldr	r0, [pc, #116]	; (407380 <prvTCPReturnPacket+0x2e8>)
  40730c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 407388 <prvTCPReturnPacket+0x2f0>
  407310:	47c8      	blx	r9
  407312:	e75c      	b.n	4071ce <prvTCPReturnPacket+0x136>
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
  407314:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
  407318:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
  40731c:	f8c4 2026 	str.w	r2, [r4, #38]	; 0x26
  407320:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
		pxIPHeader->ucTimeToLive		   = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
  407324:	2380      	movs	r3, #128	; 0x80
  407326:	75a3      	strb	r3, [r4, #22]
		pxIPHeader->usLength			   = FreeRTOS_htons( ulLen );
  407328:	0a33      	lsrs	r3, r6, #8
  40732a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  40732e:	8223      	strh	r3, [r4, #16]
  407330:	e765      	b.n	4071fe <prvTCPReturnPacket+0x166>
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
  407332:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  407334:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
  407336:	8462      	strh	r2, [r4, #34]	; 0x22
  407338:	84a3      	strh	r3, [r4, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
  40733a:	f8d4 301e 	ldr.w	r3, [r4, #30]
  40733e:	f8c4 301a 	str.w	r3, [r4, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
  407342:	6823      	ldr	r3, [r4, #0]
  407344:	f8c4 3006 	str.w	r3, [r4, #6]
  407348:	88a3      	ldrh	r3, [r4, #4]
  40734a:	80ab      	strh	r3, [r5, #4]
}
  40734c:	e79c      	b.n	407288 <prvTCPReturnPacket+0x1f0>
						FreeRTOS_debug_printf( ( "%s: %lxip:%u: [%lu < %lu] winSize %ld\n",
  40734e:	6baa      	ldr	r2, [r5, #56]	; 0x38
  407350:	f8b5 c03c 	ldrh.w	ip, [r5, #60]	; 0x3c
  407354:	6e68      	ldr	r0, [r5, #100]	; 0x64
  407356:	490b      	ldr	r1, [pc, #44]	; (407384 <prvTCPReturnPacket+0x2ec>)
  407358:	e703      	b.n	407162 <prvTCPReturnPacket+0xca>
  40735a:	bf00      	nop
  40735c:	00040080 	.word	0x00040080
  407360:	20006d84 	.word	0x20006d84
  407364:	00413434 	.word	0x00413434
  407368:	00413438 	.word	0x00413438
  40736c:	200000d8 	.word	0x200000d8
  407370:	20006cd8 	.word	0x20006cd8
  407374:	00405789 	.word	0x00405789
  407378:	0040586d 	.word	0x0040586d
  40737c:	0040a8c9 	.word	0x0040a8c9
  407380:	00413460 	.word	0x00413460
  407384:	0041342c 	.word	0x0041342c
  407388:	0040c351 	.word	0x0040c351

0040738c <prvTCPSendReset>:
	return xSendLength;
}
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
  40738c:	b510      	push	{r4, lr}
  40738e:	4601      	mov	r1, r0
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  407390:	6983      	ldr	r3, [r0, #24]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
  407392:	2214      	movs	r2, #20
  407394:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
  407398:	2250      	movs	r2, #80	; 0x50
  40739a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
  40739e:	2300      	movs	r3, #0
  4073a0:	2228      	movs	r2, #40	; 0x28
  4073a2:	4618      	mov	r0, r3
  4073a4:	4c01      	ldr	r4, [pc, #4]	; (4073ac <prvTCPSendReset+0x20>)
  4073a6:	47a0      	blx	r4
	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
}
  4073a8:	2000      	movs	r0, #0
  4073aa:	bd10      	pop	{r4, pc}
  4073ac:	00407099 	.word	0x00407099

004073b0 <prvTCPCreateWindow>:
{
  4073b0:	b530      	push	{r4, r5, lr}
  4073b2:	b083      	sub	sp, #12
  4073b4:	4604      	mov	r4, r0
	if( xTCPWindowLoggingLevel )
  4073b6:	4b14      	ldr	r3, [pc, #80]	; (407408 <prvTCPCreateWindow+0x58>)
  4073b8:	681b      	ldr	r3, [r3, #0]
  4073ba:	b9bb      	cbnz	r3, 4073ec <prvTCPCreateWindow+0x3c>
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
  4073bc:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
  4073c0:	f44f 6191 	mov.w	r1, #1160	; 0x488
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
  4073c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	vTCPWindowCreate(
  4073c8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  4073cc:	9301      	str	r3, [sp, #4]
  4073ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  4073d2:	9300      	str	r3, [sp, #0]
  4073d4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4073d8:	fb01 f202 	mul.w	r2, r1, r2
  4073dc:	fb01 f100 	mul.w	r1, r1, r0
  4073e0:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
  4073e4:	4c09      	ldr	r4, [pc, #36]	; (40740c <prvTCPCreateWindow+0x5c>)
  4073e6:	47a0      	blx	r4
}
  4073e8:	b003      	add	sp, #12
  4073ea:	bd30      	pop	{r4, r5, pc}
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
  4073ec:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
  4073f0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  4073f2:	9300      	str	r3, [sp, #0]
  4073f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  4073f6:	6e42      	ldr	r2, [r0, #100]	; 0x64
  4073f8:	f44f 6091 	mov.w	r0, #1160	; 0x488
  4073fc:	fb00 f101 	mul.w	r1, r0, r1
  407400:	4803      	ldr	r0, [pc, #12]	; (407410 <prvTCPCreateWindow+0x60>)
  407402:	4d04      	ldr	r5, [pc, #16]	; (407414 <prvTCPCreateWindow+0x64>)
  407404:	47a8      	blx	r5
  407406:	e7d9      	b.n	4073bc <prvTCPCreateWindow+0xc>
  407408:	20006d84 	.word	0x20006d84
  40740c:	004092a5 	.word	0x004092a5
  407410:	004132dc 	.word	0x004132dc
  407414:	0040c351 	.word	0x0040c351

00407418 <prvTCPNextTimeout>:
{
  407418:	b530      	push	{r4, r5, lr}
  40741a:	b085      	sub	sp, #20
  40741c:	4604      	mov	r4, r0
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
  40741e:	f644 6320 	movw	r3, #20000	; 0x4e20
  407422:	9303      	str	r3, [sp, #12]
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
  407424:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
  407428:	2b02      	cmp	r3, #2
  40742a:	d007      	beq.n	40743c <prvTCPNextTimeout+0x24>
	else if( pxSocket->u.xTCP.usTimeout == 0u )
  40742c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
  407430:	2b00      	cmp	r3, #0
  407432:	d032      	beq.n	40749a <prvTCPNextTimeout+0x82>
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
  407434:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
}
  407438:	b005      	add	sp, #20
  40743a:	bd30      	pop	{r4, r5, pc}
		if( pxSocket->u.xTCP.bits.bConnPrepared )
  40743c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  407440:	f013 0f08 	tst.w	r3, #8
  407444:	d025      	beq.n	407492 <prvTCPNextTimeout+0x7a>
			if( pxSocket->u.xTCP.ucRepCount < 3u )
  407446:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
  40744a:	2b02      	cmp	r3, #2
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
  40744c:	bf9d      	ittte	ls
  40744e:	f103 33ff 	addls.w	r3, r3, #4294967295
  407452:	f640 32b8 	movwls	r2, #3000	; 0xbb8
  407456:	fa02 f303 	lslls.w	r3, r2, r3
				ulDelayMs = 11000UL;
  40745a:	f642 23f8 	movwhi	r3, #11000	; 0x2af8
  40745e:	9303      	str	r3, [sp, #12]
		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
  407460:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  407464:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  407466:	9903      	ldr	r1, [sp, #12]
  407468:	9100      	str	r1, [sp, #0]
  40746a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40746c:	481d      	ldr	r0, [pc, #116]	; (4074e4 <prvTCPNextTimeout+0xcc>)
  40746e:	4d1e      	ldr	r5, [pc, #120]	; (4074e8 <prvTCPNextTimeout+0xd0>)
  407470:	47a8      	blx	r5
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
  407472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  407476:	9a03      	ldr	r2, [sp, #12]
  407478:	fb03 f302 	mul.w	r3, r3, r2
  40747c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  407480:	bf23      	ittte	cs
  407482:	4a1a      	ldrcs	r2, [pc, #104]	; (4074ec <prvTCPNextTimeout+0xd4>)
  407484:	fba2 2303 	umullcs	r2, r3, r2, r3
  407488:	099b      	lsrcs	r3, r3, #6
  40748a:	2301      	movcc	r3, #1
  40748c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  407490:	e7d0      	b.n	407434 <prvTCPNextTimeout+0x1c>
			ulDelayMs = 500UL;
  407492:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  407496:	9303      	str	r3, [sp, #12]
  407498:	e7e2      	b.n	407460 <prvTCPNextTimeout+0x48>
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
  40749a:	aa03      	add	r2, sp, #12
  40749c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
  4074a0:	30dc      	adds	r0, #220	; 0xdc
  4074a2:	4b13      	ldr	r3, [pc, #76]	; (4074f0 <prvTCPNextTimeout+0xd8>)
  4074a4:	4798      	blx	r3
		if( ulDelayMs == 0u )
  4074a6:	9a03      	ldr	r2, [sp, #12]
  4074a8:	b982      	cbnz	r2, 4074cc <prvTCPNextTimeout+0xb4>
			if( xResult != ( BaseType_t )0 )
  4074aa:	b158      	cbz	r0, 4074c4 <prvTCPNextTimeout+0xac>
				ulDelayMs = 1UL;
  4074ac:	2301      	movs	r3, #1
  4074ae:	9303      	str	r3, [sp, #12]
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
  4074b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4074b4:	9a03      	ldr	r2, [sp, #12]
  4074b6:	fb03 f302 	mul.w	r3, r3, r2
  4074ba:	4a0c      	ldr	r2, [pc, #48]	; (4074ec <prvTCPNextTimeout+0xd4>)
  4074bc:	fba2 2303 	umull	r2, r3, r2, r3
  4074c0:	099b      	lsrs	r3, r3, #6
  4074c2:	e00c      	b.n	4074de <prvTCPNextTimeout+0xc6>
				ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
  4074c4:	f644 6320 	movw	r3, #20000	; 0x4e20
  4074c8:	9303      	str	r3, [sp, #12]
  4074ca:	e7f1      	b.n	4074b0 <prvTCPNextTimeout+0x98>
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
  4074cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4074d0:	fb03 f302 	mul.w	r3, r3, r2
  4074d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4074d8:	bf38      	it	cc
  4074da:	2301      	movcc	r3, #1
  4074dc:	d2ed      	bcs.n	4074ba <prvTCPNextTimeout+0xa2>
  4074de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  4074e2:	e7a7      	b.n	407434 <prvTCPNextTimeout+0x1c>
  4074e4:	0041335c 	.word	0x0041335c
  4074e8:	0040c351 	.word	0x0040c351
  4074ec:	10624dd3 	.word	0x10624dd3
  4074f0:	00409755 	.word	0x00409755

004074f4 <vTCPStateChange>:
{
  4074f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4074f8:	b082      	sub	sp, #8
  4074fa:	4604      	mov	r4, r0
  4074fc:	460d      	mov	r5, r1
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
  4074fe:	f890 7053 	ldrb.w	r7, [r0, #83]	; 0x53
  407502:	2f04      	cmp	r7, #4
  407504:	f240 8088 	bls.w	407618 <vTCPStateChange+0x124>
  407508:	2f08      	cmp	r7, #8
  40750a:	f000 8085 	beq.w	407618 <vTCPStateChange+0x124>
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
  40750e:	2904      	cmp	r1, #4
  407510:	d80c      	bhi.n	40752c <vTCPStateChange+0x38>
			pxSocket->xEventBits |= eSOCKET_CLOSED;
  407512:	6823      	ldr	r3, [r4, #0]
  407514:	f043 0220 	orr.w	r2, r3, #32
  407518:	6022      	str	r2, [r4, #0]
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
  40751a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40751c:	f012 0f04 	tst.w	r2, #4
  407520:	d078      	beq.n	407614 <vTCPStateChange+0x120>
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
  407522:	f443 6384 	orr.w	r3, r3, #1056	; 0x420
  407526:	6023      	str	r3, [r4, #0]
FreeRTOS_Socket_t *xParent = NULL;
  407528:	2600      	movs	r6, #0
  40752a:	e0a0      	b.n	40766e <vTCPStateChange+0x17a>
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
  40752c:	2301      	movs	r3, #1
  40752e:	e076      	b.n	40761e <vTCPStateChange+0x12a>
						xParent->u.xTCP.pxPeerSocket = pxSocket;
  407530:	6574      	str	r4, [r6, #84]	; 0x54
  407532:	e087      	b.n	407644 <vTCPStateChange+0x150>
				pxSocket->xEventBits |= eSOCKET_CONNECT;
  407534:	6823      	ldr	r3, [r4, #0]
  407536:	f043 0208 	orr.w	r2, r3, #8
  40753a:	6022      	str	r2, [r4, #0]
					if( pxSocket->xSelectBits & eSELECT_WRITE )
  40753c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40753e:	f012 0f02 	tst.w	r2, #2
  407542:	d065      	beq.n	407610 <vTCPStateChange+0x11c>
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
  407544:	f443 7302 	orr.w	r3, r3, #520	; 0x208
  407548:	6023      	str	r3, [r4, #0]
FreeRTOS_Socket_t *xParent = NULL;
  40754a:	2600      	movs	r6, #0
  40754c:	e08f      	b.n	40766e <vTCPStateChange+0x17a>
		if( eTCPState == eCLOSED )
  40754e:	b925      	cbnz	r5, 40755a <vTCPStateChange+0x66>
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
  407550:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  407554:	f013 0f06 	tst.w	r3, #6
  407558:	d117      	bne.n	40758a <vTCPStateChange+0x96>
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
  40755a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
  40755e:	4e55      	ldr	r6, [pc, #340]	; (4076b4 <vTCPStateChange+0x1c0>)
  407560:	47b0      	blx	r6
  407562:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
  407564:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
  407568:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  40756c:	f36f 0341 	bfc	r3, #1, #1
  407570:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
  407574:	2300      	movs	r3, #0
  407576:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
  40757a:	47b0      	blx	r6
  40757c:	65e0      	str	r0, [r4, #92]	; 0x5c
	if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
  40757e:	4b4e      	ldr	r3, [pc, #312]	; (4076b8 <vTCPStateChange+0x1c4>)
  407580:	681b      	ldr	r3, [r3, #0]
  407582:	2b00      	cmp	r3, #0
  407584:	db41      	blt.n	40760a <vTCPStateChange+0x116>
  407586:	2600      	movs	r6, #0
  407588:	e038      	b.n	4075fc <vTCPStateChange+0x108>
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
  40758a:	484c      	ldr	r0, [pc, #304]	; (4076bc <vTCPStateChange+0x1c8>)
  40758c:	4b4c      	ldr	r3, [pc, #304]	; (4076c0 <vTCPStateChange+0x1cc>)
  40758e:	4798      	blx	r3
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
  407590:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  407594:	f013 0f08 	tst.w	r3, #8
  407598:	d1df      	bne.n	40755a <vTCPStateChange+0x66>
					FreeRTOS_closesocket( pxSocket );
  40759a:	4620      	mov	r0, r4
  40759c:	4b49      	ldr	r3, [pc, #292]	; (4076c4 <vTCPStateChange+0x1d0>)
  40759e:	4798      	blx	r3
  4075a0:	e7db      	b.n	40755a <vTCPStateChange+0x66>
		FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
  4075a2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  4075a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	{
		if( ulState >= ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) )
		{
			ulState = ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) - 1u;
		}
		return pcStateNames[ ulState ];
  4075a6:	4848      	ldr	r0, [pc, #288]	; (4076c8 <vTCPStateChange+0x1d4>)
  4075a8:	2d0c      	cmp	r5, #12
  4075aa:	bf28      	it	cs
  4075ac:	250c      	movcs	r5, #12
		FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
  4075ae:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  4075b2:	9401      	str	r4, [sp, #4]
		return pcStateNames[ ulState ];
  4075b4:	2f0c      	cmp	r7, #12
  4075b6:	bf28      	it	cs
  4075b8:	270c      	movcs	r7, #12
		FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
  4075ba:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
  4075be:	9000      	str	r0, [sp, #0]
  4075c0:	4842      	ldr	r0, [pc, #264]	; (4076cc <vTCPStateChange+0x1d8>)
  4075c2:	4c3f      	ldr	r4, [pc, #252]	; (4076c0 <vTCPStateChange+0x1cc>)
  4075c4:	47a0      	blx	r4
  4075c6:	e01c      	b.n	407602 <vTCPStateChange+0x10e>
			pxSocket->u.xTCP.usTimeout = 0u;
  4075c8:	2300      	movs	r3, #0
  4075ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
  4075ce:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
  4075d2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 4076b4 <vTCPStateChange+0x1c0>
  4075d6:	47c0      	blx	r8
  4075d8:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
  4075da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
  4075de:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  4075e2:	f36f 0341 	bfc	r3, #1, #1
  4075e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
  4075ea:	2300      	movs	r3, #0
  4075ec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
  4075f0:	47c0      	blx	r8
  4075f2:	65e0      	str	r0, [r4, #92]	; 0x5c
	if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
  4075f4:	4b30      	ldr	r3, [pc, #192]	; (4076b8 <vTCPStateChange+0x1c4>)
  4075f6:	681b      	ldr	r3, [r3, #0]
  4075f8:	2b00      	cmp	r3, #0
  4075fa:	db02      	blt.n	407602 <vTCPStateChange+0x10e>
  4075fc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  4075fe:	2917      	cmp	r1, #23
  407600:	d1cf      	bne.n	4075a2 <vTCPStateChange+0xae>
	if( xParent != NULL )
  407602:	b116      	cbz	r6, 40760a <vTCPStateChange+0x116>
		vSocketWakeUpUser( xParent );
  407604:	4630      	mov	r0, r6
  407606:	4b32      	ldr	r3, [pc, #200]	; (4076d0 <vTCPStateChange+0x1dc>)
  407608:	4798      	blx	r3
}
  40760a:	b002      	add	sp, #8
  40760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
FreeRTOS_Socket_t *xParent = NULL;
  407610:	2600      	movs	r6, #0
  407612:	e02c      	b.n	40766e <vTCPStateChange+0x17a>
  407614:	2600      	movs	r6, #0
  407616:	e02a      	b.n	40766e <vTCPStateChange+0x17a>
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
  407618:	2d04      	cmp	r5, #4
  40761a:	d998      	bls.n	40754e <vTCPStateChange+0x5a>
  40761c:	2300      	movs	r3, #0
  40761e:	2d08      	cmp	r5, #8
  407620:	d044      	beq.n	4076ac <vTCPStateChange+0x1b8>
	if( bBefore != bAfter )
  407622:	2b00      	cmp	r3, #0
  407624:	d193      	bne.n	40754e <vTCPStateChange+0x5a>
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
  407626:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  40762a:	f013 0f04 	tst.w	r3, #4
  40762e:	d081      	beq.n	407534 <vTCPStateChange+0x40>
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
  407630:	f013 0f08 	tst.w	r3, #8
					xParent = pxSocket->u.xTCP.pxPeerSocket;
  407634:	bf0c      	ite	eq
  407636:	6d66      	ldreq	r6, [r4, #84]	; 0x54
					xParent = pxSocket;
  407638:	4626      	movne	r6, r4
				if( xParent != NULL )
  40763a:	b176      	cbz	r6, 40765a <vTCPStateChange+0x166>
					if( xParent->u.xTCP.pxPeerSocket == NULL )
  40763c:	6d73      	ldr	r3, [r6, #84]	; 0x54
  40763e:	2b00      	cmp	r3, #0
  407640:	f43f af76 	beq.w	407530 <vTCPStateChange+0x3c>
					xParent->xEventBits |= eSOCKET_ACCEPT;
  407644:	6833      	ldr	r3, [r6, #0]
  407646:	f043 0204 	orr.w	r2, r3, #4
  40764a:	6032      	str	r2, [r6, #0]
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
  40764c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  40764e:	f012 0f01 	tst.w	r2, #1
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
  407652:	bf1c      	itt	ne
  407654:	f443 7382 	orrne.w	r3, r3, #260	; 0x104
  407658:	6033      	strne	r3, [r6, #0]
				pxSocket->u.xTCP.pxPeerSocket = NULL;
  40765a:	2300      	movs	r3, #0
  40765c:	6563      	str	r3, [r4, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
  40765e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
  407662:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  407666:	f043 0302 	orr.w	r3, r3, #2
  40766a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	switch( uxStatus )
  40766e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  407672:	2b0b      	cmp	r3, #11
  407674:	d8ab      	bhi.n	4075ce <vTCPStateChange+0xda>
  407676:	a201      	add	r2, pc, #4	; (adr r2, 40767c <vTCPStateChange+0x188>)
  407678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40767c:	004075c9 	.word	0x004075c9
  407680:	004075cf 	.word	0x004075cf
  407684:	004075cf 	.word	0x004075cf
  407688:	004075cf 	.word	0x004075cf
  40768c:	004075cf 	.word	0x004075cf
  407690:	004075cf 	.word	0x004075cf
  407694:	004075cf 	.word	0x004075cf
  407698:	004075c9 	.word	0x004075c9
  40769c:	004075c9 	.word	0x004075c9
  4076a0:	004075c9 	.word	0x004075c9
  4076a4:	004075cf 	.word	0x004075cf
  4076a8:	004075c9 	.word	0x004075c9
	if( bBefore != bAfter )
  4076ac:	2b00      	cmp	r3, #0
  4076ae:	f47f af30 	bne.w	407512 <vTCPStateChange+0x1e>
  4076b2:	e752      	b.n	40755a <vTCPStateChange+0x66>
  4076b4:	0040b649 	.word	0x0040b649
  4076b8:	20006d84 	.word	0x20006d84
  4076bc:	00413540 	.word	0x00413540
  4076c0:	0040c351 	.word	0x0040c351
  4076c4:	00406539 	.word	0x00406539
  4076c8:	004132a8 	.word	0x004132a8
  4076cc:	00413564 	.word	0x00413564
  4076d0:	004066bd 	.word	0x004066bd

004076d4 <prvTCPPrepareSend>:
{
  4076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4076d8:	b087      	sub	sp, #28
  4076da:	4605      	mov	r5, r0
  4076dc:	468a      	mov	sl, r1
  4076de:	4616      	mov	r6, r2
	if( ( *ppxNetworkBuffer ) != NULL )
  4076e0:	680b      	ldr	r3, [r1, #0]
  4076e2:	b37b      	cbz	r3, 407744 <prvTCPPrepareSend+0x70>
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
  4076e4:	699c      	ldr	r4, [r3, #24]
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
  4076e6:	f105 0bdc 	add.w	fp, r5, #220	; 0xdc
	lStreamPos = 0;
  4076ea:	2300      	movs	r3, #0
  4076ec:	9305      	str	r3, [sp, #20]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
  4076ee:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  4076f2:	f043 0310 	orr.w	r3, r3, #16
  4076f6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	if( pxSocket->u.xTCP.txStream != NULL )
  4076fa:	6fab      	ldr	r3, [r5, #120]	; 0x78
  4076fc:	2b00      	cmp	r3, #0
  4076fe:	f000 8140 	beq.w	407982 <prvTCPPrepareSend+0x2ae>
		if( pxSocket->u.xTCP.usCurMSS > 1u )
  407702:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
  407706:	2b01      	cmp	r3, #1
  407708:	f240 80ab 	bls.w	407862 <prvTCPPrepareSend+0x18e>
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
  40770c:	aa05      	add	r2, sp, #20
  40770e:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
  407712:	4658      	mov	r0, fp
  407714:	4bc5      	ldr	r3, [pc, #788]	; (407a2c <prvTCPPrepareSend+0x358>)
  407716:	4798      	blx	r3
  407718:	4681      	mov	r9, r0
  40771a:	4607      	mov	r7, r0
		if( lDataLen > 0 )
  40771c:	2800      	cmp	r0, #0
  40771e:	f340 8132 	ble.w	407986 <prvTCPPrepareSend+0x2b2>
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
  407722:	f8da 8000 	ldr.w	r8, [sl]
	if( xBufferAllocFixedSize != pdFALSE )
  407726:	4bc2      	ldr	r3, [pc, #776]	; (407a30 <prvTCPPrepareSend+0x35c>)
  407728:	681b      	ldr	r3, [r3, #0]
  40772a:	b173      	cbz	r3, 40774a <prvTCPPrepareSend+0x76>
	if( xResize != pdFALSE )
  40772c:	f1b8 0f00 	cmp.w	r8, #0
  407730:	d079      	beq.n	407826 <prvTCPPrepareSend+0x152>
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
  407732:	f106 0336 	add.w	r3, r6, #54	; 0x36
  407736:	4403      	add	r3, r0
  407738:	f8c8 301c 	str.w	r3, [r8, #28]
			if( pxNewBuffer != NULL )
  40773c:	f1b8 0f00 	cmp.w	r8, #0
  407740:	d118      	bne.n	407774 <prvTCPPrepareSend+0xa0>
  407742:	e0d6      	b.n	4078f2 <prvTCPPrepareSend+0x21e>
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
  407744:	f100 0482 	add.w	r4, r0, #130	; 0x82
  407748:	e7cd      	b.n	4076e6 <prvTCPPrepareSend+0x12>
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
  40774a:	f106 0336 	add.w	r3, r6, #54	; 0x36
  40774e:	4403      	add	r3, r0
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
  407750:	2b46      	cmp	r3, #70	; 0x46
  407752:	bfb8      	it	lt
  407754:	2346      	movlt	r3, #70	; 0x46
  407756:	461a      	mov	r2, r3
  407758:	9303      	str	r3, [sp, #12]
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
  40775a:	f1b8 0f00 	cmp.w	r8, #0
  40775e:	f000 813d 	beq.w	4079dc <prvTCPPrepareSend+0x308>
	if( xResize != pdFALSE )
  407762:	f8d8 301c 	ldr.w	r3, [r8, #28]
  407766:	4293      	cmp	r3, r2
  407768:	d360      	bcc.n	40782c <prvTCPPrepareSend+0x158>
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
  40776a:	f106 0336 	add.w	r3, r6, #54	; 0x36
  40776e:	4403      	add	r3, r0
  407770:	f8c8 301c 	str.w	r3, [r8, #28]
				*ppxNetworkBuffer = pxNewBuffer;
  407774:	f8ca 8000 	str.w	r8, [sl]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
  407778:	f8d8 4018 	ldr.w	r4, [r8, #24]
				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
  40777c:	f106 0236 	add.w	r2, r6, #54	; 0x36
  407780:	4422      	add	r2, r4
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
  407782:	6fa8      	ldr	r0, [r5, #120]	; 0x78
  407784:	f8d0 8000 	ldr.w	r8, [r0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  407788:	6901      	ldr	r1, [r0, #16]
  40778a:	9b05      	ldr	r3, [sp, #20]
  40778c:	440b      	add	r3, r1
  40778e:	eba3 0808 	sub.w	r8, r3, r8
	if ( uxCount >= pxBuffer->LENGTH )
  407792:	4541      	cmp	r1, r8
		uxCount -= pxBuffer->LENGTH;
  407794:	bf98      	it	ls
  407796:	eba8 0801 	subls.w	r8, r8, r1
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
  40779a:	2301      	movs	r3, #1
  40779c:	9300      	str	r3, [sp, #0]
  40779e:	464b      	mov	r3, r9
  4077a0:	4641      	mov	r1, r8
  4077a2:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 407a64 <prvTCPPrepareSend+0x390>
  4077a6:	47d0      	blx	sl
  4077a8:	4682      	mov	sl, r0
					if( ulDataGot != ( uint32_t ) lDataLen )
  4077aa:	4581      	cmp	r9, r0
  4077ac:	d008      	beq.n	4077c0 <prvTCPPrepareSend+0xec>
						FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %lu offs %lu only %lu != %lu\n",
  4077ae:	f8cd 9000 	str.w	r9, [sp]
  4077b2:	4603      	mov	r3, r0
  4077b4:	4642      	mov	r2, r8
  4077b6:	9905      	ldr	r1, [sp, #20]
  4077b8:	489e      	ldr	r0, [pc, #632]	; (407a34 <prvTCPPrepareSend+0x360>)
  4077ba:	f8df 8298 	ldr.w	r8, [pc, #664]	; 407a54 <prvTCPPrepareSend+0x380>
  4077be:	47c0      	blx	r8
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
  4077c0:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
  4077c4:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
  4077c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  4077cc:	045b      	lsls	r3, r3, #17
  4077ce:	0c5b      	lsrs	r3, r3, #17
  4077d0:	2b40      	cmp	r3, #64	; 0x40
  4077d2:	d147      	bne.n	407864 <prvTCPPrepareSend+0x190>
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
  4077d4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
  4077d6:	688a      	ldr	r2, [r1, #8]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  4077d8:	690b      	ldr	r3, [r1, #16]
  4077da:	441a      	add	r2, r3
  4077dc:	9805      	ldr	r0, [sp, #20]
  4077de:	1a12      	subs	r2, r2, r0
	if ( uxCount >= pxBuffer->LENGTH )
  4077e0:	4293      	cmp	r3, r2
		uxCount -= pxBuffer->LENGTH;
  4077e2:	bf98      	it	ls
  4077e4:	1ad2      	subls	r2, r2, r3
					if( ulDistance == ulDataGot )
  4077e6:	4592      	cmp	sl, r2
  4077e8:	d13c      	bne.n	407864 <prvTCPPrepareSend+0x190>
							size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
  4077ea:	f8d1 e008 	ldr.w	lr, [r1, #8]
							size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
  4077ee:	6848      	ldr	r0, [r1, #4]
							size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
  4077f0:	680b      	ldr	r3, [r1, #0]
							FreeRTOS_debug_printf( ( "CheckClose %lu <= %lu (%lu <= %lu <= %lu)\n", ulDataGot, ulDistance,
  4077f2:	f8cd e004 	str.w	lr, [sp, #4]
  4077f6:	9000      	str	r0, [sp, #0]
  4077f8:	4651      	mov	r1, sl
  4077fa:	488f      	ldr	r0, [pc, #572]	; (407a38 <prvTCPPrepareSend+0x364>)
  4077fc:	f8df 8254 	ldr.w	r8, [pc, #596]	; 407a54 <prvTCPPrepareSend+0x380>
  407800:	47c0      	blx	r8
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
  407802:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  407806:	f043 0301 	orr.w	r3, r3, #1
  40780a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
  40780e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
  407812:	444b      	add	r3, r9
  407814:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
  407818:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  40781c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407820:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
  407824:	e01e      	b.n	407864 <prvTCPPrepareSend+0x190>
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
  407826:	f240 43c6 	movw	r3, #1222	; 0x4c6
  40782a:	9303      	str	r3, [sp, #12]
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
  40782c:	2100      	movs	r1, #0
  40782e:	9803      	ldr	r0, [sp, #12]
  407830:	4b82      	ldr	r3, [pc, #520]	; (407a3c <prvTCPPrepareSend+0x368>)
  407832:	4798      	blx	r3
		if( pxReturn != NULL )
  407834:	2800      	cmp	r0, #0
  407836:	f000 80a1 	beq.w	40797c <prvTCPPrepareSend+0x2a8>
			pxReturn->xDataLength = lNeeded;
  40783a:	4604      	mov	r4, r0
  40783c:	9a03      	ldr	r2, [sp, #12]
  40783e:	61c2      	str	r2, [r0, #28]
			if( pxNetworkBuffer )
  407840:	f1b8 0f00 	cmp.w	r8, #0
  407844:	d00b      	beq.n	40785e <prvTCPPrepareSend+0x18a>
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
  407846:	f8d8 201c 	ldr.w	r2, [r8, #28]
  40784a:	f8d8 1018 	ldr.w	r1, [r8, #24]
  40784e:	6980      	ldr	r0, [r0, #24]
  407850:	4b7b      	ldr	r3, [pc, #492]	; (407a40 <prvTCPPrepareSend+0x36c>)
  407852:	4798      	blx	r3
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  407854:	4640      	mov	r0, r8
  407856:	4b7b      	ldr	r3, [pc, #492]	; (407a44 <prvTCPPrepareSend+0x370>)
  407858:	4798      	blx	r3
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
  40785a:	46a0      	mov	r8, r4
  40785c:	e78a      	b.n	407774 <prvTCPPrepareSend+0xa0>
  40785e:	4680      	mov	r8, r0
  407860:	e0c5      	b.n	4079ee <prvTCPPrepareSend+0x31a>
	lDataLen = 0;
  407862:	2700      	movs	r7, #0
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
  407864:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
  407868:	2b05      	cmp	r3, #5
  40786a:	f000 8092 	beq.w	407992 <prvTCPPrepareSend+0x2be>
	if( ( lDataLen > 0 ) ||
  40786e:	2f00      	cmp	r7, #0
  407870:	dd41      	ble.n	4078f6 <prvTCPPrepareSend+0x222>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
  407872:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  407876:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  40787a:	f106 0214 	add.w	r2, r6, #20
  40787e:	0092      	lsls	r2, r2, #2
  407880:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
  407884:	f043 0210 	orr.w	r2, r3, #16
  407888:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
  40788c:	f043 0318 	orr.w	r3, r3, #24
  407890:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
  407894:	3628      	adds	r6, #40	; 0x28
  407896:	4437      	add	r7, r6
}
  407898:	4638      	mov	r0, r7
  40789a:	b007      	add	sp, #28
  40789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
  4078a0:	4658      	mov	r0, fp
  4078a2:	4b69      	ldr	r3, [pc, #420]	; (407a48 <prvTCPPrepareSend+0x374>)
  4078a4:	4798      	blx	r3
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
  4078a6:	2800      	cmp	r0, #0
  4078a8:	d078      	beq.n	40799c <prvTCPPrepareSend+0x2c8>
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
  4078aa:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
  4078ae:	f36f 1345 	bfc	r3, #5, #1
  4078b2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
  4078b6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  4078ba:	f043 0301 	orr.w	r3, r3, #1
  4078be:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
  4078c2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
  4078c6:	f043 0341 	orr.w	r3, r3, #65	; 0x41
  4078ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
  4078ce:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
  4078d2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
  4078d6:	2106      	movs	r1, #6
  4078d8:	4628      	mov	r0, r5
  4078da:	4b5c      	ldr	r3, [pc, #368]	; (407a4c <prvTCPPrepareSend+0x378>)
  4078dc:	4798      	blx	r3
  4078de:	e05d      	b.n	40799c <prvTCPPrepareSend+0x2c8>
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
  4078e0:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
  4078e2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4078e4:	485a      	ldr	r0, [pc, #360]	; (407a50 <prvTCPPrepareSend+0x37c>)
  4078e6:	4b5b      	ldr	r3, [pc, #364]	; (407a54 <prvTCPPrepareSend+0x380>)
  4078e8:	4798      	blx	r3
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
  4078ea:	2108      	movs	r1, #8
  4078ec:	4628      	mov	r0, r5
  4078ee:	4b57      	ldr	r3, [pc, #348]	; (407a4c <prvTCPPrepareSend+0x378>)
  4078f0:	4798      	blx	r3
				lDataLen = -1;
  4078f2:	f04f 37ff 	mov.w	r7, #4294967295
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
  4078f6:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  4078fa:	f013 0f03 	tst.w	r3, #3
  4078fe:	d0cb      	beq.n	407898 <prvTCPPrepareSend+0x1c4>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
  407900:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  407904:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  407908:	f106 0214 	add.w	r2, r6, #20
  40790c:	0092      	lsls	r2, r2, #2
  40790e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
  407912:	f043 0210 	orr.w	r2, r3, #16
  407916:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if( lDataLen != 0l )
  40791a:	2f00      	cmp	r7, #0
  40791c:	d0ba      	beq.n	407894 <prvTCPPrepareSend+0x1c0>
  40791e:	e7b5      	b.n	40788c <prvTCPPrepareSend+0x1b8>
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
  407920:	4b4d      	ldr	r3, [pc, #308]	; (407a58 <prvTCPPrepareSend+0x384>)
  407922:	4798      	blx	r3
  407924:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  407926:	1ac0      	subs	r0, r0, r3
				if( pxSocket->u.xTCP.ucKeepRepCount )
  407928:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
					xMax = ( 3u * configTICK_RATE_HZ );
  40792c:	f640 32b8 	movw	r2, #3000	; 0xbb8
  407930:	f644 6320 	movw	r3, #20000	; 0x4e20
  407934:	2900      	cmp	r1, #0
  407936:	bf18      	it	ne
  407938:	4613      	movne	r3, r2
				if( xAge > xMax )
  40793a:	4283      	cmp	r3, r0
  40793c:	d23a      	bcs.n	4079b4 <prvTCPPrepareSend+0x2e0>
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
  40793e:	4b46      	ldr	r3, [pc, #280]	; (407a58 <prvTCPPrepareSend+0x384>)
  407940:	4798      	blx	r3
  407942:	65e8      	str	r0, [r5, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
  407944:	4b45      	ldr	r3, [pc, #276]	; (407a5c <prvTCPPrepareSend+0x388>)
  407946:	681b      	ldr	r3, [r3, #0]
  407948:	b97b      	cbnz	r3, 40796a <prvTCPPrepareSend+0x296>
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
  40794a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  40794e:	f043 0302 	orr.w	r3, r3, #2
  407952:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
  407956:	f640 13c4 	movw	r3, #2500	; 0x9c4
  40795a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
  40795e:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  407962:	3301      	adds	r3, #1
  407964:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  407968:	e024      	b.n	4079b4 <prvTCPPrepareSend+0x2e0>
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
  40796a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  40796e:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
  407970:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  407972:	483b      	ldr	r0, [pc, #236]	; (407a60 <prvTCPPrepareSend+0x38c>)
  407974:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 407a54 <prvTCPPrepareSend+0x380>
  407978:	47c0      	blx	r8
  40797a:	e7e6      	b.n	40794a <prvTCPPrepareSend+0x276>
				lDataLen = -1;
  40797c:	f04f 37ff 	mov.w	r7, #4294967295
  407980:	e775      	b.n	40786e <prvTCPPrepareSend+0x19a>
	lDataLen = 0;
  407982:	2700      	movs	r7, #0
  407984:	e76e      	b.n	407864 <prvTCPPrepareSend+0x190>
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
  407986:	2800      	cmp	r0, #0
  407988:	db3c      	blt.n	407a04 <prvTCPPrepareSend+0x330>
  40798a:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
  40798e:	2b05      	cmp	r3, #5
  407990:	d1b1      	bne.n	4078f6 <prvTCPPrepareSend+0x222>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
  407992:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
  407996:	f013 0f20 	tst.w	r3, #32
  40799a:	d181      	bne.n	4078a0 <prvTCPPrepareSend+0x1cc>
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
  40799c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  4079a0:	2b03      	cmp	r3, #3
  4079a2:	d89d      	bhi.n	4078e0 <prvTCPPrepareSend+0x20c>
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
  4079a4:	2f00      	cmp	r7, #0
  4079a6:	f47f af62 	bne.w	40786e <prvTCPPrepareSend+0x19a>
  4079aa:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  4079ae:	f013 0f01 	tst.w	r3, #1
  4079b2:	d0b5      	beq.n	407920 <prvTCPPrepareSend+0x24c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
  4079b4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  4079b8:	f013 0f03 	tst.w	r3, #3
  4079bc:	f43f af6c 	beq.w	407898 <prvTCPPrepareSend+0x1c4>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
  4079c0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  4079c4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  4079c8:	f106 0214 	add.w	r2, r6, #20
  4079cc:	0092      	lsls	r2, r2, #2
  4079ce:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
  4079d2:	f043 0310 	orr.w	r3, r3, #16
  4079d6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  4079da:	e75b      	b.n	407894 <prvTCPPrepareSend+0x1c0>
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
  4079dc:	2100      	movs	r1, #0
  4079de:	9803      	ldr	r0, [sp, #12]
  4079e0:	4b16      	ldr	r3, [pc, #88]	; (407a3c <prvTCPPrepareSend+0x368>)
  4079e2:	4798      	blx	r3
		if( pxReturn != NULL )
  4079e4:	4680      	mov	r8, r0
  4079e6:	b150      	cbz	r0, 4079fe <prvTCPPrepareSend+0x32a>
			pxReturn->xDataLength = lNeeded;
  4079e8:	9b03      	ldr	r3, [sp, #12]
  4079ea:	f8c8 301c 	str.w	r3, [r8, #28]
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
  4079ee:	2246      	movs	r2, #70	; 0x46
  4079f0:	f105 0182 	add.w	r1, r5, #130	; 0x82
  4079f4:	f8d8 0018 	ldr.w	r0, [r8, #24]
  4079f8:	4b11      	ldr	r3, [pc, #68]	; (407a40 <prvTCPPrepareSend+0x36c>)
  4079fa:	4798      	blx	r3
  4079fc:	e6ba      	b.n	407774 <prvTCPPrepareSend+0xa0>
				lDataLen = -1;
  4079fe:	f04f 37ff 	mov.w	r7, #4294967295
  407a02:	e734      	b.n	40786e <prvTCPPrepareSend+0x19a>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
  407a04:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  407a08:	f013 0f03 	tst.w	r3, #3
  407a0c:	f43f af44 	beq.w	407898 <prvTCPPrepareSend+0x1c4>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
  407a10:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  407a14:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  407a18:	f106 0214 	add.w	r2, r6, #20
  407a1c:	0092      	lsls	r2, r2, #2
  407a1e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
  407a22:	f043 0210 	orr.w	r2, r3, #16
  407a26:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
  407a2a:	e72f      	b.n	40788c <prvTCPPrepareSend+0x1b8>
  407a2c:	004097d5 	.word	0x004097d5
  407a30:	00413fc8 	.word	0x00413fc8
  407a34:	00413388 	.word	0x00413388
  407a38:	004133c0 	.word	0x004133c0
  407a3c:	00409dd1 	.word	0x00409dd1
  407a40:	0040c3d9 	.word	0x0040c3d9
  407a44:	00409d79 	.word	0x00409d79
  407a48:	00409749 	.word	0x00409749
  407a4c:	004074f5 	.word	0x004074f5
  407a50:	004133ec 	.word	0x004133ec
  407a54:	0040c351 	.word	0x0040c351
  407a58:	0040b649 	.word	0x0040b649
  407a5c:	20006d84 	.word	0x20006d84
  407a60:	0041340c 	.word	0x0041340c
  407a64:	00406f81 	.word	0x00406f81

00407a68 <prvTCPSendRepeated>:
{
  407a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a6c:	4681      	mov	r9, r0
  407a6e:	4688      	mov	r8, r1
  407a70:	2408      	movs	r4, #8
int32_t lResult = 0;
  407a72:	2600      	movs	r6, #0
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
  407a74:	4637      	mov	r7, r6
  407a76:	f8df a02c 	ldr.w	sl, [pc, #44]	; 407aa4 <prvTCPSendRepeated+0x3c>
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
  407a7a:	f8df b02c 	ldr.w	fp, [pc, #44]	; 407aa8 <prvTCPSendRepeated+0x40>
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
  407a7e:	463a      	mov	r2, r7
  407a80:	4641      	mov	r1, r8
  407a82:	4648      	mov	r0, r9
  407a84:	47d0      	blx	sl
		if( xSendLength <= 0 )
  407a86:	1e05      	subs	r5, r0, #0
  407a88:	dd08      	ble.n	407a9c <prvTCPSendRepeated+0x34>
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
  407a8a:	463b      	mov	r3, r7
  407a8c:	462a      	mov	r2, r5
  407a8e:	f8d8 1000 	ldr.w	r1, [r8]
  407a92:	4648      	mov	r0, r9
  407a94:	47d8      	blx	fp
		lResult += xSendLength;
  407a96:	442e      	add	r6, r5
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
  407a98:	3c01      	subs	r4, #1
  407a9a:	d1f0      	bne.n	407a7e <prvTCPSendRepeated+0x16>
}
  407a9c:	4630      	mov	r0, r6
  407a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407aa2:	bf00      	nop
  407aa4:	004076d5 	.word	0x004076d5
  407aa8:	00407099 	.word	0x00407099

00407aac <xTCPSocketCheck>:
{
  407aac:	b570      	push	{r4, r5, r6, lr}
  407aae:	b08a      	sub	sp, #40	; 0x28
  407ab0:	4604      	mov	r4, r0
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
  407ab2:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
  407ab6:	2b04      	cmp	r3, #4
  407ab8:	f240 8180 	bls.w	407dbc <xTCPSocketCheck+0x310>
  407abc:	6f83      	ldr	r3, [r0, #120]	; 0x78
  407abe:	2b00      	cmp	r3, #0
  407ac0:	f000 81b2 	beq.w	407e28 <xTCPSocketCheck+0x37c>
		prvTCPAddTxData( pxSocket );
  407ac4:	4ba9      	ldr	r3, [pc, #676]	; (407d6c <xTCPSocketCheck+0x2c0>)
  407ac6:	4798      	blx	r3
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
  407ac8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  407aca:	2800      	cmp	r0, #0
  407acc:	f040 8179 	bne.w	407dc2 <xTCPSocketCheck+0x316>
  407ad0:	e007      	b.n	407ae2 <xTCPSocketCheck+0x36>
BaseType_t xReady = pdFALSE;
  407ad2:	2500      	movs	r5, #0
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
  407ad4:	4ba6      	ldr	r3, [pc, #664]	; (407d70 <xTCPSocketCheck+0x2c4>)
  407ad6:	4798      	blx	r3
				pxSocket->u.xTCP.pxAckMessage = NULL;
  407ad8:	2300      	movs	r3, #0
  407ada:	67e3      	str	r3, [r4, #124]	; 0x7c
	if( xReady == pdFALSE )
  407adc:	2d00      	cmp	r5, #0
  407ade:	f040 8130 	bne.w	407d42 <xTCPSocketCheck+0x296>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
  407ae2:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  407ae6:	2b04      	cmp	r3, #4
  407ae8:	f200 81a3 	bhi.w	407e32 <xTCPSocketCheck+0x386>
  407aec:	2b02      	cmp	r3, #2
  407aee:	d012      	beq.n	407b16 <xTCPSocketCheck+0x6a>
		prvTCPNextTimeout( pxSocket );
  407af0:	4620      	mov	r0, r4
  407af2:	4ba0      	ldr	r3, [pc, #640]	; (407d74 <xTCPSocketCheck+0x2c8>)
  407af4:	4798      	blx	r3
		switch( pxSocket->u.xTCP.ucTCPState )
  407af6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  407afa:	2b08      	cmp	r3, #8
  407afc:	f200 8128 	bhi.w	407d50 <xTCPSocketCheck+0x2a4>
  407b00:	e8df f013 	tbh	[pc, r3, lsl #1]
  407b04:	01230123 	.word	0x01230123
  407b08:	01260126 	.word	0x01260126
  407b0c:	01230126 	.word	0x01230126
  407b10:	01260126 	.word	0x01260126
  407b14:	0123      	.short	0x0123
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
  407b16:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  407b1a:	2b02      	cmp	r3, #2
  407b1c:	f200 80b7 	bhi.w	407c8e <xTCPSocketCheck+0x1e2>
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
  407b20:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  407b24:	f013 0f08 	tst.w	r3, #8
  407b28:	d17e      	bne.n	407c28 <xTCPSocketCheck+0x17c>
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
  407b2a:	2300      	movs	r3, #0
  407b2c:	9308      	str	r3, [sp, #32]
  407b2e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
  407b32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  407b34:	0e1a      	lsrs	r2, r3, #24
  407b36:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  407b3a:	0219      	lsls	r1, r3, #8
  407b3c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  407b40:	430a      	orrs	r2, r1
  407b42:	0a1b      	lsrs	r3, r3, #8
  407b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  407b48:	4313      	orrs	r3, r2
  407b4a:	a80a      	add	r0, sp, #40	; 0x28
  407b4c:	f840 3d0c 	str.w	r3, [r0, #-12]!
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
  407b50:	a908      	add	r1, sp, #32
  407b52:	4b89      	ldr	r3, [pc, #548]	; (407d78 <xTCPSocketCheck+0x2cc>)
  407b54:	4798      	blx	r3
	switch( eReturned )
  407b56:	2801      	cmp	r0, #1
  407b58:	f040 80a3 	bne.w	407ca2 <xTCPSocketCheck+0x1f6>
	return uxRand();
  407b5c:	4b87      	ldr	r3, [pc, #540]	; (407d7c <xTCPSocketCheck+0x2d0>)
  407b5e:	4798      	blx	r3
		if( 0 == ulInitialSequenceNumber )
  407b60:	4606      	mov	r6, r0
  407b62:	2800      	cmp	r0, #0
  407b64:	d0c4      	beq.n	407af0 <xTCPSocketCheck+0x44>
		pxSocket->u.xTCP.ucRepCount = 0u;
  407b66:	2500      	movs	r5, #0
  407b68:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
  407b6c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  407b70:	f043 0308 	orr.w	r3, r3, #8
  407b74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
  407b78:	2246      	movs	r2, #70	; 0x46
  407b7a:	4629      	mov	r1, r5
  407b7c:	f104 0082 	add.w	r0, r4, #130	; 0x82
  407b80:	4b7f      	ldr	r3, [pc, #508]	; (407d80 <xTCPSocketCheck+0x2d4>)
  407b82:	4798      	blx	r3
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
  407b84:	9808      	ldr	r0, [sp, #32]
  407b86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  407b8a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  407b8e:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
  407b92:	2308      	movs	r3, #8
  407b94:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
  407b98:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		pxIPHeader->ucVersionHeaderLength = 0x45u;
  407b9c:	2345      	movs	r3, #69	; 0x45
  407b9e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
  407ba2:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
  407ba6:	2338      	movs	r3, #56	; 0x38
  407ba8:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
  407bac:	2380      	movs	r3, #128	; 0x80
  407bae:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
  407bb2:	2306      	movs	r3, #6
  407bb4:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
  407bb8:	4b72      	ldr	r3, [pc, #456]	; (407d84 <xTCPSocketCheck+0x2d8>)
  407bba:	695b      	ldr	r3, [r3, #20]
  407bbc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
  407bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407bc2:	0e13      	lsrs	r3, r2, #24
  407bc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  407bc8:	0211      	lsls	r1, r2, #8
  407bca:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  407bce:	430b      	orrs	r3, r1
  407bd0:	0a11      	lsrs	r1, r2, #8
  407bd2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  407bd6:	430b      	orrs	r3, r1
  407bd8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
  407bdc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  407bde:	0a19      	lsrs	r1, r3, #8
  407be0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  407be4:	f8a4 10a4 	strh.w	r1, [r4, #164]	; 0xa4
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
  407be8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
  407bea:	0a01      	lsrs	r1, r0, #8
  407bec:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  407bf0:	f8a4 10a6 	strh.w	r1, [r4, #166]	; 0xa6
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
  407bf4:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
  407bf8:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
  407bfc:	2150      	movs	r1, #80	; 0x50
  407bfe:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
  407c02:	2102      	movs	r1, #2
  407c04:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
  407c08:	f44f 6191 	mov.w	r1, #1160	; 0x488
  407c0c:	485e      	ldr	r0, [pc, #376]	; (407d88 <xTCPSocketCheck+0x2dc>)
  407c0e:	4d5f      	ldr	r5, [pc, #380]	; (407d8c <xTCPSocketCheck+0x2e0>)
  407c10:	47a8      	blx	r5
	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
  407c12:	f44f 6391 	mov.w	r3, #1160	; 0x488
  407c16:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  407c1a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
  407c1e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		prvTCPCreateWindow( pxSocket );
  407c22:	4620      	mov	r0, r4
  407c24:	4b5a      	ldr	r3, [pc, #360]	; (407d90 <xTCPSocketCheck+0x2e4>)
  407c26:	4798      	blx	r3
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
  407c28:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
  407c2c:	2502      	movs	r5, #2
  407c2e:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
  407c32:	2604      	movs	r6, #4
  407c34:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
  407c38:	0a1a      	lsrs	r2, r3, #8
  407c3a:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
  407c3e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
  407c42:	4620      	mov	r0, r4
  407c44:	4b53      	ldr	r3, [pc, #332]	; (407d94 <xTCPSocketCheck+0x2e8>)
  407c46:	4798      	blx	r3
  407c48:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
  407c4c:	2301      	movs	r3, #1
  407c4e:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
  407c52:	2203      	movs	r2, #3
  407c54:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
  407c58:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
  407c5c:	f884 00bf 	strb.w	r0, [r4, #191]	; 0xbf
		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
  407c60:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
  407c64:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
  407c68:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
  407c6c:	f884 50c3 	strb.w	r5, [r4, #195]	; 0xc3
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  407c70:	2380      	movs	r3, #128	; 0x80
  407c72:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			pxSocket->u.xTCP.ucRepCount++;
  407c76:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  407c7a:	3301      	adds	r3, #1
  407c7c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
  407c80:	2300      	movs	r3, #0
  407c82:	2234      	movs	r2, #52	; 0x34
  407c84:	4619      	mov	r1, r3
  407c86:	4620      	mov	r0, r4
  407c88:	4d43      	ldr	r5, [pc, #268]	; (407d98 <xTCPSocketCheck+0x2ec>)
  407c8a:	47a8      	blx	r5
  407c8c:	e730      	b.n	407af0 <xTCPSocketCheck+0x44>
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
  407c8e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  407c90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  407c92:	4842      	ldr	r0, [pc, #264]	; (407d9c <xTCPSocketCheck+0x2f0>)
  407c94:	4b3d      	ldr	r3, [pc, #244]	; (407d8c <xTCPSocketCheck+0x2e0>)
  407c96:	4798      	blx	r3
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
  407c98:	2108      	movs	r1, #8
  407c9a:	4620      	mov	r0, r4
  407c9c:	4b40      	ldr	r3, [pc, #256]	; (407da0 <xTCPSocketCheck+0x2f4>)
  407c9e:	4798      	blx	r3
  407ca0:	e726      	b.n	407af0 <xTCPSocketCheck+0x44>
		pxSocket->u.xTCP.ucRepCount++;
  407ca2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  407ca6:	3301      	adds	r3, #1
  407ca8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
  407cac:	9907      	ldr	r1, [sp, #28]
  407cae:	0e0a      	lsrs	r2, r1, #24
  407cb0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  407cb4:	020b      	lsls	r3, r1, #8
  407cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  407cba:	431a      	orrs	r2, r3
  407cbc:	0a09      	lsrs	r1, r1, #8
  407cbe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  407cc2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  407cc6:	9305      	str	r3, [sp, #20]
  407cc8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  407ccc:	9304      	str	r3, [sp, #16]
  407cce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
  407cd2:	9303      	str	r3, [sp, #12]
  407cd4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  407cd8:	9302      	str	r3, [sp, #8]
  407cda:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
  407cde:	9301      	str	r3, [sp, #4]
  407ce0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  407ce4:	9300      	str	r3, [sp, #0]
  407ce6:	4603      	mov	r3, r0
  407ce8:	430a      	orrs	r2, r1
  407cea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  407cec:	482d      	ldr	r0, [pc, #180]	; (407da4 <xTCPSocketCheck+0x2f8>)
  407cee:	4d27      	ldr	r5, [pc, #156]	; (407d8c <xTCPSocketCheck+0x2e0>)
  407cf0:	47a8      	blx	r5
		FreeRTOS_OutputARPRequest( ulRemoteIP );
  407cf2:	9807      	ldr	r0, [sp, #28]
  407cf4:	4b2c      	ldr	r3, [pc, #176]	; (407da8 <xTCPSocketCheck+0x2fc>)
  407cf6:	4798      	blx	r3
  407cf8:	e6fa      	b.n	407af0 <xTCPSocketCheck+0x44>
					FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
  407cfa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  407cfc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  407cfe:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
		return pcStateNames[ ulState ];
  407d02:	2a0c      	cmp	r2, #12
  407d04:	bf28      	it	cs
  407d06:	220c      	movcs	r2, #12
					FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
  407d08:	4828      	ldr	r0, [pc, #160]	; (407dac <xTCPSocketCheck+0x300>)
  407d0a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  407d0e:	9200      	str	r2, [sp, #0]
  407d10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407d12:	4827      	ldr	r0, [pc, #156]	; (407db0 <xTCPSocketCheck+0x304>)
  407d14:	4d1d      	ldr	r5, [pc, #116]	; (407d8c <xTCPSocketCheck+0x2e0>)
  407d16:	47a8      	blx	r5
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
  407d18:	2108      	movs	r1, #8
  407d1a:	4620      	mov	r0, r4
  407d1c:	4b20      	ldr	r3, [pc, #128]	; (407da0 <xTCPSocketCheck+0x2f4>)
  407d1e:	4798      	blx	r3
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
  407d20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  407d24:	f013 0f04 	tst.w	r3, #4
  407d28:	d00d      	beq.n	407d46 <xTCPSocketCheck+0x29a>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
  407d2a:	f013 0f08 	tst.w	r3, #8
  407d2e:	d002      	beq.n	407d36 <xTCPSocketCheck+0x28a>
					xResult = -1;
  407d30:	f04f 30ff 	mov.w	r0, #4294967295
  407d34:	e00a      	b.n	407d4c <xTCPSocketCheck+0x2a0>
						vSocketClose( pxSocket );
  407d36:	4620      	mov	r0, r4
  407d38:	4b1e      	ldr	r3, [pc, #120]	; (407db4 <xTCPSocketCheck+0x308>)
  407d3a:	4798      	blx	r3
					xResult = -1;
  407d3c:	f04f 30ff 	mov.w	r0, #4294967295
  407d40:	e004      	b.n	407d4c <xTCPSocketCheck+0x2a0>
BaseType_t xResult = 0;
  407d42:	2000      	movs	r0, #0
  407d44:	e002      	b.n	407d4c <xTCPSocketCheck+0x2a0>
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
  407d46:	2001      	movs	r0, #1
  407d48:	e000      	b.n	407d4c <xTCPSocketCheck+0x2a0>
		switch( pxSocket->u.xTCP.ucTCPState )
  407d4a:	2000      	movs	r0, #0
}
  407d4c:	b00a      	add	sp, #40	; 0x28
  407d4e:	bd70      	pop	{r4, r5, r6, pc}
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
  407d50:	4b19      	ldr	r3, [pc, #100]	; (407db8 <xTCPSocketCheck+0x30c>)
  407d52:	4798      	blx	r3
  407d54:	6e23      	ldr	r3, [r4, #96]	; 0x60
  407d56:	1ac0      	subs	r0, r0, r3
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
  407d58:	f247 5330 	movw	r3, #30000	; 0x7530
  407d5c:	4298      	cmp	r0, r3
  407d5e:	d8cc      	bhi.n	407cfa <xTCPSocketCheck+0x24e>
  407d60:	2001      	movs	r0, #1
  407d62:	e7f3      	b.n	407d4c <xTCPSocketCheck+0x2a0>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
  407d64:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  407d68:	e6c0      	b.n	407aec <xTCPSocketCheck+0x40>
  407d6a:	bf00      	nop
  407d6c:	00407041 	.word	0x00407041
  407d70:	00409d79 	.word	0x00409d79
  407d74:	00407419 	.word	0x00407419
  407d78:	004043c1 	.word	0x004043c1
  407d7c:	0040bf89 	.word	0x0040bf89
  407d80:	0040c5d5 	.word	0x0040c5d5
  407d84:	200000d8 	.word	0x200000d8
  407d88:	00413a20 	.word	0x00413a20
  407d8c:	0040c351 	.word	0x0040c351
  407d90:	004073b1 	.word	0x004073b1
  407d94:	00407005 	.word	0x00407005
  407d98:	00407099 	.word	0x00407099
  407d9c:	004139bc 	.word	0x004139bc
  407da0:	004074f5 	.word	0x004074f5
  407da4:	004139dc 	.word	0x004139dc
  407da8:	004044ed 	.word	0x004044ed
  407dac:	004132a8 	.word	0x004132a8
  407db0:	00413a4c 	.word	0x00413a4c
  407db4:	0040657d 	.word	0x0040657d
  407db8:	0040b649 	.word	0x0040b649
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
  407dbc:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  407dbe:	2800      	cmp	r0, #0
  407dc0:	d0d0      	beq.n	407d64 <xTCPSocketCheck+0x2b8>
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
  407dc2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  407dc6:	f013 0f20 	tst.w	r3, #32
  407dca:	f47f ae82 	bne.w	407ad2 <xTCPSocketCheck+0x26>
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
  407dce:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  407dd2:	b1eb      	cbz	r3, 407e10 <xTCPSocketCheck+0x364>
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
  407dd4:	4b1f      	ldr	r3, [pc, #124]	; (407e54 <xTCPSocketCheck+0x3a8>)
  407dd6:	681b      	ldr	r3, [r3, #0]
  407dd8:	2b01      	cmp	r3, #1
  407dda:	dd13      	ble.n	407e04 <xTCPSocketCheck+0x358>
  407ddc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  407dde:	2917      	cmp	r1, #23
  407de0:	d010      	beq.n	407e04 <xTCPSocketCheck+0x358>
						FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
  407de2:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
  407de6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  407dea:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  407dec:	2028      	movs	r0, #40	; 0x28
  407dee:	9001      	str	r0, [sp, #4]
  407df0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
  407df4:	f8d4 60f8 	ldr.w	r6, [r4, #248]	; 0xf8
  407df8:	1b80      	subs	r0, r0, r6
  407dfa:	9000      	str	r0, [sp, #0]
  407dfc:	1aeb      	subs	r3, r5, r3
  407dfe:	4816      	ldr	r0, [pc, #88]	; (407e58 <xTCPSocketCheck+0x3ac>)
  407e00:	4d16      	ldr	r5, [pc, #88]	; (407e5c <xTCPSocketCheck+0x3b0>)
  407e02:	47a8      	blx	r5
					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
  407e04:	2300      	movs	r3, #0
  407e06:	2228      	movs	r2, #40	; 0x28
  407e08:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  407e0a:	4620      	mov	r0, r4
  407e0c:	4d14      	ldr	r5, [pc, #80]	; (407e60 <xTCPSocketCheck+0x3b4>)
  407e0e:	47a8      	blx	r5
				if( prvTCPNextTimeout( pxSocket ) > 1 )
  407e10:	4620      	mov	r0, r4
  407e12:	4b14      	ldr	r3, [pc, #80]	; (407e64 <xTCPSocketCheck+0x3b8>)
  407e14:	4798      	blx	r3
  407e16:	2801      	cmp	r0, #1
  407e18:	bf94      	ite	ls
  407e1a:	2500      	movls	r5, #0
  407e1c:	2501      	movhi	r5, #1
			if( pxSocket->u.xTCP.pxAckMessage != NULL )
  407e1e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  407e20:	2800      	cmp	r0, #0
  407e22:	f43f ae5b 	beq.w	407adc <xTCPSocketCheck+0x30>
  407e26:	e655      	b.n	407ad4 <xTCPSocketCheck+0x28>
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
  407e28:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  407e2a:	2800      	cmp	r0, #0
  407e2c:	d1c9      	bne.n	407dc2 <xTCPSocketCheck+0x316>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
  407e2e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
  407e32:	2b02      	cmp	r3, #2
  407e34:	f43f ae6f 	beq.w	407b16 <xTCPSocketCheck+0x6a>
		pxNetworkBuffer = NULL;
  407e38:	a90a      	add	r1, sp, #40	; 0x28
  407e3a:	2300      	movs	r3, #0
  407e3c:	f841 3d08 	str.w	r3, [r1, #-8]!
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
  407e40:	4620      	mov	r0, r4
  407e42:	4b09      	ldr	r3, [pc, #36]	; (407e68 <xTCPSocketCheck+0x3bc>)
  407e44:	4798      	blx	r3
		if( pxNetworkBuffer != NULL )
  407e46:	9808      	ldr	r0, [sp, #32]
  407e48:	2800      	cmp	r0, #0
  407e4a:	f43f ae51 	beq.w	407af0 <xTCPSocketCheck+0x44>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  407e4e:	4b07      	ldr	r3, [pc, #28]	; (407e6c <xTCPSocketCheck+0x3c0>)
  407e50:	4798      	blx	r3
  407e52:	e64d      	b.n	407af0 <xTCPSocketCheck+0x44>
  407e54:	20006d84 	.word	0x20006d84
  407e58:	00413990 	.word	0x00413990
  407e5c:	0040c351 	.word	0x0040c351
  407e60:	00407099 	.word	0x00407099
  407e64:	00407419 	.word	0x00407419
  407e68:	00407a69 	.word	0x00407a69
  407e6c:	00409d79 	.word	0x00409d79

00407e70 <prvTCPHandleFin>:
{
  407e70:	b5f0      	push	{r4, r5, r6, r7, lr}
  407e72:	b083      	sub	sp, #12
  407e74:	4604      	mov	r4, r0
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  407e76:	698d      	ldr	r5, [r1, #24]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
  407e78:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
  407e7c:	0e19      	lsrs	r1, r3, #24
  407e7e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  407e82:	021a      	lsls	r2, r3, #8
  407e84:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  407e88:	4311      	orrs	r1, r2
  407e8a:	0a1b      	lsrs	r3, r3, #8
  407e8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  407e90:	ea41 0603 	orr.w	r6, r1, r3
	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
  407e94:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
  407e98:	f013 0f01 	tst.w	r3, #1
  407e9c:	d004      	beq.n	407ea8 <prvTCPHandleFin+0x38>
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
  407e9e:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  407ea2:	3301      	adds	r3, #1
  407ea4:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
  407ea8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  407eac:	f013 0f40 	tst.w	r3, #64	; 0x40
  407eb0:	d130      	bne.n	407f14 <prvTCPHandleFin+0xa4>
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
  407eb2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
  407eb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
  407eba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  407ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407ec2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
  407ec6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  407eca:	f012 0f01 	tst.w	r2, #1
  407ece:	d02d      	beq.n	407f2c <prvTCPHandleFin+0xbc>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
  407ed0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
  407ed4:	3301      	adds	r3, #1
  407ed6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
  407eda:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
  407ede:	2b00      	cmp	r3, #0
  407ee0:	db30      	blt.n	407f44 <prvTCPHandleFin+0xd4>
			pxTCPHeader->ucTCPFlags = 0u;
  407ee2:	2300      	movs	r3, #0
  407ee4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
  407ee8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
  407eec:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( pxTCPHeader->ucTCPFlags != 0u )
  407ef0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
  407ef4:	b393      	cbz	r3, 407f5c <prvTCPHandleFin+0xec>
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
  407ef6:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
  407efa:	3728      	adds	r7, #40	; 0x28
	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
  407efc:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
  407f00:	3214      	adds	r2, #20
  407f02:	0092      	lsls	r2, r2, #2
  407f04:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
	if( xTCPWindowLoggingLevel != 0 )
  407f08:	4b21      	ldr	r3, [pc, #132]	; (407f90 <prvTCPHandleFin+0x120>)
  407f0a:	681b      	ldr	r3, [r3, #0]
  407f0c:	bb43      	cbnz	r3, 407f60 <prvTCPHandleFin+0xf0>
}
  407f0e:	4638      	mov	r0, r7
  407f10:	b003      	add	sp, #12
  407f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
  407f14:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
  407f18:	3301      	adds	r3, #1
  407f1a:	429e      	cmp	r6, r3
  407f1c:	d1d3      	bne.n	407ec6 <prvTCPHandleFin+0x56>
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
  407f1e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  407f22:	f043 0301 	orr.w	r3, r3, #1
  407f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  407f2a:	e7cc      	b.n	407ec6 <prvTCPHandleFin+0x56>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
  407f2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
  407f30:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
  407f34:	2311      	movs	r3, #17
  407f36:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		vTCPStateChange( pxSocket, eLAST_ACK );
  407f3a:	210a      	movs	r1, #10
  407f3c:	4620      	mov	r0, r4
  407f3e:	4b15      	ldr	r3, [pc, #84]	; (407f94 <prvTCPHandleFin+0x124>)
  407f40:	4798      	blx	r3
  407f42:	e7d1      	b.n	407ee8 <prvTCPHandleFin+0x78>
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
  407f44:	f012 0f02 	tst.w	r2, #2
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
  407f48:	bf0c      	ite	eq
  407f4a:	2310      	moveq	r3, #16
				pxTCPHeader->ucTCPFlags = 0u;
  407f4c:	2300      	movne	r3, #0
  407f4e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
  407f52:	2108      	movs	r1, #8
  407f54:	4620      	mov	r0, r4
  407f56:	4b0f      	ldr	r3, [pc, #60]	; (407f94 <prvTCPHandleFin+0x124>)
  407f58:	4798      	blx	r3
  407f5a:	e7c5      	b.n	407ee8 <prvTCPHandleFin+0x78>
  407f5c:	2700      	movs	r7, #0
  407f5e:	e7cd      	b.n	407efc <prvTCPHandleFin+0x8c>
		FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
  407f60:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
  407f64:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  407f68:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
  407f6c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
  407f70:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
  407f74:	1b40      	subs	r0, r0, r5
  407f76:	9001      	str	r0, [sp, #4]
  407f78:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
  407f7c:	1a40      	subs	r0, r0, r1
  407f7e:	9000      	str	r0, [sp, #0]
  407f80:	1a5b      	subs	r3, r3, r1
  407f82:	1a52      	subs	r2, r2, r1
  407f84:	1a71      	subs	r1, r6, r1
  407f86:	4804      	ldr	r0, [pc, #16]	; (407f98 <prvTCPHandleFin+0x128>)
  407f88:	4c04      	ldr	r4, [pc, #16]	; (407f9c <prvTCPHandleFin+0x12c>)
  407f8a:	47a0      	blx	r4
	return xSendLength;
  407f8c:	e7bf      	b.n	407f0e <prvTCPHandleFin+0x9e>
  407f8e:	bf00      	nop
  407f90:	20006d84 	.word	0x20006d84
  407f94:	004074f5 	.word	0x004074f5
  407f98:	00413318 	.word	0x00413318
  407f9c:	0040c351 	.word	0x0040c351

00407fa0 <xProcessReceivedTCPPacket>:
{
  407fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fa4:	b091      	sub	sp, #68	; 0x44
  407fa6:	900d      	str	r0, [sp, #52]	; 0x34
	if( pxNetworkBuffer->xDataLength >= ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) )
  407fa8:	69c3      	ldr	r3, [r0, #28]
  407faa:	2b35      	cmp	r3, #53	; 0x35
  407fac:	d803      	bhi.n	407fb6 <xProcessReceivedTCPPacket+0x16>
		return pdFAIL;
  407fae:	2000      	movs	r0, #0
}
  407fb0:	b011      	add	sp, #68	; 0x44
  407fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  407fb6:	6986      	ldr	r6, [r0, #24]
		ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
  407fb8:	f896 902f 	ldrb.w	r9, [r6, #47]	; 0x2f
		ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
  407fbc:	f8d6 401e 	ldr.w	r4, [r6, #30]
		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
  407fc0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  407fc2:	ea4f 2813 	mov.w	r8, r3, lsr #8
  407fc6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
  407fca:	fa1f f888 	uxth.w	r8, r8
		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
  407fce:	f8d6 301a 	ldr.w	r3, [r6, #26]
  407fd2:	0e1d      	lsrs	r5, r3, #24
  407fd4:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  407fd8:	021a      	lsls	r2, r3, #8
  407fda:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  407fde:	4315      	orrs	r5, r2
  407fe0:	0a1b      	lsrs	r3, r3, #8
  407fe2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  407fe6:	431d      	orrs	r5, r3
		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
  407fe8:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  407fea:	0a1f      	lsrs	r7, r3, #8
  407fec:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  407ff0:	b2bf      	uxth	r7, r7
		ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
  407ff2:	0e20      	lsrs	r0, r4, #24
  407ff4:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
  407ff8:	0223      	lsls	r3, r4, #8
  407ffa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  407ffe:	4318      	orrs	r0, r3
  408000:	0a24      	lsrs	r4, r4, #8
  408002:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
		pxSocket = ( FreeRTOS_Socket_t * )pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
  408006:	463b      	mov	r3, r7
  408008:	462a      	mov	r2, r5
  40800a:	4641      	mov	r1, r8
  40800c:	4320      	orrs	r0, r4
  40800e:	4ca9      	ldr	r4, [pc, #676]	; (4082b4 <xProcessReceivedTCPPacket+0x314>)
  408010:	47a0      	blx	r4
	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
  408012:	4604      	mov	r4, r0
  408014:	b158      	cbz	r0, 40802e <xProcessReceivedTCPPacket+0x8e>
  408016:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
	switch( uxStatus )
  40801a:	2b0b      	cmp	r3, #11
  40801c:	d81a      	bhi.n	408054 <xProcessReceivedTCPPacket+0xb4>
  40801e:	e8df f003 	tbb	[pc, r3]
  408022:	1906      	.short	0x1906
  408024:	19191919 	.word	0x19191919
  408028:	06060619 	.word	0x06060619
  40802c:	0619      	.short	0x0619
		FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP, xRemotePort ) );
  40802e:	463b      	mov	r3, r7
  408030:	462a      	mov	r2, r5
  408032:	4641      	mov	r1, r8
  408034:	48a0      	ldr	r0, [pc, #640]	; (4082b8 <xProcessReceivedTCPPacket+0x318>)
  408036:	4ca1      	ldr	r4, [pc, #644]	; (4082bc <xProcessReceivedTCPPacket+0x31c>)
  408038:	47a0      	blx	r4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
  40803a:	f009 031f 	and.w	r3, r9, #31
  40803e:	2b10      	cmp	r3, #16
  408040:	d002      	beq.n	408048 <xProcessReceivedTCPPacket+0xa8>
  408042:	f019 0f04 	tst.w	r9, #4
  408046:	d001      	beq.n	40804c <xProcessReceivedTCPPacket+0xac>
  408048:	2000      	movs	r0, #0
  40804a:	e7b1      	b.n	407fb0 <xProcessReceivedTCPPacket+0x10>
			prvTCPSendReset( pxNetworkBuffer );
  40804c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40804e:	4b9c      	ldr	r3, [pc, #624]	; (4082c0 <xProcessReceivedTCPPacket+0x320>)
  408050:	4798      	blx	r3
  408052:	e7f9      	b.n	408048 <xProcessReceivedTCPPacket+0xa8>
		pxSocket->u.xTCP.ucRepCount = 0u;
  408054:	2200      	movs	r2, #0
  408056:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
  40805a:	2b01      	cmp	r3, #1
  40805c:	f000 80d0 	beq.w	408200 <xProcessReceivedTCPPacket+0x260>
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
  408060:	f019 0f04 	tst.w	r9, #4
  408064:	f040 820e 	bne.w	408484 <xProcessReceivedTCPPacket+0x4e4>
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
  408068:	f009 091f 	and.w	r9, r9, #31
  40806c:	f1b9 0f02 	cmp.w	r9, #2
  408070:	f000 8213 	beq.w	40849a <xProcessReceivedTCPPacket+0x4fa>
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
  408074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408076:	6992      	ldr	r2, [r2, #24]
  408078:	f852 1f22 	ldr.w	r1, [r2, #34]!
  40807c:	6857      	ldr	r7, [r2, #4]
  40807e:	6895      	ldr	r5, [r2, #8]
  408080:	68d0      	ldr	r0, [r2, #12]
  408082:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  408086:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
  40808a:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  40808e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
  408092:	6911      	ldr	r1, [r2, #16]
  408094:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
  408098:	4d8a      	ldr	r5, [pc, #552]	; (4082c4 <xProcessReceivedTCPPacket+0x324>)
  40809a:	47a8      	blx	r5
  40809c:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
  40809e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
  4080a2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  4080a6:	f36f 0341 	bfc	r3, #1, #1
  4080aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
  4080ae:	2300      	movs	r3, #0
  4080b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
  4080b4:	47a8      	blx	r5
  4080b6:	65e0      	str	r0, [r4, #92]	; 0x5c
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
  4080b8:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
  4080bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4080c0:	2b50      	cmp	r3, #80	; 0x50
  4080c2:	f200 81f3 	bhi.w	4084ac <xProcessReceivedTCPPacket+0x50c>
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
  4080c6:	8e32      	ldrh	r2, [r6, #48]	; 0x30
  4080c8:	0a13      	lsrs	r3, r2, #8
  4080ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4080ce:	b29b      	uxth	r3, r3
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
  4080d0:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
  4080d4:	4093      	lsls	r3, r2
			pxSocket->u.xTCP.ulWindowSize =
  4080d6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
  4080da:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  4080de:	f8d9 6018 	ldr.w	r6, [r9, #24]
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
  4080e2:	f8d6 3026 	ldr.w	r3, [r6, #38]	; 0x26
  4080e6:	0e1a      	lsrs	r2, r3, #24
  4080e8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  4080ec:	0219      	lsls	r1, r3, #8
  4080ee:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4080f2:	430a      	orrs	r2, r1
  4080f4:	0a1b      	lsrs	r3, r3, #8
  4080f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4080fa:	ea42 0b03 	orr.w	fp, r2, r3
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
  4080fe:	f896 802f 	ldrb.w	r8, [r6, #47]	; 0x2f
	lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
  408102:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
  408106:	089b      	lsrs	r3, r3, #2
  408108:	f003 033c 	and.w	r3, r3, #60	; 0x3c
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
  40810c:	f103 0722 	add.w	r7, r3, #34	; 0x22
  408110:	19ba      	adds	r2, r7, r6
  408112:	920a      	str	r2, [sp, #40]	; 0x28
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
  408114:	f8d9 501c 	ldr.w	r5, [r9, #28]
  408118:	f1a5 010e 	sub.w	r1, r5, #14
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
  40811c:	8a35      	ldrh	r5, [r6, #16]
  40811e:	0a2a      	lsrs	r2, r5, #8
  408120:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  408124:	b295      	uxth	r5, r2
  408126:	428d      	cmp	r5, r1
  408128:	bfa8      	it	ge
  40812a:	460d      	movge	r5, r1
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
  40812c:	3314      	adds	r3, #20
  40812e:	42ab      	cmp	r3, r5
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
  408130:	bfb4      	ite	lt
  408132:	1aed      	sublt	r5, r5, r3
		lReceiveLength = 0;
  408134:	2500      	movge	r5, #0
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
  408136:	f018 0f20 	tst.w	r8, #32
  40813a:	d00b      	beq.n	408154 <xProcessReceivedTCPPacket+0x1b4>
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
  40813c:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
  40813e:	0a13      	lsrs	r3, r2, #8
  408140:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  408144:	b29b      	uxth	r3, r3
		*ppucRecvData += lUrgentLength;
  408146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408148:	441a      	add	r2, r3
  40814a:	920a      	str	r2, [sp, #40]	; 0x28
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
  40814c:	42ab      	cmp	r3, r5
  40814e:	bfd4      	ite	le
  408150:	1aed      	suble	r5, r5, r3
  408152:	1b6d      	subgt	r5, r5, r5
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
  408154:	9509      	str	r5, [sp, #36]	; 0x24
	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
  408156:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
  40815a:	2a04      	cmp	r2, #4
  40815c:	d906      	bls.n	40816c <xProcessReceivedTCPPacket+0x1cc>
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
  40815e:	f10b 0301 	add.w	r3, fp, #1
  408162:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
  408166:	4299      	cmp	r1, r3
  408168:	f000 82c9 	beq.w	4086fe <xProcessReceivedTCPPacket+0x75e>
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
  40816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40816e:	eb0b 0a03 	add.w	sl, fp, r3
  408172:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  408176:	ebaa 0303 	sub.w	r3, sl, r3
  40817a:	2b00      	cmp	r3, #0
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
  40817c:	bfc8      	it	gt
  40817e:	f8c4 a0f4 	strgt.w	sl, [r4, #244]	; 0xf4
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
  408182:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
  408186:	930b      	str	r3, [sp, #44]	; 0x2c
	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
  408188:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40818a:	2b00      	cmp	r3, #0
  40818c:	f000 82c9 	beq.w	408722 <xProcessReceivedTCPPacket+0x782>
  408190:	2a03      	cmp	r2, #3
  408192:	f240 82c6 	bls.w	408722 <xProcessReceivedTCPPacket+0x782>
		if ( pxSocket->u.xTCP.rxStream )
  408196:	6f62      	ldr	r2, [r4, #116]	; 0x74
  408198:	2a00      	cmp	r2, #0
  40819a:	f000 82b7 	beq.w	40870c <xProcessReceivedTCPPacket+0x76c>
size_t uxHead = pxBuffer->uxHead;
  40819e:	6891      	ldr	r1, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
  4081a0:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  4081a2:	6912      	ldr	r2, [r2, #16]
  4081a4:	4413      	add	r3, r2
  4081a6:	3b01      	subs	r3, #1
  4081a8:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
  4081aa:	429a      	cmp	r2, r3
  4081ac:	d800      	bhi.n	4081b0 <xProcessReceivedTCPPacket+0x210>
		uxCount -= pxBuffer->LENGTH;
  4081ae:	1a9b      	subs	r3, r3, r2
	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
  4081b0:	f8d9 2018 	ldr.w	r2, [r9, #24]
  4081b4:	f8d2 2026 	ldr.w	r2, [r2, #38]	; 0x26
  4081b8:	0e10      	lsrs	r0, r2, #24
  4081ba:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
  4081be:	0211      	lsls	r1, r2, #8
  4081c0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  4081c4:	4308      	orrs	r0, r1
  4081c6:	0a12      	lsrs	r2, r2, #8
  4081c8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
  4081cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4081ce:	4301      	orrs	r1, r0
  4081d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4081d2:	4f3d      	ldr	r7, [pc, #244]	; (4082c8 <xProcessReceivedTCPPacket+0x328>)
  4081d4:	47b8      	blx	r7
		if( lOffset >= 0 )
  4081d6:	1e01      	subs	r1, r0, #0
  4081d8:	f2c0 853c 	blt.w	408c54 <xProcessReceivedTCPPacket+0xcb4>
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
  4081dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4081de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4081e0:	4620      	mov	r0, r4
  4081e2:	4f3a      	ldr	r7, [pc, #232]	; (4082cc <xProcessReceivedTCPPacket+0x32c>)
  4081e4:	47b8      	blx	r7
			if( lStored != ( int32_t ) ulReceiveLength )
  4081e6:	4285      	cmp	r5, r0
  4081e8:	f000 8534 	beq.w	408c54 <xProcessReceivedTCPPacket+0xcb4>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );
  4081ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4081ee:	4601      	mov	r1, r0
  4081f0:	4837      	ldr	r0, [pc, #220]	; (4082d0 <xProcessReceivedTCPPacket+0x330>)
  4081f2:	4b32      	ldr	r3, [pc, #200]	; (4082bc <xProcessReceivedTCPPacket+0x31c>)
  4081f4:	4798      	blx	r3
				prvTCPSendReset( pxNetworkBuffer );
  4081f6:	4648      	mov	r0, r9
  4081f8:	4b31      	ldr	r3, [pc, #196]	; (4082c0 <xProcessReceivedTCPPacket+0x320>)
  4081fa:	4798      	blx	r3
  4081fc:	f000 bca8 	b.w	408b50 <xProcessReceivedTCPPacket+0xbb0>
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
  408200:	f009 031f 	and.w	r3, r9, #31
  408204:	2b02      	cmp	r3, #2
  408206:	d06d      	beq.n	4082e4 <xProcessReceivedTCPPacket+0x344>
		snprintf(retString, sizeof( retString ), "%c%c%c%c%c%c%c%c%c",
  408208:	f019 0f01 	tst.w	r9, #1
  40820c:	bf14      	ite	ne
  40820e:	2346      	movne	r3, #70	; 0x46
  408210:	232e      	moveq	r3, #46	; 0x2e
  408212:	f019 0f02 	tst.w	r9, #2
  408216:	bf14      	ite	ne
  408218:	2253      	movne	r2, #83	; 0x53
  40821a:	222e      	moveq	r2, #46	; 0x2e
  40821c:	f019 0604 	ands.w	r6, r9, #4
  408220:	bf14      	ite	ne
  408222:	2152      	movne	r1, #82	; 0x52
  408224:	212e      	moveq	r1, #46	; 0x2e
  408226:	f019 0f08 	tst.w	r9, #8
  40822a:	bf14      	ite	ne
  40822c:	2050      	movne	r0, #80	; 0x50
  40822e:	202e      	moveq	r0, #46	; 0x2e
  408230:	f019 0f10 	tst.w	r9, #16
  408234:	bf14      	ite	ne
  408236:	f04f 0e41 	movne.w	lr, #65	; 0x41
  40823a:	f04f 0e2e 	moveq.w	lr, #46	; 0x2e
  40823e:	f019 0f20 	tst.w	r9, #32
  408242:	bf14      	ite	ne
  408244:	f04f 0c55 	movne.w	ip, #85	; 0x55
  408248:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
  40824c:	f019 0f40 	tst.w	r9, #64	; 0x40
  408250:	bf14      	ite	ne
  408252:	f04f 0a45 	movne.w	sl, #69	; 0x45
  408256:	f04f 0a2e 	moveq.w	sl, #46	; 0x2e
  40825a:	f019 0f80 	tst.w	r9, #128	; 0x80
  40825e:	bf14      	ite	ne
  408260:	f04f 0943 	movne.w	r9, #67	; 0x43
  408264:	f04f 092e 	moveq.w	r9, #46	; 0x2e
  408268:	4c1a      	ldr	r4, [pc, #104]	; (4082d4 <xProcessReceivedTCPPacket+0x334>)
  40826a:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
  40826e:	f8cd b01c 	str.w	fp, [sp, #28]
  408272:	f8cd 9018 	str.w	r9, [sp, #24]
  408276:	f8cd a014 	str.w	sl, [sp, #20]
  40827a:	f8cd c010 	str.w	ip, [sp, #16]
  40827e:	f8cd e00c 	str.w	lr, [sp, #12]
  408282:	9002      	str	r0, [sp, #8]
  408284:	9101      	str	r1, [sp, #4]
  408286:	9200      	str	r2, [sp, #0]
  408288:	4a13      	ldr	r2, [pc, #76]	; (4082d8 <xProcessReceivedTCPPacket+0x338>)
  40828a:	210a      	movs	r1, #10
  40828c:	4620      	mov	r0, r4
  40828e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4082e0 <xProcessReceivedTCPPacket+0x340>
  408292:	47c8      	blx	r9
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
  408294:	f8cd 8000 	str.w	r8, [sp]
  408298:	463b      	mov	r3, r7
  40829a:	462a      	mov	r2, r5
  40829c:	4621      	mov	r1, r4
  40829e:	480f      	ldr	r0, [pc, #60]	; (4082dc <xProcessReceivedTCPPacket+0x33c>)
  4082a0:	4c06      	ldr	r4, [pc, #24]	; (4082bc <xProcessReceivedTCPPacket+0x31c>)
  4082a2:	47a0      	blx	r4
				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
  4082a4:	2e00      	cmp	r6, #0
  4082a6:	f47f aecf 	bne.w	408048 <xProcessReceivedTCPPacket+0xa8>
					prvTCPSendReset( pxNetworkBuffer );
  4082aa:	980d      	ldr	r0, [sp, #52]	; 0x34
  4082ac:	4b04      	ldr	r3, [pc, #16]	; (4082c0 <xProcessReceivedTCPPacket+0x320>)
  4082ae:	4798      	blx	r3
  4082b0:	e6ca      	b.n	408048 <xProcessReceivedTCPPacket+0xa8>
  4082b2:	bf00      	nop
  4082b4:	00406799 	.word	0x00406799
  4082b8:	004135b8 	.word	0x004135b8
  4082bc:	0040c351 	.word	0x0040c351
  4082c0:	0040738d 	.word	0x0040738d
  4082c4:	0040b649 	.word	0x0040b649
  4082c8:	00409385 	.word	0x00409385
  4082cc:	004067e9 	.word	0x004067e9
  4082d0:	00413758 	.word	0x00413758
  4082d4:	20006d60 	.word	0x20006d60
  4082d8:	004135e8 	.word	0x004135e8
  4082dc:	004135fc 	.word	0x004135fc
  4082e0:	0040c811 	.word	0x0040c811
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
  4082e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  4082e6:	69af      	ldr	r7, [r5, #24]
	return uxRand();
  4082e8:	4ba9      	ldr	r3, [pc, #676]	; (408590 <xProcessReceivedTCPPacket+0x5f0>)
  4082ea:	4798      	blx	r3
	if( 0 != ulInitialSequenceNumber )
  4082ec:	4680      	mov	r8, r0
  4082ee:	2800      	cmp	r0, #0
  4082f0:	f000 80b7 	beq.w	408462 <xProcessReceivedTCPPacket+0x4c2>
		if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
  4082f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4082f8:	f013 0f08 	tst.w	r3, #8
  4082fc:	d046      	beq.n	40838c <xProcessReceivedTCPPacket+0x3ec>
			pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
  4082fe:	f043 0304 	orr.w	r3, r3, #4
  408302:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			pxSocket->u.xTCP.pxPeerSocket = pxSocket;
  408306:	6564      	str	r4, [r4, #84]	; 0x54
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
  408308:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
  40830a:	0a13      	lsrs	r3, r2, #8
  40830c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  408310:	b29b      	uxth	r3, r3
  408312:	87a3      	strh	r3, [r4, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
  408314:	f8d7 201a 	ldr.w	r2, [r7, #26]
  408318:	0e11      	lsrs	r1, r2, #24
  40831a:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  40831e:	0210      	lsls	r0, r2, #8
  408320:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
  408324:	4301      	orrs	r1, r0
  408326:	0a12      	lsrs	r2, r2, #8
  408328:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  40832c:	430a      	orrs	r2, r1
  40832e:	63a2      	str	r2, [r4, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
  408330:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
  408334:	f8d7 1026 	ldr.w	r1, [r7, #38]	; 0x26
  408338:	0e08      	lsrs	r0, r1, #24
  40833a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
  40833e:	020f      	lsls	r7, r1, #8
  408340:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
  408344:	4338      	orrs	r0, r7
  408346:	0a09      	lsrs	r1, r1, #8
  408348:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  40834c:	4301      	orrs	r1, r0
  40834e:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
  408352:	f44f 6191 	mov.w	r1, #1160	; 0x488
  408356:	488f      	ldr	r0, [pc, #572]	; (408594 <xProcessReceivedTCPPacket+0x5f4>)
  408358:	4f8f      	ldr	r7, [pc, #572]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  40835a:	47b8      	blx	r7
	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
  40835c:	f44f 6391 	mov.w	r3, #1160	; 0x488
  408360:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  408364:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		prvTCPCreateWindow( pxReturn );
  408368:	4620      	mov	r0, r4
  40836a:	4b8c      	ldr	r3, [pc, #560]	; (40859c <xProcessReceivedTCPPacket+0x5fc>)
  40836c:	4798      	blx	r3
		vTCPStateChange( pxReturn, eSYN_FIRST );
  40836e:	2103      	movs	r1, #3
  408370:	4620      	mov	r0, r4
  408372:	4b8b      	ldr	r3, [pc, #556]	; (4085a0 <xProcessReceivedTCPPacket+0x600>)
  408374:	4798      	blx	r3
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
  408376:	2246      	movs	r2, #70	; 0x46
  408378:	69a9      	ldr	r1, [r5, #24]
  40837a:	f104 0082 	add.w	r0, r4, #130	; 0x82
  40837e:	4b89      	ldr	r3, [pc, #548]	; (4085a4 <xProcessReceivedTCPPacket+0x604>)
  408380:	4798      	blx	r3
	if( xResult != pdFAIL )
  408382:	2c00      	cmp	r4, #0
  408384:	f47f ae88 	bne.w	408098 <xProcessReceivedTCPPacket+0xf8>
  408388:	2000      	movs	r0, #0
  40838a:	e611      	b.n	407fb0 <xProcessReceivedTCPPacket+0x10>
			if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
  40838c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  408390:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
  408394:	429a      	cmp	r2, r3
  408396:	d257      	bcs.n	408448 <xProcessReceivedTCPPacket+0x4a8>
				FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
  408398:	2206      	movs	r2, #6
  40839a:	2101      	movs	r1, #1
  40839c:	2002      	movs	r0, #2
  40839e:	4b82      	ldr	r3, [pc, #520]	; (4085a8 <xProcessReceivedTCPPacket+0x608>)
  4083a0:	4798      	blx	r3
  4083a2:	4681      	mov	r9, r0
				if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
  4083a4:	1e43      	subs	r3, r0, #1
  4083a6:	f113 0f03 	cmn.w	r3, #3
  4083aa:	d85c      	bhi.n	408466 <xProcessReceivedTCPPacket+0x4c6>
	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
  4083ac:	69e3      	ldr	r3, [r4, #28]
  4083ae:	61c3      	str	r3, [r0, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
  4083b0:	6a23      	ldr	r3, [r4, #32]
  4083b2:	6203      	str	r3, [r0, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
  4083b4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
  4083b8:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
  4083bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4083be:	66c3      	str	r3, [r0, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
  4083c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4083c2:	6703      	str	r3, [r0, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
  4083c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4083c6:	6643      	str	r3, [r0, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
  4083c8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4083ca:	6683      	str	r3, [r0, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
  4083cc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  4083d0:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
  4083d4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  4083d8:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
		if( pxSocket->pxSocketSet )
  4083dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4083de:	b123      	cbz	r3, 4083ea <xProcessReceivedTCPPacket+0x44a>
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
  4083e0:	6283      	str	r3, [r0, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
  4083e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4083e4:	f043 0305 	orr.w	r3, r3, #5
  4083e8:	62c3      	str	r3, [r0, #44]	; 0x2c
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
  4083ea:	4b70      	ldr	r3, [pc, #448]	; (4085ac <xProcessReceivedTCPPacket+0x60c>)
  4083ec:	695b      	ldr	r3, [r3, #20]
  4083ee:	930f      	str	r3, [sp, #60]	; 0x3c
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
  4083f0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
  4083f2:	0a13      	lsrs	r3, r2, #8
  4083f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4083f8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
  4083fc:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
  408400:	f043 0304 	orr.w	r3, r3, #4
  408404:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
  408408:	f8c9 4054 	str.w	r4, [r9, #84]	; 0x54
	pxSocket->u.xTCP.usChildCount++;
  40840c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  408410:	3201      	adds	r2, #1
  408412:	b292      	uxth	r2, r2
  408414:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
	FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
  408418:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  40841a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
  40841e:	4c64      	ldr	r4, [pc, #400]	; (4085b0 <xProcessReceivedTCPPacket+0x610>)
  408420:	4864      	ldr	r0, [pc, #400]	; (4085b4 <xProcessReceivedTCPPacket+0x614>)
  408422:	2a01      	cmp	r2, #1
  408424:	bf18      	it	ne
  408426:	4620      	movne	r0, r4
  408428:	9000      	str	r0, [sp, #0]
  40842a:	4863      	ldr	r0, [pc, #396]	; (4085b8 <xProcessReceivedTCPPacket+0x618>)
  40842c:	4c5a      	ldr	r4, [pc, #360]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  40842e:	47a0      	blx	r4
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
  408430:	2301      	movs	r3, #1
  408432:	2208      	movs	r2, #8
  408434:	a90e      	add	r1, sp, #56	; 0x38
  408436:	4648      	mov	r0, r9
  408438:	4c60      	ldr	r4, [pc, #384]	; (4085bc <xProcessReceivedTCPPacket+0x61c>)
  40843a:	47a0      	blx	r4
  40843c:	b9d0      	cbnz	r0, 408474 <xProcessReceivedTCPPacket+0x4d4>
					pxReturn = pxNewSocket;
  40843e:	464c      	mov	r4, r9
	if( ( 0 != ulInitialSequenceNumber ) && ( pxReturn != NULL ) )
  408440:	2c00      	cmp	r4, #0
  408442:	f47f af61 	bne.w	408308 <xProcessReceivedTCPPacket+0x368>
  408446:	e00c      	b.n	408462 <xProcessReceivedTCPPacket+0x4c2>
				FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
  408448:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  40844a:	4c59      	ldr	r4, [pc, #356]	; (4085b0 <xProcessReceivedTCPPacket+0x610>)
  40844c:	4859      	ldr	r0, [pc, #356]	; (4085b4 <xProcessReceivedTCPPacket+0x614>)
  40844e:	2a01      	cmp	r2, #1
  408450:	bf18      	it	ne
  408452:	4620      	movne	r0, r4
  408454:	9000      	str	r0, [sp, #0]
  408456:	485a      	ldr	r0, [pc, #360]	; (4085c0 <xProcessReceivedTCPPacket+0x620>)
  408458:	4c4f      	ldr	r4, [pc, #316]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  40845a:	47a0      	blx	r4
				prvTCPSendReset( pxNetworkBuffer );
  40845c:	4628      	mov	r0, r5
  40845e:	4b59      	ldr	r3, [pc, #356]	; (4085c4 <xProcessReceivedTCPPacket+0x624>)
  408460:	4798      	blx	r3
  408462:	2000      	movs	r0, #0
  408464:	e5a4      	b.n	407fb0 <xProcessReceivedTCPPacket+0x10>
					FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
  408466:	4858      	ldr	r0, [pc, #352]	; (4085c8 <xProcessReceivedTCPPacket+0x628>)
  408468:	4b4b      	ldr	r3, [pc, #300]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  40846a:	4798      	blx	r3
					prvTCPSendReset( pxNetworkBuffer );
  40846c:	4628      	mov	r0, r5
  40846e:	4b55      	ldr	r3, [pc, #340]	; (4085c4 <xProcessReceivedTCPPacket+0x624>)
  408470:	4798      	blx	r3
  408472:	e7f6      	b.n	408462 <xProcessReceivedTCPPacket+0x4c2>
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
  408474:	4855      	ldr	r0, [pc, #340]	; (4085cc <xProcessReceivedTCPPacket+0x62c>)
  408476:	4b48      	ldr	r3, [pc, #288]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  408478:	4798      	blx	r3
		vSocketClose( pxNewSocket );
  40847a:	4648      	mov	r0, r9
  40847c:	4b54      	ldr	r3, [pc, #336]	; (4085d0 <xProcessReceivedTCPPacket+0x630>)
  40847e:	4798      	blx	r3
			pxReturn = NULL;
  408480:	2400      	movs	r4, #0
  408482:	e7dd      	b.n	408440 <xProcessReceivedTCPPacket+0x4a0>
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
  408484:	4643      	mov	r3, r8
  408486:	463a      	mov	r2, r7
  408488:	4629      	mov	r1, r5
  40848a:	4852      	ldr	r0, [pc, #328]	; (4085d4 <xProcessReceivedTCPPacket+0x634>)
  40848c:	4d42      	ldr	r5, [pc, #264]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  40848e:	47a8      	blx	r5
				vTCPStateChange( pxSocket, eCLOSED );
  408490:	2100      	movs	r1, #0
  408492:	4620      	mov	r0, r4
  408494:	4b42      	ldr	r3, [pc, #264]	; (4085a0 <xProcessReceivedTCPPacket+0x600>)
  408496:	4798      	blx	r3
  408498:	e5d6      	b.n	408048 <xProcessReceivedTCPPacket+0xa8>
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
  40849a:	2b04      	cmp	r3, #4
  40849c:	f67f adea 	bls.w	408074 <xProcessReceivedTCPPacket+0xd4>
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
  4084a0:	463a      	mov	r2, r7
  4084a2:	4629      	mov	r1, r5
  4084a4:	484c      	ldr	r0, [pc, #304]	; (4085d8 <xProcessReceivedTCPPacket+0x638>)
  4084a6:	4b3c      	ldr	r3, [pc, #240]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  4084a8:	4798      	blx	r3
				xResult = pdFAIL;
  4084aa:	e5cd      	b.n	408048 <xProcessReceivedTCPPacket+0xa8>
			prvCheckOptions( pxSocket, pxNetworkBuffer );
  4084ac:	990d      	ldr	r1, [sp, #52]	; 0x34
	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  4084ae:	698b      	ldr	r3, [r1, #24]
	pucPtr = pxTCPHeader->ucOptdata;
  4084b0:	f103 0736 	add.w	r7, r3, #54	; 0x36
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
  4084b4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
  4084b8:	0912      	lsrs	r2, r2, #4
  4084ba:	3a05      	subs	r2, #5
  4084bc:	0092      	lsls	r2, r2, #2
  4084be:	eb07 0902 	add.w	r9, r7, r2
	if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
  4084c2:	69c9      	ldr	r1, [r1, #28]
  4084c4:	4419      	add	r1, r3
  4084c6:	4589      	cmp	r9, r1
  4084c8:	f63f adfd 	bhi.w	4080c6 <xProcessReceivedTCPPacket+0x126>
	while( pucPtr < pucLast )
  4084cc:	454f      	cmp	r7, r9
  4084ce:	f4bf adfa 	bcs.w	4080c6 <xProcessReceivedTCPPacket+0x126>
		UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
  4084d2:	46ca      	mov	sl, r9
		if( pucPtr[ 0 ] == TCP_OPT_END )
  4084d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
  4084d8:	2b00      	cmp	r3, #0
  4084da:	f43f adf4 	beq.w	4080c6 <xProcessReceivedTCPPacket+0x126>
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
  4084de:	f104 01dc 	add.w	r1, r4, #220	; 0xdc
  4084e2:	9109      	str	r1, [sp, #36]	; 0x24
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
  4084e4:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 4085e4 <xProcessReceivedTCPPacket+0x644>
  4084e8:	960c      	str	r6, [sp, #48]	; 0x30
  4084ea:	463e      	mov	r6, r7
  4084ec:	e0ca      	b.n	408684 <xProcessReceivedTCPPacket+0x6e4>
			pucPtr++;
  4084ee:	3601      	adds	r6, #1
  4084f0:	e0c2      	b.n	408678 <xProcessReceivedTCPPacket+0x6d8>
			if( ( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != TCP_OPT_WSOPT_LEN ) )
  4084f2:	2a02      	cmp	r2, #2
  4084f4:	f240 80f5 	bls.w	4086e2 <xProcessReceivedTCPPacket+0x742>
  4084f8:	7873      	ldrb	r3, [r6, #1]
  4084fa:	2b03      	cmp	r3, #3
  4084fc:	f040 80f3 	bne.w	4086e6 <xProcessReceivedTCPPacket+0x746>
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
  408500:	78b3      	ldrb	r3, [r6, #2]
  408502:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
  408506:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  40850a:	f043 0310 	orr.w	r3, r3, #16
  40850e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
  408512:	3603      	adds	r6, #3
  408514:	e0b0      	b.n	408678 <xProcessReceivedTCPPacket+0x6d8>
			if( ( xRemainingOptionsBytes < TCP_OPT_MSS_LEN )|| ( pucPtr[ 1 ] != TCP_OPT_MSS_LEN ) )
  408516:	2a03      	cmp	r2, #3
  408518:	f240 80e7 	bls.w	4086ea <xProcessReceivedTCPPacket+0x74a>
  40851c:	7873      	ldrb	r3, [r6, #1]
  40851e:	2b04      	cmp	r3, #4
  408520:	f040 80e5 	bne.w	4086ee <xProcessReceivedTCPPacket+0x74e>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
  408524:	78b3      	ldrb	r3, [r6, #2]
			  ( ( ( uint32_t )apChr[1] ) ) );
  408526:	78f5      	ldrb	r5, [r6, #3]
	return ( uint16_t )
  408528:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
  40852c:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
  408530:	428d      	cmp	r5, r1
  408532:	d026      	beq.n	408582 <xProcessReceivedTCPPacket+0x5e2>
				if( uxNewMSS == 0 )
  408534:	2d00      	cmp	r5, #0
  408536:	f000 80dc 	beq.w	4086f2 <xProcessReceivedTCPPacket+0x752>
				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
  40853a:	462a      	mov	r2, r5
  40853c:	4827      	ldr	r0, [pc, #156]	; (4085dc <xProcessReceivedTCPPacket+0x63c>)
  40853e:	4b16      	ldr	r3, [pc, #88]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  408540:	4798      	blx	r3
			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
  408542:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  408546:	429d      	cmp	r5, r3
  408548:	d21b      	bcs.n	408582 <xProcessReceivedTCPPacket+0x5e2>
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
  40854a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  40854e:	f043 0301 	orr.w	r3, r3, #1
  408552:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
  408556:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408558:	b11b      	cbz	r3, 408562 <xProcessReceivedTCPPacket+0x5c2>
  40855a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  40855e:	428d      	cmp	r5, r1
  408560:	d311      	bcc.n	408586 <xProcessReceivedTCPPacket+0x5e6>
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
  408562:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  408566:	fbb3 f3f5 	udiv	r3, r3, r5
  40856a:	fb05 f303 	mul.w	r3, r5, r3
  40856e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
  408572:	f8a4 519a 	strh.w	r5, [r4, #410]	; 0x19a
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
  408576:	f8a4 5198 	strh.w	r5, [r4, #408]	; 0x198
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
  40857a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
  40857e:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
				pucPtr += TCP_OPT_MSS_LEN;
  408582:	3604      	adds	r6, #4
  408584:	e078      	b.n	408678 <xProcessReceivedTCPPacket+0x6d8>
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
  408586:	462a      	mov	r2, r5
  408588:	4815      	ldr	r0, [pc, #84]	; (4085e0 <xProcessReceivedTCPPacket+0x640>)
  40858a:	4b03      	ldr	r3, [pc, #12]	; (408598 <xProcessReceivedTCPPacket+0x5f8>)
  40858c:	4798      	blx	r3
  40858e:	e7e8      	b.n	408562 <xProcessReceivedTCPPacket+0x5c2>
  408590:	0040bf89 	.word	0x0040bf89
  408594:	00413a20 	.word	0x00413a20
  408598:	0040c351 	.word	0x0040c351
  40859c:	004073b1 	.word	0x004073b1
  4085a0:	004074f5 	.word	0x004074f5
  4085a4:	0040c3d9 	.word	0x0040c3d9
  4085a8:	0040608d 	.word	0x0040608d
  4085ac:	200000d8 	.word	0x200000d8
  4085b0:	00413154 	.word	0x00413154
  4085b4:	0041417c 	.word	0x0041417c
  4085b8:	0041368c 	.word	0x0041368c
  4085bc:	0040641d 	.word	0x0040641d
  4085c0:	0041363c 	.word	0x0041363c
  4085c4:	0040738d 	.word	0x0040738d
  4085c8:	0041366c 	.word	0x0041366c
  4085cc:	004136b8 	.word	0x004136b8
  4085d0:	0040657d 	.word	0x0040657d
  4085d4:	004136dc 	.word	0x004136dc
  4085d8:	00413704 	.word	0x00413704
  4085dc:	00413728 	.word	0x00413728
  4085e0:	00413740 	.word	0x00413740
  4085e4:	0040998d 	.word	0x0040998d
  4085e8:	3508      	adds	r5, #8
					while( len >= 8 )
  4085ea:	42ae      	cmp	r6, r5
  4085ec:	d036      	beq.n	40865c <xProcessReceivedTCPPacket+0x6bc>
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
  4085ee:	f815 3c04 	ldrb.w	r3, [r5, #-4]
			( ( ( uint32_t )apChr[1] ) << 16) |
  4085f2:	f815 2c03 	ldrb.w	r2, [r5, #-3]
  4085f6:	0412      	lsls	r2, r2, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
  4085f8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
			( ( ( uint32_t )apChr[3] ) );
  4085fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
			( ( ( uint32_t )apChr[2] ) << 8) |
  408600:	431a      	orrs	r2, r3
  408602:	f815 0c02 	ldrb.w	r0, [r5, #-2]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
  408606:	f815 1c08 	ldrb.w	r1, [r5, #-8]
			( ( ( uint32_t )apChr[1] ) << 16) |
  40860a:	f815 3c07 	ldrb.w	r3, [r5, #-7]
  40860e:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
  408610:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
			( ( ( uint32_t )apChr[3] ) );
  408614:	f815 1c05 	ldrb.w	r1, [r5, #-5]
			( ( ( uint32_t )apChr[2] ) << 8) |
  408618:	430b      	orrs	r3, r1
  40861a:	f815 1c06 	ldrb.w	r1, [r5, #-6]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
  40861e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  408622:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  408626:	9809      	ldr	r0, [sp, #36]	; 0x24
  408628:	47d8      	blx	fp
  40862a:	4603      	mov	r3, r0
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
  40862c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  40862e:	2800      	cmp	r0, #0
  408630:	d0da      	beq.n	4085e8 <xProcessReceivedTCPPacket+0x648>
  408632:	2b00      	cmp	r3, #0
  408634:	d0d8      	beq.n	4085e8 <xProcessReceivedTCPPacket+0x648>
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
  408636:	2200      	movs	r2, #0
  408638:	9200      	str	r2, [sp, #0]
  40863a:	4611      	mov	r1, r2
  40863c:	4faa      	ldr	r7, [pc, #680]	; (4088e8 <xProcessReceivedTCPPacket+0x948>)
  40863e:	47b8      	blx	r7
							pxSocket->xEventBits |= eSOCKET_SEND;
  408640:	6823      	ldr	r3, [r4, #0]
  408642:	f043 0202 	orr.w	r2, r3, #2
  408646:	6022      	str	r2, [r4, #0]
								if( pxSocket->xSelectBits & eSELECT_WRITE )
  408648:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40864a:	f012 0f02 	tst.w	r2, #2
  40864e:	d0cb      	beq.n	4085e8 <xProcessReceivedTCPPacket+0x648>
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
  408650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  408654:	f043 0302 	orr.w	r3, r3, #2
  408658:	6023      	str	r3, [r4, #0]
  40865a:	e7c5      	b.n	4085e8 <xProcessReceivedTCPPacket+0x648>
  40865c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40865e:	1c7e      	adds	r6, r7, #1
  408660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408662:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  408666:	f1a8 080a 	sub.w	r8, r8, #10
  40866a:	ebc7 1747 	rsb	r7, r7, r7, lsl #5
  40866e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  408672:	f007 08ff 	and.w	r8, r7, #255	; 0xff
			pucPtr += len;
  408676:	4446      	add	r6, r8
	while( pucPtr < pucLast )
  408678:	45b1      	cmp	r9, r6
  40867a:	d92c      	bls.n	4086d6 <xProcessReceivedTCPPacket+0x736>
		UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
  40867c:	ebaa 0206 	sub.w	r2, sl, r6
		if( pucPtr[ 0 ] == TCP_OPT_END )
  408680:	7833      	ldrb	r3, [r6, #0]
  408682:	b353      	cbz	r3, 4086da <xProcessReceivedTCPPacket+0x73a>
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
  408684:	2b01      	cmp	r3, #1
  408686:	f43f af32 	beq.w	4084ee <xProcessReceivedTCPPacket+0x54e>
		if( xRemainingOptionsBytes < 2 )
  40868a:	2a01      	cmp	r2, #1
  40868c:	d927      	bls.n	4086de <xProcessReceivedTCPPacket+0x73e>
		else if( pucPtr[ 0 ] == TCP_OPT_WSOPT )
  40868e:	2b03      	cmp	r3, #3
  408690:	f43f af2f 	beq.w	4084f2 <xProcessReceivedTCPPacket+0x552>
		else if( pucPtr[ 0 ] == TCP_OPT_MSS )
  408694:	2b02      	cmp	r3, #2
  408696:	f43f af3e 	beq.w	408516 <xProcessReceivedTCPPacket+0x576>
			unsigned char len = pucPtr[ 1 ];
  40869a:	f896 8001 	ldrb.w	r8, [r6, #1]
			if( ( len < 2 ) || ( len > xRemainingOptionsBytes ) )
  40869e:	f1b8 0f01 	cmp.w	r8, #1
  4086a2:	d928      	bls.n	4086f6 <xProcessReceivedTCPPacket+0x756>
  4086a4:	4590      	cmp	r8, r2
  4086a6:	d828      	bhi.n	4086fa <xProcessReceivedTCPPacket+0x75a>
				if( pucPtr[0] == TCP_OPT_SACK_A )
  4086a8:	2b05      	cmp	r3, #5
  4086aa:	d1e4      	bne.n	408676 <xProcessReceivedTCPPacket+0x6d6>
					len -= 2;
  4086ac:	f1a8 0302 	sub.w	r3, r8, #2
  4086b0:	b2db      	uxtb	r3, r3
					pucPtr += 2;
  4086b2:	1cb2      	adds	r2, r6, #2
  4086b4:	920a      	str	r2, [sp, #40]	; 0x28
					while( len >= 8 )
  4086b6:	2b07      	cmp	r3, #7
  4086b8:	d90a      	bls.n	4086d0 <xProcessReceivedTCPPacket+0x730>
  4086ba:	f106 050a 	add.w	r5, r6, #10
  4086be:	f1a8 070a 	sub.w	r7, r8, #10
  4086c2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
  4086c6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  4086ca:	3612      	adds	r6, #18
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
  4086cc:	970b      	str	r7, [sp, #44]	; 0x2c
  4086ce:	e78e      	b.n	4085ee <xProcessReceivedTCPPacket+0x64e>
					len -= 2;
  4086d0:	4698      	mov	r8, r3
					pucPtr += 2;
  4086d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4086d4:	e7cf      	b.n	408676 <xProcessReceivedTCPPacket+0x6d6>
  4086d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086d8:	e4f5      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086dc:	e4f3      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086e0:	e4f1      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086e4:	e4ef      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086e8:	e4ed      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086ec:	e4eb      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086f0:	e4e9      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086f4:	e4e7      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086f8:	e4e5      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
  4086fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4086fc:	e4e3      	b.n	4080c6 <xProcessReceivedTCPPacket+0x126>
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
  4086fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  408702:	f043 0301 	orr.w	r3, r3, #1
  408706:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  40870a:	e52f      	b.n	40816c <xProcessReceivedTCPPacket+0x1cc>
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
  40870c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40870e:	e54f      	b.n	4081b0 <xProcessReceivedTCPPacket+0x210>
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
  408710:	2200      	movs	r2, #0
  408712:	4611      	mov	r1, r2
  408714:	4620      	mov	r0, r4
  408716:	4d75      	ldr	r5, [pc, #468]	; (4088ec <xProcessReceivedTCPPacket+0x94c>)
  408718:	47a8      	blx	r5
				pxTCPWindow->ulUserDataLength = 0;
  40871a:	2300      	movs	r3, #0
  40871c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  408720:	e29d      	b.n	408c5e <xProcessReceivedTCPPacket+0xcbe>
		pxTCPWindow->ucOptionLength = 0u;
  408722:	2300      	movs	r3, #0
  408724:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  408728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40872a:	699d      	ldr	r5, [r3, #24]
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
  40872c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  408730:	2b04      	cmp	r3, #4
  408732:	d927      	bls.n	408784 <xProcessReceivedTCPPacket+0x7e4>
  408734:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  408738:	f013 0f01 	tst.w	r3, #1
  40873c:	d06c      	beq.n	408818 <xProcessReceivedTCPPacket+0x878>
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
  40873e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  408742:	f36f 0300 	bfc	r3, #0, #1
  408746:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
  40874a:	4b69      	ldr	r3, [pc, #420]	; (4088f0 <xProcessReceivedTCPPacket+0x950>)
  40874c:	681b      	ldr	r3, [r3, #0]
  40874e:	2b00      	cmp	r3, #0
  408750:	db04      	blt.n	40875c <xProcessReceivedTCPPacket+0x7bc>
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
  408752:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  408756:	4867      	ldr	r0, [pc, #412]	; (4088f4 <xProcessReceivedTCPPacket+0x954>)
  408758:	4b67      	ldr	r3, [pc, #412]	; (4088f8 <xProcessReceivedTCPPacket+0x958>)
  40875a:	4798      	blx	r3
		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
  40875c:	2302      	movs	r3, #2
  40875e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
  408762:	2204      	movs	r2, #4
  408764:	f885 2037 	strb.w	r2, [r5, #55]	; 0x37
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
  408768:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
  40876c:	0a1b      	lsrs	r3, r3, #8
  40876e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
  408772:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
  408776:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  40877a:	2360      	movs	r3, #96	; 0x60
  40877c:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
		uxOptionsLength = 4u;
  408780:	920a      	str	r2, [sp, #40]	; 0x28
  408782:	e2b1      	b.n	408ce8 <xProcessReceivedTCPPacket+0xd48>
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
  408784:	2300      	movs	r3, #0
  408786:	930a      	str	r3, [sp, #40]	; 0x28
  408788:	e2ae      	b.n	408ce8 <xProcessReceivedTCPPacket+0xd48>
		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
  40878a:	f008 031f 	and.w	r3, r8, #31
  40878e:	2b02      	cmp	r3, #2
  408790:	d03a      	beq.n	408808 <xProcessReceivedTCPPacket+0x868>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
  408792:	f018 0f01 	tst.w	r8, #1
  408796:	f040 833c 	bne.w	408e12 <xProcessReceivedTCPPacket+0xe72>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
  40879a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40879c:	699e      	ldr	r6, [r3, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
  40879e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
  4087a2:	f8d6 2026 	ldr.w	r2, [r6, #38]	; 0x26
  4087a6:	0e10      	lsrs	r0, r2, #24
  4087a8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
  4087ac:	0215      	lsls	r5, r2, #8
  4087ae:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
  4087b2:	4328      	orrs	r0, r5
  4087b4:	0a12      	lsrs	r2, r2, #8
  4087b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  4087ba:	ea40 0502 	orr.w	r5, r0, r2
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
  4087be:	2902      	cmp	r1, #2
  4087c0:	f000 830e 	beq.w	408de0 <xProcessReceivedTCPPacket+0xe40>
	if( ( ucTCPFlags & 0x17u ) != usExpect )
  4087c4:	f003 0217 	and.w	r2, r3, #23
  4087c8:	2a10      	cmp	r2, #16
  4087ca:	f000 82c5 	beq.w	408d58 <xProcessReceivedTCPPacket+0xdb8>
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
  4087ce:	2210      	movs	r2, #16
  4087d0:	4d4a      	ldr	r5, [pc, #296]	; (4088fc <xProcessReceivedTCPPacket+0x95c>)
  4087d2:	484b      	ldr	r0, [pc, #300]	; (408900 <xProcessReceivedTCPPacket+0x960>)
  4087d4:	2904      	cmp	r1, #4
  4087d6:	bf0c      	ite	eq
  4087d8:	4601      	moveq	r1, r0
  4087da:	4629      	movne	r1, r5
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
  4087dc:	4849      	ldr	r0, [pc, #292]	; (408904 <xProcessReceivedTCPPacket+0x964>)
  4087de:	4d46      	ldr	r5, [pc, #280]	; (4088f8 <xProcessReceivedTCPPacket+0x958>)
  4087e0:	47a8      	blx	r5
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
  4087e2:	2108      	movs	r1, #8
  4087e4:	4620      	mov	r0, r4
  4087e6:	4b48      	ldr	r3, [pc, #288]	; (408908 <xProcessReceivedTCPPacket+0x968>)
  4087e8:	4798      	blx	r3
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
  4087ea:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
  4087ee:	f043 0304 	orr.w	r3, r3, #4
  4087f2:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
  4087f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4087f8:	4613      	mov	r3, r2
  4087fa:	f102 0528 	add.w	r5, r2, #40	; 0x28
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  4087fe:	3314      	adds	r3, #20
  408800:	009b      	lsls	r3, r3, #2
  408802:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
  408806:	e158      	b.n	408aba <xProcessReceivedTCPPacket+0xb1a>
			FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
  408808:	4840      	ldr	r0, [pc, #256]	; (40890c <xProcessReceivedTCPPacket+0x96c>)
  40880a:	4b3b      	ldr	r3, [pc, #236]	; (4088f8 <xProcessReceivedTCPPacket+0x958>)
  40880c:	4798      	blx	r3
			vTCPStateChange( pxSocket, eSYN_FIRST );
  40880e:	2103      	movs	r1, #3
  408810:	4620      	mov	r0, r4
  408812:	4b3d      	ldr	r3, [pc, #244]	; (408908 <xProcessReceivedTCPPacket+0x968>)
  408814:	4798      	blx	r3
  408816:	e26c      	b.n	408cf2 <xProcessReceivedTCPPacket+0xd52>
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
  408818:	2300      	movs	r3, #0
  40881a:	930a      	str	r3, [sp, #40]	; 0x28
  40881c:	e269      	b.n	408cf2 <xProcessReceivedTCPPacket+0xd52>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
  40881e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
  408822:	2702      	movs	r7, #2
  408824:	f886 7036 	strb.w	r7, [r6, #54]	; 0x36
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
  408828:	2504      	movs	r5, #4
  40882a:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
  40882e:	0a1a      	lsrs	r2, r3, #8
  408830:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
  408834:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
  408838:	4620      	mov	r0, r4
  40883a:	4b35      	ldr	r3, [pc, #212]	; (408910 <xProcessReceivedTCPPacket+0x970>)
  40883c:	4798      	blx	r3
  40883e:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
  408842:	2301      	movs	r3, #1
  408844:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
  408848:	2203      	movs	r2, #3
  40884a:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
  40884e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
  408852:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
  408856:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
  40885a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
  40885e:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
  408862:	f886 5040 	strb.w	r5, [r6, #64]	; 0x40
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
  408866:	f886 7041 	strb.w	r7, [r6, #65]	; 0x41
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
  40886a:	2312      	movs	r3, #18
  40886c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  408870:	2380      	movs	r3, #128	; 0x80
  408872:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
  408876:	4629      	mov	r1, r5
  408878:	4620      	mov	r0, r4
  40887a:	4b23      	ldr	r3, [pc, #140]	; (408908 <xProcessReceivedTCPPacket+0x968>)
  40887c:	4798      	blx	r3
				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
  40887e:	f10b 0301 	add.w	r3, fp, #1
  408882:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
  408886:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
  40888a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
  40888e:	3301      	adds	r3, #1
  408890:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  408894:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
  408898:	2534      	movs	r5, #52	; 0x34
  40889a:	e110      	b.n	408abe <xProcessReceivedTCPPacket+0xb1e>
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
  40889c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  40889e:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
  4088a2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  4088a4:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
  4088a8:	2310      	movs	r3, #16
  4088aa:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
  4088ae:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
  4088b2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
  4088b6:	4629      	mov	r1, r5
  4088b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4088ba:	4f16      	ldr	r7, [pc, #88]	; (408914 <xProcessReceivedTCPPacket+0x974>)
  4088bc:	47b8      	blx	r7
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
  4088be:	3501      	adds	r5, #1
  4088c0:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
  4088c4:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
  4088c8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
  4088cc:	3301      	adds	r3, #1
  4088ce:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
			pxTCPWindow->ulNextTxSequenceNumber++;
  4088d2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  4088d6:	3301      	adds	r3, #1
  4088d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  4088dc:	e246      	b.n	408d6c <xProcessReceivedTCPPacket+0xdcc>
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
  4088de:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
  4088e2:	e243      	b.n	408d6c <xProcessReceivedTCPPacket+0xdcc>
BaseType_t xSendLength = 0;
  4088e4:	2500      	movs	r5, #0
  4088e6:	e26c      	b.n	408dc2 <xProcessReceivedTCPPacket+0xe22>
  4088e8:	00406f81 	.word	0x00406f81
  4088ec:	004067e9 	.word	0x004067e9
  4088f0:	20006d84 	.word	0x20006d84
  4088f4:	004137b0 	.word	0x004137b0
  4088f8:	0040c351 	.word	0x0040c351
  4088fc:	00413598 	.word	0x00413598
  408900:	00413588 	.word	0x00413588
  408904:	00413804 	.word	0x00413804
  408908:	004074f5 	.word	0x004074f5
  40890c:	004137c4 	.word	0x004137c4
  408910:	00407005 	.word	0x00407005
  408914:	00409255 	.word	0x00409255
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
  408918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40891a:	699e      	ldr	r6, [r3, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
  40891c:	f896 502f 	ldrb.w	r5, [r6, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
  408920:	f8d6 3026 	ldr.w	r3, [r6, #38]	; 0x26
  408924:	0e1f      	lsrs	r7, r3, #24
  408926:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  40892a:	021a      	lsls	r2, r3, #8
  40892c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  408930:	4317      	orrs	r7, r2
  408932:	0a1b      	lsrs	r3, r3, #8
  408934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  408938:	431f      	orrs	r7, r3
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
  40893a:	8e32      	ldrh	r2, [r6, #48]	; 0x30
  40893c:	0a13      	lsrs	r3, r2, #8
  40893e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  408942:	b29b      	uxth	r3, r3
			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
  408944:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
  408948:	4093      	lsls	r3, r2
		pxSocket->u.xTCP.ulWindowSize =
  40894a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
  40894e:	f015 0f10 	tst.w	r5, #16
  408952:	d13e      	bne.n	4089d2 <xProcessReceivedTCPPacket+0xa32>
	if( pxSocket->u.xTCP.txStream != NULL )
  408954:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  408956:	b113      	cbz	r3, 40895e <xProcessReceivedTCPPacket+0x9be>
		prvTCPAddTxData( pxSocket );
  408958:	4620      	mov	r0, r4
  40895a:	4bac      	ldr	r3, [pc, #688]	; (408c0c <xProcessReceivedTCPPacket+0xc6c>)
  40895c:	4798      	blx	r3
	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
  40895e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
  408962:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
  408966:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  40896a:	f013 0f20 	tst.w	r3, #32
  40896e:	d102      	bne.n	408976 <xProcessReceivedTCPPacket+0x9d6>
  408970:	f015 0f01 	tst.w	r5, #1
  408974:	d019      	beq.n	4089aa <xProcessReceivedTCPPacket+0xa0a>
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
  408976:	f013 0f40 	tst.w	r3, #64	; 0x40
  40897a:	d056      	beq.n	408a2a <xProcessReceivedTCPPacket+0xa8a>
		if( xTCPWindowLoggingLevel > 0 )
  40897c:	4ba4      	ldr	r3, [pc, #656]	; (408c10 <xProcessReceivedTCPPacket+0xc70>)
  40897e:	681b      	ldr	r3, [r3, #0]
  408980:	2b00      	cmp	r3, #0
  408982:	f340 823a 	ble.w	408dfa <xProcessReceivedTCPPacket+0xe5a>
		xMayClose = pdTRUE;
  408986:	2501      	movs	r5, #1
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
  408988:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
  40898c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
  408990:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
  408994:	1a5b      	subs	r3, r3, r1
  408996:	9300      	str	r3, [sp, #0]
  408998:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40899a:	1aba      	subs	r2, r7, r2
  40899c:	4629      	mov	r1, r5
  40899e:	489d      	ldr	r0, [pc, #628]	; (408c14 <xProcessReceivedTCPPacket+0xc74>)
  4089a0:	4f9d      	ldr	r7, [pc, #628]	; (408c18 <xProcessReceivedTCPPacket+0xc78>)
  4089a2:	47b8      	blx	r7
		if( xMayClose != pdFALSE )
  4089a4:	2d00      	cmp	r5, #0
  4089a6:	f040 8228 	bne.w	408dfa <xProcessReceivedTCPPacket+0xe5a>
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
  4089aa:	2310      	movs	r3, #16
  4089ac:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		if( ulReceiveLength != 0u )
  4089b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4089b2:	2b00      	cmp	r3, #0
  4089b4:	d165      	bne.n	408a82 <xProcessReceivedTCPPacket+0xae2>
		if( uxOptionsLength == 0u )
  4089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089b8:	2b00      	cmp	r3, #0
  4089ba:	f040 80c9 	bne.w	408b50 <xProcessReceivedTCPPacket+0xbb0>
  4089be:	2600      	movs	r6, #0
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
  4089c0:	2200      	movs	r2, #0
  4089c2:	a90d      	add	r1, sp, #52	; 0x34
  4089c4:	4620      	mov	r0, r4
  4089c6:	4b95      	ldr	r3, [pc, #596]	; (408c1c <xProcessReceivedTCPPacket+0xc7c>)
  4089c8:	4798      	blx	r3
			if( lSendResult > 0 )
  4089ca:	1e05      	subs	r5, r0, #0
  4089cc:	dc77      	bgt.n	408abe <xProcessReceivedTCPPacket+0xb1e>
  4089ce:	4635      	mov	r5, r6
  4089d0:	e073      	b.n	408aba <xProcessReceivedTCPPacket+0xb1a>
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
  4089d2:	f8d6 302a 	ldr.w	r3, [r6, #42]	; 0x2a
  4089d6:	0e19      	lsrs	r1, r3, #24
  4089d8:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  4089dc:	021a      	lsls	r2, r3, #8
  4089de:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  4089e2:	4311      	orrs	r1, r2
  4089e4:	0a1b      	lsrs	r3, r3, #8
  4089e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4089ea:	4319      	orrs	r1, r3
  4089ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4089ee:	4b8c      	ldr	r3, [pc, #560]	; (408c20 <xProcessReceivedTCPPacket+0xc80>)
  4089f0:	4798      	blx	r3
  4089f2:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
  4089f4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  4089f6:	2800      	cmp	r0, #0
  4089f8:	d0b1      	beq.n	40895e <xProcessReceivedTCPPacket+0x9be>
  4089fa:	2b00      	cmp	r3, #0
  4089fc:	d0ac      	beq.n	408958 <xProcessReceivedTCPPacket+0x9b8>
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
  4089fe:	2100      	movs	r1, #0
  408a00:	9100      	str	r1, [sp, #0]
  408a02:	460a      	mov	r2, r1
  408a04:	f8df 9248 	ldr.w	r9, [pc, #584]	; 408c50 <xProcessReceivedTCPPacket+0xcb0>
  408a08:	47c8      	blx	r9
  408a0a:	2800      	cmp	r0, #0
  408a0c:	d0a2      	beq.n	408954 <xProcessReceivedTCPPacket+0x9b4>
				pxSocket->xEventBits |= eSOCKET_SEND;
  408a0e:	6823      	ldr	r3, [r4, #0]
  408a10:	f043 0202 	orr.w	r2, r3, #2
  408a14:	6022      	str	r2, [r4, #0]
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
  408a16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  408a18:	f012 0f02 	tst.w	r2, #2
  408a1c:	d09a      	beq.n	408954 <xProcessReceivedTCPPacket+0x9b4>
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
  408a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  408a22:	f043 0302 	orr.w	r3, r3, #2
  408a26:	6023      	str	r3, [r4, #0]
  408a28:	e794      	b.n	408954 <xProcessReceivedTCPPacket+0x9b4>
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
  408a2a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  408a2e:	4640      	mov	r0, r8
  408a30:	4b7c      	ldr	r3, [pc, #496]	; (408c24 <xProcessReceivedTCPPacket+0xc84>)
  408a32:	4798      	blx	r3
  408a34:	4605      	mov	r5, r0
			bTxDone	 = xTCPWindowTxDone( pxTCPWindow );
  408a36:	4640      	mov	r0, r8
  408a38:	4b7b      	ldr	r3, [pc, #492]	; (408c28 <xProcessReceivedTCPPacket+0xc88>)
  408a3a:	4798      	blx	r3
			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
  408a3c:	b105      	cbz	r5, 408a40 <xProcessReceivedTCPPacket+0xaa0>
  408a3e:	b960      	cbnz	r0, 408a5a <xProcessReceivedTCPPacket+0xaba>
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
  408a40:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  408a42:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  408a44:	9000      	str	r0, [sp, #0]
  408a46:	462b      	mov	r3, r5
  408a48:	4878      	ldr	r0, [pc, #480]	; (408c2c <xProcessReceivedTCPPacket+0xc8c>)
  408a4a:	4d73      	ldr	r5, [pc, #460]	; (408c18 <xProcessReceivedTCPPacket+0xc78>)
  408a4c:	47a8      	blx	r5
		if( xTCPWindowLoggingLevel > 0 )
  408a4e:	4b70      	ldr	r3, [pc, #448]	; (408c10 <xProcessReceivedTCPPacket+0xc70>)
  408a50:	681b      	ldr	r3, [r3, #0]
  408a52:	2b00      	cmp	r3, #0
  408a54:	dda9      	ble.n	4089aa <xProcessReceivedTCPPacket+0xa0a>
  408a56:	2500      	movs	r5, #0
  408a58:	e796      	b.n	408988 <xProcessReceivedTCPPacket+0x9e8>
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
  408a5a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
  408a5e:	1a39      	subs	r1, r7, r0
  408a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408a62:	4419      	add	r1, r3
				if( lDistance > 1 )
  408a64:	2901      	cmp	r1, #1
  408a66:	f340 81c3 	ble.w	408df0 <xProcessReceivedTCPPacket+0xe50>
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
  408a6a:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
  408a6e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  408a72:	1a9b      	subs	r3, r3, r2
  408a74:	1a82      	subs	r2, r0, r2
  408a76:	486e      	ldr	r0, [pc, #440]	; (408c30 <xProcessReceivedTCPPacket+0xc90>)
  408a78:	4d67      	ldr	r5, [pc, #412]	; (408c18 <xProcessReceivedTCPPacket+0xc78>)
  408a7a:	47a8      	blx	r5
  408a7c:	e7e7      	b.n	408a4e <xProcessReceivedTCPPacket+0xaae>
		xMayClose = pdTRUE;
  408a7e:	2501      	movs	r5, #1
  408a80:	e782      	b.n	408988 <xProcessReceivedTCPPacket+0x9e8>
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
  408a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408a84:	4613      	mov	r3, r2
  408a86:	f102 0528 	add.w	r5, r2, #40	; 0x28
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  408a8a:	3314      	adds	r3, #20
  408a8c:	009b      	lsls	r3, r3, #2
  408a8e:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
  408a92:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  408a96:	f013 0f40 	tst.w	r3, #64	; 0x40
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
  408a9a:	bf1c      	itt	ne
  408a9c:	f8d4 3100 	ldrne.w	r3, [r4, #256]	; 0x100
  408aa0:	f8c4 30fc 	strne.w	r3, [r4, #252]	; 0xfc
		if( uxOptionsLength == 0u )
  408aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408aa6:	b943      	cbnz	r3, 408aba <xProcessReceivedTCPPacket+0xb1a>
  408aa8:	462e      	mov	r6, r5
  408aaa:	e789      	b.n	4089c0 <xProcessReceivedTCPPacket+0xa20>
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
  408aac:	990d      	ldr	r1, [sp, #52]	; 0x34
  408aae:	4620      	mov	r0, r4
  408ab0:	4b60      	ldr	r3, [pc, #384]	; (408c34 <xProcessReceivedTCPPacket+0xc94>)
  408ab2:	4798      	blx	r3
  408ab4:	4605      	mov	r5, r0
  408ab6:	e000      	b.n	408aba <xProcessReceivedTCPPacket+0xb1a>
BaseType_t xSendLength = 0;
  408ab8:	2500      	movs	r5, #0
	if( xSendLength > 0 )
  408aba:	2d00      	cmp	r5, #0
  408abc:	dd48      	ble.n	408b50 <xProcessReceivedTCPPacket+0xbb0>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
  408abe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  408ac0:	f8d6 e018 	ldr.w	lr, [r6, #24]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
  408ac4:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
  408ac8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
  408acc:	4439      	add	r1, r7
  408ace:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  408ad2:	1ac9      	subs	r1, r1, r3
  408ad4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	if( pxSocket->u.xTCP.rxStream != NULL )
  408ad8:	6f60      	ldr	r0, [r4, #116]	; 0x74
  408ada:	2800      	cmp	r0, #0
  408adc:	d044      	beq.n	408b68 <xProcessReceivedTCPPacket+0xbc8>
size_t uxFront = pxBuffer->uxFront;
  408ade:	68c3      	ldr	r3, [r0, #12]
size_t uxTail = pxBuffer->uxTail;
  408ae0:	6802      	ldr	r2, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  408ae2:	6900      	ldr	r0, [r0, #16]
  408ae4:	4402      	add	r2, r0
  408ae6:	3a01      	subs	r2, #1
  408ae8:	1ad3      	subs	r3, r2, r3
	if( uxCount >= pxBuffer->LENGTH )
  408aea:	4298      	cmp	r0, r3
  408aec:	d800      	bhi.n	408af0 <xProcessReceivedTCPPacket+0xb50>
		uxCount -= pxBuffer->LENGTH;
  408aee:	1a1b      	subs	r3, r3, r0
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
  408af0:	428b      	cmp	r3, r1
  408af2:	bf28      	it	cs
  408af4:	460b      	movcs	r3, r1
	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
  408af6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
  408afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408afc:	b16b      	cbz	r3, 408b1a <xProcessReceivedTCPPacket+0xb7a>
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
  408afe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  408b00:	1bdf      	subs	r7, r3, r7
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
  408b02:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
  408b06:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
  408b0a:	db06      	blt.n	408b1a <xProcessReceivedTCPPacket+0xb7a>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
  408b0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
  408b10:	f013 0f40 	tst.w	r3, #64	; 0x40
  408b14:	d101      	bne.n	408b1a <xProcessReceivedTCPPacket+0xb7a>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
  408b16:	2d28      	cmp	r5, #40	; 0x28
  408b18:	d028      	beq.n	408b6c <xProcessReceivedTCPPacket+0xbcc>
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
  408b1a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  408b1c:	b128      	cbz	r0, 408b2a <xProcessReceivedTCPPacket+0xb8a>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
  408b1e:	4286      	cmp	r6, r0
  408b20:	d001      	beq.n	408b26 <xProcessReceivedTCPPacket+0xb86>
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
  408b22:	4b45      	ldr	r3, [pc, #276]	; (408c38 <xProcessReceivedTCPPacket+0xc98>)
  408b24:	4798      	blx	r3
			pxSocket->u.xTCP.pxAckMessage = NULL;
  408b26:	2300      	movs	r3, #0
  408b28:	67e3      	str	r3, [r4, #124]	; 0x7c
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
  408b2a:	4b39      	ldr	r3, [pc, #228]	; (408c10 <xProcessReceivedTCPPacket+0xc70>)
  408b2c:	681b      	ldr	r3, [r3, #0]
  408b2e:	2b01      	cmp	r3, #1
  408b30:	dd02      	ble.n	408b38 <xProcessReceivedTCPPacket+0xb98>
  408b32:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  408b34:	2917      	cmp	r1, #23
  408b36:	d157      	bne.n	408be8 <xProcessReceivedTCPPacket+0xc48>
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
  408b38:	2300      	movs	r3, #0
  408b3a:	462a      	mov	r2, r5
  408b3c:	990d      	ldr	r1, [sp, #52]	; 0x34
  408b3e:	4620      	mov	r0, r4
  408b40:	4e3e      	ldr	r6, [pc, #248]	; (408c3c <xProcessReceivedTCPPacket+0xc9c>)
  408b42:	47b0      	blx	r6
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
  408b44:	2d00      	cmp	r5, #0
  408b46:	dd03      	ble.n	408b50 <xProcessReceivedTCPPacket+0xbb0>
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
  408b48:	a90d      	add	r1, sp, #52	; 0x34
  408b4a:	4620      	mov	r0, r4
  408b4c:	4b3c      	ldr	r3, [pc, #240]	; (408c40 <xProcessReceivedTCPPacket+0xca0>)
  408b4e:	4798      	blx	r3
		if( pxNetworkBuffer != NULL )
  408b50:	980d      	ldr	r0, [sp, #52]	; 0x34
  408b52:	b118      	cbz	r0, 408b5c <xProcessReceivedTCPPacket+0xbbc>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  408b54:	4b38      	ldr	r3, [pc, #224]	; (408c38 <xProcessReceivedTCPPacket+0xc98>)
  408b56:	4798      	blx	r3
			pxNetworkBuffer = NULL;
  408b58:	2300      	movs	r3, #0
  408b5a:	930d      	str	r3, [sp, #52]	; 0x34
		prvTCPNextTimeout ( pxSocket );
  408b5c:	4620      	mov	r0, r4
  408b5e:	4b39      	ldr	r3, [pc, #228]	; (408c44 <xProcessReceivedTCPPacket+0xca4>)
  408b60:	4798      	blx	r3
		xResult = pdPASS;
  408b62:	2001      	movs	r0, #1
  408b64:	f7ff ba24 	b.w	407fb0 <xProcessReceivedTCPPacket+0x10>
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
  408b68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  408b6a:	e7c1      	b.n	408af0 <xProcessReceivedTCPPacket+0xb50>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
  408b6c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  408b70:	2b05      	cmp	r3, #5
  408b72:	d1d2      	bne.n	408b1a <xProcessReceivedTCPPacket+0xb7a>
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
  408b74:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
  408b78:	2b10      	cmp	r3, #16
  408b7a:	d1ce      	bne.n	408b1a <xProcessReceivedTCPPacket+0xb7a>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
  408b7c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  408b7e:	4286      	cmp	r6, r0
  408b80:	d004      	beq.n	408b8c <xProcessReceivedTCPPacket+0xbec>
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
  408b82:	b108      	cbz	r0, 408b88 <xProcessReceivedTCPPacket+0xbe8>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
  408b84:	4b2c      	ldr	r3, [pc, #176]	; (408c38 <xProcessReceivedTCPPacket+0xc98>)
  408b86:	4798      	blx	r3
				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
  408b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408b8a:	67e3      	str	r3, [r4, #124]	; 0x7c
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
  408b8c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
  408b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408b92:	429a      	cmp	r2, r3
  408b94:	d302      	bcc.n	408b9c <xProcessReceivedTCPPacket+0xbfc>
  408b96:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
  408b9a:	da21      	bge.n	408be0 <xProcessReceivedTCPPacket+0xc40>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
  408b9c:	2302      	movs	r3, #2
  408b9e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
  408ba2:	4b1b      	ldr	r3, [pc, #108]	; (408c10 <xProcessReceivedTCPPacket+0xc70>)
  408ba4:	681b      	ldr	r3, [r3, #0]
  408ba6:	2b01      	cmp	r3, #1
  408ba8:	dd17      	ble.n	408bda <xProcessReceivedTCPPacket+0xc3a>
  408baa:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  408bac:	2917      	cmp	r1, #23
  408bae:	d014      	beq.n	408bda <xProcessReceivedTCPPacket+0xc3a>
				FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
  408bb0:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
  408bb4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  408bb8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  408bba:	9703      	str	r7, [sp, #12]
  408bbc:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
  408bc0:	9002      	str	r0, [sp, #8]
  408bc2:	2028      	movs	r0, #40	; 0x28
  408bc4:	9001      	str	r0, [sp, #4]
  408bc6:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
  408bca:	f8d4 60f8 	ldr.w	r6, [r4, #248]	; 0xf8
  408bce:	1b80      	subs	r0, r0, r6
  408bd0:	9000      	str	r0, [sp, #0]
  408bd2:	1aeb      	subs	r3, r5, r3
  408bd4:	481c      	ldr	r0, [pc, #112]	; (408c48 <xProcessReceivedTCPPacket+0xca8>)
  408bd6:	4d10      	ldr	r5, [pc, #64]	; (408c18 <xProcessReceivedTCPPacket+0xc78>)
  408bd8:	47a8      	blx	r5
			*ppxNetworkBuffer = NULL;
  408bda:	2300      	movs	r3, #0
  408bdc:	930d      	str	r3, [sp, #52]	; 0x34
  408bde:	e7b7      	b.n	408b50 <xProcessReceivedTCPPacket+0xbb0>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
  408be0:	2314      	movs	r3, #20
  408be2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  408be6:	e7dc      	b.n	408ba2 <xProcessReceivedTCPPacket+0xc02>
			FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
  408be8:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
  408bec:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  408bf0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  408bf2:	9501      	str	r5, [sp, #4]
  408bf4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
  408bf8:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
  408bfc:	1bc0      	subs	r0, r0, r7
  408bfe:	9000      	str	r0, [sp, #0]
  408c00:	1af3      	subs	r3, r6, r3
  408c02:	4812      	ldr	r0, [pc, #72]	; (408c4c <xProcessReceivedTCPPacket+0xcac>)
  408c04:	4e04      	ldr	r6, [pc, #16]	; (408c18 <xProcessReceivedTCPPacket+0xc78>)
  408c06:	47b0      	blx	r6
  408c08:	e796      	b.n	408b38 <xProcessReceivedTCPPacket+0xb98>
  408c0a:	bf00      	nop
  408c0c:	00407041 	.word	0x00407041
  408c10:	20006d84 	.word	0x20006d84
  408c14:	004138c0 	.word	0x004138c0
  408c18:	0040c351 	.word	0x0040c351
  408c1c:	004076d5 	.word	0x004076d5
  408c20:	00409971 	.word	0x00409971
  408c24:	004091cd 	.word	0x004091cd
  408c28:	00409749 	.word	0x00409749
  408c2c:	00413858 	.word	0x00413858
  408c30:	00413888 	.word	0x00413888
  408c34:	00407e71 	.word	0x00407e71
  408c38:	00409d79 	.word	0x00409d79
  408c3c:	00407099 	.word	0x00407099
  408c40:	00407a69 	.word	0x00407a69
  408c44:	00407419 	.word	0x00407419
  408c48:	004138fc 	.word	0x004138fc
  408c4c:	00413938 	.word	0x00413938
  408c50:	00406f81 	.word	0x00406f81
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
  408c54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  408c58:	2b00      	cmp	r3, #0
  408c5a:	f47f ad59 	bne.w	408710 <xProcessReceivedTCPPacket+0x770>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
  408c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408c60:	699d      	ldr	r5, [r3, #24]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
  408c62:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
  408c66:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
		if( uxOptionsLength != 0u )
  408c6a:	f1b9 0f00 	cmp.w	r9, #0
  408c6e:	f43f ad5d 	beq.w	40872c <xProcessReceivedTCPPacket+0x78c>
			if( xTCPWindowLoggingLevel >= 0 )
  408c72:	4b6c      	ldr	r3, [pc, #432]	; (408e24 <xProcessReceivedTCPPacket+0xe84>)
  408c74:	681b      	ldr	r3, [r3, #0]
  408c76:	2b00      	cmp	r3, #0
  408c78:	db29      	blt.n	408cce <xProcessReceivedTCPPacket+0xd2e>
				FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
  408c7a:	f8d4 1160 	ldr.w	r1, [r4, #352]	; 0x160
  408c7e:	f8d4 e0e8 	ldr.w	lr, [r4, #232]	; 0xe8
  408c82:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
  408c86:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
  408c88:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
  408c8c:	0e07      	lsrs	r7, r0, #24
  408c8e:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
  408c92:	0203      	lsls	r3, r0, #8
  408c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  408c98:	433b      	orrs	r3, r7
  408c9a:	0a00      	lsrs	r0, r0, #8
  408c9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  408ca0:	4303      	orrs	r3, r0
  408ca2:	eba3 030e 	sub.w	r3, r3, lr
  408ca6:	9301      	str	r3, [sp, #4]
  408ca8:	0e0b      	lsrs	r3, r1, #24
  408caa:	ea43 6001 	orr.w	r0, r3, r1, lsl #24
  408cae:	020b      	lsls	r3, r1, #8
  408cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  408cb4:	4303      	orrs	r3, r0
  408cb6:	0a09      	lsrs	r1, r1, #8
  408cb8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  408cbc:	430b      	orrs	r3, r1
  408cbe:	eba3 030e 	sub.w	r3, r3, lr
  408cc2:	9300      	str	r3, [sp, #0]
  408cc4:	464b      	mov	r3, r9
  408cc6:	4661      	mov	r1, ip
  408cc8:	4857      	ldr	r0, [pc, #348]	; (408e28 <xProcessReceivedTCPPacket+0xe88>)
  408cca:	4f58      	ldr	r7, [pc, #352]	; (408e2c <xProcessReceivedTCPPacket+0xe8c>)
  408ccc:	47b8      	blx	r7
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
  408cce:	464a      	mov	r2, r9
  408cd0:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
  408cd4:	f105 0036 	add.w	r0, r5, #54	; 0x36
  408cd8:	4b55      	ldr	r3, [pc, #340]	; (408e30 <xProcessReceivedTCPPacket+0xe90>)
  408cda:	4798      	blx	r3
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  408cdc:	f109 0914 	add.w	r9, r9, #20
  408ce0:	ea4f 0989 	mov.w	r9, r9, lsl #2
  408ce4:	f885 902e 	strb.w	r9, [r5, #46]	; 0x2e
		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
  408ce8:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
  408cec:	2904      	cmp	r1, #4
  408cee:	f43f ad4c 	beq.w	40878a <xProcessReceivedTCPPacket+0x7ea>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
  408cf2:	f018 0f01 	tst.w	r8, #1
  408cf6:	d014      	beq.n	408d22 <xProcessReceivedTCPPacket+0xd82>
  408cf8:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
  408cfc:	2b00      	cmp	r3, #0
  408cfe:	db10      	blt.n	408d22 <xProcessReceivedTCPPacket+0xd82>
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
  408d00:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
  408d04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  408d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408d0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
  408d10:	f013 0f40 	tst.w	r3, #64	; 0x40
  408d14:	d105      	bne.n	408d22 <xProcessReceivedTCPPacket+0xd82>
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
  408d16:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  408d1a:	f043 0302 	orr.w	r3, r3, #2
  408d1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		switch (pxSocket->u.xTCP.ucTCPState)
  408d22:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
  408d26:	1e8b      	subs	r3, r1, #2
  408d28:	2b08      	cmp	r3, #8
  408d2a:	f63f aec5 	bhi.w	408ab8 <xProcessReceivedTCPPacket+0xb18>
  408d2e:	a201      	add	r2, pc, #4	; (adr r2, 408d34 <xProcessReceivedTCPPacket+0xd94>)
  408d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408d34:	0040879b 	.word	0x0040879b
  408d38:	0040881f 	.word	0x0040881f
  408d3c:	0040879b 	.word	0x0040879b
  408d40:	00408919 	.word	0x00408919
  408d44:	00408aad 	.word	0x00408aad
  408d48:	00408aad 	.word	0x00408aad
  408d4c:	00408ab9 	.word	0x00408ab9
  408d50:	00408ab9 	.word	0x00408ab9
  408d54:	00408aad 	.word	0x00408aad
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
  408d58:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  408d5a:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
  408d5e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  408d60:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
		else if( ulReceiveLength == 0u )
  408d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d66:	2b00      	cmp	r3, #0
  408d68:	f43f adb9 	beq.w	4088de <xProcessReceivedTCPPacket+0x93e>
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
  408d6c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
  408d70:	3301      	adds	r3, #1
  408d72:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
  408d76:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
  408d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  408d7c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
  408d7e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
  408d82:	f3c0 1000 	ubfx	r0, r0, #4, #1
  408d86:	9001      	str	r0, [sp, #4]
  408d88:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  408d8a:	9100      	str	r1, [sp, #0]
  408d8c:	4829      	ldr	r0, [pc, #164]	; (408e34 <xProcessReceivedTCPPacket+0xe94>)
  408d8e:	492a      	ldr	r1, [pc, #168]	; (408e38 <xProcessReceivedTCPPacket+0xe98>)
  408d90:	2d02      	cmp	r5, #2
  408d92:	bf18      	it	ne
  408d94:	4601      	movne	r1, r0
  408d96:	4829      	ldr	r0, [pc, #164]	; (408e3c <xProcessReceivedTCPPacket+0xe9c>)
  408d98:	4d24      	ldr	r5, [pc, #144]	; (408e2c <xProcessReceivedTCPPacket+0xe8c>)
  408d9a:	47a8      	blx	r5
		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
  408d9c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
  408da0:	2b02      	cmp	r3, #2
  408da2:	d003      	beq.n	408dac <xProcessReceivedTCPPacket+0xe0c>
  408da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408da6:	2b00      	cmp	r3, #0
  408da8:	f43f ad9c 	beq.w	4088e4 <xProcessReceivedTCPPacket+0x944>
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
  408dac:	2310      	movs	r3, #16
  408dae:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
  408db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408db4:	4613      	mov	r3, r2
  408db6:	f102 0528 	add.w	r5, r2, #40	; 0x28
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
  408dba:	3314      	adds	r3, #20
  408dbc:	009b      	lsls	r3, r3, #2
  408dbe:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
			if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
  408dc2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  408dc6:	f013 0f10 	tst.w	r3, #16
  408dca:	d104      	bne.n	408dd6 <xProcessReceivedTCPPacket+0xe36>
				pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
  408dcc:	2300      	movs	r3, #0
  408dce:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
  408dd2:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		vTCPStateChange( pxSocket, eESTABLISHED );
  408dd6:	2105      	movs	r1, #5
  408dd8:	4620      	mov	r0, r4
  408dda:	4b19      	ldr	r3, [pc, #100]	; (408e40 <xProcessReceivedTCPPacket+0xea0>)
  408ddc:	4798      	blx	r3
  408dde:	e66c      	b.n	408aba <xProcessReceivedTCPPacket+0xb1a>
	if( ( ucTCPFlags & 0x17u ) != usExpect )
  408de0:	f003 0217 	and.w	r2, r3, #23
  408de4:	2a12      	cmp	r2, #18
  408de6:	f43f ad59 	beq.w	40889c <xProcessReceivedTCPPacket+0x8fc>
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
  408dea:	2212      	movs	r2, #18
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
  408dec:	4915      	ldr	r1, [pc, #84]	; (408e44 <xProcessReceivedTCPPacket+0xea4>)
  408dee:	e4f5      	b.n	4087dc <xProcessReceivedTCPPacket+0x83c>
		if( xTCPWindowLoggingLevel > 0 )
  408df0:	4b0c      	ldr	r3, [pc, #48]	; (408e24 <xProcessReceivedTCPPacket+0xe84>)
  408df2:	681b      	ldr	r3, [r3, #0]
  408df4:	2b00      	cmp	r3, #0
  408df6:	f73f ae42 	bgt.w	408a7e <xProcessReceivedTCPPacket+0xade>
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
  408dfa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  408dfe:	f043 0320 	orr.w	r3, r3, #32
  408e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
  408e06:	990d      	ldr	r1, [sp, #52]	; 0x34
  408e08:	4620      	mov	r0, r4
  408e0a:	4b0f      	ldr	r3, [pc, #60]	; (408e48 <xProcessReceivedTCPPacket+0xea8>)
  408e0c:	4798      	blx	r3
  408e0e:	4605      	mov	r5, r0
  408e10:	e653      	b.n	408aba <xProcessReceivedTCPPacket+0xb1a>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
  408e12:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
  408e16:	2b00      	cmp	r3, #0
  408e18:	f6bf af72 	bge.w	408d00 <xProcessReceivedTCPPacket+0xd60>
		switch (pxSocket->u.xTCP.ucTCPState)
  408e1c:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
  408e20:	e4bb      	b.n	40879a <xProcessReceivedTCPPacket+0x7fa>
  408e22:	bf00      	nop
  408e24:	20006d84 	.word	0x20006d84
  408e28:	00413784 	.word	0x00413784
  408e2c:	0040c351 	.word	0x0040c351
  408e30:	0040c3d9 	.word	0x0040c3d9
  408e34:	004135b0 	.word	0x004135b0
  408e38:	004135a8 	.word	0x004135a8
  408e3c:	00413828 	.word	0x00413828
  408e40:	004074f5 	.word	0x004074f5
  408e44:	00413598 	.word	0x00413598
  408e48:	00407e71 	.word	0x00407e71

00408e4c <FreeRTOS_GetTCPStateName>:
		return pcStateNames[ ulState ];
  408e4c:	280c      	cmp	r0, #12
  408e4e:	bf28      	it	cs
  408e50:	200c      	movcs	r0, #12
	}
  408e52:	4b02      	ldr	r3, [pc, #8]	; (408e5c <FreeRTOS_GetTCPStateName+0x10>)
  408e54:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  408e58:	4770      	bx	lr
  408e5a:	bf00      	nop
  408e5c:	004132a8 	.word	0x004132a8

00408e60 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
  408e60:	b570      	push	{r4, r5, r6, lr}
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
  408e62:	8c81      	ldrh	r1, [r0, #36]	; 0x24
  408e64:	0a0c      	lsrs	r4, r1, #8
  408e66:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
  408e6a:	4a11      	ldr	r2, [pc, #68]	; (408eb0 <xTCPCheckNewClient+0x50>)
  408e6c:	68d3      	ldr	r3, [r2, #12]
  408e6e:	3208      	adds	r2, #8
  408e70:	4293      	cmp	r3, r2
  408e72:	d01a      	beq.n	408eaa <xTCPCheckNewClient+0x4a>
  408e74:	b2a4      	uxth	r4, r4
  408e76:	4615      	mov	r5, r2
  408e78:	e002      	b.n	408e80 <xTCPCheckNewClient+0x20>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
  408e7a:	685b      	ldr	r3, [r3, #4]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
  408e7c:	42ab      	cmp	r3, r5
  408e7e:	d012      	beq.n	408ea6 <xTCPCheckNewClient+0x46>
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
  408e80:	681a      	ldr	r2, [r3, #0]
  408e82:	4294      	cmp	r4, r2
  408e84:	d1f9      	bne.n	408e7a <xTCPCheckNewClient+0x1a>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  408e86:	68da      	ldr	r2, [r3, #12]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
  408e88:	f892 6027 	ldrb.w	r6, [r2, #39]	; 0x27
  408e8c:	2e06      	cmp	r6, #6
  408e8e:	d1f4      	bne.n	408e7a <xTCPCheckNewClient+0x1a>
  408e90:	f892 6040 	ldrb.w	r6, [r2, #64]	; 0x40
  408e94:	f016 0f02 	tst.w	r6, #2
  408e98:	d0ef      	beq.n	408e7a <xTCPCheckNewClient+0x1a>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
  408e9a:	6542      	str	r2, [r0, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
  408e9c:	4805      	ldr	r0, [pc, #20]	; (408eb4 <xTCPCheckNewClient+0x54>)
  408e9e:	4b06      	ldr	r3, [pc, #24]	; (408eb8 <xTCPCheckNewClient+0x58>)
  408ea0:	4798      	blx	r3
				xResult = pdTRUE;
  408ea2:	2001      	movs	r0, #1
				break;
  408ea4:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xResult = pdFALSE;
  408ea6:	2000      	movs	r0, #0
  408ea8:	bd70      	pop	{r4, r5, r6, pc}
  408eaa:	2000      	movs	r0, #0
			}
		}
	}
	return xResult;
}
  408eac:	bd70      	pop	{r4, r5, r6, pc}
  408eae:	bf00      	nop
  408eb0:	2001346c 	.word	0x2001346c
  408eb4:	00413964 	.word	0x00413964
  408eb8:	0040c351 	.word	0x0040c351

00408ebc <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
  408ebc:	b410      	push	{r4}
	TCPSegment_t *pxSegment, *pxReturn = NULL;

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
  408ebe:	f100 04ac 	add.w	r4, r0, #172	; 0xac

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  408ec2:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
  408ec6:	429c      	cmp	r4, r3
  408ec8:	d00f      	beq.n	408eea <xTCPWindowRxFind+0x2e>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  408eca:	68d8      	ldr	r0, [r3, #12]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
  408ecc:	6802      	ldr	r2, [r0, #0]
  408ece:	4291      	cmp	r1, r2
  408ed0:	d008      	beq.n	408ee4 <xTCPWindowRxFind+0x28>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
  408ed2:	685b      	ldr	r3, [r3, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  408ed4:	429c      	cmp	r4, r3
  408ed6:	d004      	beq.n	408ee2 <xTCPWindowRxFind+0x26>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  408ed8:	68d8      	ldr	r0, [r3, #12]
			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
  408eda:	6802      	ldr	r2, [r0, #0]
  408edc:	428a      	cmp	r2, r1
  408ede:	d1f8      	bne.n	408ed2 <xTCPWindowRxFind+0x16>
  408ee0:	e000      	b.n	408ee4 <xTCPWindowRxFind+0x28>
	TCPSegment_t *pxSegment, *pxReturn = NULL;
  408ee2:	2000      	movs	r0, #0
				break;
			}
		}

		return pxReturn;
	}
  408ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
  408ee8:	4770      	bx	lr
	TCPSegment_t *pxSegment, *pxReturn = NULL;
  408eea:	2000      	movs	r0, #0
		return pxReturn;
  408eec:	e7fa      	b.n	408ee4 <xTCPWindowRxFind+0x28>

00408eee <xTCPWindowPeekHead>:
	{
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
  408eee:	6803      	ldr	r3, [r0, #0]
  408ef0:	b113      	cbz	r3, 408ef8 <xTCPWindowPeekHead+0xa>
			pxReturn = NULL;
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
  408ef2:	68c3      	ldr	r3, [r0, #12]
  408ef4:	68d8      	ldr	r0, [r3, #12]
  408ef6:	4770      	bx	lr
			pxReturn = NULL;
  408ef8:	2000      	movs	r0, #0
		}

		return pxReturn;
	}
  408efa:	4770      	bx	lr

00408efc <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
  408efc:	b538      	push	{r3, r4, r5, lr}
  408efe:	4605      	mov	r5, r0
  408f00:	460c      	mov	r4, r1
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
  408f02:	3054      	adds	r0, #84	; 0x54
  408f04:	4b0f      	ldr	r3, [pc, #60]	; (408f44 <prvTCPWindowTxHasSpace+0x48>)
  408f06:	4798      	blx	r3

		if( pxSegment == NULL )
  408f08:	b1a0      	cbz	r0, 408f34 <prvTCPWindowTxHasSpace+0x38>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
  408f0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  408f0c:	6a2a      	ldr	r2, [r5, #32]
  408f0e:	4293      	cmp	r3, r2
  408f10:	d312      	bcc.n	408f38 <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
  408f12:	1a9b      	subs	r3, r3, r2

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
  408f14:	6882      	ldr	r2, [r0, #8]
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
  408f16:	42a3      	cmp	r3, r4
  408f18:	bf94      	ite	ls
  408f1a:	1ae0      	subls	r0, r4, r3
  408f1c:	1b20      	subhi	r0, r4, r4
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
  408f1e:	4290      	cmp	r0, r2
  408f20:	bf34      	ite	cc
  408f22:	2000      	movcc	r0, #0
  408f24:	2001      	movcs	r0, #1

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
  408f26:	b163      	cbz	r3, 408f42 <prvTCPWindowTxHasSpace+0x46>
  408f28:	4413      	add	r3, r2
  408f2a:	68aa      	ldr	r2, [r5, #8]
			{
				xHasSpace = pdFALSE;
  408f2c:	429a      	cmp	r2, r3
  408f2e:	bf38      	it	cc
  408f30:	2000      	movcc	r0, #0
  408f32:	bd38      	pop	{r3, r4, r5, pc}
			xHasSpace = pdFALSE;
  408f34:	2000      	movs	r0, #0
			}
		}

		return xHasSpace;
  408f36:	bd38      	pop	{r3, r4, r5, pc}
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
  408f38:	6880      	ldr	r0, [r0, #8]
  408f3a:	4284      	cmp	r4, r0
  408f3c:	bf34      	ite	cc
  408f3e:	2000      	movcc	r0, #0
  408f40:	2001      	movcs	r0, #1
	}
  408f42:	bd38      	pop	{r3, r4, r5, pc}
  408f44:	00408eef 	.word	0x00408eef

00408f48 <xTCPWindowGetHead>:
	{
  408f48:	b510      	push	{r4, lr}
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
  408f4a:	6803      	ldr	r3, [r0, #0]
  408f4c:	b12b      	cbz	r3, 408f5a <xTCPWindowGetHead+0x12>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
  408f4e:	68c0      	ldr	r0, [r0, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
  408f50:	68c4      	ldr	r4, [r0, #12]
			uxListRemove( pxItem );
  408f52:	4b03      	ldr	r3, [pc, #12]	; (408f60 <xTCPWindowGetHead+0x18>)
  408f54:	4798      	blx	r3
	}
  408f56:	4620      	mov	r0, r4
  408f58:	bd10      	pop	{r4, pc}
			pxSegment = NULL;
  408f5a:	2400      	movs	r4, #0
		return pxSegment;
  408f5c:	e7fb      	b.n	408f56 <xTCPWindowGetHead+0xe>
  408f5e:	bf00      	nop
  408f60:	00409cc5 	.word	0x00409cc5

00408f64 <vListInsertGeneric>:
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
  408f64:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
  408f66:	6893      	ldr	r3, [r2, #8]
  408f68:	608b      	str	r3, [r1, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
  408f6a:	6893      	ldr	r3, [r2, #8]
  408f6c:	6059      	str	r1, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
  408f6e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pvContainer = ( void * ) pxList; /* If this line fails to build then ensure configENABLE_BACKWARD_COMPATIBILITY is set to 1 in FreeRTOSConfig.h. */
  408f70:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
  408f72:	6803      	ldr	r3, [r0, #0]
  408f74:	3301      	adds	r3, #1
  408f76:	6003      	str	r3, [r0, #0]
  408f78:	4770      	bx	lr
	...

00408f7c <vTCPWindowFree>:
	{
  408f7c:	b510      	push	{r4, lr}
  408f7e:	4604      	mov	r4, r0
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
  408f80:	6a83      	ldr	r3, [r0, #40]	; 0x28
  408f82:	b113      	cbz	r3, 408f8a <vTCPWindowFree+0xe>
			uxListRemove( &( pxSegment->xQueueItem ) );
  408f84:	3018      	adds	r0, #24
  408f86:	4b0a      	ldr	r3, [pc, #40]	; (408fb0 <vTCPWindowFree+0x34>)
  408f88:	4798      	blx	r3
		pxSegment->ulSequenceNumber = 0u;
  408f8a:	2300      	movs	r3, #0
  408f8c:	6023      	str	r3, [r4, #0]
		pxSegment->lDataLength = 0l;
  408f8e:	60a3      	str	r3, [r4, #8]
		pxSegment->u.ulFlags = 0u;
  408f90:	6163      	str	r3, [r4, #20]
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
  408f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  408f94:	b11b      	cbz	r3, 408f9e <vTCPWindowFree+0x22>
			uxListRemove( &( pxSegment->xListItem ) );
  408f96:	f104 002c 	add.w	r0, r4, #44	; 0x2c
  408f9a:	4b05      	ldr	r3, [pc, #20]	; (408fb0 <vTCPWindowFree+0x34>)
  408f9c:	4798      	blx	r3
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  408f9e:	4805      	ldr	r0, [pc, #20]	; (408fb4 <vTCPWindowFree+0x38>)
  408fa0:	f100 0208 	add.w	r2, r0, #8
  408fa4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
  408fa8:	4b03      	ldr	r3, [pc, #12]	; (408fb8 <vTCPWindowFree+0x3c>)
  408faa:	4798      	blx	r3
  408fac:	bd10      	pop	{r4, pc}
  408fae:	bf00      	nop
  408fb0:	00409cc5 	.word	0x00409cc5
  408fb4:	20006d6c 	.word	0x20006d6c
  408fb8:	00408f65 	.word	0x00408f65

00408fbc <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
  408fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408fc0:	b089      	sub	sp, #36	; 0x24
	uint32_t ulBytesConfirmed = 0u;
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
  408fc2:	f100 0798 	add.w	r7, r0, #152	; 0x98

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  408fc6:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
		for(
  408fca:	42a7      	cmp	r7, r4
  408fcc:	d053      	beq.n	409076 <prvTCPWindowTxCheckAck+0xba>
  408fce:	f102 38ff 	add.w	r8, r2, #4294967295
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
  408fd2:	eba8 0301 	sub.w	r3, r8, r1
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
  408fd6:	2b00      	cmp	r3, #0
  408fd8:	db50      	blt.n	40907c <prvTCPWindowTxCheckAck+0xc0>
  408fda:	4693      	mov	fp, r2
  408fdc:	9107      	str	r1, [sp, #28]
  408fde:	4682      	mov	sl, r0
  408fe0:	460e      	mov	r6, r1
  408fe2:	2300      	movs	r3, #0
  408fe4:	9306      	str	r3, [sp, #24]
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
				{
					FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
  408fe6:	9705      	str	r7, [sp, #20]
  408fe8:	e05e      	b.n	4090a8 <prvTCPWindowTxCheckAck+0xec>
						uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
  408fea:	f8da 301c 	ldr.w	r3, [sl, #28]
  408fee:	1af6      	subs	r6, r6, r3
						FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
  408ff0:	f8ba 20b8 	ldrh.w	r2, [sl, #184]	; 0xb8
  408ff4:	f8ba 10ba 	ldrh.w	r1, [sl, #186]	; 0xba
  408ff8:	eb09 0006 	add.w	r0, r9, r6
  408ffc:	9002      	str	r0, [sp, #8]
  408ffe:	9601      	str	r6, [sp, #4]
  409000:	ebab 0003 	sub.w	r0, fp, r3
  409004:	9000      	str	r0, [sp, #0]
  409006:	1af3      	subs	r3, r6, r3
  409008:	4841      	ldr	r0, [pc, #260]	; (409110 <prvTCPWindowTxCheckAck+0x154>)
  40900a:	4c42      	ldr	r4, [pc, #264]	; (409114 <prvTCPWindowTxCheckAck+0x158>)
  40900c:	47a0      	blx	r4

			ulSequenceNumber += ulDataLength;
		}

		return ulBytesConfirmed;
	}
  40900e:	9806      	ldr	r0, [sp, #24]
  409010:	b009      	add	sp, #36	; 0x24
  409012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
  409016:	4593      	cmp	fp, r2
  409018:	d161      	bne.n	4090de <prvTCPWindowTxCheckAck+0x122>
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
  40901a:	4b3f      	ldr	r3, [pc, #252]	; (409118 <prvTCPWindowTxCheckAck+0x15c>)
  40901c:	4798      	blx	r3
  40901e:	692b      	ldr	r3, [r5, #16]
  409020:	1ac0      	subs	r0, r0, r3
					if( pxWindow->lSRTT >= mS )
  409022:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
  409026:	4298      	cmp	r0, r3
  409028:	dc0f      	bgt.n	40904a <prvTCPWindowTxCheckAck+0x8e>
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
  40902a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40902e:	181b      	adds	r3, r3, r0
  409030:	bf48      	it	mi
  409032:	3307      	addmi	r3, #7
  409034:	10db      	asrs	r3, r3, #3
  409036:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
  40903a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
  40903e:	2b31      	cmp	r3, #49	; 0x31
  409040:	dc4d      	bgt.n	4090de <prvTCPWindowTxCheckAck+0x122>
						pxWindow->lSRTT = winSRTT_CAP_mS;
  409042:	2332      	movs	r3, #50	; 0x32
  409044:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  409048:	e049      	b.n	4090de <prvTCPWindowTxCheckAck+0x122>
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
  40904a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40904e:	4403      	add	r3, r0
  409050:	005b      	lsls	r3, r3, #1
  409052:	bf48      	it	mi
  409054:	3307      	addmi	r3, #7
  409056:	10db      	asrs	r3, r3, #3
  409058:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40905c:	e7ed      	b.n	40903a <prvTCPWindowTxCheckAck+0x7e>
					FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
  40905e:	f8da 101c 	ldr.w	r1, [sl, #28]
  409062:	682b      	ldr	r3, [r5, #0]
  409064:	1a5b      	subs	r3, r3, r1
  409066:	ebab 0201 	sub.w	r2, fp, r1
  40906a:	9807      	ldr	r0, [sp, #28]
  40906c:	1a41      	subs	r1, r0, r1
  40906e:	482b      	ldr	r0, [pc, #172]	; (40911c <prvTCPWindowTxCheckAck+0x160>)
  409070:	4f28      	ldr	r7, [pc, #160]	; (409114 <prvTCPWindowTxCheckAck+0x158>)
  409072:	47b8      	blx	r7
  409074:	e03f      	b.n	4090f6 <prvTCPWindowTxCheckAck+0x13a>
	uint32_t ulBytesConfirmed = 0u;
  409076:	2300      	movs	r3, #0
  409078:	9306      	str	r3, [sp, #24]
  40907a:	e7c8      	b.n	40900e <prvTCPWindowTxCheckAck+0x52>
  40907c:	2300      	movs	r3, #0
  40907e:	9306      	str	r3, [sp, #24]
		return ulBytesConfirmed;
  409080:	e7c5      	b.n	40900e <prvTCPWindowTxCheckAck+0x52>
			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
  409082:	6aab      	ldr	r3, [r5, #40]	; 0x28
  409084:	b143      	cbz	r3, 409098 <prvTCPWindowTxCheckAck+0xdc>
				uxListRemove( &pxSegment->xQueueItem );
  409086:	f105 0018 	add.w	r0, r5, #24
  40908a:	4b25      	ldr	r3, [pc, #148]	; (409120 <prvTCPWindowTxCheckAck+0x164>)
  40908c:	4798      	blx	r3
  40908e:	e003      	b.n	409098 <prvTCPWindowTxCheckAck+0xdc>
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
  409090:	f8da 3020 	ldr.w	r3, [sl, #32]
  409094:	429e      	cmp	r6, r3
  409096:	d026      	beq.n	4090e6 <prvTCPWindowTxCheckAck+0x12a>
			ulSequenceNumber += ulDataLength;
  409098:	444e      	add	r6, r9
		for(
  40909a:	9b05      	ldr	r3, [sp, #20]
  40909c:	42a3      	cmp	r3, r4
  40909e:	d0b6      	beq.n	40900e <prvTCPWindowTxCheckAck+0x52>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
  4090a0:	eba8 0306 	sub.w	r3, r8, r6
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
  4090a4:	2b00      	cmp	r3, #0
  4090a6:	dbb2      	blt.n	40900e <prvTCPWindowTxCheckAck+0x52>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4090a8:	68e5      	ldr	r5, [r4, #12]
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
  4090aa:	6864      	ldr	r4, [r4, #4]
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
  4090ac:	682b      	ldr	r3, [r5, #0]
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
  4090ae:	43da      	mvns	r2, r3
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
  4090b0:	42f2      	cmn	r2, r6
  4090b2:	d5f2      	bpl.n	40909a <prvTCPWindowTxCheckAck+0xde>
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
  4090b4:	42b3      	cmp	r3, r6
  4090b6:	d1aa      	bne.n	40900e <prvTCPWindowTxCheckAck+0x52>
			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
  4090b8:	f8d5 9008 	ldr.w	r9, [r5, #8]
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
  4090bc:	7dab      	ldrb	r3, [r5, #22]
  4090be:	f013 0f02 	tst.w	r3, #2
  4090c2:	d1e5      	bne.n	409090 <prvTCPWindowTxCheckAck+0xd4>
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
  4090c4:	eb09 0206 	add.w	r2, r9, r6
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
  4090c8:	ea6f 030b 	mvn.w	r3, fp
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
  4090cc:	42d3      	cmn	r3, r2
  4090ce:	d58c      	bpl.n	408fea <prvTCPWindowTxCheckAck+0x2e>
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
  4090d0:	7dab      	ldrb	r3, [r5, #22]
  4090d2:	f043 0302 	orr.w	r3, r3, #2
  4090d6:	75ab      	strb	r3, [r5, #22]
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
  4090d8:	7d2b      	ldrb	r3, [r5, #20]
  4090da:	2b01      	cmp	r3, #1
  4090dc:	d09b      	beq.n	409016 <prvTCPWindowTxCheckAck+0x5a>
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
  4090de:	f8da 3020 	ldr.w	r3, [sl, #32]
  4090e2:	429e      	cmp	r6, r3
  4090e4:	d1cd      	bne.n	409082 <prvTCPWindowTxCheckAck+0xc6>
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
  4090e6:	4b0f      	ldr	r3, [pc, #60]	; (409124 <prvTCPWindowTxCheckAck+0x168>)
  4090e8:	681b      	ldr	r3, [r3, #0]
  4090ea:	2b01      	cmp	r3, #1
  4090ec:	dd03      	ble.n	4090f6 <prvTCPWindowTxCheckAck+0x13a>
  4090ee:	f8ba 30b8 	ldrh.w	r3, [sl, #184]	; 0xb8
  4090f2:	2b17      	cmp	r3, #23
  4090f4:	d1b3      	bne.n	40905e <prvTCPWindowTxCheckAck+0xa2>
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
  4090f6:	f8da 3020 	ldr.w	r3, [sl, #32]
  4090fa:	444b      	add	r3, r9
  4090fc:	f8ca 3020 	str.w	r3, [sl, #32]
				ulBytesConfirmed += ulDataLength;
  409100:	9b06      	ldr	r3, [sp, #24]
  409102:	444b      	add	r3, r9
  409104:	9306      	str	r3, [sp, #24]
				vTCPWindowFree( pxSegment );
  409106:	4628      	mov	r0, r5
  409108:	4b07      	ldr	r3, [pc, #28]	; (409128 <prvTCPWindowTxCheckAck+0x16c>)
  40910a:	4798      	blx	r3
  40910c:	e7c4      	b.n	409098 <prvTCPWindowTxCheckAck+0xdc>
  40910e:	bf00      	nop
  409110:	00413ce8 	.word	0x00413ce8
  409114:	0040c351 	.word	0x0040c351
  409118:	0040b649 	.word	0x0040b649
  40911c:	00413d34 	.word	0x00413d34
  409120:	00409cc5 	.word	0x00409cc5
  409124:	20006d84 	.word	0x20006d84
  409128:	00408f7d 	.word	0x00408f7d

0040912c <xTCPWindowNew>:
	{
  40912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409130:	461d      	mov	r5, r3
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
  409132:	4b1f      	ldr	r3, [pc, #124]	; (4091b0 <xTCPWindowNew+0x84>)
  409134:	681b      	ldr	r3, [r3, #0]
  409136:	2b00      	cmp	r3, #0
  409138:	d02d      	beq.n	409196 <xTCPWindowNew+0x6a>
  40913a:	4606      	mov	r6, r0
  40913c:	4689      	mov	r9, r1
  40913e:	4690      	mov	r8, r2
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
  409140:	4b1b      	ldr	r3, [pc, #108]	; (4091b0 <xTCPWindowNew+0x84>)
  409142:	68df      	ldr	r7, [r3, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
  409144:	68fc      	ldr	r4, [r7, #12]
			uxListRemove( pxItem );
  409146:	4638      	mov	r0, r7
  409148:	4b1a      	ldr	r3, [pc, #104]	; (4091b4 <xTCPWindowNew+0x88>)
  40914a:	4798      	blx	r3
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
  40914c:	2d00      	cmp	r5, #0
  40914e:	d02b      	beq.n	4091a8 <xTCPWindowNew+0x7c>
  409150:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  409154:	f100 0208 	add.w	r2, r0, #8
  409158:	4639      	mov	r1, r7
  40915a:	4b17      	ldr	r3, [pc, #92]	; (4091b8 <xTCPWindowNew+0x8c>)
  40915c:	4798      	blx	r3
	pxTimer->ulBorn = xTaskGetTickCount ( );
  40915e:	4b17      	ldr	r3, [pc, #92]	; (4091bc <xTCPWindowNew+0x90>)
  409160:	4798      	blx	r3
  409162:	6120      	str	r0, [r4, #16]
			pxSegment->u.ulFlags = 0;
  409164:	2300      	movs	r3, #0
  409166:	6163      	str	r3, [r4, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
  409168:	1aed      	subs	r5, r5, r3
  40916a:	bf18      	it	ne
  40916c:	2501      	movne	r5, #1
  40916e:	f365 0382 	bfi	r3, r5, #2, #1
  409172:	75a3      	strb	r3, [r4, #22]
			pxSegment->lMaxLength = lCount;
  409174:	f8c4 8004 	str.w	r8, [r4, #4]
			pxSegment->lDataLength = lCount;
  409178:	f8c4 8008 	str.w	r8, [r4, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
  40917c:	f8c4 9000 	str.w	r9, [r4]
			UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
  409180:	4b0b      	ldr	r3, [pc, #44]	; (4091b0 <xTCPWindowNew+0x84>)
  409182:	681b      	ldr	r3, [r3, #0]
				if( xLowestLength > xLength )
  409184:	4a0e      	ldr	r2, [pc, #56]	; (4091c0 <xTCPWindowNew+0x94>)
  409186:	6812      	ldr	r2, [r2, #0]
  409188:	4293      	cmp	r3, r2
					xLowestLength = xLength;
  40918a:	bf3c      	itt	cc
  40918c:	4a0c      	ldrcc	r2, [pc, #48]	; (4091c0 <xTCPWindowNew+0x94>)
  40918e:	6013      	strcc	r3, [r2, #0]
	}
  409190:	4620      	mov	r0, r4
  409192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
  409196:	2d00      	cmp	r5, #0
  409198:	bf14      	ite	ne
  40919a:	2152      	movne	r1, #82	; 0x52
  40919c:	2154      	moveq	r1, #84	; 0x54
  40919e:	4809      	ldr	r0, [pc, #36]	; (4091c4 <xTCPWindowNew+0x98>)
  4091a0:	4b09      	ldr	r3, [pc, #36]	; (4091c8 <xTCPWindowNew+0x9c>)
  4091a2:	4798      	blx	r3
			pxSegment = NULL;
  4091a4:	2400      	movs	r4, #0
  4091a6:	e7f3      	b.n	409190 <xTCPWindowNew+0x64>
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
  4091a8:	f106 0090 	add.w	r0, r6, #144	; 0x90
  4091ac:	e7d2      	b.n	409154 <xTCPWindowNew+0x28>
  4091ae:	bf00      	nop
  4091b0:	20006d6c 	.word	0x20006d6c
  4091b4:	00409cc5 	.word	0x00409cc5
  4091b8:	00408f65 	.word	0x00408f65
  4091bc:	0040b649 	.word	0x0040b649
  4091c0:	200000d4 	.word	0x200000d4
  4091c4:	00413f68 	.word	0x00413f68
  4091c8:	0040c351 	.word	0x0040c351

004091cc <xTCPWindowRxEmpty>:
	{
  4091cc:	b508      	push	{r3, lr}
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
  4091ce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  4091d2:	b973      	cbnz	r3, 4091f2 <xTCPWindowRxEmpty+0x26>
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
  4091d4:	6903      	ldr	r3, [r0, #16]
  4091d6:	6982      	ldr	r2, [r0, #24]
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
  4091d8:	1a99      	subs	r1, r3, r2
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
  4091da:	2900      	cmp	r1, #0
  4091dc:	db01      	blt.n	4091e2 <xTCPWindowRxEmpty+0x16>
			xReturn = pdTRUE;
  4091de:	2001      	movs	r0, #1
	}
  4091e0:	bd08      	pop	{r3, pc}
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
  4091e2:	68c1      	ldr	r1, [r0, #12]
  4091e4:	1a52      	subs	r2, r2, r1
  4091e6:	1a59      	subs	r1, r3, r1
  4091e8:	4803      	ldr	r0, [pc, #12]	; (4091f8 <xTCPWindowRxEmpty+0x2c>)
  4091ea:	4b04      	ldr	r3, [pc, #16]	; (4091fc <xTCPWindowRxEmpty+0x30>)
  4091ec:	4798      	blx	r3
			xReturn = pdFALSE;
  4091ee:	2000      	movs	r0, #0
  4091f0:	bd08      	pop	{r3, pc}
			xReturn = pdFALSE;
  4091f2:	2000      	movs	r0, #0
  4091f4:	bd08      	pop	{r3, pc}
  4091f6:	bf00      	nop
  4091f8:	00413f98 	.word	0x00413f98
  4091fc:	0040c351 	.word	0x0040c351

00409200 <vTCPWindowDestroy>:
	{
  409200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409204:	4607      	mov	r7, r0
  409206:	2601      	movs	r6, #1
					vTCPWindowFree( pxSegment );
  409208:	4d11      	ldr	r5, [pc, #68]	; (409250 <vTCPWindowDestroy+0x50>)
				pxSegments = &( pxWindow->xTxSegments );
  40920a:	f100 0990 	add.w	r9, r0, #144	; 0x90
				pxSegments = &( pxWindow->xRxSegments );
  40920e:	f100 08a4 	add.w	r8, r0, #164	; 0xa4
  409212:	e009      	b.n	409228 <vTCPWindowDestroy+0x28>
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
  409214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  409218:	f1b3 3fff 	cmp.w	r3, #4294967295
  40921c:	d103      	bne.n	409226 <vTCPWindowDestroy+0x26>
				pxSegments = &( pxWindow->xTxSegments );
  40921e:	464c      	mov	r4, r9
  409220:	e00a      	b.n	409238 <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
  409222:	2e01      	cmp	r6, #1
  409224:	dc12      	bgt.n	40924c <vTCPWindowDestroy+0x4c>
  409226:	3601      	adds	r6, #1
			if( xRound != 0 )
  409228:	2e01      	cmp	r6, #1
  40922a:	d0f3      	beq.n	409214 <vTCPWindowDestroy+0x14>
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
  40922c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  409230:	f1b3 3fff 	cmp.w	r3, #4294967295
  409234:	d1f5      	bne.n	409222 <vTCPWindowDestroy+0x22>
				pxSegments = &( pxWindow->xRxSegments );
  409236:	4644      	mov	r4, r8
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
  409238:	6823      	ldr	r3, [r4, #0]
  40923a:	2b00      	cmp	r3, #0
  40923c:	d0f1      	beq.n	409222 <vTCPWindowDestroy+0x22>
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
  40923e:	68e3      	ldr	r3, [r4, #12]
					vTCPWindowFree( pxSegment );
  409240:	68d8      	ldr	r0, [r3, #12]
  409242:	47a8      	blx	r5
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
  409244:	6823      	ldr	r3, [r4, #0]
  409246:	2b00      	cmp	r3, #0
  409248:	d1f9      	bne.n	40923e <vTCPWindowDestroy+0x3e>
  40924a:	e7ea      	b.n	409222 <vTCPWindowDestroy+0x22>
	}
  40924c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409250:	00408f7d 	.word	0x00408f7d

00409254 <vTCPWindowInit>:
{
  409254:	b410      	push	{r4}
	pxWindow->u.ulFlags = 0ul;
  409256:	2400      	movs	r4, #0
  409258:	6004      	str	r4, [r0, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
  40925a:	2401      	movs	r4, #1
  40925c:	7004      	strb	r4, [r0, #0]
	if( ulMSS != 0ul )
  40925e:	b193      	cbz	r3, 409286 <vTCPWindowInit+0x32>
  409260:	461c      	mov	r4, r3
		if( pxWindow->usMSSInit != 0u )
  409262:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
  409266:	b10b      	cbz	r3, 40926c <vTCPWindowInit+0x18>
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
  409268:	f8a0 40be 	strh.w	r4, [r0, #190]	; 0xbe
		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
  40926c:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
  409270:	429c      	cmp	r4, r3
  409272:	d300      	bcc.n	409276 <vTCPWindowInit+0x22>
  409274:	b93b      	cbnz	r3, 409286 <vTCPWindowInit+0x32>
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
  409276:	6843      	ldr	r3, [r0, #4]
  409278:	fbb3 f3f4 	udiv	r3, r3, r4
  40927c:	fb04 f303 	mul.w	r3, r4, r3
  409280:	6043      	str	r3, [r0, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
  409282:	f8a0 40bc 	strh.w	r4, [r0, #188]	; 0xbc
	pxWindow->lSRTT = l500ms;
  409286:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40928a:	6383      	str	r3, [r0, #56]	; 0x38
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
  40928c:	60c1      	str	r1, [r0, #12]
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
  40928e:	6101      	str	r1, [r0, #16]
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
  409290:	6181      	str	r1, [r0, #24]
	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
  409292:	61c2      	str	r2, [r0, #28]
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
  409294:	6202      	str	r2, [r0, #32]
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
  409296:	6342      	str	r2, [r0, #52]	; 0x34
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
  409298:	6282      	str	r2, [r0, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
  40929a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
  40929c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4092a0:	4770      	bx	lr
	...

004092a4 <vTCPWindowCreate>:
{
  4092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4092a8:	b083      	sub	sp, #12
  4092aa:	4605      	mov	r5, r0
  4092ac:	468b      	mov	fp, r1
  4092ae:	4692      	mov	sl, r2
  4092b0:	9301      	str	r3, [sp, #4]
		if( xTCPSegments == NULL )
  4092b2:	4b29      	ldr	r3, [pc, #164]	; (409358 <vTCPWindowCreate+0xb4>)
  4092b4:	681b      	ldr	r3, [r3, #0]
  4092b6:	b303      	cbz	r3, 4092fa <vTCPWindowCreate+0x56>
		vListInitialise( &pxWindow->xTxSegments );
  4092b8:	f105 0090 	add.w	r0, r5, #144	; 0x90
  4092bc:	4c27      	ldr	r4, [pc, #156]	; (40935c <vTCPWindowCreate+0xb8>)
  4092be:	47a0      	blx	r4
		vListInitialise( &pxWindow->xRxSegments );
  4092c0:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
  4092c4:	47a0      	blx	r4
		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
  4092c6:	f105 0040 	add.w	r0, r5, #64	; 0x40
  4092ca:	47a0      	blx	r4
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
  4092cc:	f105 0054 	add.w	r0, r5, #84	; 0x54
  4092d0:	47a0      	blx	r4
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
  4092d2:	f105 0068 	add.w	r0, r5, #104	; 0x68
  4092d6:	47a0      	blx	r4
	if( xTCPWindowLoggingLevel != 0 )
  4092d8:	4b21      	ldr	r3, [pc, #132]	; (409360 <vTCPWindowCreate+0xbc>)
  4092da:	681b      	ldr	r3, [r3, #0]
  4092dc:	2b00      	cmp	r3, #0
  4092de:	d135      	bne.n	40934c <vTCPWindowCreate+0xa8>
	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
  4092e0:	f8c5 b004 	str.w	fp, [r5, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
  4092e4:	f8c5 a008 	str.w	sl, [r5, #8]
	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
  4092e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4092ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4092ec:	9901      	ldr	r1, [sp, #4]
  4092ee:	4628      	mov	r0, r5
  4092f0:	4c1c      	ldr	r4, [pc, #112]	; (409364 <vTCPWindowCreate+0xc0>)
  4092f2:	47a0      	blx	r4
}
  4092f4:	b003      	add	sp, #12
  4092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &xSegmentList );
  4092fa:	481b      	ldr	r0, [pc, #108]	; (409368 <vTCPWindowCreate+0xc4>)
  4092fc:	4b17      	ldr	r3, [pc, #92]	; (40935c <vTCPWindowCreate+0xb8>)
  4092fe:	4798      	blx	r3
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
  409300:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
  409304:	4b19      	ldr	r3, [pc, #100]	; (40936c <vTCPWindowCreate+0xc8>)
  409306:	4798      	blx	r3
  409308:	4606      	mov	r6, r0
  40930a:	4b13      	ldr	r3, [pc, #76]	; (409358 <vTCPWindowCreate+0xb4>)
  40930c:	6018      	str	r0, [r3, #0]
		if( xTCPSegments == NULL )
  40930e:	b1b8      	cbz	r0, 409340 <vTCPWindowCreate+0x9c>
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
  409310:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
  409314:	2100      	movs	r1, #0
  409316:	4b16      	ldr	r3, [pc, #88]	; (409370 <vTCPWindowCreate+0xcc>)
  409318:	4798      	blx	r3
  40931a:	4634      	mov	r4, r6
  40931c:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  409320:	4f11      	ldr	r7, [pc, #68]	; (409368 <vTCPWindowCreate+0xc4>)
  409322:	f107 0908 	add.w	r9, r7, #8
  409326:	f8df 8058 	ldr.w	r8, [pc, #88]	; 409380 <vTCPWindowCreate+0xdc>
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
  40932a:	63a4      	str	r4, [r4, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
  40932c:	6264      	str	r4, [r4, #36]	; 0x24
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  40932e:	464a      	mov	r2, r9
  409330:	f104 012c 	add.w	r1, r4, #44	; 0x2c
  409334:	4638      	mov	r0, r7
  409336:	47c0      	blx	r8
  409338:	3440      	adds	r4, #64	; 0x40
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
  40933a:	42b4      	cmp	r4, r6
  40933c:	d1f5      	bne.n	40932a <vTCPWindowCreate+0x86>
  40933e:	e7bb      	b.n	4092b8 <vTCPWindowCreate+0x14>
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
  409340:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
  409344:	480b      	ldr	r0, [pc, #44]	; (409374 <vTCPWindowCreate+0xd0>)
  409346:	4b0c      	ldr	r3, [pc, #48]	; (409378 <vTCPWindowCreate+0xd4>)
  409348:	4798      	blx	r3
  40934a:	e7b5      	b.n	4092b8 <vTCPWindowCreate+0x14>
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
  40934c:	4652      	mov	r2, sl
  40934e:	4659      	mov	r1, fp
  409350:	480a      	ldr	r0, [pc, #40]	; (40937c <vTCPWindowCreate+0xd8>)
  409352:	4b09      	ldr	r3, [pc, #36]	; (409378 <vTCPWindowCreate+0xd4>)
  409354:	4798      	blx	r3
  409356:	e7c3      	b.n	4092e0 <vTCPWindowCreate+0x3c>
  409358:	20006d80 	.word	0x20006d80
  40935c:	00409c5d 	.word	0x00409c5d
  409360:	20006d84 	.word	0x20006d84
  409364:	00409255 	.word	0x00409255
  409368:	20006d6c 	.word	0x20006d6c
  40936c:	0040a0a1 	.word	0x0040a0a1
  409370:	0040c5d5 	.word	0x0040c5d5
  409374:	00413f10 	.word	0x00413f10
  409378:	0040c351 	.word	0x0040c351
  40937c:	00413f38 	.word	0x00413f38
  409380:	00408f65 	.word	0x00408f65

00409384 <lTCPWindowRxCheck>:
	{
  409384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409388:	b085      	sub	sp, #20
  40938a:	4606      	mov	r6, r0
  40938c:	460d      	mov	r5, r1
  40938e:	4691      	mov	r9, r2
		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
  409390:	6907      	ldr	r7, [r0, #16]
		pxWindow->ucOptionLength = 0u;
  409392:	2100      	movs	r1, #0
  409394:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
		pxWindow->ulUserDataLength = 0ul;
  409398:	6301      	str	r1, [r0, #48]	; 0x30
		if( ulCurrentSequenceNumber == ulSequenceNumber )
  40939a:	42af      	cmp	r7, r5
  40939c:	d00f      	beq.n	4093be <lTCPWindowRxCheck+0x3a>
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
  40939e:	1c6a      	adds	r2, r5, #1
  4093a0:	4297      	cmp	r7, r2
  4093a2:	f000 80f9 	beq.w	409598 <lTCPWindowRxCheck+0x214>
			ulLast = ulSequenceNumber + ulLength;
  4093a6:	eb05 0409 	add.w	r4, r5, r9
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
  4093aa:	1be1      	subs	r1, r4, r7
			if( lDistance <= 0 )
  4093ac:	2900      	cmp	r1, #0
  4093ae:	f340 80f6 	ble.w	40959e <lTCPWindowRxCheck+0x21a>
			else if( lDistance > ( int32_t ) ulSpace )
  4093b2:	4299      	cmp	r1, r3
  4093b4:	f300 8087 	bgt.w	4094c6 <lTCPWindowRxCheck+0x142>
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
  4093b8:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4095c4 <lTCPWindowRxCheck+0x240>
  4093bc:	e08c      	b.n	4094d8 <lTCPWindowRxCheck+0x154>
			if( ulLength > ulSpace )
  4093be:	429a      	cmp	r2, r3
  4093c0:	d80a      	bhi.n	4093d8 <lTCPWindowRxCheck+0x54>
				ulCurrentSequenceNumber += ulLength;
  4093c2:	eb07 0802 	add.w	r8, r7, r2
				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
  4093c6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  4093ca:	2b00      	cmp	r3, #0
  4093cc:	d06e      	beq.n	4094ac <lTCPWindowRxCheck+0x128>
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
  4093ce:	eb05 0a02 	add.w	sl, r5, r2
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
  4093d2:	f10a 37ff 	add.w	r7, sl, #4294967295
  4093d6:	e039      	b.n	40944c <lTCPWindowRxCheck+0xc8>
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
  4093d8:	461a      	mov	r2, r3
  4093da:	4649      	mov	r1, r9
  4093dc:	4873      	ldr	r0, [pc, #460]	; (4095ac <lTCPWindowRxCheck+0x228>)
  4093de:	4b74      	ldr	r3, [pc, #464]	; (4095b0 <lTCPWindowRxCheck+0x22c>)
  4093e0:	4798      	blx	r3
				lReturn = -1;
  4093e2:	f04f 30ff 	mov.w	r0, #4294967295
  4093e6:	e0c1      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
					pxBest = pxSegment;
  4093e8:	4604      	mov	r4, r0
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
  4093ea:	685b      	ldr	r3, [r3, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  4093ec:	459e      	cmp	lr, r3
  4093ee:	d011      	beq.n	409414 <lTCPWindowRxCheck+0x90>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4093f0:	68d8      	ldr	r0, [r3, #12]
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
  4093f2:	6802      	ldr	r2, [r0, #0]
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
  4093f4:	1b51      	subs	r1, r2, r5
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
  4093f6:	2900      	cmp	r1, #0
  4093f8:	dbf7      	blt.n	4093ea <lTCPWindowRxCheck+0x66>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
  4093fa:	1ab9      	subs	r1, r7, r2
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
  4093fc:	2900      	cmp	r1, #0
  4093fe:	dbf4      	blt.n	4093ea <lTCPWindowRxCheck+0x66>
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
  409400:	2c00      	cmp	r4, #0
  409402:	d0f1      	beq.n	4093e8 <lTCPWindowRxCheck+0x64>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
  409404:	6821      	ldr	r1, [r4, #0]
  409406:	3901      	subs	r1, #1
  409408:	1a8a      	subs	r2, r1, r2
					pxBest = pxSegment;
  40940a:	ea14 0422 	ands.w	r4, r4, r2, asr #32
  40940e:	bf38      	it	cc
  409410:	4604      	movcc	r4, r0
  409412:	e7ea      	b.n	4093ea <lTCPWindowRxCheck+0x66>
		if( ( pxBest != NULL ) &&
  409414:	2c00      	cmp	r4, #0
  409416:	d052      	beq.n	4094be <lTCPWindowRxCheck+0x13a>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
  409418:	6823      	ldr	r3, [r4, #0]
		if( ( pxBest != NULL ) &&
  40941a:	429d      	cmp	r5, r3
  40941c:	d01e      	beq.n	40945c <lTCPWindowRxCheck+0xd8>
			FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
  40941e:	68f2      	ldr	r2, [r6, #12]
  409420:	1a9b      	subs	r3, r3, r2
  409422:	68a0      	ldr	r0, [r4, #8]
  409424:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	; 0xba
  409428:	eb00 0e03 	add.w	lr, r0, r3
  40942c:	f8cd e00c 	str.w	lr, [sp, #12]
  409430:	9002      	str	r0, [sp, #8]
  409432:	9301      	str	r3, [sp, #4]
  409434:	ebaa 0302 	sub.w	r3, sl, r2
  409438:	9300      	str	r3, [sp, #0]
  40943a:	464b      	mov	r3, r9
  40943c:	1aaa      	subs	r2, r5, r2
  40943e:	485d      	ldr	r0, [pc, #372]	; (4095b4 <lTCPWindowRxCheck+0x230>)
  409440:	f8df b16c 	ldr.w	fp, [pc, #364]	; 4095b0 <lTCPWindowRxCheck+0x22c>
  409444:	47d8      	blx	fp
                            vTCPWindowFree( pxFound );
  409446:	4620      	mov	r0, r4
  409448:	4b5b      	ldr	r3, [pc, #364]	; (4095b8 <lTCPWindowRxCheck+0x234>)
  40944a:	4798      	blx	r3
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
  40944c:	f106 0eac 	add.w	lr, r6, #172	; 0xac
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  409450:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
  409454:	459e      	cmp	lr, r3
  409456:	d02d      	beq.n	4094b4 <lTCPWindowRxCheck+0x130>
  409458:	2400      	movs	r4, #0
  40945a:	e7c9      	b.n	4093f0 <lTCPWindowRxCheck+0x6c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
  40945c:	68a2      	ldr	r2, [r4, #8]
  40945e:	454a      	cmp	r2, r9
  409460:	d1dd      	bne.n	40941e <lTCPWindowRxCheck+0x9a>
  409462:	e7f0      	b.n	409446 <lTCPWindowRxCheck+0xc2>
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
  409464:	689a      	ldr	r2, [r3, #8]
  409466:	4414      	add	r4, r2
						vTCPWindowFree( pxFound );
  409468:	4618      	mov	r0, r3
  40946a:	47c8      	blx	r9
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
  40946c:	4621      	mov	r1, r4
  40946e:	4630      	mov	r0, r6
  409470:	47b8      	blx	r7
  409472:	4603      	mov	r3, r0
  409474:	2800      	cmp	r0, #0
  409476:	d1f5      	bne.n	409464 <lTCPWindowRxCheck+0xe0>
					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
  409478:	4544      	cmp	r4, r8
  40947a:	d017      	beq.n	4094ac <lTCPWindowRxCheck+0x128>
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
  40947c:	eba4 0008 	sub.w	r0, r4, r8
  409480:	6330      	str	r0, [r6, #48]	; 0x30
						if( xTCPWindowLoggingLevel >= 1 )
  409482:	4b4e      	ldr	r3, [pc, #312]	; (4095bc <lTCPWindowRxCheck+0x238>)
  409484:	681b      	ldr	r3, [r3, #0]
  409486:	2b00      	cmp	r3, #0
  409488:	dd1b      	ble.n	4094c2 <lTCPWindowRxCheck+0x13e>
							FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
  40948a:	68f3      	ldr	r3, [r6, #12]
  40948c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
  409490:	f8b6 20b8 	ldrh.w	r2, [r6, #184]	; 0xb8
  409494:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	; 0xba
  409498:	9702      	str	r7, [sp, #8]
  40949a:	eba8 0703 	sub.w	r7, r8, r3
  40949e:	9701      	str	r7, [sp, #4]
  4094a0:	9000      	str	r0, [sp, #0]
  4094a2:	1aeb      	subs	r3, r5, r3
  4094a4:	4846      	ldr	r0, [pc, #280]	; (4095c0 <lTCPWindowRxCheck+0x23c>)
  4094a6:	4d42      	ldr	r5, [pc, #264]	; (4095b0 <lTCPWindowRxCheck+0x22c>)
  4094a8:	47a8      	blx	r5
  4094aa:	46a0      	mov	r8, r4
				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
  4094ac:	f8c6 8010 	str.w	r8, [r6, #16]
				lReturn = 0;
  4094b0:	2000      	movs	r0, #0
  4094b2:	e05b      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  4094b4:	4644      	mov	r4, r8
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
  4094b6:	4f43      	ldr	r7, [pc, #268]	; (4095c4 <lTCPWindowRxCheck+0x240>)
						vTCPWindowFree( pxFound );
  4094b8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4095b8 <lTCPWindowRxCheck+0x234>
  4094bc:	e7d6      	b.n	40946c <lTCPWindowRxCheck+0xe8>
		if( ( pxBest != NULL ) &&
  4094be:	4644      	mov	r4, r8
  4094c0:	e7f9      	b.n	4094b6 <lTCPWindowRxCheck+0x132>
  4094c2:	46a0      	mov	r8, r4
  4094c4:	e7f2      	b.n	4094ac <lTCPWindowRxCheck+0x128>
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
  4094c6:	464a      	mov	r2, r9
  4094c8:	483f      	ldr	r0, [pc, #252]	; (4095c8 <lTCPWindowRxCheck+0x244>)
  4094ca:	4c39      	ldr	r4, [pc, #228]	; (4095b0 <lTCPWindowRxCheck+0x22c>)
  4094cc:	47a0      	blx	r4
				lReturn = -1;
  4094ce:	f04f 30ff 	mov.w	r0, #4294967295
  4094d2:	e04b      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
					ulLast += ( uint32_t ) pxFound->lDataLength;
  4094d4:	689b      	ldr	r3, [r3, #8]
  4094d6:	441c      	add	r4, r3
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
  4094d8:	4621      	mov	r1, r4
  4094da:	4630      	mov	r0, r6
  4094dc:	47c0      	blx	r8
  4094de:	4603      	mov	r3, r0
  4094e0:	2800      	cmp	r0, #0
  4094e2:	d1f7      	bne.n	4094d4 <lTCPWindowRxCheck+0x150>
				if( xTCPWindowLoggingLevel >= 1 )
  4094e4:	4b35      	ldr	r3, [pc, #212]	; (4095bc <lTCPWindowRxCheck+0x238>)
  4094e6:	681b      	ldr	r3, [r3, #0]
  4094e8:	2b00      	cmp	r3, #0
  4094ea:	dd0f      	ble.n	40950c <lTCPWindowRxCheck+0x188>
					FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %lu exp %lu (dist %ld) SACK to %lu\n",
  4094ec:	68f3      	ldr	r3, [r6, #12]
  4094ee:	f8b6 20b8 	ldrh.w	r2, [r6, #184]	; 0xb8
  4094f2:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	; 0xba
  4094f6:	1ae0      	subs	r0, r4, r3
  4094f8:	9002      	str	r0, [sp, #8]
  4094fa:	1be8      	subs	r0, r5, r7
  4094fc:	9001      	str	r0, [sp, #4]
  4094fe:	1af8      	subs	r0, r7, r3
  409500:	9000      	str	r0, [sp, #0]
  409502:	1aeb      	subs	r3, r5, r3
  409504:	4831      	ldr	r0, [pc, #196]	; (4095cc <lTCPWindowRxCheck+0x248>)
  409506:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4095b0 <lTCPWindowRxCheck+0x22c>
  40950a:	47c0      	blx	r8
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
  40950c:	4b30      	ldr	r3, [pc, #192]	; (4095d0 <lTCPWindowRxCheck+0x24c>)
  40950e:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
  409512:	0e2b      	lsrs	r3, r5, #24
  409514:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  409518:	022a      	lsls	r2, r5, #8
  40951a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  40951e:	4313      	orrs	r3, r2
  409520:	0a2a      	lsrs	r2, r5, #8
  409522:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  409526:	4313      	orrs	r3, r2
  409528:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
  40952c:	0e23      	lsrs	r3, r4, #24
  40952e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  409532:	0222      	lsls	r2, r4, #8
  409534:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  409538:	4313      	orrs	r3, r2
  40953a:	0a24      	lsrs	r4, r4, #8
  40953c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
  409540:	431c      	orrs	r4, r3
  409542:	f8c6 4088 	str.w	r4, [r6, #136]	; 0x88
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
  409546:	230c      	movs	r3, #12
  409548:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
  40954c:	4629      	mov	r1, r5
  40954e:	4630      	mov	r0, r6
  409550:	4b1c      	ldr	r3, [pc, #112]	; (4095c4 <lTCPWindowRxCheck+0x240>)
  409552:	4798      	blx	r3
				if( pxFound != NULL )
  409554:	bb30      	cbnz	r0, 4095a4 <lTCPWindowRxCheck+0x220>
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
  409556:	2301      	movs	r3, #1
  409558:	464a      	mov	r2, r9
  40955a:	4629      	mov	r1, r5
  40955c:	4630      	mov	r0, r6
  40955e:	4c1d      	ldr	r4, [pc, #116]	; (4095d4 <lTCPWindowRxCheck+0x250>)
  409560:	47a0      	blx	r4
					if( pxFound == NULL )
  409562:	b130      	cbz	r0, 409572 <lTCPWindowRxCheck+0x1ee>
						if( xTCPWindowLoggingLevel != 0 )
  409564:	4b15      	ldr	r3, [pc, #84]	; (4095bc <lTCPWindowRxCheck+0x238>)
  409566:	681b      	ldr	r3, [r3, #0]
  409568:	b94b      	cbnz	r3, 40957e <lTCPWindowRxCheck+0x1fa>
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
  40956a:	1be8      	subs	r0, r5, r7
	}
  40956c:	b005      	add	sp, #20
  40956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						pxWindow->ucOptionLength = 0u;
  409572:	2300      	movs	r3, #0
  409574:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
						lReturn = -1;
  409578:	f04f 30ff 	mov.w	r0, #4294967295
  40957c:	e7f6      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
							FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
  40957e:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
  409582:	68f3      	ldr	r3, [r6, #12]
  409584:	f8b6 20b8 	ldrh.w	r2, [r6, #184]	; 0xb8
  409588:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	; 0xba
  40958c:	9000      	str	r0, [sp, #0]
  40958e:	1aeb      	subs	r3, r5, r3
  409590:	4811      	ldr	r0, [pc, #68]	; (4095d8 <lTCPWindowRxCheck+0x254>)
  409592:	4c07      	ldr	r4, [pc, #28]	; (4095b0 <lTCPWindowRxCheck+0x22c>)
  409594:	47a0      	blx	r4
  409596:	e7e8      	b.n	40956a <lTCPWindowRxCheck+0x1e6>
			lReturn = -1;
  409598:	f04f 30ff 	mov.w	r0, #4294967295
  40959c:	e7e6      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
				lReturn = -1;
  40959e:	f04f 30ff 	mov.w	r0, #4294967295
  4095a2:	e7e3      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
					lReturn = -1;
  4095a4:	f04f 30ff 	mov.w	r0, #4294967295
		return lReturn;
  4095a8:	e7e0      	b.n	40956c <lTCPWindowRxCheck+0x1e8>
  4095aa:	bf00      	nop
  4095ac:	00413a84 	.word	0x00413a84
  4095b0:	0040c351 	.word	0x0040c351
  4095b4:	00413ac8 	.word	0x00413ac8
  4095b8:	00408f7d 	.word	0x00408f7d
  4095bc:	20006d84 	.word	0x20006d84
  4095c0:	00413b10 	.word	0x00413b10
  4095c4:	00408ebd 	.word	0x00408ebd
  4095c8:	00413b58 	.word	0x00413b58
  4095cc:	00413ba0 	.word	0x00413ba0
  4095d0:	0a050101 	.word	0x0a050101
  4095d4:	0040912d 	.word	0x0040912d
  4095d8:	00413be4 	.word	0x00413be4

004095dc <lTCPWindowTxAdd>:
	{
  4095dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095e0:	b085      	sub	sp, #20
  4095e2:	4604      	mov	r4, r0
  4095e4:	4608      	mov	r0, r1
  4095e6:	9103      	str	r1, [sp, #12]
  4095e8:	4616      	mov	r6, r2
  4095ea:	4699      	mov	r9, r3
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
  4095ec:	460f      	mov	r7, r1
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
  4095ee:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
		if( pxSegment != NULL )
  4095f0:	2900      	cmp	r1, #0
  4095f2:	d03a      	beq.n	40966a <lTCPWindowTxAdd+0x8e>
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
  4095f4:	f8d1 8008 	ldr.w	r8, [r1, #8]
  4095f8:	684b      	ldr	r3, [r1, #4]
  4095fa:	4598      	cmp	r8, r3
  4095fc:	da38      	bge.n	409670 <lTCPWindowTxAdd+0x94>
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
  4095fe:	7d8a      	ldrb	r2, [r1, #22]
  409600:	f012 0f01 	tst.w	r2, #1
  409604:	d13d      	bne.n	409682 <lTCPWindowTxAdd+0xa6>
  409606:	f1b8 0f00 	cmp.w	r8, #0
  40960a:	d033      	beq.n	409674 <lTCPWindowTxAdd+0x98>
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
  40960c:	eba3 0508 	sub.w	r5, r3, r8
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
  409610:	4285      	cmp	r5, r0
  409612:	bfa8      	it	ge
  409614:	4605      	movge	r5, r0
					pxSegment->lDataLength += lToWrite;
  409616:	eb08 0205 	add.w	r2, r8, r5
  40961a:	608a      	str	r2, [r1, #8]
					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
  40961c:	4293      	cmp	r3, r2
						pxWindow->pxHeadSegment = NULL;
  40961e:	bfdc      	itt	le
  409620:	2300      	movle	r3, #0
  409622:	67e3      	strle	r3, [r4, #124]	; 0x7c
					lBytesLeft -= lToWrite;
  409624:	9b03      	ldr	r3, [sp, #12]
  409626:	1b5f      	subs	r7, r3, r5
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
  409628:	6b60      	ldr	r0, [r4, #52]	; 0x34
  40962a:	4428      	add	r0, r5
  40962c:	6360      	str	r0, [r4, #52]	; 0x34
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
  40962e:	4b3f      	ldr	r3, [pc, #252]	; (40972c <lTCPWindowTxAdd+0x150>)
  409630:	681b      	ldr	r3, [r3, #0]
  409632:	2b01      	cmp	r3, #1
  409634:	dd12      	ble.n	40965c <lTCPWindowTxAdd+0x80>
  409636:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
  40963a:	2b17      	cmp	r3, #23
  40963c:	d00e      	beq.n	40965c <lTCPWindowTxAdd+0x80>
						FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
  40963e:	69e2      	ldr	r2, [r4, #28]
  409640:	688b      	ldr	r3, [r1, #8]
  409642:	f8d1 e000 	ldr.w	lr, [r1]
  409646:	68c9      	ldr	r1, [r1, #12]
  409648:	9101      	str	r1, [sp, #4]
  40964a:	1a80      	subs	r0, r0, r2
  40964c:	9000      	str	r0, [sp, #0]
  40964e:	ebae 0202 	sub.w	r2, lr, r2
  409652:	9903      	ldr	r1, [sp, #12]
  409654:	4836      	ldr	r0, [pc, #216]	; (409730 <lTCPWindowTxAdd+0x154>)
  409656:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 409738 <lTCPWindowTxAdd+0x15c>
  40965a:	47c0      	blx	r8
		lPosition += lCount;
  40965c:	442e      	add	r6, r5
		if( lPosition >= lMax )
  40965e:	45b1      	cmp	r9, r6
  409660:	dc12      	bgt.n	409688 <lTCPWindowTxAdd+0xac>
			lPosition -= lMax;
  409662:	eba6 0609 	sub.w	r6, r6, r9
					lDone += lToWrite;
  409666:	46a8      	mov	r8, r5
  409668:	e004      	b.n	409674 <lTCPWindowTxAdd+0x98>
	int32_t lDone = 0;
  40966a:	f04f 0800 	mov.w	r8, #0
  40966e:	e001      	b.n	409674 <lTCPWindowTxAdd+0x98>
  409670:	f04f 0800 	mov.w	r8, #0
		while( lBytesLeft > 0 )
  409674:	2f00      	cmp	r7, #0
  409676:	dd4f      	ble.n	409718 <lTCPWindowTxAdd+0x13c>
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
  409678:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 409740 <lTCPWindowTxAdd+0x164>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  40967c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 409744 <lTCPWindowTxAdd+0x168>
  409680:	e013      	b.n	4096aa <lTCPWindowTxAdd+0xce>
	int32_t lDone = 0;
  409682:	f04f 0800 	mov.w	r8, #0
  409686:	e7f5      	b.n	409674 <lTCPWindowTxAdd+0x98>
					lDone += lToWrite;
  409688:	46a8      	mov	r8, r5
  40968a:	e7f3      	b.n	409674 <lTCPWindowTxAdd+0x98>
						FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
  40968c:	69e2      	ldr	r2, [r4, #28]
  40968e:	68ab      	ldr	r3, [r5, #8]
  409690:	6828      	ldr	r0, [r5, #0]
  409692:	68e9      	ldr	r1, [r5, #12]
  409694:	9101      	str	r1, [sp, #4]
  409696:	6b61      	ldr	r1, [r4, #52]	; 0x34
  409698:	1a89      	subs	r1, r1, r2
  40969a:	9100      	str	r1, [sp, #0]
  40969c:	1a82      	subs	r2, r0, r2
  40969e:	9903      	ldr	r1, [sp, #12]
  4096a0:	4824      	ldr	r0, [pc, #144]	; (409734 <lTCPWindowTxAdd+0x158>)
  4096a2:	4d25      	ldr	r5, [pc, #148]	; (409738 <lTCPWindowTxAdd+0x15c>)
  4096a4:	47a8      	blx	r5
		while( lBytesLeft > 0 )
  4096a6:	2f00      	cmp	r7, #0
  4096a8:	dd36      	ble.n	409718 <lTCPWindowTxAdd+0x13c>
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
  4096aa:	2300      	movs	r3, #0
  4096ac:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
  4096b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4096b2:	4620      	mov	r0, r4
  4096b4:	47d0      	blx	sl
			if( pxSegment != NULL )
  4096b6:	4605      	mov	r5, r0
  4096b8:	b358      	cbz	r0, 409712 <lTCPWindowTxAdd+0x136>
  4096ba:	6843      	ldr	r3, [r0, #4]
  4096bc:	42bb      	cmp	r3, r7
  4096be:	bfa8      	it	ge
  4096c0:	463b      	movge	r3, r7
				pxSegment->lDataLength = lToWrite;
  4096c2:	6083      	str	r3, [r0, #8]
				pxSegment->lStreamPos = lPosition;
  4096c4:	60c6      	str	r6, [r0, #12]
				lBytesLeft -= lToWrite;
  4096c6:	1aff      	subs	r7, r7, r3
		lPosition += lCount;
  4096c8:	441e      	add	r6, r3
		if( lPosition >= lMax )
  4096ca:	45b1      	cmp	r9, r6
			lPosition -= lMax;
  4096cc:	bfd8      	it	le
  4096ce:	eba6 0609 	suble.w	r6, r6, r9
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
  4096d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4096d4:	441a      	add	r2, r3
  4096d6:	6362      	str	r2, [r4, #52]	; 0x34
				lDone += lToWrite;
  4096d8:	4498      	add	r8, r3
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  4096da:	f104 025c 	add.w	r2, r4, #92	; 0x5c
  4096de:	f100 0118 	add.w	r1, r0, #24
  4096e2:	f104 0054 	add.w	r0, r4, #84	; 0x54
  4096e6:	47d8      	blx	fp
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
  4096e8:	68aa      	ldr	r2, [r5, #8]
  4096ea:	686b      	ldr	r3, [r5, #4]
  4096ec:	429a      	cmp	r2, r3
					pxWindow->pxHeadSegment = pxSegment;
  4096ee:	bfb2      	itee	lt
  4096f0:	67e5      	strlt	r5, [r4, #124]	; 0x7c
					pxWindow->pxHeadSegment = NULL;
  4096f2:	2300      	movge	r3, #0
  4096f4:	67e3      	strge	r3, [r4, #124]	; 0x7c
				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
  4096f6:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
  4096fa:	2b17      	cmp	r3, #23
  4096fc:	d0d3      	beq.n	4096a6 <lTCPWindowTxAdd+0xca>
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
  4096fe:	4b0b      	ldr	r3, [pc, #44]	; (40972c <lTCPWindowTxAdd+0x150>)
  409700:	681b      	ldr	r3, [r3, #0]
  409702:	2b02      	cmp	r3, #2
  409704:	dcc2      	bgt.n	40968c <lTCPWindowTxAdd+0xb0>
  409706:	2b01      	cmp	r3, #1
  409708:	ddcd      	ble.n	4096a6 <lTCPWindowTxAdd+0xca>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
  40970a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  40970c:	2b00      	cmp	r3, #0
  40970e:	d1bd      	bne.n	40968c <lTCPWindowTxAdd+0xb0>
  409710:	e7c9      	b.n	4096a6 <lTCPWindowTxAdd+0xca>
				if( lDone != 0 )
  409712:	f1b8 0f00 	cmp.w	r8, #0
  409716:	d103      	bne.n	409720 <lTCPWindowTxAdd+0x144>
	}
  409718:	4640      	mov	r0, r8
  40971a:	b005      	add	sp, #20
  40971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
  409720:	4639      	mov	r1, r7
  409722:	4806      	ldr	r0, [pc, #24]	; (40973c <lTCPWindowTxAdd+0x160>)
  409724:	4b04      	ldr	r3, [pc, #16]	; (409738 <lTCPWindowTxAdd+0x15c>)
  409726:	4798      	blx	r3
  409728:	e7f6      	b.n	409718 <lTCPWindowTxAdd+0x13c>
  40972a:	bf00      	nop
  40972c:	20006d84 	.word	0x20006d84
  409730:	00413c14 	.word	0x00413c14
  409734:	00413c60 	.word	0x00413c60
  409738:	0040c351 	.word	0x0040c351
  40973c:	00413cac 	.word	0x00413cac
  409740:	0040912d 	.word	0x0040912d
  409744:	00408f65 	.word	0x00408f65

00409748 <xTCPWindowTxDone>:
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
  409748:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
	}
  40974c:	fab0 f080 	clz	r0, r0
  409750:	0940      	lsrs	r0, r0, #5
  409752:	4770      	bx	lr

00409754 <xTCPWindowTxHasData>:
	{
  409754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		*pulDelay = 0u;
  409756:	2300      	movs	r3, #0
  409758:	6013      	str	r3, [r2, #0]
		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
  40975a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40975c:	b10b      	cbz	r3, 409762 <xTCPWindowTxHasData+0xe>
			xReturn = pdTRUE;
  40975e:	2001      	movs	r0, #1
  409760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409762:	4615      	mov	r5, r2
  409764:	460e      	mov	r6, r1
  409766:	4604      	mov	r4, r0
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
  409768:	3068      	adds	r0, #104	; 0x68
  40976a:	4b17      	ldr	r3, [pc, #92]	; (4097c8 <xTCPWindowTxHasData+0x74>)
  40976c:	4798      	blx	r3
			if( pxSegment != NULL )
  40976e:	4607      	mov	r7, r0
  409770:	b160      	cbz	r0, 40978c <xTCPWindowTxHasData+0x38>
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
  409772:	4b16      	ldr	r3, [pc, #88]	; (4097cc <xTCPWindowTxHasData+0x78>)
  409774:	4798      	blx	r3
  409776:	693b      	ldr	r3, [r7, #16]
  409778:	1ac0      	subs	r0, r0, r3
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
  40977a:	7d3a      	ldrb	r2, [r7, #20]
  40977c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40977e:	4093      	lsls	r3, r2
				if( ulMaxAge > ulAge )
  409780:	4283      	cmp	r3, r0
  409782:	d919      	bls.n	4097b8 <xTCPWindowTxHasData+0x64>
					*pulDelay = ulMaxAge - ulAge;
  409784:	1a1b      	subs	r3, r3, r0
  409786:	602b      	str	r3, [r5, #0]
				xReturn = pdTRUE;
  409788:	2001      	movs	r0, #1
  40978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
  40978c:	f104 0054 	add.w	r0, r4, #84	; 0x54
  409790:	4b0d      	ldr	r3, [pc, #52]	; (4097c8 <xTCPWindowTxHasData+0x74>)
  409792:	4798      	blx	r3
				if( pxSegment == NULL )
  409794:	4605      	mov	r5, r0
  409796:	b188      	cbz	r0, 4097bc <xTCPWindowTxHasData+0x68>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
  409798:	4631      	mov	r1, r6
  40979a:	4620      	mov	r0, r4
  40979c:	4b0c      	ldr	r3, [pc, #48]	; (4097d0 <xTCPWindowTxHasData+0x7c>)
  40979e:	4798      	blx	r3
  4097a0:	b170      	cbz	r0, 4097c0 <xTCPWindowTxHasData+0x6c>
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
  4097a2:	7823      	ldrb	r3, [r4, #0]
  4097a4:	f013 0f02 	tst.w	r3, #2
  4097a8:	d00c      	beq.n	4097c4 <xTCPWindowTxHasData+0x70>
  4097aa:	68a8      	ldr	r0, [r5, #8]
  4097ac:	686b      	ldr	r3, [r5, #4]
  4097ae:	4298      	cmp	r0, r3
  4097b0:	bfb4      	ite	lt
  4097b2:	2000      	movlt	r0, #0
  4097b4:	2001      	movge	r0, #1
  4097b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdTRUE;
  4097b8:	2001      	movs	r0, #1
  4097ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xReturn = pdFALSE;
  4097bc:	2000      	movs	r0, #0
  4097be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xReturn = pdFALSE;
  4097c0:	2000      	movs	r0, #0
  4097c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xReturn = pdTRUE;
  4097c4:	2001      	movs	r0, #1
	}
  4097c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4097c8:	00408eef 	.word	0x00408eef
  4097cc:	0040b649 	.word	0x0040b649
  4097d0:	00408efd 	.word	0x00408efd

004097d4 <ulTCPWindowTxGet>:
	{
  4097d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4097d8:	b083      	sub	sp, #12
  4097da:	4605      	mov	r5, r0
  4097dc:	460f      	mov	r7, r1
  4097de:	4616      	mov	r6, r2
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
  4097e0:	3040      	adds	r0, #64	; 0x40
  4097e2:	4b58      	ldr	r3, [pc, #352]	; (409944 <ulTCPWindowTxGet+0x170>)
  4097e4:	4798      	blx	r3
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
  4097e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4097e8:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxSegment == NULL )
  4097ea:	b310      	cbz	r0, 409832 <ulTCPWindowTxGet+0x5e>
  4097ec:	4604      	mov	r4, r0
			if( xTCPWindowLoggingLevel != 0 )
  4097ee:	4b56      	ldr	r3, [pc, #344]	; (409948 <ulTCPWindowTxGet+0x174>)
  4097f0:	681b      	ldr	r3, [r3, #0]
  4097f2:	2b00      	cmp	r3, #0
  4097f4:	f040 8082 	bne.w	4098fc <ulTCPWindowTxGet+0x128>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  4097f8:	f105 0270 	add.w	r2, r5, #112	; 0x70
  4097fc:	f104 0118 	add.w	r1, r4, #24
  409800:	f105 0068 	add.w	r0, r5, #104	; 0x68
  409804:	4b51      	ldr	r3, [pc, #324]	; (40994c <ulTCPWindowTxGet+0x178>)
  409806:	4798      	blx	r3
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
  409808:	7da3      	ldrb	r3, [r4, #22]
  40980a:	f043 0301 	orr.w	r3, r3, #1
  40980e:	75a3      	strb	r3, [r4, #22]
			( pxSegment->u.bits.ucTransmitCount )++;
  409810:	7d23      	ldrb	r3, [r4, #20]
  409812:	3301      	adds	r3, #1
  409814:	b2db      	uxtb	r3, r3
  409816:	7523      	strb	r3, [r4, #20]
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
  409818:	2b04      	cmp	r3, #4
  40981a:	d07d      	beq.n	409918 <ulTCPWindowTxGet+0x144>
	pxTimer->ulBorn = xTaskGetTickCount ( );
  40981c:	4b4c      	ldr	r3, [pc, #304]	; (409950 <ulTCPWindowTxGet+0x17c>)
  40981e:	4798      	blx	r3
  409820:	6120      	str	r0, [r4, #16]
			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
  409822:	6823      	ldr	r3, [r4, #0]
  409824:	62eb      	str	r3, [r5, #44]	; 0x2c
			*plPosition = pxSegment->lStreamPos;
  409826:	68e3      	ldr	r3, [r4, #12]
  409828:	6033      	str	r3, [r6, #0]
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
  40982a:	68a0      	ldr	r0, [r4, #8]
	}
  40982c:	b003      	add	sp, #12
  40982e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
  409832:	f105 0968 	add.w	r9, r5, #104	; 0x68
  409836:	4648      	mov	r0, r9
  409838:	4b46      	ldr	r3, [pc, #280]	; (409954 <ulTCPWindowTxGet+0x180>)
  40983a:	4798      	blx	r3
			if( pxSegment != NULL )
  40983c:	4680      	mov	r8, r0
  40983e:	b148      	cbz	r0, 409854 <ulTCPWindowTxGet+0x80>
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
  409840:	7d03      	ldrb	r3, [r0, #20]
  409842:	6bac      	ldr	r4, [r5, #56]	; 0x38
  409844:	409c      	lsls	r4, r3
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
  409846:	4b42      	ldr	r3, [pc, #264]	; (409950 <ulTCPWindowTxGet+0x17c>)
  409848:	4798      	blx	r3
  40984a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40984e:	1ac0      	subs	r0, r0, r3
				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
  409850:	4284      	cmp	r4, r0
  409852:	d314      	bcc.n	40987e <ulTCPWindowTxGet+0xaa>
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
  409854:	f105 0454 	add.w	r4, r5, #84	; 0x54
  409858:	4620      	mov	r0, r4
  40985a:	4b3e      	ldr	r3, [pc, #248]	; (409954 <ulTCPWindowTxGet+0x180>)
  40985c:	4798      	blx	r3
				if( pxSegment == NULL )
  40985e:	b160      	cbz	r0, 40987a <ulTCPWindowTxGet+0xa6>
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
  409860:	782a      	ldrb	r2, [r5, #0]
  409862:	f012 0f02 	tst.w	r2, #2
  409866:	d003      	beq.n	409870 <ulTCPWindowTxGet+0x9c>
  409868:	6882      	ldr	r2, [r0, #8]
  40986a:	6843      	ldr	r3, [r0, #4]
  40986c:	429a      	cmp	r2, r3
  40986e:	db04      	blt.n	40987a <ulTCPWindowTxGet+0xa6>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
  409870:	4639      	mov	r1, r7
  409872:	4628      	mov	r0, r5
  409874:	4b38      	ldr	r3, [pc, #224]	; (409958 <ulTCPWindowTxGet+0x184>)
  409876:	4798      	blx	r3
  409878:	b9f8      	cbnz	r0, 4098ba <ulTCPWindowTxGet+0xe6>
	{
  40987a:	2000      	movs	r0, #0
  40987c:	e7d6      	b.n	40982c <ulTCPWindowTxGet+0x58>
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
  40987e:	4648      	mov	r0, r9
  409880:	4b30      	ldr	r3, [pc, #192]	; (409944 <ulTCPWindowTxGet+0x170>)
  409882:	4798      	blx	r3
  409884:	4604      	mov	r4, r0
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
  409886:	2300      	movs	r3, #0
  409888:	7543      	strb	r3, [r0, #21]
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
  40988a:	4b2f      	ldr	r3, [pc, #188]	; (409948 <ulTCPWindowTxGet+0x174>)
  40988c:	681b      	ldr	r3, [r3, #0]
  40988e:	b18b      	cbz	r3, 4098b4 <ulTCPWindowTxGet+0xe0>
  409890:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
  409894:	2a17      	cmp	r2, #23
  409896:	d00d      	beq.n	4098b4 <ulTCPWindowTxGet+0xe0>
						FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %lu (%lX)\n",
  409898:	6800      	ldr	r0, [r0, #0]
  40989a:	f8d4 e008 	ldr.w	lr, [r4, #8]
  40989e:	f8b5 10ba 	ldrh.w	r1, [r5, #186]	; 0xba
  4098a2:	9001      	str	r0, [sp, #4]
  4098a4:	69eb      	ldr	r3, [r5, #28]
  4098a6:	1ac0      	subs	r0, r0, r3
  4098a8:	9000      	str	r0, [sp, #0]
  4098aa:	4673      	mov	r3, lr
  4098ac:	482b      	ldr	r0, [pc, #172]	; (40995c <ulTCPWindowTxGet+0x188>)
  4098ae:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 409964 <ulTCPWindowTxGet+0x190>
  4098b2:	47c0      	blx	r8
			if( pxSegment == NULL )
  4098b4:	2c00      	cmp	r4, #0
  4098b6:	d19f      	bne.n	4097f8 <ulTCPWindowTxGet+0x24>
  4098b8:	e7cc      	b.n	409854 <ulTCPWindowTxGet+0x80>
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
  4098ba:	4620      	mov	r0, r4
  4098bc:	4b21      	ldr	r3, [pc, #132]	; (409944 <ulTCPWindowTxGet+0x170>)
  4098be:	4798      	blx	r3
  4098c0:	4604      	mov	r4, r0
					if( pxWindow->pxHeadSegment == pxSegment )
  4098c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  4098c4:	4298      	cmp	r0, r3
						pxWindow->pxHeadSegment = NULL;
  4098c6:	bf04      	itt	eq
  4098c8:	2300      	moveq	r3, #0
  4098ca:	67eb      	streq	r3, [r5, #124]	; 0x7c
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
  4098cc:	6803      	ldr	r3, [r0, #0]
  4098ce:	6882      	ldr	r2, [r0, #8]
  4098d0:	4413      	add	r3, r2
  4098d2:	62ab      	str	r3, [r5, #40]	; 0x28
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
  4098d4:	4b1c      	ldr	r3, [pc, #112]	; (409948 <ulTCPWindowTxGet+0x174>)
  4098d6:	681b      	ldr	r3, [r3, #0]
  4098d8:	2b01      	cmp	r3, #1
  4098da:	dd8d      	ble.n	4097f8 <ulTCPWindowTxGet+0x24>
  4098dc:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
  4098e0:	2a17      	cmp	r2, #23
  4098e2:	d089      	beq.n	4097f8 <ulTCPWindowTxGet+0x24>
						FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %lu (ws %lu)\n",
  4098e4:	f8b5 10ba 	ldrh.w	r1, [r5, #186]	; 0xba
  4098e8:	9701      	str	r7, [sp, #4]
  4098ea:	6803      	ldr	r3, [r0, #0]
  4098ec:	69e8      	ldr	r0, [r5, #28]
  4098ee:	1a1b      	subs	r3, r3, r0
  4098f0:	9300      	str	r3, [sp, #0]
  4098f2:	68a3      	ldr	r3, [r4, #8]
  4098f4:	481a      	ldr	r0, [pc, #104]	; (409960 <ulTCPWindowTxGet+0x18c>)
  4098f6:	4f1b      	ldr	r7, [pc, #108]	; (409964 <ulTCPWindowTxGet+0x190>)
  4098f8:	47b8      	blx	r7
  4098fa:	e77d      	b.n	4097f8 <ulTCPWindowTxGet+0x24>
				FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu (ws %lu)\n",
  4098fc:	6883      	ldr	r3, [r0, #8]
  4098fe:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
  409902:	f8b5 10ba 	ldrh.w	r1, [r5, #186]	; 0xba
  409906:	9701      	str	r7, [sp, #4]
  409908:	6800      	ldr	r0, [r0, #0]
  40990a:	69ef      	ldr	r7, [r5, #28]
  40990c:	1bc0      	subs	r0, r0, r7
  40990e:	9000      	str	r0, [sp, #0]
  409910:	4815      	ldr	r0, [pc, #84]	; (409968 <ulTCPWindowTxGet+0x194>)
  409912:	4f14      	ldr	r7, [pc, #80]	; (409964 <ulTCPWindowTxGet+0x190>)
  409914:	47b8      	blx	r7
  409916:	e76f      	b.n	4097f8 <ulTCPWindowTxGet+0x24>
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
  409918:	68ab      	ldr	r3, [r5, #8]
  40991a:	f8b5 00bc 	ldrh.w	r0, [r5, #188]	; 0xbc
  40991e:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
  409922:	f67f af7b 	bls.w	40981c <ulTCPWindowTxGet+0x48>
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
  409926:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
  40992a:	f8b5 10ba 	ldrh.w	r1, [r5, #186]	; 0xba
  40992e:	0040      	lsls	r0, r0, #1
  409930:	9000      	str	r0, [sp, #0]
  409932:	480e      	ldr	r0, [pc, #56]	; (40996c <ulTCPWindowTxGet+0x198>)
  409934:	4f0b      	ldr	r7, [pc, #44]	; (409964 <ulTCPWindowTxGet+0x190>)
  409936:	47b8      	blx	r7
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
  409938:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
  40993c:	005b      	lsls	r3, r3, #1
  40993e:	60ab      	str	r3, [r5, #8]
  409940:	e76c      	b.n	40981c <ulTCPWindowTxGet+0x48>
  409942:	bf00      	nop
  409944:	00408f49 	.word	0x00408f49
  409948:	20006d84 	.word	0x20006d84
  40994c:	00408f65 	.word	0x00408f65
  409950:	0040b649 	.word	0x0040b649
  409954:	00408eef 	.word	0x00408eef
  409958:	00408efd 	.word	0x00408efd
  40995c:	00413d74 	.word	0x00413d74
  409960:	00413dc0 	.word	0x00413dc0
  409964:	0040c351 	.word	0x0040c351
  409968:	00413e10 	.word	0x00413e10
  40996c:	00413e60 	.word	0x00413e60

00409970 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
  409970:	b508      	push	{r3, lr}
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
  409972:	6a03      	ldr	r3, [r0, #32]
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
  409974:	1a5a      	subs	r2, r3, r1

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
  409976:	2a00      	cmp	r2, #0
  409978:	db01      	blt.n	40997e <ulTCPWindowTxAck+0xe>
		{
			ulReturn = 0UL;
  40997a:	2000      	movs	r0, #0
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
		}

		return ulReturn;
	}
  40997c:	bd08      	pop	{r3, pc}
  40997e:	460a      	mov	r2, r1
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
  409980:	4619      	mov	r1, r3
  409982:	4b01      	ldr	r3, [pc, #4]	; (409988 <ulTCPWindowTxAck+0x18>)
  409984:	4798      	blx	r3
  409986:	bd08      	pop	{r3, pc}
  409988:	00408fbd 	.word	0x00408fbd

0040998c <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
  40998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409990:	b085      	sub	sp, #20
  409992:	4607      	mov	r7, r0
  409994:	4688      	mov	r8, r1
  409996:	9203      	str	r2, [sp, #12]
	uint32_t ulAckCount = 0UL;
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
  409998:	f8d0 9020 	ldr.w	r9, [r0, #32]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
  40999c:	4b2c      	ldr	r3, [pc, #176]	; (409a50 <ulTCPWindowTxSack+0xc4>)
  40999e:	4798      	blx	r3
  4099a0:	9002      	str	r0, [sp, #8]
		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
  4099a2:	f107 0670 	add.w	r6, r7, #112	; 0x70
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  4099a6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
  4099a8:	42a6      	cmp	r6, r4
  4099aa:	d033      	beq.n	409a14 <ulTCPWindowTxSack+0x88>
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
  4099ac:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 409a60 <ulTCPWindowTxSack+0xd4>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  4099b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 409a68 <ulTCPWindowTxSack+0xdc>
  4099b4:	e00b      	b.n	4099ce <ulTCPWindowTxSack+0x42>
				uxListRemove( &pxSegment->xQueueItem );
  4099b6:	3518      	adds	r5, #24
  4099b8:	4628      	mov	r0, r5
  4099ba:	4b26      	ldr	r3, [pc, #152]	; (409a54 <ulTCPWindowTxSack+0xc8>)
  4099bc:	4798      	blx	r3
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
  4099be:	f107 0248 	add.w	r2, r7, #72	; 0x48
  4099c2:	4629      	mov	r1, r5
  4099c4:	f107 0040 	add.w	r0, r7, #64	; 0x40
  4099c8:	47d0      	blx	sl
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  4099ca:	42a6      	cmp	r6, r4
  4099cc:	d022      	beq.n	409a14 <ulTCPWindowTxSack+0x88>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
  4099ce:	68e5      	ldr	r5, [r4, #12]
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
  4099d0:	6864      	ldr	r4, [r4, #4]
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
  4099d2:	7dab      	ldrb	r3, [r5, #22]
  4099d4:	f013 0f02 	tst.w	r3, #2
  4099d8:	d1f7      	bne.n	4099ca <ulTCPWindowTxSack+0x3e>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
  4099da:	6829      	ldr	r1, [r5, #0]
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
  4099dc:	43cb      	mvns	r3, r1
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
  4099de:	eb13 0f08 	cmn.w	r3, r8
  4099e2:	d4f2      	bmi.n	4099ca <ulTCPWindowTxSack+0x3e>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
  4099e4:	7d6b      	ldrb	r3, [r5, #21]
  4099e6:	3301      	adds	r3, #1
  4099e8:	b2db      	uxtb	r3, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
  4099ea:	756b      	strb	r3, [r5, #21]
  4099ec:	2b03      	cmp	r3, #3
  4099ee:	d1ec      	bne.n	4099ca <ulTCPWindowTxSack+0x3e>
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
  4099f0:	2300      	movs	r3, #0
  4099f2:	752b      	strb	r3, [r5, #20]
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
  4099f4:	f8db 3000 	ldr.w	r3, [fp]
  4099f8:	2b00      	cmp	r3, #0
  4099fa:	dbdc      	blt.n	4099b6 <ulTCPWindowTxSack+0x2a>
  4099fc:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
  409a00:	2b17      	cmp	r3, #23
  409a02:	d0d8      	beq.n	4099b6 <ulTCPWindowTxSack+0x2a>
					FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
  409a04:	69fb      	ldr	r3, [r7, #28]
  409a06:	eba8 0203 	sub.w	r2, r8, r3
  409a0a:	1ac9      	subs	r1, r1, r3
  409a0c:	4812      	ldr	r0, [pc, #72]	; (409a58 <ulTCPWindowTxSack+0xcc>)
  409a0e:	4b13      	ldr	r3, [pc, #76]	; (409a5c <ulTCPWindowTxSack+0xd0>)
  409a10:	4798      	blx	r3
  409a12:	e7d0      	b.n	4099b6 <ulTCPWindowTxSack+0x2a>
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
  409a14:	4b12      	ldr	r3, [pc, #72]	; (409a60 <ulTCPWindowTxSack+0xd4>)
  409a16:	681b      	ldr	r3, [r3, #0]
  409a18:	2b00      	cmp	r3, #0
  409a1a:	dd14      	ble.n	409a46 <ulTCPWindowTxSack+0xba>
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
  409a1c:	ea6f 0909 	mvn.w	r9, r9
		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
  409a20:	eb19 0f08 	cmn.w	r9, r8
  409a24:	d40f      	bmi.n	409a46 <ulTCPWindowTxSack+0xba>
		{
			FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
  409a26:	69fb      	ldr	r3, [r7, #28]
  409a28:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
  409a2c:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
  409a30:	6a38      	ldr	r0, [r7, #32]
  409a32:	1ac0      	subs	r0, r0, r3
  409a34:	9001      	str	r0, [sp, #4]
  409a36:	9803      	ldr	r0, [sp, #12]
  409a38:	1ac0      	subs	r0, r0, r3
  409a3a:	9000      	str	r0, [sp, #0]
  409a3c:	eba8 0303 	sub.w	r3, r8, r3
  409a40:	4808      	ldr	r0, [pc, #32]	; (409a64 <ulTCPWindowTxSack+0xd8>)
  409a42:	4c06      	ldr	r4, [pc, #24]	; (409a5c <ulTCPWindowTxSack+0xd0>)
  409a44:	47a0      	blx	r4
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
	}
  409a46:	9802      	ldr	r0, [sp, #8]
  409a48:	b005      	add	sp, #20
  409a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a4e:	bf00      	nop
  409a50:	00408fbd 	.word	0x00408fbd
  409a54:	00409cc5 	.word	0x00409cc5
  409a58:	00413e98 	.word	0x00413e98
  409a5c:	0040c351 	.word	0x0040c351
  409a60:	20006d84 	.word	0x20006d84
  409a64:	00413ed8 	.word	0x00413ed8
  409a68:	00408f65 	.word	0x00408f65

00409a6c <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
  409a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  409a6e:	b083      	sub	sp, #12
  409a70:	4604      	mov	r4, r0
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
  409a72:	6943      	ldr	r3, [r0, #20]
  409a74:	a802      	add	r0, sp, #8
  409a76:	f840 3d04 	str.w	r3, [r0, #-4]!

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
  409a7a:	69a5      	ldr	r5, [r4, #24]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
  409a7c:	4629      	mov	r1, r5
  409a7e:	4b35      	ldr	r3, [pc, #212]	; (409b54 <vProcessGeneratedUDPPacket+0xe8>)
  409a80:	4798      	blx	r3

	if( eReturned != eCantSendPacket )
  409a82:	2802      	cmp	r0, #2
  409a84:	d003      	beq.n	409a8e <vProcessGeneratedUDPPacket+0x22>
	{
		if( eReturned == eARPCacheHit )
  409a86:	2801      	cmp	r0, #1
  409a88:	d006      	beq.n	409a98 <vProcessGeneratedUDPPacket+0x2c>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
  409a8a:	2800      	cmp	r0, #0
  409a8c:	d055      	beq.n	409b3a <vProcessGeneratedUDPPacket+0xce>
	}
	else
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
  409a8e:	4620      	mov	r0, r4
  409a90:	4b31      	ldr	r3, [pc, #196]	; (409b58 <vProcessGeneratedUDPPacket+0xec>)
  409a92:	4798      	blx	r3
	}
}
  409a94:	b003      	add	sp, #12
  409a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
  409a98:	8c23      	ldrh	r3, [r4, #32]
  409a9a:	84ab      	strh	r3, [r5, #36]	; 0x24
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
  409a9c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  409a9e:	846b      	strh	r3, [r5, #34]	; 0x22
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
  409aa0:	69e3      	ldr	r3, [r4, #28]
  409aa2:	3308      	adds	r3, #8
  409aa4:	b29b      	uxth	r3, r3
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
  409aa6:	0a1a      	lsrs	r2, r3, #8
  409aa8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  409aac:	84eb      	strh	r3, [r5, #38]	; 0x26
				pxUDPHeader->usChecksum = 0u;
  409aae:	2300      	movs	r3, #0
  409ab0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  409ab4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
  409ab8:	69a3      	ldr	r3, [r4, #24]
  409aba:	799f      	ldrb	r7, [r3, #6]
			memcpy( pxUdpSrcAddrOffset, xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
  409abc:	4e27      	ldr	r6, [pc, #156]	; (409b5c <vProcessGeneratedUDPPacket+0xf0>)
  409abe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  409ac0:	f8c5 0006 	str.w	r0, [r5, #6]
  409ac4:	f8c5 100a 	str.w	r1, [r5, #10]
  409ac8:	f8c5 200e 	str.w	r2, [r5, #14]
  409acc:	f8c5 3012 	str.w	r3, [r5, #18]
  409ad0:	ce03      	ldmia	r6!, {r0, r1}
  409ad2:	f8c5 0016 	str.w	r0, [r5, #22]
  409ad6:	f8c5 101a 	str.w	r1, [r5, #26]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
  409ada:	69e3      	ldr	r3, [r4, #28]
  409adc:	331c      	adds	r3, #28
  409ade:	b29b      	uxth	r3, r3
  409ae0:	822b      	strh	r3, [r5, #16]
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
  409ae2:	330e      	adds	r3, #14
  409ae4:	61e3      	str	r3, [r4, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
  409ae6:	8a2a      	ldrh	r2, [r5, #16]
  409ae8:	0a13      	lsrs	r3, r2, #8
  409aea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  409aee:	822b      	strh	r3, [r5, #16]
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
  409af0:	6963      	ldr	r3, [r4, #20]
  409af2:	f8c5 301e 	str.w	r3, [r5, #30]
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
  409af6:	6962      	ldr	r2, [r4, #20]
  409af8:	4b19      	ldr	r3, [pc, #100]	; (409b60 <vProcessGeneratedUDPPacket+0xf4>)
  409afa:	429a      	cmp	r2, r3
					pxIPHeader->ucTimeToLive = 0x01;
  409afc:	bf04      	itt	eq
  409afe:	2301      	moveq	r3, #1
  409b00:	75ab      	strbeq	r3, [r5, #22]
				pxIPHeader->usHeaderChecksum = 0u;
  409b02:	2000      	movs	r0, #0
  409b04:	7628      	strb	r0, [r5, #24]
  409b06:	7668      	strb	r0, [r5, #25]
				pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
  409b08:	2214      	movs	r2, #20
  409b0a:	f105 010e 	add.w	r1, r5, #14
  409b0e:	4b15      	ldr	r3, [pc, #84]	; (409b64 <vProcessGeneratedUDPPacket+0xf8>)
  409b10:	4798      	blx	r3
				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
  409b12:	0a03      	lsrs	r3, r0, #8
  409b14:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  409b18:	43c0      	mvns	r0, r0
  409b1a:	8328      	strh	r0, [r5, #24]
				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0u )
  409b1c:	f017 0f02 	tst.w	r7, #2
  409b20:	d105      	bne.n	409b2e <vProcessGeneratedUDPPacket+0xc2>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
  409b22:	2300      	movs	r3, #0
  409b24:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  409b28:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  409b2c:	e00d      	b.n	409b4a <vProcessGeneratedUDPPacket+0xde>
					usGenerateProtocolChecksum( (uint8_t*)pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
  409b2e:	2201      	movs	r2, #1
  409b30:	69e1      	ldr	r1, [r4, #28]
  409b32:	4628      	mov	r0, r5
  409b34:	4b0c      	ldr	r3, [pc, #48]	; (409b68 <vProcessGeneratedUDPPacket+0xfc>)
  409b36:	4798      	blx	r3
  409b38:	e007      	b.n	409b4a <vProcessGeneratedUDPPacket+0xde>
			vARPRefreshCacheEntry( NULL, ulIPAddress );
  409b3a:	9901      	ldr	r1, [sp, #4]
  409b3c:	4b0b      	ldr	r3, [pc, #44]	; (409b6c <vProcessGeneratedUDPPacket+0x100>)
  409b3e:	4798      	blx	r3
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
  409b40:	9b01      	ldr	r3, [sp, #4]
  409b42:	6163      	str	r3, [r4, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
  409b44:	4620      	mov	r0, r4
  409b46:	4b0a      	ldr	r3, [pc, #40]	; (409b70 <vProcessGeneratedUDPPacket+0x104>)
  409b48:	4798      	blx	r3
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
  409b4a:	2101      	movs	r1, #1
  409b4c:	4620      	mov	r0, r4
  409b4e:	4b09      	ldr	r3, [pc, #36]	; (409b74 <vProcessGeneratedUDPPacket+0x108>)
  409b50:	4798      	blx	r3
  409b52:	e79f      	b.n	409a94 <vProcessGeneratedUDPPacket+0x28>
  409b54:	004043c1 	.word	0x004043c1
  409b58:	00409d79 	.word	0x00409d79
  409b5c:	200000d8 	.word	0x200000d8
  409b60:	fc0000e0 	.word	0xfc0000e0
  409b64:	00405789 	.word	0x00405789
  409b68:	0040586d 	.word	0x0040586d
  409b6c:	004041ed 	.word	0x004041ed
  409b70:	00404495 	.word	0x00404495
  409b74:	0040a8c9 	.word	0x0040a8c9

00409b78 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
  409b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409b7a:	4606      	mov	r6, r0
  409b7c:	460f      	mov	r7, r1
BaseType_t xReturn = pdPASS;
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
  409b7e:	6985      	ldr	r5, [r0, #24]

	/* Caller must check for minimum packet size. */
	pxSocket = pxUDPSocketLookup( usPort );
  409b80:	4608      	mov	r0, r1
  409b82:	4b2a      	ldr	r3, [pc, #168]	; (409c2c <xProcessReceivedUDPPacket+0xb4>)
  409b84:	4798      	blx	r3

	if( pxSocket )
  409b86:	2800      	cmp	r0, #0
  409b88:	d02d      	beq.n	409be6 <xProcessReceivedUDPPacket+0x6e>
  409b8a:	4604      	mov	r4, r0
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
  409b8c:	f8d5 101a 	ldr.w	r1, [r5, #26]
  409b90:	1da8      	adds	r0, r5, #6
  409b92:	4b27      	ldr	r3, [pc, #156]	; (409c30 <xProcessReceivedUDPPacket+0xb8>)
  409b94:	4798      	blx	r3
		}
		#endif

		if( xReturn == pdPASS )
		{
			vTaskSuspendAll();
  409b96:	4b27      	ldr	r3, [pc, #156]	; (409c34 <xProcessReceivedUDPPacket+0xbc>)
  409b98:	4798      	blx	r3
			{
				if( xReturn == pdPASS )
				{
					taskENTER_CRITICAL();
  409b9a:	4b27      	ldr	r3, [pc, #156]	; (409c38 <xProcessReceivedUDPPacket+0xc0>)
  409b9c:	4798      	blx	r3
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
  409b9e:	4631      	mov	r1, r6
  409ba0:	f104 0038 	add.w	r0, r4, #56	; 0x38
  409ba4:	4b25      	ldr	r3, [pc, #148]	; (409c3c <xProcessReceivedUDPPacket+0xc4>)
  409ba6:	4798      	blx	r3
					}
					taskEXIT_CRITICAL();
  409ba8:	4b25      	ldr	r3, [pc, #148]	; (409c40 <xProcessReceivedUDPPacket+0xc8>)
  409baa:	4798      	blx	r3
				}
			}
			xTaskResumeAll();
  409bac:	4b25      	ldr	r3, [pc, #148]	; (409c44 <xProcessReceivedUDPPacket+0xcc>)
  409bae:	4798      	blx	r3

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
  409bb0:	6860      	ldr	r0, [r4, #4]
  409bb2:	b110      	cbz	r0, 409bba <xProcessReceivedUDPPacket+0x42>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
  409bb4:	2101      	movs	r1, #1
  409bb6:	4b24      	ldr	r3, [pc, #144]	; (409c48 <xProcessReceivedUDPPacket+0xd0>)
  409bb8:	4798      	blx	r3
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
  409bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  409bbc:	b11b      	cbz	r3, 409bc6 <xProcessReceivedUDPPacket+0x4e>
  409bbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  409bc0:	f012 0f01 	tst.w	r2, #1
  409bc4:	d105      	bne.n	409bd2 <xProcessReceivedUDPPacket+0x5a>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) )
  409bc6:	4620      	mov	r0, r4
  409bc8:	4b20      	ldr	r3, [pc, #128]	; (409c4c <xProcessReceivedUDPPacket+0xd4>)
  409bca:	4798      	blx	r3
  409bcc:	b930      	cbnz	r0, 409bdc <xProcessReceivedUDPPacket+0x64>
BaseType_t xReturn = pdPASS;
  409bce:	2001      	movs	r0, #1
  409bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
  409bd2:	2101      	movs	r1, #1
  409bd4:	6818      	ldr	r0, [r3, #0]
  409bd6:	4b1c      	ldr	r3, [pc, #112]	; (409c48 <xProcessReceivedUDPPacket+0xd0>)
  409bd8:	4798      	blx	r3
  409bda:	e7f4      	b.n	409bc6 <xProcessReceivedUDPPacket+0x4e>
				{
					xSendEventToIPTask( eDHCPEvent );
  409bdc:	2004      	movs	r0, #4
  409bde:	4b1c      	ldr	r3, [pc, #112]	; (409c50 <xProcessReceivedUDPPacket+0xd8>)
  409be0:	4798      	blx	r3
BaseType_t xReturn = pdPASS;
  409be2:	2001      	movs	r0, #1
  409be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		/* There is no socket listening to the target port, but still it might
		be for this node. */

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
  409be6:	f64e 3314 	movw	r3, #60180	; 0xeb14
  409bea:	429f      	cmp	r7, r3
  409bec:	d00c      	beq.n	409c08 <xProcessReceivedUDPPacket+0x90>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
  409bee:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
  409bf0:	f64e 3214 	movw	r2, #60180	; 0xeb14
  409bf4:	4293      	cmp	r3, r2
  409bf6:	d007      	beq.n	409c08 <xProcessReceivedUDPPacket+0x90>
			else
		#endif /* ipconfigUSE_LLMNR */

		#if( ipconfigUSE_NBNS == 1 )
			/* a NetBIOS request, check for the destination port */
			if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
  409bf8:	f5b7 4f09 	cmp.w	r7, #35072	; 0x8900
  409bfc:	d00d      	beq.n	409c1a <xProcessReceivedUDPPacket+0xa2>
  409bfe:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
  409c02:	d00a      	beq.n	409c1a <xProcessReceivedUDPPacket+0xa2>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
  409c04:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
  409c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
  409c08:	f8d5 101a 	ldr.w	r1, [r5, #26]
  409c0c:	1da8      	adds	r0, r5, #6
  409c0e:	4b08      	ldr	r3, [pc, #32]	; (409c30 <xProcessReceivedUDPPacket+0xb8>)
  409c10:	4798      	blx	r3
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
  409c12:	4630      	mov	r0, r6
  409c14:	4b0f      	ldr	r3, [pc, #60]	; (409c54 <xProcessReceivedUDPPacket+0xdc>)
  409c16:	4798      	blx	r3
  409c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
  409c1a:	f8d5 101a 	ldr.w	r1, [r5, #26]
  409c1e:	1da8      	adds	r0, r5, #6
  409c20:	4b03      	ldr	r3, [pc, #12]	; (409c30 <xProcessReceivedUDPPacket+0xb8>)
  409c22:	4798      	blx	r3
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
  409c24:	4630      	mov	r0, r6
  409c26:	4b0c      	ldr	r3, [pc, #48]	; (409c58 <xProcessReceivedUDPPacket+0xe0>)
  409c28:	4798      	blx	r3
  409c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409c2c:	004066a1 	.word	0x004066a1
  409c30:	004041ed 	.word	0x004041ed
  409c34:	0040b639 	.word	0x0040b639
  409c38:	00409f15 	.word	0x00409f15
  409c3c:	00409c79 	.word	0x00409c79
  409c40:	00409f35 	.word	0x00409f35
  409c44:	0040b775 	.word	0x0040b775
  409c48:	00404129 	.word	0x00404129
  409c4c:	00404acd 	.word	0x00404acd
  409c50:	00405731 	.word	0x00405731
  409c54:	00405281 	.word	0x00405281
  409c58:	004052a1 	.word	0x004052a1

00409c5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  409c5c:	f100 0308 	add.w	r3, r0, #8
  409c60:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  409c62:	f04f 32ff 	mov.w	r2, #4294967295
  409c66:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  409c68:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  409c6a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  409c6c:	2300      	movs	r3, #0
  409c6e:	6003      	str	r3, [r0, #0]
  409c70:	4770      	bx	lr

00409c72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  409c72:	2300      	movs	r3, #0
  409c74:	6103      	str	r3, [r0, #16]
  409c76:	4770      	bx	lr

00409c78 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  409c78:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  409c7a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  409c7c:	689a      	ldr	r2, [r3, #8]
  409c7e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  409c80:	689a      	ldr	r2, [r3, #8]
  409c82:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  409c84:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  409c86:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  409c88:	6803      	ldr	r3, [r0, #0]
  409c8a:	3301      	adds	r3, #1
  409c8c:	6003      	str	r3, [r0, #0]
  409c8e:	4770      	bx	lr

00409c90 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  409c90:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  409c92:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  409c94:	f1b5 3fff 	cmp.w	r5, #4294967295
  409c98:	d002      	beq.n	409ca0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  409c9a:	f100 0208 	add.w	r2, r0, #8
  409c9e:	e002      	b.n	409ca6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  409ca0:	6902      	ldr	r2, [r0, #16]
  409ca2:	e004      	b.n	409cae <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  409ca4:	461a      	mov	r2, r3
  409ca6:	6853      	ldr	r3, [r2, #4]
  409ca8:	681c      	ldr	r4, [r3, #0]
  409caa:	42a5      	cmp	r5, r4
  409cac:	d2fa      	bcs.n	409ca4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  409cae:	6853      	ldr	r3, [r2, #4]
  409cb0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  409cb2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  409cb4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  409cb6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  409cb8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  409cba:	6803      	ldr	r3, [r0, #0]
  409cbc:	3301      	adds	r3, #1
  409cbe:	6003      	str	r3, [r0, #0]
}
  409cc0:	bc30      	pop	{r4, r5}
  409cc2:	4770      	bx	lr

00409cc4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  409cc4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  409cc6:	6842      	ldr	r2, [r0, #4]
  409cc8:	6881      	ldr	r1, [r0, #8]
  409cca:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  409ccc:	6882      	ldr	r2, [r0, #8]
  409cce:	6841      	ldr	r1, [r0, #4]
  409cd0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  409cd2:	685a      	ldr	r2, [r3, #4]
  409cd4:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  409cd6:	bf04      	itt	eq
  409cd8:	6882      	ldreq	r2, [r0, #8]
  409cda:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  409cdc:	2200      	movs	r2, #0
  409cde:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  409ce0:	681a      	ldr	r2, [r3, #0]
  409ce2:	3a01      	subs	r2, #1
  409ce4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  409ce6:	6818      	ldr	r0, [r3, #0]
}
  409ce8:	4770      	bx	lr
	...

00409cec <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
  409cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
  409cf0:	4b14      	ldr	r3, [pc, #80]	; (409d44 <xNetworkBuffersInitialise+0x58>)
  409cf2:	681b      	ldr	r3, [r3, #0]
  409cf4:	b133      	cbz	r3, 409d04 <xNetworkBuffersInitialise+0x18>

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
		}
	}

	if( xNetworkBufferSemaphore == NULL )
  409cf6:	4b13      	ldr	r3, [pc, #76]	; (409d44 <xNetworkBuffersInitialise+0x58>)
  409cf8:	6818      	ldr	r0, [r3, #0]
	{
		xReturn = pdPASS;
	}

	return xReturn;
}
  409cfa:	3000      	adds	r0, #0
  409cfc:	bf18      	it	ne
  409cfe:	2001      	movne	r0, #1
  409d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
  409d04:	213c      	movs	r1, #60	; 0x3c
  409d06:	4608      	mov	r0, r1
  409d08:	4b0f      	ldr	r3, [pc, #60]	; (409d48 <xNetworkBuffersInitialise+0x5c>)
  409d0a:	4798      	blx	r3
  409d0c:	4b0d      	ldr	r3, [pc, #52]	; (409d44 <xNetworkBuffersInitialise+0x58>)
  409d0e:	6018      	str	r0, [r3, #0]
		if( xNetworkBufferSemaphore != NULL )
  409d10:	2800      	cmp	r0, #0
  409d12:	d0f0      	beq.n	409cf6 <xNetworkBuffersInitialise+0xa>
			vListInitialise( &xFreeBuffersList );
  409d14:	480d      	ldr	r0, [pc, #52]	; (409d4c <xNetworkBuffersInitialise+0x60>)
  409d16:	4b0e      	ldr	r3, [pc, #56]	; (409d50 <xNetworkBuffersInitialise+0x64>)
  409d18:	4798      	blx	r3
  409d1a:	4c0e      	ldr	r4, [pc, #56]	; (409d54 <xNetworkBuffersInitialise+0x68>)
  409d1c:	f504 6807 	add.w	r8, r4, #2160	; 0x870
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
  409d20:	4f0d      	ldr	r7, [pc, #52]	; (409d58 <xNetworkBuffersInitialise+0x6c>)
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
  409d22:	4e0a      	ldr	r6, [pc, #40]	; (409d4c <xNetworkBuffersInitialise+0x60>)
  409d24:	4d0d      	ldr	r5, [pc, #52]	; (409d5c <xNetworkBuffersInitialise+0x70>)
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
  409d26:	2300      	movs	r3, #0
  409d28:	61a3      	str	r3, [r4, #24]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
  409d2a:	4620      	mov	r0, r4
  409d2c:	47b8      	blx	r7
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
  409d2e:	60e4      	str	r4, [r4, #12]
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
  409d30:	4621      	mov	r1, r4
  409d32:	4630      	mov	r0, r6
  409d34:	47a8      	blx	r5
  409d36:	3424      	adds	r4, #36	; 0x24
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
  409d38:	4544      	cmp	r4, r8
  409d3a:	d1f4      	bne.n	409d26 <xNetworkBuffersInitialise+0x3a>
			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
  409d3c:	223c      	movs	r2, #60	; 0x3c
  409d3e:	4b08      	ldr	r3, [pc, #32]	; (409d60 <xNetworkBuffersInitialise+0x74>)
  409d40:	601a      	str	r2, [r3, #0]
  409d42:	e7d8      	b.n	409cf6 <xNetworkBuffersInitialise+0xa>
  409d44:	20007610 	.word	0x20007610
  409d48:	0040adc1 	.word	0x0040adc1
  409d4c:	20006d8c 	.word	0x20006d8c
  409d50:	00409c5d 	.word	0x00409c5d
  409d54:	20006da0 	.word	0x20006da0
  409d58:	00409c73 	.word	0x00409c73
  409d5c:	00409c91 	.word	0x00409c91
  409d60:	20006d88 	.word	0x20006d88

00409d64 <vReleaseNetworkBuffer>:
void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
  409d64:	b120      	cbz	r0, 409d70 <vReleaseNetworkBuffer+0xc>
{
  409d66:	b508      	push	{r3, lr}
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
		vPortFree( ( void * ) pucEthernetBuffer );
  409d68:	380a      	subs	r0, #10
  409d6a:	4b02      	ldr	r3, [pc, #8]	; (409d74 <vReleaseNetworkBuffer+0x10>)
  409d6c:	4798      	blx	r3
  409d6e:	bd08      	pop	{r3, pc}
  409d70:	4770      	bx	lr
  409d72:	bf00      	nop
  409d74:	0040a1b9 	.word	0x0040a1b9

00409d78 <vReleaseNetworkBufferAndDescriptor>:
	return pxReturn;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
  409d78:	b510      	push	{r4, lr}
  409d7a:	4604      	mov	r4, r0
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
  409d7c:	6980      	ldr	r0, [r0, #24]
  409d7e:	4b0d      	ldr	r3, [pc, #52]	; (409db4 <vReleaseNetworkBufferAndDescriptor+0x3c>)
  409d80:	4798      	blx	r3
	pxNetworkBuffer->pucEthernetBuffer = NULL;
  409d82:	2300      	movs	r3, #0
  409d84:	61a3      	str	r3, [r4, #24]

	taskENTER_CRITICAL();
  409d86:	4b0c      	ldr	r3, [pc, #48]	; (409db8 <vReleaseNetworkBufferAndDescriptor+0x40>)
  409d88:	4798      	blx	r3
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );

		if( xListItemAlreadyInFreeList == pdFALSE )
  409d8a:	6922      	ldr	r2, [r4, #16]
  409d8c:	4b0b      	ldr	r3, [pc, #44]	; (409dbc <vReleaseNetworkBufferAndDescriptor+0x44>)
  409d8e:	429a      	cmp	r2, r3
  409d90:	d00d      	beq.n	409dae <vReleaseNetworkBufferAndDescriptor+0x36>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
  409d92:	4621      	mov	r1, r4
  409d94:	4618      	mov	r0, r3
  409d96:	4b0a      	ldr	r3, [pc, #40]	; (409dc0 <vReleaseNetworkBufferAndDescriptor+0x48>)
  409d98:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  409d9a:	4b0a      	ldr	r3, [pc, #40]	; (409dc4 <vReleaseNetworkBufferAndDescriptor+0x4c>)
  409d9c:	4798      	blx	r3
	 * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
	 * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
	 */
	if( xListItemAlreadyInFreeList == pdFALSE )
	{
		if ( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
  409d9e:	2300      	movs	r3, #0
  409da0:	461a      	mov	r2, r3
  409da2:	4619      	mov	r1, r3
  409da4:	4808      	ldr	r0, [pc, #32]	; (409dc8 <vReleaseNetworkBufferAndDescriptor+0x50>)
  409da6:	6800      	ldr	r0, [r0, #0]
  409da8:	4c08      	ldr	r4, [pc, #32]	; (409dcc <vReleaseNetworkBufferAndDescriptor+0x54>)
  409daa:	47a0      	blx	r4
	}
	else
	{
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
  409dac:	bd10      	pop	{r4, pc}
	taskEXIT_CRITICAL();
  409dae:	4b05      	ldr	r3, [pc, #20]	; (409dc4 <vReleaseNetworkBufferAndDescriptor+0x4c>)
  409db0:	4798      	blx	r3
  409db2:	bd10      	pop	{r4, pc}
  409db4:	00409d65 	.word	0x00409d65
  409db8:	00409f15 	.word	0x00409f15
  409dbc:	20006d8c 	.word	0x20006d8c
  409dc0:	00409c79 	.word	0x00409c79
  409dc4:	00409f35 	.word	0x00409f35
  409dc8:	20007610 	.word	0x20007610
  409dcc:	0040addd 	.word	0x0040addd

00409dd0 <pxGetNetworkBufferWithDescriptor>:
{
  409dd0:	b570      	push	{r4, r5, r6, lr}
	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
  409dd2:	1e43      	subs	r3, r0, #1
  409dd4:	2b44      	cmp	r3, #68	; 0x44
  409dd6:	d92a      	bls.n	409e2e <pxGetNetworkBufferWithDescriptor+0x5e>
	xRequestedSizeBytes += 2u;
  409dd8:	1c84      	adds	r4, r0, #2
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
  409dda:	f014 0f03 	tst.w	r4, #3
  409dde:	d002      	beq.n	409de6 <pxGetNetworkBufferWithDescriptor+0x16>
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
  409de0:	f044 0403 	orr.w	r4, r4, #3
  409de4:	3401      	adds	r4, #1
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
  409de6:	4b17      	ldr	r3, [pc, #92]	; (409e44 <pxGetNetworkBufferWithDescriptor+0x74>)
  409de8:	6818      	ldr	r0, [r3, #0]
  409dea:	4b17      	ldr	r3, [pc, #92]	; (409e48 <pxGetNetworkBufferWithDescriptor+0x78>)
  409dec:	4798      	blx	r3
  409dee:	2801      	cmp	r0, #1
  409df0:	d124      	bne.n	409e3c <pxGetNetworkBufferWithDescriptor+0x6c>
		taskENTER_CRITICAL();
  409df2:	4b16      	ldr	r3, [pc, #88]	; (409e4c <pxGetNetworkBufferWithDescriptor+0x7c>)
  409df4:	4798      	blx	r3
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
  409df6:	4e16      	ldr	r6, [pc, #88]	; (409e50 <pxGetNetworkBufferWithDescriptor+0x80>)
  409df8:	68f3      	ldr	r3, [r6, #12]
  409dfa:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxReturn->xBufferListItem ) );
  409dfc:	4628      	mov	r0, r5
  409dfe:	4b15      	ldr	r3, [pc, #84]	; (409e54 <pxGetNetworkBufferWithDescriptor+0x84>)
  409e00:	4798      	blx	r3
		taskEXIT_CRITICAL();
  409e02:	4b15      	ldr	r3, [pc, #84]	; (409e58 <pxGetNetworkBufferWithDescriptor+0x88>)
  409e04:	4798      	blx	r3
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
  409e06:	6833      	ldr	r3, [r6, #0]
		if( uxMinimumFreeNetworkBuffers > uxCount )
  409e08:	4a14      	ldr	r2, [pc, #80]	; (409e5c <pxGetNetworkBufferWithDescriptor+0x8c>)
  409e0a:	6812      	ldr	r2, [r2, #0]
  409e0c:	4293      	cmp	r3, r2
			uxMinimumFreeNetworkBuffers = uxCount;
  409e0e:	bf3c      	itt	cc
  409e10:	4a12      	ldrcc	r2, [pc, #72]	; (409e5c <pxGetNetworkBufferWithDescriptor+0x8c>)
  409e12:	6013      	strcc	r3, [r2, #0]
		if( xRequestedSizeBytes > 0 )
  409e14:	b19c      	cbz	r4, 409e3e <pxGetNetworkBufferWithDescriptor+0x6e>
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
  409e16:	f104 000a 	add.w	r0, r4, #10
  409e1a:	4b11      	ldr	r3, [pc, #68]	; (409e60 <pxGetNetworkBufferWithDescriptor+0x90>)
  409e1c:	4798      	blx	r3
  409e1e:	61a8      	str	r0, [r5, #24]
			if( pxReturn->pucEthernetBuffer == NULL )
  409e20:	b138      	cbz	r0, 409e32 <pxGetNetworkBufferWithDescriptor+0x62>
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
  409e22:	6005      	str	r5, [r0, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
  409e24:	69ab      	ldr	r3, [r5, #24]
  409e26:	330a      	adds	r3, #10
  409e28:	61ab      	str	r3, [r5, #24]
				pxReturn->xDataLength = xRequestedSizeBytes;
  409e2a:	61ec      	str	r4, [r5, #28]
  409e2c:	e007      	b.n	409e3e <pxGetNetworkBufferWithDescriptor+0x6e>
	xRequestedSizeBytes += 2u;
  409e2e:	2448      	movs	r4, #72	; 0x48
  409e30:	e7d9      	b.n	409de6 <pxGetNetworkBufferWithDescriptor+0x16>
				vReleaseNetworkBufferAndDescriptor( pxReturn );
  409e32:	4628      	mov	r0, r5
  409e34:	4b0b      	ldr	r3, [pc, #44]	; (409e64 <pxGetNetworkBufferWithDescriptor+0x94>)
  409e36:	4798      	blx	r3
				pxReturn = NULL;
  409e38:	2500      	movs	r5, #0
  409e3a:	e000      	b.n	409e3e <pxGetNetworkBufferWithDescriptor+0x6e>
NetworkBufferDescriptor_t *pxReturn = NULL;
  409e3c:	2500      	movs	r5, #0
}
  409e3e:	4628      	mov	r0, r5
  409e40:	bd70      	pop	{r4, r5, r6, pc}
  409e42:	bf00      	nop
  409e44:	20007610 	.word	0x20007610
  409e48:	0040b14d 	.word	0x0040b14d
  409e4c:	00409f15 	.word	0x00409f15
  409e50:	20006d8c 	.word	0x20006d8c
  409e54:	00409cc5 	.word	0x00409cc5
  409e58:	00409f35 	.word	0x00409f35
  409e5c:	20006d88 	.word	0x20006d88
  409e60:	0040a0a1 	.word	0x0040a0a1
  409e64:	00409d79 	.word	0x00409d79

00409e68 <uxGetNumberOfFreeNetworkBuffers>:
/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
  409e68:	4b01      	ldr	r3, [pc, #4]	; (409e70 <uxGetNumberOfFreeNetworkBuffers+0x8>)
  409e6a:	6818      	ldr	r0, [r3, #0]
}
  409e6c:	4770      	bx	lr
  409e6e:	bf00      	nop
  409e70:	20006d8c 	.word	0x20006d8c

00409e74 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
	return uxMinimumFreeNetworkBuffers;
}
  409e74:	4b01      	ldr	r3, [pc, #4]	; (409e7c <uxGetMinimumFreeNetworkBuffers+0x8>)
  409e76:	6818      	ldr	r0, [r3, #0]
  409e78:	4770      	bx	lr
  409e7a:	bf00      	nop
  409e7c:	20006d88 	.word	0x20006d88

00409e80 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  409e80:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
  409e82:	2300      	movs	r3, #0
  409e84:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  409e86:	f04f 0350 	mov.w	r3, #80	; 0x50
  409e8a:	f383 8811 	msr	BASEPRI, r3
  409e8e:	f3bf 8f6f 	isb	sy
  409e92:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  409e96:	9b01      	ldr	r3, [sp, #4]
  409e98:	2b00      	cmp	r3, #0
  409e9a:	d0fc      	beq.n	409e96 <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  409e9c:	b002      	add	sp, #8
  409e9e:	4770      	bx	lr

00409ea0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  409ea0:	4806      	ldr	r0, [pc, #24]	; (409ebc <prvPortStartFirstTask+0x1c>)
  409ea2:	6800      	ldr	r0, [r0, #0]
  409ea4:	6800      	ldr	r0, [r0, #0]
  409ea6:	f380 8808 	msr	MSP, r0
  409eaa:	b662      	cpsie	i
  409eac:	b661      	cpsie	f
  409eae:	f3bf 8f4f 	dsb	sy
  409eb2:	f3bf 8f6f 	isb	sy
  409eb6:	df00      	svc	0
  409eb8:	bf00      	nop
  409eba:	0000      	.short	0x0000
  409ebc:	e000ed08 	.word	0xe000ed08

00409ec0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  409ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  409ec4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  409ec8:	f021 0101 	bic.w	r1, r1, #1
  409ecc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  409ed0:	4b03      	ldr	r3, [pc, #12]	; (409ee0 <pxPortInitialiseStack+0x20>)
  409ed2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  409ed6:	f840 2c20 	str.w	r2, [r0, #-32]
}
  409eda:	3840      	subs	r0, #64	; 0x40
  409edc:	4770      	bx	lr
  409ede:	bf00      	nop
  409ee0:	00409e81 	.word	0x00409e81
	...

00409ef0 <SVC_Handler>:
	__asm volatile (
  409ef0:	4b07      	ldr	r3, [pc, #28]	; (409f10 <pxCurrentTCBConst2>)
  409ef2:	6819      	ldr	r1, [r3, #0]
  409ef4:	6808      	ldr	r0, [r1, #0]
  409ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409efa:	f380 8809 	msr	PSP, r0
  409efe:	f3bf 8f6f 	isb	sy
  409f02:	f04f 0000 	mov.w	r0, #0
  409f06:	f380 8811 	msr	BASEPRI, r0
  409f0a:	f04e 0e0d 	orr.w	lr, lr, #13
  409f0e:	4770      	bx	lr

00409f10 <pxCurrentTCBConst2>:
  409f10:	20013318 	.word	0x20013318

00409f14 <vPortEnterCritical>:
  409f14:	f04f 0350 	mov.w	r3, #80	; 0x50
  409f18:	f383 8811 	msr	BASEPRI, r3
  409f1c:	f3bf 8f6f 	isb	sy
  409f20:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  409f24:	4a02      	ldr	r2, [pc, #8]	; (409f30 <vPortEnterCritical+0x1c>)
  409f26:	6813      	ldr	r3, [r2, #0]
  409f28:	3301      	adds	r3, #1
  409f2a:	6013      	str	r3, [r2, #0]
  409f2c:	4770      	bx	lr
  409f2e:	bf00      	nop
  409f30:	200000f0 	.word	0x200000f0

00409f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
  409f34:	4a03      	ldr	r2, [pc, #12]	; (409f44 <vPortExitCritical+0x10>)
  409f36:	6813      	ldr	r3, [r2, #0]
  409f38:	3b01      	subs	r3, #1
  409f3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  409f3c:	b90b      	cbnz	r3, 409f42 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  409f3e:	f383 8811 	msr	BASEPRI, r3
  409f42:	4770      	bx	lr
  409f44:	200000f0 	.word	0x200000f0
	...

00409f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  409f50:	f3ef 8009 	mrs	r0, PSP
  409f54:	f3bf 8f6f 	isb	sy
  409f58:	4b0d      	ldr	r3, [pc, #52]	; (409f90 <pxCurrentTCBConst>)
  409f5a:	681a      	ldr	r2, [r3, #0]
  409f5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409f60:	6010      	str	r0, [r2, #0]
  409f62:	e92d 4008 	stmdb	sp!, {r3, lr}
  409f66:	f04f 0050 	mov.w	r0, #80	; 0x50
  409f6a:	f380 8811 	msr	BASEPRI, r0
  409f6e:	f001 fc9f 	bl	40b8b0 <vTaskSwitchContext>
  409f72:	f04f 0000 	mov.w	r0, #0
  409f76:	f380 8811 	msr	BASEPRI, r0
  409f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  409f7e:	6819      	ldr	r1, [r3, #0]
  409f80:	6808      	ldr	r0, [r1, #0]
  409f82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409f86:	f380 8809 	msr	PSP, r0
  409f8a:	f3bf 8f6f 	isb	sy
  409f8e:	4770      	bx	lr

00409f90 <pxCurrentTCBConst>:
  409f90:	20013318 	.word	0x20013318

00409f94 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  409f94:	b508      	push	{r3, lr}
	__asm volatile
  409f96:	f04f 0350 	mov.w	r3, #80	; 0x50
  409f9a:	f383 8811 	msr	BASEPRI, r3
  409f9e:	f3bf 8f6f 	isb	sy
  409fa2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	{
		
		// MZ_TESTE
		extern uint8_t wMyTick1ms;
		wMyTick1ms++;
  409fa6:	4a08      	ldr	r2, [pc, #32]	; (409fc8 <SysTick_Handler+0x34>)
  409fa8:	7813      	ldrb	r3, [r2, #0]
  409faa:	3301      	adds	r3, #1
  409fac:	7013      	strb	r3, [r2, #0]
		extern void MyLedToggle(void);
		MyLedToggle();		// TIRAR DAQUI, CRIAR UMA TASK PARA GERENCIAR TICK/LED
  409fae:	4b07      	ldr	r3, [pc, #28]	; (409fcc <SysTick_Handler+0x38>)
  409fb0:	4798      	blx	r3
		// FIM DO MZ_TESTE
		
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  409fb2:	4b07      	ldr	r3, [pc, #28]	; (409fd0 <SysTick_Handler+0x3c>)
  409fb4:	4798      	blx	r3
  409fb6:	b118      	cbz	r0, 409fc0 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  409fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  409fbc:	4b05      	ldr	r3, [pc, #20]	; (409fd4 <SysTick_Handler+0x40>)
  409fbe:	601a      	str	r2, [r3, #0]
	__asm volatile
  409fc0:	2300      	movs	r3, #0
  409fc2:	f383 8811 	msr	BASEPRI, r3
  409fc6:	bd08      	pop	{r3, pc}
  409fc8:	200133fc 	.word	0x200133fc
  409fcc:	0040bfa9 	.word	0x0040bfa9
  409fd0:	0040b655 	.word	0x0040b655
  409fd4:	e000ed04 	.word	0xe000ed04

00409fd8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  409fd8:	4b05      	ldr	r3, [pc, #20]	; (409ff0 <vPortSetupTimerInterrupt+0x18>)
  409fda:	2200      	movs	r2, #0
  409fdc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  409fde:	4905      	ldr	r1, [pc, #20]	; (409ff4 <vPortSetupTimerInterrupt+0x1c>)
  409fe0:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  409fe2:	4905      	ldr	r1, [pc, #20]	; (409ff8 <vPortSetupTimerInterrupt+0x20>)
  409fe4:	4a05      	ldr	r2, [pc, #20]	; (409ffc <vPortSetupTimerInterrupt+0x24>)
  409fe6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  409fe8:	2207      	movs	r2, #7
  409fea:	601a      	str	r2, [r3, #0]
  409fec:	4770      	bx	lr
  409fee:	bf00      	nop
  409ff0:	e000e010 	.word	0xe000e010
  409ff4:	e000e018 	.word	0xe000e018
  409ff8:	0001d4bf 	.word	0x0001d4bf
  409ffc:	e000e014 	.word	0xe000e014

0040a000 <xPortStartScheduler>:
{
  40a000:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40a002:	4b0b      	ldr	r3, [pc, #44]	; (40a030 <xPortStartScheduler+0x30>)
  40a004:	681a      	ldr	r2, [r3, #0]
  40a006:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  40a00a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40a00c:	681a      	ldr	r2, [r3, #0]
  40a00e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  40a012:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40a014:	4b07      	ldr	r3, [pc, #28]	; (40a034 <xPortStartScheduler+0x34>)
  40a016:	4798      	blx	r3
	uxCriticalNesting = 0;
  40a018:	2400      	movs	r4, #0
  40a01a:	4b07      	ldr	r3, [pc, #28]	; (40a038 <xPortStartScheduler+0x38>)
  40a01c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
  40a01e:	4b07      	ldr	r3, [pc, #28]	; (40a03c <xPortStartScheduler+0x3c>)
  40a020:	4798      	blx	r3
	vTaskSwitchContext();
  40a022:	4b07      	ldr	r3, [pc, #28]	; (40a040 <xPortStartScheduler+0x40>)
  40a024:	4798      	blx	r3
	prvTaskExitError();
  40a026:	4b07      	ldr	r3, [pc, #28]	; (40a044 <xPortStartScheduler+0x44>)
  40a028:	4798      	blx	r3
}
  40a02a:	4620      	mov	r0, r4
  40a02c:	bd10      	pop	{r4, pc}
  40a02e:	bf00      	nop
  40a030:	e000ed20 	.word	0xe000ed20
  40a034:	00409fd9 	.word	0x00409fd9
  40a038:	200000f0 	.word	0x200000f0
  40a03c:	00409ea1 	.word	0x00409ea1
  40a040:	0040b8b1 	.word	0x0040b8b1
  40a044:	00409e81 	.word	0x00409e81

0040a048 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  40a048:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40a04a:	4a13      	ldr	r2, [pc, #76]	; (40a098 <prvInsertBlockIntoFreeList+0x50>)
  40a04c:	e000      	b.n	40a050 <prvInsertBlockIntoFreeList+0x8>
  40a04e:	461a      	mov	r2, r3
  40a050:	6813      	ldr	r3, [r2, #0]
  40a052:	4283      	cmp	r3, r0
  40a054:	d3fb      	bcc.n	40a04e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40a056:	6851      	ldr	r1, [r2, #4]
  40a058:	1854      	adds	r4, r2, r1
  40a05a:	42a0      	cmp	r0, r4
  40a05c:	d00a      	beq.n	40a074 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40a05e:	6841      	ldr	r1, [r0, #4]
  40a060:	1844      	adds	r4, r0, r1
  40a062:	42a3      	cmp	r3, r4
  40a064:	d00b      	beq.n	40a07e <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40a066:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  40a068:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40a06a:	bf18      	it	ne
  40a06c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  40a06e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a072:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  40a074:	6840      	ldr	r0, [r0, #4]
  40a076:	4401      	add	r1, r0
  40a078:	6051      	str	r1, [r2, #4]
  40a07a:	4610      	mov	r0, r2
  40a07c:	e7ef      	b.n	40a05e <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  40a07e:	4c07      	ldr	r4, [pc, #28]	; (40a09c <prvInsertBlockIntoFreeList+0x54>)
  40a080:	6824      	ldr	r4, [r4, #0]
  40a082:	42a3      	cmp	r3, r4
  40a084:	d006      	beq.n	40a094 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40a086:	685b      	ldr	r3, [r3, #4]
  40a088:	4419      	add	r1, r3
  40a08a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  40a08c:	6813      	ldr	r3, [r2, #0]
  40a08e:	681b      	ldr	r3, [r3, #0]
  40a090:	6003      	str	r3, [r0, #0]
  40a092:	e7e9      	b.n	40a068 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40a094:	6003      	str	r3, [r0, #0]
  40a096:	e7e7      	b.n	40a068 <prvInsertBlockIntoFreeList+0x20>
  40a098:	2000f624 	.word	0x2000f624
  40a09c:	20007614 	.word	0x20007614

0040a0a0 <pvPortMalloc>:
{
  40a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a0a2:	4604      	mov	r4, r0
	vTaskSuspendAll();
  40a0a4:	4b3b      	ldr	r3, [pc, #236]	; (40a194 <pvPortMalloc+0xf4>)
  40a0a6:	4798      	blx	r3
		if( pxEnd == NULL )
  40a0a8:	4b3b      	ldr	r3, [pc, #236]	; (40a198 <pvPortMalloc+0xf8>)
  40a0aa:	681b      	ldr	r3, [r3, #0]
  40a0ac:	b1b3      	cbz	r3, 40a0dc <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  40a0ae:	4b3b      	ldr	r3, [pc, #236]	; (40a19c <pvPortMalloc+0xfc>)
  40a0b0:	681d      	ldr	r5, [r3, #0]
  40a0b2:	4225      	tst	r5, r4
  40a0b4:	d164      	bne.n	40a180 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
  40a0b6:	2c00      	cmp	r4, #0
  40a0b8:	d064      	beq.n	40a184 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
  40a0ba:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  40a0be:	f012 0f07 	tst.w	r2, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40a0c2:	bf1c      	itt	ne
  40a0c4:	f022 0207 	bicne.w	r2, r2, #7
  40a0c8:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  40a0ca:	2a00      	cmp	r2, #0
  40a0cc:	d05c      	beq.n	40a188 <pvPortMalloc+0xe8>
  40a0ce:	4b34      	ldr	r3, [pc, #208]	; (40a1a0 <pvPortMalloc+0x100>)
  40a0d0:	681e      	ldr	r6, [r3, #0]
  40a0d2:	42b2      	cmp	r2, r6
  40a0d4:	d85a      	bhi.n	40a18c <pvPortMalloc+0xec>
				pxBlock = xStart.pxNextFreeBlock;
  40a0d6:	4933      	ldr	r1, [pc, #204]	; (40a1a4 <pvPortMalloc+0x104>)
  40a0d8:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40a0da:	e027      	b.n	40a12c <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
  40a0dc:	4a32      	ldr	r2, [pc, #200]	; (40a1a8 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  40a0de:	f012 0f07 	tst.w	r2, #7
  40a0e2:	d01e      	beq.n	40a122 <pvPortMalloc+0x82>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  40a0e4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  40a0e6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  40a0ea:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
  40a0ee:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  40a0f0:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  40a0f2:	482c      	ldr	r0, [pc, #176]	; (40a1a4 <pvPortMalloc+0x104>)
  40a0f4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40a0f6:	2100      	movs	r1, #0
  40a0f8:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  40a0fa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
  40a0fc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  40a0fe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
  40a102:	4825      	ldr	r0, [pc, #148]	; (40a198 <pvPortMalloc+0xf8>)
  40a104:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
  40a106:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  40a108:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  40a10a:	1a99      	subs	r1, r3, r2
  40a10c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  40a10e:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  40a110:	4b26      	ldr	r3, [pc, #152]	; (40a1ac <pvPortMalloc+0x10c>)
  40a112:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  40a114:	4b22      	ldr	r3, [pc, #136]	; (40a1a0 <pvPortMalloc+0x100>)
  40a116:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  40a118:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40a11c:	4b1f      	ldr	r3, [pc, #124]	; (40a19c <pvPortMalloc+0xfc>)
  40a11e:	601a      	str	r2, [r3, #0]
  40a120:	e7c5      	b.n	40a0ae <pvPortMalloc+0xe>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  40a122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a126:	e7e4      	b.n	40a0f2 <pvPortMalloc+0x52>
  40a128:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
  40a12a:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40a12c:	6863      	ldr	r3, [r4, #4]
  40a12e:	429a      	cmp	r2, r3
  40a130:	d902      	bls.n	40a138 <pvPortMalloc+0x98>
  40a132:	6823      	ldr	r3, [r4, #0]
  40a134:	2b00      	cmp	r3, #0
  40a136:	d1f7      	bne.n	40a128 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
  40a138:	4b17      	ldr	r3, [pc, #92]	; (40a198 <pvPortMalloc+0xf8>)
  40a13a:	681b      	ldr	r3, [r3, #0]
  40a13c:	429c      	cmp	r4, r3
  40a13e:	d027      	beq.n	40a190 <pvPortMalloc+0xf0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40a140:	680f      	ldr	r7, [r1, #0]
  40a142:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40a144:	6823      	ldr	r3, [r4, #0]
  40a146:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  40a148:	6863      	ldr	r3, [r4, #4]
  40a14a:	1a9b      	subs	r3, r3, r2
  40a14c:	2b10      	cmp	r3, #16
  40a14e:	d811      	bhi.n	40a174 <pvPortMalloc+0xd4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
  40a150:	6862      	ldr	r2, [r4, #4]
  40a152:	1ab6      	subs	r6, r6, r2
  40a154:	4912      	ldr	r1, [pc, #72]	; (40a1a0 <pvPortMalloc+0x100>)
  40a156:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  40a158:	4914      	ldr	r1, [pc, #80]	; (40a1ac <pvPortMalloc+0x10c>)
  40a15a:	6809      	ldr	r1, [r1, #0]
  40a15c:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  40a15e:	bf3c      	itt	cc
  40a160:	4912      	ldrcc	r1, [pc, #72]	; (40a1ac <pvPortMalloc+0x10c>)
  40a162:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  40a164:	4315      	orrs	r5, r2
  40a166:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  40a168:	2300      	movs	r3, #0
  40a16a:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
  40a16c:	4b10      	ldr	r3, [pc, #64]	; (40a1b0 <pvPortMalloc+0x110>)
  40a16e:	4798      	blx	r3
}
  40a170:	4638      	mov	r0, r7
  40a172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40a174:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40a176:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  40a178:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
  40a17a:	4b0e      	ldr	r3, [pc, #56]	; (40a1b4 <pvPortMalloc+0x114>)
  40a17c:	4798      	blx	r3
  40a17e:	e7e7      	b.n	40a150 <pvPortMalloc+0xb0>
void *pvReturn = NULL;
  40a180:	2700      	movs	r7, #0
  40a182:	e7f3      	b.n	40a16c <pvPortMalloc+0xcc>
  40a184:	2700      	movs	r7, #0
  40a186:	e7f1      	b.n	40a16c <pvPortMalloc+0xcc>
  40a188:	2700      	movs	r7, #0
  40a18a:	e7ef      	b.n	40a16c <pvPortMalloc+0xcc>
  40a18c:	2700      	movs	r7, #0
  40a18e:	e7ed      	b.n	40a16c <pvPortMalloc+0xcc>
  40a190:	2700      	movs	r7, #0
  40a192:	e7eb      	b.n	40a16c <pvPortMalloc+0xcc>
  40a194:	0040b639 	.word	0x0040b639
  40a198:	20007614 	.word	0x20007614
  40a19c:	2000f618 	.word	0x2000f618
  40a1a0:	2000f61c 	.word	0x2000f61c
  40a1a4:	2000f624 	.word	0x2000f624
  40a1a8:	20007618 	.word	0x20007618
  40a1ac:	2000f620 	.word	0x2000f620
  40a1b0:	0040b775 	.word	0x0040b775
  40a1b4:	0040a049 	.word	0x0040a049

0040a1b8 <vPortFree>:
	if( pv != NULL )
  40a1b8:	b1f0      	cbz	r0, 40a1f8 <vPortFree+0x40>
{
  40a1ba:	b510      	push	{r4, lr}
  40a1bc:	4604      	mov	r4, r0
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  40a1be:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a1c2:	490e      	ldr	r1, [pc, #56]	; (40a1fc <vPortFree+0x44>)
  40a1c4:	6809      	ldr	r1, [r1, #0]
  40a1c6:	420a      	tst	r2, r1
  40a1c8:	d002      	beq.n	40a1d0 <vPortFree+0x18>
			if( pxLink->pxNextFreeBlock == NULL )
  40a1ca:	f850 0c08 	ldr.w	r0, [r0, #-8]
  40a1ce:	b100      	cbz	r0, 40a1d2 <vPortFree+0x1a>
  40a1d0:	bd10      	pop	{r4, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  40a1d2:	ea22 0201 	bic.w	r2, r2, r1
  40a1d6:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
  40a1da:	4b09      	ldr	r3, [pc, #36]	; (40a200 <vPortFree+0x48>)
  40a1dc:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
  40a1de:	4a09      	ldr	r2, [pc, #36]	; (40a204 <vPortFree+0x4c>)
  40a1e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a1e4:	6811      	ldr	r1, [r2, #0]
  40a1e6:	440b      	add	r3, r1
  40a1e8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  40a1ea:	f1a4 0008 	sub.w	r0, r4, #8
  40a1ee:	4b06      	ldr	r3, [pc, #24]	; (40a208 <vPortFree+0x50>)
  40a1f0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40a1f2:	4b06      	ldr	r3, [pc, #24]	; (40a20c <vPortFree+0x54>)
  40a1f4:	4798      	blx	r3
}
  40a1f6:	e7eb      	b.n	40a1d0 <vPortFree+0x18>
  40a1f8:	4770      	bx	lr
  40a1fa:	bf00      	nop
  40a1fc:	2000f618 	.word	0x2000f618
  40a200:	0040b639 	.word	0x0040b639
  40a204:	2000f61c 	.word	0x2000f61c
  40a208:	0040a049 	.word	0x0040a049
  40a20c:	0040b775 	.word	0x0040b775

0040a210 <gmac_reset_tx_mem>:
 *
 * \param p_dev Pointer to GMAC driver instance.
 *
 */
static void gmac_reset_tx_mem(gmac_device_t* p_dev)
{
  40a210:	b4f0      	push	{r4, r5, r6, r7}
	Gmac *p_hw = p_dev->p_hw;
  40a212:	6807      	ldr	r7, [r0, #0]
	uint8_t *p_tx_buff = p_dev->p_tx_buffer;
  40a214:	6842      	ldr	r2, [r0, #4]
	gmac_tx_descriptor_t *p_td = p_dev->p_tx_dscr;
  40a216:	6905      	ldr	r5, [r0, #16]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  40a218:	683b      	ldr	r3, [r7, #0]
  40a21a:	f023 0308 	bic.w	r3, r3, #8
  40a21e:	603b      	str	r3, [r7, #0]

	/* Disable TX */
	gmac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->l_tx_head, p_dev->l_tx_tail);
  40a220:	2300      	movs	r3, #0
  40a222:	6283      	str	r3, [r0, #40]	; 0x28
  40a224:	62c3      	str	r3, [r0, #44]	; 0x2c
	for( ul_index = 0; ul_index < p_dev->ul_tx_list_size; ul_index++ )
  40a226:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40a228:	b164      	cbz	r4, 40a244 <gmac_reset_tx_mem+0x34>
  40a22a:	4629      	mov	r1, r5
		{
			ul_address = (uint32_t) (&(p_tx_buff[ul_index * GMAC_TX_UNITSIZE]));
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40a22c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
		p_td[ul_index].addr = ul_address;
  40a230:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40a234:	604e      	str	r6, [r1, #4]
	for( ul_index = 0; ul_index < p_dev->ul_tx_list_size; ul_index++ )
  40a236:	3301      	adds	r3, #1
  40a238:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40a23a:	f202 52ee 	addw	r2, r2, #1518	; 0x5ee
  40a23e:	3108      	adds	r1, #8
  40a240:	429c      	cmp	r4, r3
  40a242:	d8f5      	bhi.n	40a230 <gmac_reset_tx_mem+0x20>
	}
	p_td[p_dev->ul_tx_list_size - 1].status.val =
  40a244:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  40a248:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  40a24c:	f844 3c04 	str.w	r3, [r4, #-4]
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  40a250:	f025 0503 	bic.w	r5, r5, #3
  40a254:	61fd      	str	r5, [r7, #28]
			GMAC_TXD_USED | GMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	gmac_set_tx_queue(p_hw, (uint32_t) p_td);
}
  40a256:	bcf0      	pop	{r4, r5, r6, r7}
  40a258:	4770      	bx	lr

0040a25a <gmac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_drv Pointer to GMAC Driver instance.
 */
static void gmac_reset_rx_mem(gmac_device_t* p_dev)
{
  40a25a:	b4f0      	push	{r4, r5, r6, r7}
	Gmac *p_hw = p_dev->p_hw;
  40a25c:	6807      	ldr	r7, [r0, #0]
	uint8_t *p_rx_buff = p_dev->p_rx_buffer;
  40a25e:	6882      	ldr	r2, [r0, #8]
	gmac_rx_descriptor_t *pRd = p_dev->p_rx_dscr;
  40a260:	68c5      	ldr	r5, [r0, #12]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  40a262:	683b      	ldr	r3, [r7, #0]
  40a264:	f023 0304 	bic.w	r3, r3, #4
  40a268:	603b      	str	r3, [r7, #0]

	/* Disable RX */
	gmac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->ul_rx_idx = 0;
  40a26a:	2300      	movs	r3, #0
  40a26c:	6203      	str	r3, [r0, #32]
	for( ul_index = 0; ul_index < p_dev->ul_rx_list_size; ul_index++ )
  40a26e:	69c4      	ldr	r4, [r0, #28]
  40a270:	b164      	cbz	r4, 40a28c <gmac_reset_rx_mem+0x32>
  40a272:	4629      	mov	r1, r5
	{
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * GMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
  40a274:	461e      	mov	r6, r3
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
  40a276:	f022 0403 	bic.w	r4, r2, #3
  40a27a:	f845 4033 	str.w	r4, [r5, r3, lsl #3]
		pRd[ul_index].status.val = 0;
  40a27e:	604e      	str	r6, [r1, #4]
	for( ul_index = 0; ul_index < p_dev->ul_rx_list_size; ul_index++ )
  40a280:	3301      	adds	r3, #1
  40a282:	69c4      	ldr	r4, [r0, #28]
  40a284:	3280      	adds	r2, #128	; 0x80
  40a286:	3108      	adds	r1, #8
  40a288:	429c      	cmp	r4, r3
  40a28a:	d8f4      	bhi.n	40a276 <gmac_reset_rx_mem+0x1c>
	}
	pRd[p_dev->ul_rx_list_size - 1].addr.val |= GMAC_RXD_WRAP;
  40a28c:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
  40a290:	3c01      	subs	r4, #1
  40a292:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
  40a296:	f043 0302 	orr.w	r3, r3, #2
  40a29a:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  40a29e:	f025 0503 	bic.w	r5, r5, #3
  40a2a2:	61bd      	str	r5, [r7, #24]

	/* Set receive buffer queue */
	gmac_set_rx_queue(p_hw, (uint32_t) pRd);
}
  40a2a4:	bcf0      	pop	{r4, r5, r6, r7}
  40a2a6:	4770      	bx	lr

0040a2a8 <gmac_dev_init>:
 * \param p_gmac_dev Pointer to the GMAC device instance.
 * \param p_opt GMAC configure options.
 */
void gmac_dev_init(Gmac* p_gmac, gmac_device_t* p_gmac_dev,
		gmac_options_t* p_opt)
{
  40a2a8:	b570      	push	{r4, r5, r6, lr}
  40a2aa:	4604      	mov	r4, r0
  40a2ac:	460d      	mov	r5, r1
  40a2ae:	4616      	mov	r6, r2
	p_gmac->GMAC_NCR = ul_ncr;
  40a2b0:	2300      	movs	r3, #0
  40a2b2:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_IDR = ul_source;
  40a2b4:	f04f 33ff 	mov.w	r3, #4294967295
  40a2b8:	62c3      	str	r3, [r0, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  40a2ba:	6803      	ldr	r3, [r0, #0]
  40a2bc:	f043 0320 	orr.w	r3, r3, #32
  40a2c0:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_RSR = ul_status;
  40a2c2:	2307      	movs	r3, #7
  40a2c4:	6203      	str	r3, [r0, #32]
	p_gmac->GMAC_TSR = ul_status;
  40a2c6:	2377      	movs	r3, #119	; 0x77
  40a2c8:	6143      	str	r3, [r0, #20]
	return p_gmac->GMAC_ISR;
  40a2ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return p_gmac->GMAC_NCFGR;
  40a2cc:	6843      	ldr	r3, [r0, #4]

	gmac_set_configure(p_gmac,
			( gmac_get_configure(p_gmac) & ~GMAC_NCFGR_RXBUFO_Msk ) |
			GMAC_NCFGR_RFCS |   /*  Remove FCS, frame check sequence (last 4 bytes) */
			GMAC_NCFGR_PEN |    /* Pause Enable */
			GMAC_NCFGR_RXBUFO( ETHERNET_CONF_DATA_OFFSET ) |
  40a2ce:	f023 7381 	bic.w	r3, r3, #16908288	; 0x1020000
  40a2d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
	gmac_set_configure(p_gmac,
  40a2d6:	f043 7381 	orr.w	r3, r3, #16908288	; 0x1020000
  40a2da:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
	p_gmac->GMAC_NCFGR = ul_cfg;
  40a2de:	6043      	str	r3, [r0, #4]
	return p_gmac->GMAC_DCFGR;
  40a2e0:	6903      	ldr	r3, [r0, #16]
	 * Note: tha SAM4E does have RX checksum offloading
	 * but TX checksum offloading has NOT been implemented.
	 * http://community.atmel.com/forum/sam4e-gmac-transmit-checksum-offload-enablesolved
	 */

	gmac_set_dma(p_gmac,
  40a2e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	p_gmac->GMAC_DCFGR = ul_cfg;
  40a2e6:	6103      	str	r3, [r0, #16]
	if (uc_enable) {
  40a2e8:	7813      	ldrb	r3, [r2, #0]
  40a2ea:	2b00      	cmp	r3, #0
  40a2ec:	d048      	beq.n	40a380 <gmac_dev_init+0xd8>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  40a2ee:	6843      	ldr	r3, [r0, #4]
  40a2f0:	f043 0310 	orr.w	r3, r3, #16
  40a2f4:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  40a2f6:	7873      	ldrb	r3, [r6, #1]
  40a2f8:	2b00      	cmp	r3, #0
  40a2fa:	d146      	bne.n	40a38a <gmac_dev_init+0xe2>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  40a2fc:	6863      	ldr	r3, [r4, #4]
  40a2fe:	f023 0320 	bic.w	r3, r3, #32
  40a302:	6063      	str	r3, [r4, #4]
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
  40a304:	4b23      	ldr	r3, [pc, #140]	; (40a394 <gmac_dev_init+0xec>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
  40a306:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_dev->p_rx_buffer =
  40a30a:	60ab      	str	r3, [r5, #8]
			(gmac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr
  40a30c:	4b22      	ldr	r3, [pc, #136]	; (40a398 <gmac_dev_init+0xf0>)
			& 0xFFFFFFF8);
  40a30e:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_dev->p_rx_dscr =
  40a312:	60eb      	str	r3, [r5, #12]
	p_gmac_dev->ul_rx_list_size = p_dev_mm->us_rx_size;
  40a314:	2318      	movs	r3, #24
  40a316:	61eb      	str	r3, [r5, #28]
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
  40a318:	4b20      	ldr	r3, [pc, #128]	; (40a39c <gmac_dev_init+0xf4>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
  40a31a:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_dev->p_tx_buffer =
  40a31e:	606b      	str	r3, [r5, #4]
			(gmac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr
  40a320:	4b1f      	ldr	r3, [pc, #124]	; (40a3a0 <gmac_dev_init+0xf8>)
			& 0xFFFFFFF8);
  40a322:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_dev->p_tx_dscr =
  40a326:	612b      	str	r3, [r5, #16]
	p_gmac_dev->ul_tx_list_size = p_dev_mm->us_tx_size;
  40a328:	2308      	movs	r3, #8
  40a32a:	626b      	str	r3, [r5, #36]	; 0x24
	p_gmac_dev->func_tx_cb_list = p_tx_cb;
  40a32c:	4b1d      	ldr	r3, [pc, #116]	; (40a3a4 <gmac_dev_init+0xfc>)
  40a32e:	61ab      	str	r3, [r5, #24]
	gmac_reset_rx_mem(p_gmac_dev);
  40a330:	4628      	mov	r0, r5
  40a332:	4b1d      	ldr	r3, [pc, #116]	; (40a3a8 <gmac_dev_init+0x100>)
  40a334:	4798      	blx	r3
	gmac_reset_tx_mem(p_gmac_dev);
  40a336:	4628      	mov	r0, r5
  40a338:	4b1c      	ldr	r3, [pc, #112]	; (40a3ac <gmac_dev_init+0x104>)
  40a33a:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  40a33c:	6823      	ldr	r3, [r4, #0]
  40a33e:	f043 0308 	orr.w	r3, r3, #8
  40a342:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40a344:	6823      	ldr	r3, [r4, #0]
  40a346:	f043 0304 	orr.w	r3, r3, #4
  40a34a:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  40a34c:	6823      	ldr	r3, [r4, #0]
  40a34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a352:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  40a354:	f643 43f4 	movw	r3, #15604	; 0x3cf4
  40a358:	62a3      	str	r3, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40a35a:	7972      	ldrb	r2, [r6, #5]
			| (p_mac_addr[2] << 16)
  40a35c:	7933      	ldrb	r3, [r6, #4]
  40a35e:	041b      	lsls	r3, r3, #16
  40a360:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  40a364:	78b2      	ldrb	r2, [r6, #2]
  40a366:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  40a368:	78f2      	ldrb	r2, [r6, #3]
			| (p_mac_addr[0]);
  40a36a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40a36e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40a372:	79f2      	ldrb	r2, [r6, #7]
			| (p_mac_addr[4]);
  40a374:	79b3      	ldrb	r3, [r6, #6]
  40a376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40a37a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  40a37e:	bd70      	pop	{r4, r5, r6, pc}
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  40a380:	6843      	ldr	r3, [r0, #4]
  40a382:	f023 0310 	bic.w	r3, r3, #16
  40a386:	6043      	str	r3, [r0, #4]
  40a388:	e7b5      	b.n	40a2f6 <gmac_dev_init+0x4e>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  40a38a:	6863      	ldr	r3, [r4, #4]
  40a38c:	f043 0320 	orr.w	r3, r3, #32
  40a390:	6063      	str	r3, [r4, #4]
  40a392:	e7b7      	b.n	40a304 <gmac_dev_init+0x5c>
  40a394:	2000f750 	.word	0x2000f750
  40a398:	2000f630 	.word	0x2000f630
  40a39c:	20010350 	.word	0x20010350
  40a3a0:	2000f710 	.word	0x2000f710
  40a3a4:	2000f6f0 	.word	0x2000f6f0
  40a3a8:	0040a25b 	.word	0x0040a25b
  40a3ac:	0040a211 	.word	0x0040a211

0040a3b0 <gmac_dev_read>:
 *
 * \return GMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t gmac_dev_read(gmac_device_t* p_gmac_dev, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
  40a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int32_t ulIndex = p_gmac_dev->ul_rx_idx;
  40a3b4:	6a07      	ldr	r7, [r0, #32]
	gmac_rx_descriptor_t *pxHead = &p_gmac_dev->p_rx_dscr[ulIndex];
  40a3b6:	68c4      	ldr	r4, [r0, #12]
  40a3b8:	eb04 05c7 	add.w	r5, r4, r7, lsl #3
	while ((pxHead->addr.val & GMAC_RXD_OWNERSHIP) &&
  40a3bc:	f854 4037 	ldr.w	r4, [r4, r7, lsl #3]
  40a3c0:	f014 0f01 	tst.w	r4, #1
  40a3c4:	f000 8091 	beq.w	40a4ea <gmac_dev_read+0x13a>
  40a3c8:	469e      	mov	lr, r3
			(pxHead->status.val & GMAC_RXD_SOF) == 0) {
  40a3ca:	686e      	ldr	r6, [r5, #4]
	while ((pxHead->addr.val & GMAC_RXD_OWNERSHIP) &&
  40a3cc:	f416 4f80 	tst.w	r6, #16384	; 0x4000
  40a3d0:	d114      	bne.n	40a3fc <gmac_dev_read+0x4c>
		pxHead->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40a3d2:	f024 0401 	bic.w	r4, r4, #1
  40a3d6:	602c      	str	r4, [r5, #0]
	( *lHeadOrTail ) ++;
  40a3d8:	3701      	adds	r7, #1
    if( ( *lHeadOrTail ) >= ( int32_t )ulSize )
  40a3da:	69c4      	ldr	r4, [r0, #28]
		( *lHeadOrTail ) = 0;
  40a3dc:	42a7      	cmp	r7, r4
  40a3de:	bfa8      	it	ge
  40a3e0:	2700      	movge	r7, #0
		pxHead = &p_gmac_dev->p_rx_dscr[ulIndex];
  40a3e2:	68c4      	ldr	r4, [r0, #12]
  40a3e4:	eb04 05c7 	add.w	r5, r4, r7, lsl #3
		p_gmac_dev->ul_rx_idx = ulIndex;
  40a3e8:	6207      	str	r7, [r0, #32]
	while ((pxHead->addr.val & GMAC_RXD_OWNERSHIP) &&
  40a3ea:	f854 4037 	ldr.w	r4, [r4, r7, lsl #3]
  40a3ee:	f014 0f01 	tst.w	r4, #1
  40a3f2:	d07a      	beq.n	40a4ea <gmac_dev_read+0x13a>
			(pxHead->status.val & GMAC_RXD_SOF) == 0) {
  40a3f4:	686e      	ldr	r6, [r5, #4]
	while ((pxHead->addr.val & GMAC_RXD_OWNERSHIP) &&
  40a3f6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
  40a3fa:	d0ea      	beq.n	40a3d2 <gmac_dev_read+0x22>
	while ((pxHead->addr.val & GMAC_RXD_OWNERSHIP) != 0) {
  40a3fc:	682c      	ldr	r4, [r5, #0]
  40a3fe:	f014 0f01 	tst.w	r4, #1
  40a402:	d063      	beq.n	40a4cc <gmac_dev_read+0x11c>
		if ((pxHead->status.val & GMAC_RXD_EOF) != 0) {
  40a404:	686c      	ldr	r4, [r5, #4]
  40a406:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  40a40a:	d124      	bne.n	40a456 <gmac_dev_read+0xa6>
	( *lHeadOrTail ) ++;
  40a40c:	3701      	adds	r7, #1
    if( ( *lHeadOrTail ) >= ( int32_t )ulSize )
  40a40e:	69c4      	ldr	r4, [r0, #28]
		( *lHeadOrTail ) = 0;
  40a410:	42a7      	cmp	r7, r4
  40a412:	bfa8      	it	ge
  40a414:	2700      	movge	r7, #0
		pxHead = &p_gmac_dev->p_rx_dscr[ulIndex];
  40a416:	68c6      	ldr	r6, [r0, #12]
  40a418:	463b      	mov	r3, r7
  40a41a:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
		if ((pxHead->addr.val & GMAC_RXD_OWNERSHIP) == 0) {
  40a41e:	f856 4037 	ldr.w	r4, [r6, r7, lsl #3]
  40a422:	f014 0f01 	tst.w	r4, #1
  40a426:	d05d      	beq.n	40a4e4 <gmac_dev_read+0x134>
		if ((pxHead->status.val & GMAC_RXD_SOF) != 0) {
  40a428:	686c      	ldr	r4, [r5, #4]
  40a42a:	f414 4f80 	tst.w	r4, #16384	; 0x4000
  40a42e:	d0e5      	beq.n	40a3fc <gmac_dev_read+0x4c>
			int32_t ulPrev = p_gmac_dev->ul_rx_idx;
  40a430:	6a04      	ldr	r4, [r0, #32]
			pxHead = &p_gmac_dev->p_rx_dscr[ulPrev];
  40a432:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
				pxHead->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40a436:	682e      	ldr	r6, [r5, #0]
  40a438:	f026 0601 	bic.w	r6, r6, #1
  40a43c:	602e      	str	r6, [r5, #0]
	( *lHeadOrTail ) ++;
  40a43e:	3401      	adds	r4, #1
    if( ( *lHeadOrTail ) >= ( int32_t )ulSize )
  40a440:	69c5      	ldr	r5, [r0, #28]
		( *lHeadOrTail ) = 0;
  40a442:	42ac      	cmp	r4, r5
  40a444:	bfa8      	it	ge
  40a446:	2400      	movge	r4, #0
				pxHead = &p_gmac_dev->p_rx_dscr[ulPrev];
  40a448:	68c5      	ldr	r5, [r0, #12]
  40a44a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
			} while (ulPrev != ulIndex);
  40a44e:	42a7      	cmp	r7, r4
  40a450:	d1f1      	bne.n	40a436 <gmac_dev_read+0x86>
			p_gmac_dev->ul_rx_idx = ulIndex;
  40a452:	6203      	str	r3, [r0, #32]
  40a454:	e7d2      	b.n	40a3fc <gmac_dev_read+0x4c>
			ulReturn = pxHead->status.bm.b_len; // MZ_TESTE: substitui len por b_len
  40a456:	88af      	ldrh	r7, [r5, #4]
	int32_t nextIdx;	/* A copy of the Rx-index 'ul_rx_idx' */
	int32_t bytesLeft = gmac_dev_poll (p_gmac_dev);
  40a458:	f3c7 070c 	ubfx	r7, r7, #0, #13
	gmac_rx_descriptor_t *pxHead;

	if (bytesLeft == 0 )
  40a45c:	2f00      	cmp	r7, #0
  40a45e:	d03e      	beq.n	40a4de <gmac_dev_read+0x12e>
  40a460:	4675      	mov	r5, lr
  40a462:	4688      	mov	r8, r1
  40a464:	4606      	mov	r6, r0
	}

	/* gmac_dev_poll has confirmed that there is a complete frame at
	 * the current position 'ul_rx_idx'
	 */
	nextIdx = p_gmac_dev->ul_rx_idx;
  40a466:	6a01      	ldr	r1, [r0, #32]
  40a468:	460c      	mov	r4, r1

	/* Read +2 bytes because buffers are aligned at -2 bytes */
	bytesLeft = min( bytesLeft + 2, ( int32_t )ul_frame_size );
  40a46a:	3702      	adds	r7, #2
  40a46c:	4297      	cmp	r7, r2
  40a46e:	bfa8      	it	ge
  40a470:	4617      	movge	r7, r2

	/* The frame will be copied in 1 or 2 memcpy's */
	if( ( p_frame != NULL ) && ( bytesLeft != 0 ) )
  40a472:	f1b8 0f00 	cmp.w	r8, #0
  40a476:	d012      	beq.n	40a49e <gmac_dev_read+0xee>
  40a478:	b18f      	cbz	r7, 40a49e <gmac_dev_read+0xee>
	int32_t left;
	int32_t toCopy;

		source = p_gmac_dev->p_rx_buffer + nextIdx * GMAC_RX_UNITSIZE;
		left = bytesLeft;
		toCopy = ( p_gmac_dev->ul_rx_list_size - nextIdx ) * GMAC_RX_UNITSIZE;
  40a47a:	69c3      	ldr	r3, [r0, #28]
  40a47c:	eba3 0901 	sub.w	r9, r3, r1
  40a480:	ea4f 19c9 	mov.w	r9, r9, lsl #7
  40a484:	45b9      	cmp	r9, r7
  40a486:	bfa8      	it	ge
  40a488:	46b9      	movge	r9, r7
		source = p_gmac_dev->p_rx_buffer + nextIdx * GMAC_RX_UNITSIZE;
  40a48a:	6883      	ldr	r3, [r0, #8]
		if(toCopy > left )
		{
			toCopy = left;
		}
		memcpy (p_frame, source, toCopy);
  40a48c:	464a      	mov	r2, r9
  40a48e:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  40a492:	4640      	mov	r0, r8
  40a494:	4b16      	ldr	r3, [pc, #88]	; (40a4f0 <gmac_dev_read+0x140>)
  40a496:	4798      	blx	r3
		left -= toCopy;

		if( left != 0ul )
  40a498:	ebb7 0209 	subs.w	r2, r7, r9
  40a49c:	d119      	bne.n	40a4d2 <gmac_dev_read+0x122>
		}
	}

	do
	{
		pxHead = &p_gmac_dev->p_rx_dscr[nextIdx];
  40a49e:	68f3      	ldr	r3, [r6, #12]
  40a4a0:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
		pxHead->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40a4a4:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
  40a4a8:	f021 0101 	bic.w	r1, r1, #1
  40a4ac:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	( *lHeadOrTail ) ++;
  40a4b0:	3401      	adds	r4, #1
    if( ( *lHeadOrTail ) >= ( int32_t )ulSize )
  40a4b2:	69f3      	ldr	r3, [r6, #28]
		( *lHeadOrTail ) = 0;
  40a4b4:	429c      	cmp	r4, r3
  40a4b6:	bfa8      	it	ge
  40a4b8:	2400      	movge	r4, #0
		circ_inc32 (&nextIdx, p_gmac_dev->ul_rx_list_size);
	} while ((pxHead->status.val & GMAC_RXD_EOF) == 0);
  40a4ba:	6853      	ldr	r3, [r2, #4]
  40a4bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  40a4c0:	d0ed      	beq.n	40a49e <gmac_dev_read+0xee>

	p_gmac_dev->ul_rx_idx = nextIdx;
  40a4c2:	6234      	str	r4, [r6, #32]

	*p_rcv_size = bytesLeft;
  40a4c4:	602f      	str	r7, [r5, #0]

	return GMAC_OK;
  40a4c6:	2000      	movs	r0, #0
  40a4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return GMAC_RX_NO_DATA; // MZ_TESTE substituido GMAC_RX_NULL por GMAC_RX_NO_DATA
  40a4cc:	2004      	movs	r0, #4
  40a4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memcpy (p_frame + toCopy, (void*)p_gmac_dev->p_rx_buffer, left);
  40a4d2:	68b1      	ldr	r1, [r6, #8]
  40a4d4:	eb08 0009 	add.w	r0, r8, r9
  40a4d8:	4b05      	ldr	r3, [pc, #20]	; (40a4f0 <gmac_dev_read+0x140>)
  40a4da:	4798      	blx	r3
  40a4dc:	e7df      	b.n	40a49e <gmac_dev_read+0xee>
		return GMAC_RX_NO_DATA; // MZ_TESTE substituido GMAC_RX_NULL por GMAC_RX_NO_DATA
  40a4de:	2004      	movs	r0, #4
  40a4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a4e4:	2004      	movs	r0, #4
  40a4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a4ea:	2004      	movs	r0, #4
}
  40a4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a4f0:	0040c3d9 	.word	0x0040c3d9

0040a4f4 <gmac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t gmac_dev_write(gmac_device_t* p_gmac_dev, void *p_buffer,
		uint32_t ul_size, gmac_dev_tx_cb_t func_tx_cb)
{
  40a4f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if( GMAC_USES_TX_CALLBACK == 0 )
	( void )func_tx_cb;
#endif

	/* Check parameter */
	if (ul_size > GMAC_TX_UNITSIZE) {
  40a4f8:	f240 54ee 	movw	r4, #1518	; 0x5ee
  40a4fc:	42a2      	cmp	r2, r4
  40a4fe:	d902      	bls.n	40a506 <gmac_dev_write+0x12>
		return GMAC_PARAM;
  40a500:	2006      	movs	r0, #6
  40a502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_gmac_dev->p_tx_dscr[p_gmac_dev->l_tx_head];
  40a506:	6a87      	ldr	r7, [r0, #40]	; 0x28
  40a508:	6906      	ldr	r6, [r0, #16]
  40a50a:	eb06 08c7 	add.w	r8, r6, r7, lsl #3

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
//	if (CIRC_SPACE(p_gmac_dev->l_tx_head, p_gmac_dev->l_tx_tail,
//					p_gmac_dev->ul_tx_list_size) == 0)
	{
		if ((p_tx_td->status.val & GMAC_TXD_USED) == 0)
  40a50e:	f8d8 4004 	ldr.w	r4, [r8, #4]
  40a512:	2c00      	cmp	r4, #0
  40a514:	db02      	blt.n	40a51c <gmac_dev_write+0x28>
			return GMAC_TX_BUSY;
  40a516:	2002      	movs	r0, #2

	/* Now start to transmit if it is still not done */
	gmac_start_transmission(p_hw);

	return GMAC_OK;
}
  40a518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a51c:	4699      	mov	r9, r3
  40a51e:	4614      	mov	r4, r2
  40a520:	4605      	mov	r5, r0
	Gmac *p_hw = p_gmac_dev->p_hw;
  40a522:	f8d0 a000 	ldr.w	sl, [r0]
	p_func_tx_cb = &p_gmac_dev->func_tx_cb_list[p_gmac_dev->l_tx_head];
  40a526:	f8d0 b018 	ldr.w	fp, [r0, #24]
	if (p_buffer && ul_size) {
  40a52a:	b101      	cbz	r1, 40a52e <gmac_dev_write+0x3a>
  40a52c:	b9f2      	cbnz	r2, 40a56c <gmac_dev_write+0x78>
	*p_func_tx_cb = func_tx_cb;
  40a52e:	f84b 9027 	str.w	r9, [fp, r7, lsl #2]
	if( p_gmac_dev->l_tx_head == ( int32_t )( p_gmac_dev->ul_tx_list_size - 1 ) )
  40a532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40a534:	3b01      	subs	r3, #1
  40a536:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40a538:	429a      	cmp	r2, r3
			ul_size | GMAC_TXD_LAST | GMAC_TXD_WRAP;
  40a53a:	bf08      	it	eq
  40a53c:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
			ul_size | GMAC_TXD_LAST;
  40a540:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		p_tx_td->status.val =
  40a544:	f8c8 4004 	str.w	r4, [r8, #4]
	( *lHeadOrTail ) ++;
  40a548:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40a54a:	3301      	adds	r3, #1
    if( ( *lHeadOrTail ) >= ( int32_t )ulSize )
  40a54c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		( *lHeadOrTail ) = 0;
  40a54e:	4293      	cmp	r3, r2
  40a550:	bfa8      	it	ge
  40a552:	2300      	movge	r3, #0
  40a554:	62ab      	str	r3, [r5, #40]	; 0x28
  __ASM volatile ("dsb");
  40a556:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40a55a:	f8da 3000 	ldr.w	r3, [sl]
  40a55e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40a562:	f8ca 3000 	str.w	r3, [sl]
	return GMAC_OK;
  40a566:	2000      	movs	r0, #0
  40a568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
  40a56c:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  40a570:	4b03      	ldr	r3, [pc, #12]	; (40a580 <gmac_dev_write+0x8c>)
  40a572:	4798      	blx	r3
		vGMACGenerateChecksum( ( uint8_t * ) p_tx_td->addr, ul_size ); // MZ_TESTE
  40a574:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  40a578:	4621      	mov	r1, r4
  40a57a:	4b02      	ldr	r3, [pc, #8]	; (40a584 <gmac_dev_write+0x90>)
  40a57c:	4798      	blx	r3
  40a57e:	e7d6      	b.n	40a52e <gmac_dev_write+0x3a>
  40a580:	0040c3d9 	.word	0x0040c3d9
  40a584:	0040a92d 	.word	0x0040a92d

0040a588 <gmac_dev_set_rx_callback>:
 */

void gmac_dev_set_rx_callback(gmac_device_t* p_gmac_dev,
		gmac_dev_rx_cb_t func_rx_cb)
{
	Gmac *p_hw = p_gmac_dev->p_hw;
  40a588:	6803      	ldr	r3, [r0, #0]

	if (func_rx_cb == NULL) {
  40a58a:	b119      	cbz	r1, 40a594 <gmac_dev_set_rx_callback+0xc>
		gmac_disable_interrupt(p_hw, GMAC_IDR_RCOMP);
		p_gmac_dev->func_rx_cb = NULL;
	} else {
		p_gmac_dev->func_rx_cb = func_rx_cb;
  40a58c:	6141      	str	r1, [r0, #20]
	p_gmac->GMAC_IER = ul_source;
  40a58e:	2202      	movs	r2, #2
  40a590:	629a      	str	r2, [r3, #40]	; 0x28
  40a592:	4770      	bx	lr
	p_gmac->GMAC_IDR = ul_source;
  40a594:	2202      	movs	r2, #2
  40a596:	62da      	str	r2, [r3, #44]	; 0x2c
		p_gmac_dev->func_rx_cb = NULL;
  40a598:	2300      	movs	r3, #0
  40a59a:	6143      	str	r3, [r0, #20]
  40a59c:	4770      	bx	lr
	...

0040a5a0 <gmac_handler>:
		}
	}
#endif

void gmac_handler(gmac_device_t* p_gmac_dev)
{
  40a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a5a4:	4604      	mov	r4, r0
	Gmac *p_hw = p_gmac_dev->p_hw;
  40a5a6:	6807      	ldr	r7, [r0, #0]
	return p_gmac->GMAC_ISR;
  40a5a8:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	return p_gmac->GMAC_RSR;
  40a5aa:	6a38      	ldr	r0, [r7, #32]
	return p_gmac->GMAC_TSR;
  40a5ac:	697d      	ldr	r5, [r7, #20]
		}
	}
	#endif /* GMAC_STATS != 0 */

	/* RX packet */
	if ((ul_isr & GMAC_ISR_RCOMP) || (ul_rsr & (GMAC_RSR_REC|GMAC_RSR_RXOVR|GMAC_RSR_BNA))) {
  40a5ae:	f016 0f02 	tst.w	r6, #2
  40a5b2:	d13f      	bne.n	40a634 <gmac_handler+0x94>
  40a5b4:	f010 0f07 	tst.w	r0, #7
  40a5b8:	d042      	beq.n	40a640 <gmac_handler+0xa0>
	p_gmac->GMAC_RSR = ul_status;
  40a5ba:	6238      	str	r0, [r7, #32]
  40a5bc:	e03d      	b.n	40a63a <gmac_handler+0x9a>

		/* Check RLE */
		if (ul_tsr & GMAC_TSR_RLE) {
			/* Status RLE & Number of discarded buffers */
#if( GMAC_USES_TX_CALLBACK != 0 )
			ul_tx_status_flag = GMAC_TSR_RLE | CIRC_CNT(p_gmac_dev->l_tx_head,
  40a5be:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
					p_gmac_dev->l_tx_tail, p_gmac_dev->ul_tx_list_size);
			p_tx_cb = &p_gmac_dev->func_tx_cb_list[p_gmac_dev->l_tx_tail];
  40a5c2:	f8d4 8018 	ldr.w	r8, [r4, #24]
#endif
			gmac_reset_tx_mem(p_gmac_dev);
  40a5c6:	4620      	mov	r0, r4
  40a5c8:	4b25      	ldr	r3, [pc, #148]	; (40a660 <gmac_handler+0xc0>)
  40a5ca:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  40a5cc:	683b      	ldr	r3, [r7, #0]
  40a5ce:	f043 0308 	orr.w	r3, r3, #8
  40a5d2:	603b      	str	r3, [r7, #0]
	p_gmac->GMAC_TSR = ul_status;
  40a5d4:	617d      	str	r5, [r7, #20]
		}
		/* Clear status */
		gmac_clear_tx_status(p_hw, ul_tsr);

#if( GMAC_USES_TX_CALLBACK != 0 )
		if (!CIRC_EMPTY(p_gmac_dev->l_tx_head, p_gmac_dev->l_tx_tail)) {
  40a5d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40a5d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a5da:	429a      	cmp	r2, r3
  40a5dc:	d110      	bne.n	40a600 <gmac_handler+0x60>
			p_tx_cb = &p_gmac_dev->func_tx_cb_list[p_gmac_dev->l_tx_tail];
  40a5de:	eb08 0889 	add.w	r8, r8, r9, lsl #2
  40a5e2:	e020      	b.n	40a626 <gmac_handler+0x86>
						p_tx_td->addr = 0ul;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}

				circ_inc32(&p_gmac_dev->l_tx_tail, p_gmac_dev->ul_tx_list_size);
  40a5e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
	( *lHeadOrTail ) ++;
  40a5e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a5e8:	3301      	adds	r3, #1
		( *lHeadOrTail ) = 0;
  40a5ea:	428b      	cmp	r3, r1
  40a5ec:	bfa8      	it	ge
  40a5ee:	2300      	movge	r3, #0
  40a5f0:	62e3      	str	r3, [r4, #44]	; 0x2c
			} while (CIRC_CNT(p_gmac_dev->l_tx_head, p_gmac_dev->l_tx_tail,
  40a5f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40a5f4:	1ad3      	subs	r3, r2, r3
  40a5f6:	fbb3 f2f1 	udiv	r2, r3, r1
  40a5fa:	fb01 3312 	mls	r3, r1, r2, r3
  40a5fe:	b18b      	cbz	r3, 40a624 <gmac_handler+0x84>
				p_tx_td = &p_gmac_dev->p_tx_dscr[p_gmac_dev->l_tx_tail];
  40a600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a602:	6921      	ldr	r1, [r4, #16]
  40a604:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
				p_tx_cb = &p_gmac_dev->func_tx_cb_list[p_gmac_dev->l_tx_tail];
  40a608:	69a2      	ldr	r2, [r4, #24]
  40a60a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
				if ((p_tx_td->status.val & GMAC_TXD_USED) == 0) {
  40a60e:	6840      	ldr	r0, [r0, #4]
  40a610:	2800      	cmp	r0, #0
  40a612:	da07      	bge.n	40a624 <gmac_handler+0x84>
				if (*p_tx_cb) {
  40a614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40a618:	2a00      	cmp	r2, #0
  40a61a:	d0e3      	beq.n	40a5e4 <gmac_handler+0x44>
					(*p_tx_cb) ((void*)p_tx_td->addr); // MZ_TESTE FIX PING TRAVANDO
  40a61c:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
  40a620:	4790      	blx	r2
  40a622:	e7df      	b.n	40a5e4 <gmac_handler+0x44>
							p_gmac_dev->ul_tx_list_size));
		}

		if (ul_tsr & GMAC_TSR_RLE) {
  40a624:	b1d6      	cbz	r6, 40a65c <gmac_handler+0xbc>
			/* Notify upper layer RLE */
			if (*p_tx_cb) {
  40a626:	f8d8 3000 	ldr.w	r3, [r8]
  40a62a:	b1bb      	cbz	r3, 40a65c <gmac_handler+0xbc>
				//(*p_tx_cb) (ul_tx_status_flag, NULL);
				(*p_tx_cb) (NULL); // MZ_TESTE FIX PING TRAVANDO
  40a62c:	2000      	movs	r0, #0
  40a62e:	4798      	blx	r3
				&& p_gmac_dev->func_wakeup_cb) {
			p_gmac_dev->func_wakeup_cb();
		}
#endif
	}
}
  40a630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	p_gmac->GMAC_RSR = ul_status;
  40a634:	6238      	str	r0, [r7, #32]
			ul_rsr |= GMAC_RSR_REC;
  40a636:	f040 0002 	orr.w	r0, r0, #2
		if (p_gmac_dev->func_rx_cb) {
  40a63a:	6963      	ldr	r3, [r4, #20]
  40a63c:	b103      	cbz	r3, 40a640 <gmac_handler+0xa0>
			p_gmac_dev->func_rx_cb(ul_rsr);
  40a63e:	4798      	blx	r3
	if ((ul_isr & GMAC_ISR_TCOMP) || (ul_tsr & (GMAC_TSR_TXCOMP|GMAC_TSR_COL|GMAC_TSR_RLE|GMAC_TSR_UND))) {
  40a640:	f016 0f80 	tst.w	r6, #128	; 0x80
  40a644:	d102      	bne.n	40a64c <gmac_handler+0xac>
  40a646:	f015 0f66 	tst.w	r5, #102	; 0x66
  40a64a:	d007      	beq.n	40a65c <gmac_handler+0xbc>
		if (ul_tsr & GMAC_TSR_RLE) {
  40a64c:	f015 0604 	ands.w	r6, r5, #4
  40a650:	d1b5      	bne.n	40a5be <gmac_handler+0x1e>
	p_gmac->GMAC_TSR = ul_status;
  40a652:	617d      	str	r5, [r7, #20]
		if (!CIRC_EMPTY(p_gmac_dev->l_tx_head, p_gmac_dev->l_tx_tail)) {
  40a654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40a656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a658:	429a      	cmp	r2, r3
  40a65a:	d1d1      	bne.n	40a600 <gmac_handler+0x60>
  40a65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a660:	0040a211 	.word	0x0040a211

0040a664 <prvRxCallback>:
}
/*-----------------------------------------------------------*/

static void prvRxCallback( uint32_t ulStatus )
{
	if( ( ( ulStatus & GMAC_RSR_REC ) != 0 ) && ( xEMACTaskHandle != NULL ) )
  40a664:	f010 0f02 	tst.w	r0, #2
  40a668:	d00c      	beq.n	40a684 <prvRxCallback+0x20>
{
  40a66a:	b508      	push	{r3, lr}
	if( ( ( ulStatus & GMAC_RSR_REC ) != 0 ) && ( xEMACTaskHandle != NULL ) )
  40a66c:	4b06      	ldr	r3, [pc, #24]	; (40a688 <prvRxCallback+0x24>)
  40a66e:	6818      	ldr	r0, [r3, #0]
  40a670:	b138      	cbz	r0, 40a682 <prvRxCallback+0x1e>
	{
		/* let the prvEMACHandlerTask know that there was an RX event. */
		ulISREvents |= EMAC_IF_RX_EVENT;
  40a672:	4a06      	ldr	r2, [pc, #24]	; (40a68c <prvRxCallback+0x28>)
  40a674:	6813      	ldr	r3, [r2, #0]
  40a676:	f043 0301 	orr.w	r3, r3, #1
  40a67a:	6013      	str	r3, [r2, #0]
		/* Only an RX interrupt can wakeup prvEMACHandlerTask. */
		vTaskNotifyGiveFromISR( xEMACTaskHandle, ( BaseType_t * ) &xGMACSwitchRequired );
  40a67c:	4904      	ldr	r1, [pc, #16]	; (40a690 <prvRxCallback+0x2c>)
  40a67e:	4b05      	ldr	r3, [pc, #20]	; (40a694 <prvRxCallback+0x30>)
  40a680:	4798      	blx	r3
  40a682:	bd08      	pop	{r3, pc}
  40a684:	4770      	bx	lr
  40a686:	bf00      	nop
  40a688:	20013308 	.word	0x20013308
  40a68c:	200132f8 	.word	0x200132f8
  40a690:	2001330c 	.word	0x2001330c
  40a694:	0040bdad 	.word	0x0040bdad

0040a698 <prvTxCallback>:
}
/*-----------------------------------------------------------*/

//static void prvTxCallback( uint32_t ulStatus, uint8_t *puc_buffer )
static void prvTxCallback( uint8_t *puc_buffer ) // MZ_TESTE FIX PING TRAVANDO
{
  40a698:	b510      	push	{r4, lr}
  40a69a:	b082      	sub	sp, #8
  40a69c:	9001      	str	r0, [sp, #4]
	if( ( xTxBufferQueue != NULL ) && ( xEMACTaskHandle != NULL ) )
  40a69e:	4b0e      	ldr	r3, [pc, #56]	; (40a6d8 <prvTxCallback+0x40>)
  40a6a0:	681b      	ldr	r3, [r3, #0]
  40a6a2:	b1b3      	cbz	r3, 40a6d2 <prvTxCallback+0x3a>
  40a6a4:	4b0d      	ldr	r3, [pc, #52]	; (40a6dc <prvTxCallback+0x44>)
  40a6a6:	6818      	ldr	r0, [r3, #0]
  40a6a8:	b198      	cbz	r0, 40a6d2 <prvTxCallback+0x3a>
	{
		/* let the prvEMACHandlerTask know that there was an RX event. */
		ulISREvents |= EMAC_IF_TX_EVENT;
  40a6aa:	4a0d      	ldr	r2, [pc, #52]	; (40a6e0 <prvTxCallback+0x48>)
  40a6ac:	6813      	ldr	r3, [r2, #0]
  40a6ae:	f043 0302 	orr.w	r3, r3, #2
  40a6b2:	6013      	str	r3, [r2, #0]

		vTaskNotifyGiveFromISR( xEMACTaskHandle, ( BaseType_t * ) &xGMACSwitchRequired );
  40a6b4:	4c0b      	ldr	r4, [pc, #44]	; (40a6e4 <prvTxCallback+0x4c>)
  40a6b6:	4621      	mov	r1, r4
  40a6b8:	4b0b      	ldr	r3, [pc, #44]	; (40a6e8 <prvTxCallback+0x50>)
  40a6ba:	4798      	blx	r3
		xQueueSendFromISR( xTxBufferQueue, &puc_buffer, ( BaseType_t * ) &xGMACSwitchRequired );
  40a6bc:	2300      	movs	r3, #0
  40a6be:	4622      	mov	r2, r4
  40a6c0:	a901      	add	r1, sp, #4
  40a6c2:	4805      	ldr	r0, [pc, #20]	; (40a6d8 <prvTxCallback+0x40>)
  40a6c4:	6800      	ldr	r0, [r0, #0]
  40a6c6:	4c09      	ldr	r4, [pc, #36]	; (40a6ec <prvTxCallback+0x54>)
  40a6c8:	47a0      	blx	r4
		tx_release_count[ 2 ]++;
  40a6ca:	4a09      	ldr	r2, [pc, #36]	; (40a6f0 <prvTxCallback+0x58>)
  40a6cc:	6893      	ldr	r3, [r2, #8]
  40a6ce:	3301      	adds	r3, #1
  40a6d0:	6093      	str	r3, [r2, #8]
	}
}
  40a6d2:	b002      	add	sp, #8
  40a6d4:	bd10      	pop	{r4, pc}
  40a6d6:	bf00      	nop
  40a6d8:	20013314 	.word	0x20013314
  40a6dc:	20013308 	.word	0x20013308
  40a6e0:	200132f8 	.word	0x200132f8
  40a6e4:	2001330c 	.word	0x2001330c
  40a6e8:	0040bdad 	.word	0x0040bdad
  40a6ec:	0040af2d 	.word	0x0040af2d
  40a6f0:	20013494 	.word	0x20013494

0040a6f4 <GMAC_Handler>:
{
  40a6f4:	b510      	push	{r4, lr}
	xGMACSwitchRequired = pdFALSE;
  40a6f6:	4c09      	ldr	r4, [pc, #36]	; (40a71c <GMAC_Handler+0x28>)
  40a6f8:	2300      	movs	r3, #0
  40a6fa:	6023      	str	r3, [r4, #0]
	gmac_handler( &gs_gmac_dev );
  40a6fc:	4808      	ldr	r0, [pc, #32]	; (40a720 <GMAC_Handler+0x2c>)
  40a6fe:	4b09      	ldr	r3, [pc, #36]	; (40a724 <GMAC_Handler+0x30>)
  40a700:	4798      	blx	r3
	if( xGMACSwitchRequired != pdFALSE )
  40a702:	6823      	ldr	r3, [r4, #0]
  40a704:	b14b      	cbz	r3, 40a71a <GMAC_Handler+0x26>
		portEND_SWITCHING_ISR( xGMACSwitchRequired );
  40a706:	6823      	ldr	r3, [r4, #0]
  40a708:	b13b      	cbz	r3, 40a71a <GMAC_Handler+0x26>
  40a70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40a70e:	4b06      	ldr	r3, [pc, #24]	; (40a728 <GMAC_Handler+0x34>)
  40a710:	601a      	str	r2, [r3, #0]
  40a712:	f3bf 8f4f 	dsb	sy
  40a716:	f3bf 8f6f 	isb	sy
  40a71a:	bd10      	pop	{r4, pc}
  40a71c:	2001330c 	.word	0x2001330c
  40a720:	200132c0 	.word	0x200132c0
  40a724:	0040a5a1 	.word	0x0040a5a1
  40a728:	e000ed04 	.word	0xe000ed04

0040a72c <xNetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
  40a72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a730:	b084      	sub	sp, #16
const TickType_t x5_Seconds = 5000UL;

	if( xEMACTaskHandle == NULL )
  40a732:	4b4a      	ldr	r3, [pc, #296]	; (40a85c <xNetworkInterfaceInitialise+0x130>)
  40a734:	681b      	ldr	r3, [r3, #0]
  40a736:	b173      	cbz	r3, 40a756 <xNetworkInterfaceInitialise+0x2a>
		ensure the interrupt handler can return directly to it. */
		xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
		configASSERT( xEMACTaskHandle );
	}

	if( xTxBufferQueue == NULL )
  40a738:	4b49      	ldr	r3, [pc, #292]	; (40a860 <xNetworkInterfaceInitialise+0x134>)
  40a73a:	681b      	ldr	r3, [r3, #0]
  40a73c:	2b00      	cmp	r3, #0
  40a73e:	d059      	beq.n	40a7f4 <xNetworkInterfaceInitialise+0xc8>
	{
		xTxBufferQueue = xQueueCreate( GMAC_TX_BUFFERS, sizeof( void * ) );
		configASSERT( xTxBufferQueue );
	}

	if( xTXDescriptorSemaphore == NULL )
  40a740:	4b48      	ldr	r3, [pc, #288]	; (40a864 <xNetworkInterfaceInitialise+0x138>)
  40a742:	681b      	ldr	r3, [r3, #0]
  40a744:	2b00      	cmp	r3, #0
  40a746:	d05d      	beq.n	40a804 <xNetworkInterfaceInitialise+0xd8>
		xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) GMAC_TX_BUFFERS, ( UBaseType_t ) GMAC_TX_BUFFERS );
		configASSERT( xTXDescriptorSemaphore );
	}
	/* When returning non-zero, the stack will become active and
    start DHCP (in configured) */
	return ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0;
  40a748:	4b47      	ldr	r3, [pc, #284]	; (40a868 <xNetworkInterfaceInitialise+0x13c>)
  40a74a:	6818      	ldr	r0, [r3, #0]
  40a74c:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
  40a750:	b004      	add	sp, #16
  40a752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
uint32_t ncfgr;

	gmac_options_t gmac_option;

	memset( &gmac_option, '\0', sizeof( gmac_option ) );
  40a756:	2600      	movs	r6, #0
  40a758:	9602      	str	r6, [sp, #8]
	gmac_option.uc_copy_all_frame = 0;
	gmac_option.uc_no_boardcast = 0;
	memcpy( gmac_option.uc_mac_addr, ucMACAddress, sizeof( gmac_option.uc_mac_addr ) );
  40a75a:	4b44      	ldr	r3, [pc, #272]	; (40a86c <xNetworkInterfaceInitialise+0x140>)
  40a75c:	681a      	ldr	r2, [r3, #0]
  40a75e:	f8cd 200a 	str.w	r2, [sp, #10]
  40a762:	889b      	ldrh	r3, [r3, #4]
  40a764:	f8ad 300e 	strh.w	r3, [sp, #14]

	gs_gmac_dev.p_hw = GMAC;
  40a768:	4d41      	ldr	r5, [pc, #260]	; (40a870 <xNetworkInterfaceInitialise+0x144>)
  40a76a:	4c42      	ldr	r4, [pc, #264]	; (40a874 <xNetworkInterfaceInitialise+0x148>)
  40a76c:	602c      	str	r4, [r5, #0]
	gmac_dev_init( GMAC, &gs_gmac_dev, &gmac_option );
  40a76e:	aa02      	add	r2, sp, #8
  40a770:	4629      	mov	r1, r5
  40a772:	4620      	mov	r0, r4
  40a774:	4b40      	ldr	r3, [pc, #256]	; (40a878 <xNetworkInterfaceInitialise+0x14c>)
  40a776:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40a778:	4b40      	ldr	r3, [pc, #256]	; (40a87c <xNetworkInterfaceInitialise+0x150>)
  40a77a:	2240      	movs	r2, #64	; 0x40
  40a77c:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40a780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40a784:	605a      	str	r2, [r3, #4]
	#define configMAC_INTERRUPT_PRIORITY 4 // 8 // 1 // 4 // MZ_TESTE: REVISAR NO FINAL
	NVIC_SetPriority( GMAC_IRQn, configMAC_INTERRUPT_PRIORITY );
	NVIC_EnableIRQ( GMAC_IRQn );

	/* Contact the Ethernet PHY and store it's address in 'ethernet_phy_addr' */
	ethernet_phy_init( GMAC, ETHERNET_CONF_PHY_ADDR, sysclk_get_cpu_hz() );
  40a786:	4a3e      	ldr	r2, [pc, #248]	; (40a880 <xNetworkInterfaceInitialise+0x154>)
  40a788:	4631      	mov	r1, r6
  40a78a:	4620      	mov	r0, r4
  40a78c:	4b3d      	ldr	r3, [pc, #244]	; (40a884 <xNetworkInterfaceInitialise+0x158>)
  40a78e:	4798      	blx	r3

	ethernet_phy_auto_negotiate( GMAC, ethernet_phy_addr );
  40a790:	4e3d      	ldr	r6, [pc, #244]	; (40a888 <xNetworkInterfaceInitialise+0x15c>)
  40a792:	7831      	ldrb	r1, [r6, #0]
  40a794:	4620      	mov	r0, r4
  40a796:	4b3d      	ldr	r3, [pc, #244]	; (40a88c <xNetworkInterfaceInitialise+0x160>)
  40a798:	4798      	blx	r3
	ethernet_phy_set_link( GMAC, ethernet_phy_addr, 1 );
  40a79a:	2201      	movs	r2, #1
  40a79c:	7831      	ldrb	r1, [r6, #0]
  40a79e:	4620      	mov	r0, r4
  40a7a0:	4b3b      	ldr	r3, [pc, #236]	; (40a890 <xNetworkInterfaceInitialise+0x164>)
  40a7a2:	4798      	blx	r3

	/* The GMAC driver will call a hook prvRxCallback(), which
	in turn will wake-up the task by calling vTaskNotifyGiveFromISR() */
	gmac_dev_set_rx_callback( &gs_gmac_dev, prvRxCallback );
  40a7a4:	493b      	ldr	r1, [pc, #236]	; (40a894 <xNetworkInterfaceInitialise+0x168>)
  40a7a6:	4628      	mov	r0, r5
  40a7a8:	4b3b      	ldr	r3, [pc, #236]	; (40a898 <xNetworkInterfaceInitialise+0x16c>)
  40a7aa:	4798      	blx	r3
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40a7ac:	4b3b      	ldr	r3, [pc, #236]	; (40a89c <xNetworkInterfaceInitialise+0x170>)
  40a7ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40a7b2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
  40a7b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	gmac_set_address( GMAC, 1, (uint8_t*)llmnr_mac_address );

	ncfgr = GMAC_NCFGR_SPD | GMAC_NCFGR_FD;

	GMAC->GMAC_NCFGR = ( GMAC->GMAC_NCFGR & ~( GMAC_NCFGR_SPD | GMAC_NCFGR_FD ) ) | ncfgr;
  40a7ba:	6863      	ldr	r3, [r4, #4]
  40a7bc:	f043 0303 	orr.w	r3, r3, #3
  40a7c0:	6063      	str	r3, [r4, #4]
}
/*-----------------------------------------------------------*/

static BaseType_t xGMACWaitLS( TickType_t xMaxTime )
{
TickType_t xStartTime = xTaskGetTickCount();
  40a7c2:	4b37      	ldr	r3, [pc, #220]	; (40a8a0 <xNetworkInterfaceInitialise+0x174>)
  40a7c4:	4798      	blx	r3
  40a7c6:	4606      	mov	r6, r0
BaseType_t xReturn;
const TickType_t xShortTime = pdMS_TO_TICKS( 100UL );

	for( ;; )
	{
		xEndTime = xTaskGetTickCount();
  40a7c8:	4d35      	ldr	r5, [pc, #212]	; (40a8a0 <xNetworkInterfaceInitialise+0x174>)
	rc = gmac_phy_read( GMAC, ethernet_phy_addr, usAddress, &ulValue );
  40a7ca:	4f2f      	ldr	r7, [pc, #188]	; (40a888 <xNetworkInterfaceInitialise+0x15c>)
  40a7cc:	e027      	b.n	40a81e <xNetworkInterfaceInitialise+0xf2>

		if( ( xEndTime - xStartTime ) > xMaxTime )
		{
			/* Wated more than xMaxTime, return. */
			xReturn = pdFALSE;
  40a7ce:	2100      	movs	r1, #0
		/* Link is down - wait in the Blocked state for a short while (to allow
		other tasks to execute) before checking again. */
		vTaskDelay( xShortTime );
	}

	FreeRTOS_printf( ( "xGMACWaitLS: %ld (PHY %d) freq %lu Mz\n",
  40a7d0:	2360      	movs	r3, #96	; 0x60
  40a7d2:	4a2d      	ldr	r2, [pc, #180]	; (40a888 <xNetworkInterfaceInitialise+0x15c>)
  40a7d4:	6812      	ldr	r2, [r2, #0]
  40a7d6:	4833      	ldr	r0, [pc, #204]	; (40a8a4 <xNetworkInterfaceInitialise+0x178>)
  40a7d8:	4c33      	ldr	r4, [pc, #204]	; (40a8a8 <xNetworkInterfaceInitialise+0x17c>)
  40a7da:	47a0      	blx	r4
		xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
  40a7dc:	4b1f      	ldr	r3, [pc, #124]	; (40a85c <xNetworkInterfaceInitialise+0x130>)
  40a7de:	9301      	str	r3, [sp, #4]
  40a7e0:	2303      	movs	r3, #3
  40a7e2:	9300      	str	r3, [sp, #0]
  40a7e4:	2300      	movs	r3, #0
  40a7e6:	f44f 7200 	mov.w	r2, #512	; 0x200
  40a7ea:	4930      	ldr	r1, [pc, #192]	; (40a8ac <xNetworkInterfaceInitialise+0x180>)
  40a7ec:	4830      	ldr	r0, [pc, #192]	; (40a8b0 <xNetworkInterfaceInitialise+0x184>)
  40a7ee:	4c31      	ldr	r4, [pc, #196]	; (40a8b4 <xNetworkInterfaceInitialise+0x188>)
  40a7f0:	47a0      	blx	r4
  40a7f2:	e7a1      	b.n	40a738 <xNetworkInterfaceInitialise+0xc>
		xTxBufferQueue = xQueueCreate( GMAC_TX_BUFFERS, sizeof( void * ) );
  40a7f4:	2200      	movs	r2, #0
  40a7f6:	2104      	movs	r1, #4
  40a7f8:	2008      	movs	r0, #8
  40a7fa:	4b2f      	ldr	r3, [pc, #188]	; (40a8b8 <xNetworkInterfaceInitialise+0x18c>)
  40a7fc:	4798      	blx	r3
  40a7fe:	4b18      	ldr	r3, [pc, #96]	; (40a860 <xNetworkInterfaceInitialise+0x134>)
  40a800:	6018      	str	r0, [r3, #0]
  40a802:	e79d      	b.n	40a740 <xNetworkInterfaceInitialise+0x14>
		xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) GMAC_TX_BUFFERS, ( UBaseType_t ) GMAC_TX_BUFFERS );
  40a804:	2108      	movs	r1, #8
  40a806:	4608      	mov	r0, r1
  40a808:	4b2c      	ldr	r3, [pc, #176]	; (40a8bc <xNetworkInterfaceInitialise+0x190>)
  40a80a:	4798      	blx	r3
  40a80c:	4b15      	ldr	r3, [pc, #84]	; (40a864 <xNetworkInterfaceInitialise+0x138>)
  40a80e:	6018      	str	r0, [r3, #0]
  40a810:	e79a      	b.n	40a748 <xNetworkInterfaceInitialise+0x1c>
		ulPHYLinkStatus = ulReadMDIO( PHY_REG_01_BMSR );
  40a812:	2200      	movs	r2, #0
  40a814:	4b14      	ldr	r3, [pc, #80]	; (40a868 <xNetworkInterfaceInitialise+0x13c>)
  40a816:	601a      	str	r2, [r3, #0]
		vTaskDelay( xShortTime );
  40a818:	2064      	movs	r0, #100	; 0x64
  40a81a:	4b29      	ldr	r3, [pc, #164]	; (40a8c0 <xNetworkInterfaceInitialise+0x194>)
  40a81c:	4798      	blx	r3
		xEndTime = xTaskGetTickCount();
  40a81e:	47a8      	blx	r5
		if( ( xEndTime - xStartTime ) > xMaxTime )
  40a820:	1b80      	subs	r0, r0, r6
  40a822:	f241 3388 	movw	r3, #5000	; 0x1388
  40a826:	4298      	cmp	r0, r3
  40a828:	d8d1      	bhi.n	40a7ce <xNetworkInterfaceInitialise+0xa2>
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40a82a:	6823      	ldr	r3, [r4, #0]
  40a82c:	f043 0310 	orr.w	r3, r3, #16
  40a830:	6023      	str	r3, [r4, #0]
	rc = gmac_phy_read( GMAC, ethernet_phy_addr, usAddress, &ulValue );
  40a832:	ab02      	add	r3, sp, #8
  40a834:	2201      	movs	r2, #1
  40a836:	7839      	ldrb	r1, [r7, #0]
  40a838:	4620      	mov	r0, r4
  40a83a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40a8c4 <xNetworkInterfaceInitialise+0x198>
  40a83e:	47c0      	blx	r8
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40a840:	6823      	ldr	r3, [r4, #0]
  40a842:	f023 0310 	bic.w	r3, r3, #16
  40a846:	6023      	str	r3, [r4, #0]
	if( rc == GMAC_OK )
  40a848:	2800      	cmp	r0, #0
  40a84a:	d1e2      	bne.n	40a812 <xNetworkInterfaceInitialise+0xe6>
		ulReturn = ulValue;
  40a84c:	9b02      	ldr	r3, [sp, #8]
		ulPHYLinkStatus = ulReadMDIO( PHY_REG_01_BMSR );
  40a84e:	4a06      	ldr	r2, [pc, #24]	; (40a868 <xNetworkInterfaceInitialise+0x13c>)
  40a850:	6013      	str	r3, [r2, #0]
		if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
  40a852:	f013 0f04 	tst.w	r3, #4
  40a856:	d0df      	beq.n	40a818 <xNetworkInterfaceInitialise+0xec>
			xReturn = pdTRUE;
  40a858:	2101      	movs	r1, #1
  40a85a:	e7b9      	b.n	40a7d0 <xNetworkInterfaceInitialise+0xa4>
  40a85c:	20013308 	.word	0x20013308
  40a860:	20013314 	.word	0x20013314
  40a864:	20013310 	.word	0x20013310
  40a868:	200132fc 	.word	0x200132fc
  40a86c:	00414104 	.word	0x00414104
  40a870:	200132c0 	.word	0x200132c0
  40a874:	40034000 	.word	0x40034000
  40a878:	0040a2a9 	.word	0x0040a2a9
  40a87c:	e000e100 	.word	0xe000e100
  40a880:	05b8d800 	.word	0x05b8d800
  40a884:	00401bf1 	.word	0x00401bf1
  40a888:	20006b40 	.word	0x20006b40
  40a88c:	004019f5 	.word	0x004019f5
  40a890:	00401901 	.word	0x00401901
  40a894:	0040a665 	.word	0x0040a665
  40a898:	0040a589 	.word	0x0040a589
  40a89c:	005e0001 	.word	0x005e0001
  40a8a0:	0040b649 	.word	0x0040b649
  40a8a4:	00414044 	.word	0x00414044
  40a8a8:	0040c351 	.word	0x0040c351
  40a8ac:	0041406c 	.word	0x0041406c
  40a8b0:	0040a9a9 	.word	0x0040a9a9
  40a8b4:	0040b401 	.word	0x0040b401
  40a8b8:	0040ad89 	.word	0x0040ad89
  40a8bc:	0040adc1 	.word	0x0040adc1
  40a8c0:	0040b871 	.word	0x0040b871
  40a8c4:	00401d0d 	.word	0x00401d0d

0040a8c8 <xNetworkInterfaceOutput>:
{
  40a8c8:	b570      	push	{r4, r5, r6, lr}
  40a8ca:	4605      	mov	r5, r0
  40a8cc:	460c      	mov	r4, r1
		if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) == 0 )
  40a8ce:	4b0f      	ldr	r3, [pc, #60]	; (40a90c <xNetworkInterfaceOutput+0x44>)
  40a8d0:	681b      	ldr	r3, [r3, #0]
  40a8d2:	f013 0f04 	tst.w	r3, #4
  40a8d6:	d00b      	beq.n	40a8f0 <xNetworkInterfaceOutput+0x28>
		if( xTXDescriptorSemaphore == NULL )
  40a8d8:	4b0d      	ldr	r3, [pc, #52]	; (40a910 <xNetworkInterfaceOutput+0x48>)
  40a8da:	6818      	ldr	r0, [r3, #0]
  40a8dc:	b140      	cbz	r0, 40a8f0 <xNetworkInterfaceOutput+0x28>
		if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
  40a8de:	2132      	movs	r1, #50	; 0x32
  40a8e0:	4b0c      	ldr	r3, [pc, #48]	; (40a914 <xNetworkInterfaceOutput+0x4c>)
  40a8e2:	4798      	blx	r3
  40a8e4:	2801      	cmp	r0, #1
  40a8e6:	d006      	beq.n	40a8f6 <xNetworkInterfaceOutput+0x2e>
			tx_release_count[ 3 ]++;
  40a8e8:	4a0b      	ldr	r2, [pc, #44]	; (40a918 <xNetworkInterfaceOutput+0x50>)
  40a8ea:	68d3      	ldr	r3, [r2, #12]
  40a8ec:	3301      	adds	r3, #1
  40a8ee:	60d3      	str	r3, [r2, #12]
	if( bReleaseAfterSend != pdFALSE )
  40a8f0:	b944      	cbnz	r4, 40a904 <xNetworkInterfaceOutput+0x3c>
}
  40a8f2:	2001      	movs	r0, #1
  40a8f4:	bd70      	pop	{r4, r5, r6, pc}
		gmac_dev_write( &gs_gmac_dev, (void *)pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength, prvTxCallback );
  40a8f6:	4b09      	ldr	r3, [pc, #36]	; (40a91c <xNetworkInterfaceOutput+0x54>)
  40a8f8:	69ea      	ldr	r2, [r5, #28]
  40a8fa:	69a9      	ldr	r1, [r5, #24]
  40a8fc:	4808      	ldr	r0, [pc, #32]	; (40a920 <xNetworkInterfaceOutput+0x58>)
  40a8fe:	4e09      	ldr	r6, [pc, #36]	; (40a924 <xNetworkInterfaceOutput+0x5c>)
  40a900:	47b0      	blx	r6
  40a902:	e7f5      	b.n	40a8f0 <xNetworkInterfaceOutput+0x28>
		vReleaseNetworkBufferAndDescriptor( pxDescriptor );
  40a904:	4628      	mov	r0, r5
  40a906:	4b08      	ldr	r3, [pc, #32]	; (40a928 <xNetworkInterfaceOutput+0x60>)
  40a908:	4798      	blx	r3
  40a90a:	e7f2      	b.n	40a8f2 <xNetworkInterfaceOutput+0x2a>
  40a90c:	200132fc 	.word	0x200132fc
  40a910:	20013310 	.word	0x20013310
  40a914:	0040b14d 	.word	0x0040b14d
  40a918:	20013494 	.word	0x20013494
  40a91c:	0040a699 	.word	0x0040a699
  40a920:	200132c0 	.word	0x200132c0
  40a924:	0040a4f5 	.word	0x0040a4f5
  40a928:	00409d79 	.word	0x00409d79

0040a92c <vGMACGenerateChecksum>:

//#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 1 ) && ( ipconfigHAS_TX_CRC_OFFLOADING == 0 )

	//void vGMACGenerateChecksum( uint8_t *apBuffer )
	void vGMACGenerateChecksum( uint8_t *apBuffer, uint32_t ul_size ) // MZ_TESTE
	{
  40a92c:	b538      	push	{r3, r4, r5, lr}
	ProtocolPacket_t *xProtPacket = (ProtocolPacket_t *)apBuffer;

		if ( xProtPacket->xTCPPacket.xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE )
  40a92e:	8983      	ldrh	r3, [r0, #12]
  40a930:	2b08      	cmp	r3, #8
  40a932:	d000      	beq.n	40a936 <vGMACGenerateChecksum+0xa>
  40a934:	bd38      	pop	{r3, r4, r5, pc}
  40a936:	460d      	mov	r5, r1
  40a938:	4604      	mov	r4, r0
		{
			IPHeader_t *pxIPHeader = &( xProtPacket->xTCPPacket.xIPHeader );

			/* Calculate the IP header checksum. */
			pxIPHeader->usHeaderChecksum = 0x00;
  40a93a:	2000      	movs	r0, #0
  40a93c:	7620      	strb	r0, [r4, #24]
  40a93e:	7660      	strb	r0, [r4, #25]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0u, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
  40a940:	2214      	movs	r2, #20
  40a942:	f104 010e 	add.w	r1, r4, #14
  40a946:	4b06      	ldr	r3, [pc, #24]	; (40a960 <vGMACGenerateChecksum+0x34>)
  40a948:	4798      	blx	r3
			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
  40a94a:	0a03      	lsrs	r3, r0, #8
  40a94c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40a950:	43c0      	mvns	r0, r0
  40a952:	8320      	strh	r0, [r4, #24]
			/* Calculate the TCP checksum for an outgoing packet. */
			//usGenerateProtocolChecksum( ( uint8_t * ) apBuffer, pdTRUE );
			//usGenerateProtocolChecksum( ( uint8_t * ) apBuffer, apBuffer->xDataLength, pdTRUE ); // MZ_TESTE: NOK
			//xProtPacket->xTCPPacket->xEthernetHeader->
			//pxBuffer->xDataLength
			usGenerateProtocolChecksum( ( uint8_t * ) apBuffer, ul_size, pdTRUE ); // MZ_TESTE
  40a954:	2201      	movs	r2, #1
  40a956:	4629      	mov	r1, r5
  40a958:	4620      	mov	r0, r4
  40a95a:	4b02      	ldr	r3, [pc, #8]	; (40a964 <vGMACGenerateChecksum+0x38>)
  40a95c:	4798      	blx	r3
			
			
			
		}
	}
  40a95e:	e7e9      	b.n	40a934 <vGMACGenerateChecksum+0x8>
  40a960:	00405789 	.word	0x00405789
  40a964:	0040586d 	.word	0x0040586d

0040a968 <vCheckBuffersAndQueue>:
	return ulReturnValue;
}
/*-----------------------------------------------------------*/

void vCheckBuffersAndQueue( void )
{
  40a968:	b508      	push	{r3, lr}
			uxLastMinQueueSpace = uxCurrentCount;
			FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
		}
	}
	#endif /* ipconfigCHECK_IP_QUEUE_SPACE */
	uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
  40a96a:	4b09      	ldr	r3, [pc, #36]	; (40a990 <vCheckBuffersAndQueue+0x28>)
  40a96c:	4798      	blx	r3
  40a96e:	4b09      	ldr	r3, [pc, #36]	; (40a994 <vCheckBuffersAndQueue+0x2c>)
  40a970:	6018      	str	r0, [r3, #0]
	if( uxLastMinBufferCount != uxCurrentCount )
  40a972:	4b09      	ldr	r3, [pc, #36]	; (40a998 <vCheckBuffersAndQueue+0x30>)
  40a974:	681b      	ldr	r3, [r3, #0]
  40a976:	4298      	cmp	r0, r3
  40a978:	d009      	beq.n	40a98e <vCheckBuffersAndQueue+0x26>
	{
		/* The logging produced below may be helpful
		while tuning +TCP: see how many buffers are in use. */
		uxLastMinBufferCount = uxCurrentCount;
  40a97a:	4b07      	ldr	r3, [pc, #28]	; (40a998 <vCheckBuffersAndQueue+0x30>)
  40a97c:	6018      	str	r0, [r3, #0]
		FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
  40a97e:	4b07      	ldr	r3, [pc, #28]	; (40a99c <vCheckBuffersAndQueue+0x34>)
  40a980:	4798      	blx	r3
  40a982:	4b04      	ldr	r3, [pc, #16]	; (40a994 <vCheckBuffersAndQueue+0x2c>)
  40a984:	681a      	ldr	r2, [r3, #0]
  40a986:	4601      	mov	r1, r0
  40a988:	4805      	ldr	r0, [pc, #20]	; (40a9a0 <vCheckBuffersAndQueue+0x38>)
  40a98a:	4b06      	ldr	r3, [pc, #24]	; (40a9a4 <vCheckBuffersAndQueue+0x3c>)
  40a98c:	4798      	blx	r3
  40a98e:	bd08      	pop	{r3, pc}
  40a990:	00409e75 	.word	0x00409e75
  40a994:	20013300 	.word	0x20013300
  40a998:	20013304 	.word	0x20013304
  40a99c:	00409e69 	.word	0x00409e69
  40a9a0:	00414020 	.word	0x00414020
  40a9a4:	0040c351 	.word	0x0040c351

0040a9a8 <prvEMACHandlerTask>:
	}

}

static void prvEMACHandlerTask( void *pvParameters )
{
  40a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a9ac:	b086      	sub	sp, #24
	/* Remove compiler warnings about unused parameters. */
	( void ) pvParameters;

	configASSERT( xEMACTaskHandle );

	vTaskSetTimeOutState( &xPhyTime );
  40a9ae:	a804      	add	r0, sp, #16
  40a9b0:	4b63      	ldr	r3, [pc, #396]	; (40ab40 <prvEMACHandlerTask+0x198>)
  40a9b2:	4798      	blx	r3
	xPhyRemTime = pdMS_TO_TICKS( PHY_LS_LOW_CHECK_TIME_MS );
  40a9b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40a9b8:	9303      	str	r3, [sp, #12]
BaseType_t xResult = 0;
  40a9ba:	2700      	movs	r7, #0

	for( ;; )
	{
		vCheckBuffersAndQueue();

		if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
  40a9bc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40ab9c <prvEMACHandlerTask+0x1f4>
		if( ( pxNextNetworkBufferDescriptor == NULL ) && ( uxGetNumberOfFreeNetworkBuffers() > xMinDescriptorsToLeave ) )
  40a9c0:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 40aba0 <prvEMACHandlerTask+0x1f8>
						tx_release_count[ 1 ]++;
					}
				}
				#else
				{
					tx_release_count[ 0 ]++;
  40a9c4:	4c5f      	ldr	r4, [pc, #380]	; (40ab44 <prvEMACHandlerTask+0x19c>)
  40a9c6:	e055      	b.n	40aa74 <prvEMACHandlerTask+0xcc>
			ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
  40a9c8:	2164      	movs	r1, #100	; 0x64
  40a9ca:	2000      	movs	r0, #0
  40a9cc:	4b5e      	ldr	r3, [pc, #376]	; (40ab48 <prvEMACHandlerTask+0x1a0>)
  40a9ce:	4798      	blx	r3
  40a9d0:	e057      	b.n	40aa82 <prvEMACHandlerTask+0xda>
			ulISREvents &= ~EMAC_IF_RX_EVENT;
  40a9d2:	f8d8 3000 	ldr.w	r3, [r8]
  40a9d6:	f023 0301 	bic.w	r3, r3, #1
  40a9da:	f8c8 3000 	str.w	r3, [r8]
uint32_t ulReceiveCount, ulResult, ulReturnValue = 0;
  40a9de:	2700      	movs	r7, #0
		if( ( pxNextNetworkBufferDescriptor == NULL ) && ( uxGetNumberOfFreeNetworkBuffers() > xMinDescriptorsToLeave ) )
  40a9e0:	4d5a      	ldr	r5, [pc, #360]	; (40ab4c <prvEMACHandlerTask+0x1a4>)
  40a9e2:	e00f      	b.n	40aa04 <prvEMACHandlerTask+0x5c>
  40a9e4:	47c8      	blx	r9
  40a9e6:	2802      	cmp	r0, #2
  40a9e8:	d803      	bhi.n	40a9f2 <prvEMACHandlerTask+0x4a>
		if( pxNextNetworkBufferDescriptor != NULL )
  40a9ea:	682b      	ldr	r3, [r5, #0]
			pucUseBuffer = NULL;
  40a9ec:	2100      	movs	r1, #0
		if( pxNextNetworkBufferDescriptor != NULL )
  40a9ee:	b183      	cbz	r3, 40aa12 <prvEMACHandlerTask+0x6a>
  40a9f0:	e00d      	b.n	40aa0e <prvEMACHandlerTask+0x66>
			pxNextNetworkBufferDescriptor = pxGetNetworkBufferWithDescriptor( ipTOTAL_ETHERNET_FRAME_SIZE, xBlockTime );
  40a9f2:	2164      	movs	r1, #100	; 0x64
  40a9f4:	4630      	mov	r0, r6
  40a9f6:	4b56      	ldr	r3, [pc, #344]	; (40ab50 <prvEMACHandlerTask+0x1a8>)
  40a9f8:	4798      	blx	r3
  40a9fa:	6028      	str	r0, [r5, #0]
  40a9fc:	e7f5      	b.n	40a9ea <prvEMACHandlerTask+0x42>
		pxNextNetworkBufferDescriptor = NULL;
  40a9fe:	2300      	movs	r3, #0
  40aa00:	602b      	str	r3, [r5, #0]
		ulReturnValue++;
  40aa02:	3701      	adds	r7, #1
			pxNextNetworkBufferDescriptor = pxGetNetworkBufferWithDescriptor( ipTOTAL_ETHERNET_FRAME_SIZE, xBlockTime );
  40aa04:	f240 46c6 	movw	r6, #1222	; 0x4c6
		if( ( pxNextNetworkBufferDescriptor == NULL ) && ( uxGetNumberOfFreeNetworkBuffers() > xMinDescriptorsToLeave ) )
  40aa08:	682b      	ldr	r3, [r5, #0]
  40aa0a:	2b00      	cmp	r3, #0
  40aa0c:	d0ea      	beq.n	40a9e4 <prvEMACHandlerTask+0x3c>
			pucUseBuffer = ( unsigned char* ) ( pxNextNetworkBufferDescriptor->pucEthernetBuffer - ipconfigPACKET_FILLER_SIZE );
  40aa0e:	6999      	ldr	r1, [r3, #24]
  40aa10:	3902      	subs	r1, #2
		ulResult = gmac_dev_read( &gs_gmac_dev, pucUseBuffer, ipTOTAL_ETHERNET_FRAME_SIZE, &ulReceiveCount );
  40aa12:	ab01      	add	r3, sp, #4
  40aa14:	4632      	mov	r2, r6
  40aa16:	484f      	ldr	r0, [pc, #316]	; (40ab54 <prvEMACHandlerTask+0x1ac>)
  40aa18:	f8df a188 	ldr.w	sl, [pc, #392]	; 40aba4 <prvEMACHandlerTask+0x1fc>
  40aa1c:	47d0      	blx	sl
		if( ( ulResult != GMAC_OK ) || ( ulReceiveCount == 0 ) )
  40aa1e:	2800      	cmp	r0, #0
  40aa20:	d134      	bne.n	40aa8c <prvEMACHandlerTask+0xe4>
  40aa22:	9a01      	ldr	r2, [sp, #4]
  40aa24:	2a00      	cmp	r2, #0
  40aa26:	d031      	beq.n	40aa8c <prvEMACHandlerTask+0xe4>
		if( pxNextNetworkBufferDescriptor == NULL )
  40aa28:	682b      	ldr	r3, [r5, #0]
  40aa2a:	2b00      	cmp	r3, #0
  40aa2c:	d0ec      	beq.n	40aa08 <prvEMACHandlerTask+0x60>
		pxNextNetworkBufferDescriptor->xDataLength = ( size_t ) ulReceiveCount;
  40aa2e:	61da      	str	r2, [r3, #28]
		xRxEvent.pvData = ( void * ) pxNextNetworkBufferDescriptor;
  40aa30:	4849      	ldr	r0, [pc, #292]	; (40ab58 <prvEMACHandlerTask+0x1b0>)
  40aa32:	6043      	str	r3, [r0, #4]
		if( xSendEventStructToIPTask( &xRxEvent, xBlockTime ) != pdTRUE )
  40aa34:	2164      	movs	r1, #100	; 0x64
  40aa36:	4b49      	ldr	r3, [pc, #292]	; (40ab5c <prvEMACHandlerTask+0x1b4>)
  40aa38:	4798      	blx	r3
  40aa3a:	2801      	cmp	r0, #1
  40aa3c:	d0df      	beq.n	40a9fe <prvEMACHandlerTask+0x56>
			vReleaseNetworkBufferAndDescriptor( pxNextNetworkBufferDescriptor );
  40aa3e:	6828      	ldr	r0, [r5, #0]
  40aa40:	4b47      	ldr	r3, [pc, #284]	; (40ab60 <prvEMACHandlerTask+0x1b8>)
  40aa42:	4798      	blx	r3
			FreeRTOS_printf( ( "prvEMACRxPoll: Can not queue return packet!\n" ) );
  40aa44:	4847      	ldr	r0, [pc, #284]	; (40ab64 <prvEMACHandlerTask+0x1bc>)
  40aa46:	4b48      	ldr	r3, [pc, #288]	; (40ab68 <prvEMACHandlerTask+0x1c0>)
  40aa48:	4798      	blx	r3
  40aa4a:	e7d8      	b.n	40a9fe <prvEMACHandlerTask+0x56>
					xSemaphoreGive( xTXDescriptorSemaphore );
				}
			}
		}

		if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
  40aa4c:	f8d8 3000 	ldr.w	r3, [r8]
  40aa50:	f013 0f04 	tst.w	r3, #4
  40aa54:	d005      	beq.n	40aa62 <prvEMACHandlerTask+0xba>
		{
			/* Future extension: logging about errors that occurred. */
			ulISREvents &= ~EMAC_IF_ERR_EVENT;
  40aa56:	f8d8 3000 	ldr.w	r3, [r8]
  40aa5a:	f023 0304 	bic.w	r3, r3, #4
  40aa5e:	f8c8 3000 	str.w	r3, [r8]
		}

		if( xResult > 0 )
  40aa62:	2f00      	cmp	r7, #0
  40aa64:	dd36      	ble.n	40aad4 <prvEMACHandlerTask+0x12c>
		{
			/* A packet was received. No need to check for the PHY status now,
			but set a timer to check it later on. */
			vTaskSetTimeOutState( &xPhyTime );
  40aa66:	a804      	add	r0, sp, #16
  40aa68:	4b35      	ldr	r3, [pc, #212]	; (40ab40 <prvEMACHandlerTask+0x198>)
  40aa6a:	4798      	blx	r3
			xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
  40aa6c:	f643 2398 	movw	r3, #15000	; 0x3a98
  40aa70:	9303      	str	r3, [sp, #12]
			xResult = 0;
  40aa72:	2700      	movs	r7, #0
		vCheckBuffersAndQueue();
  40aa74:	4b3d      	ldr	r3, [pc, #244]	; (40ab6c <prvEMACHandlerTask+0x1c4>)
  40aa76:	4798      	blx	r3
		if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
  40aa78:	f8d8 3000 	ldr.w	r3, [r8]
  40aa7c:	f013 0f07 	tst.w	r3, #7
  40aa80:	d0a2      	beq.n	40a9c8 <prvEMACHandlerTask+0x20>
		if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
  40aa82:	f8d8 3000 	ldr.w	r3, [r8]
  40aa86:	f013 0f01 	tst.w	r3, #1
  40aa8a:	d1a2      	bne.n	40a9d2 <prvEMACHandlerTask+0x2a>
		if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
  40aa8c:	f8d8 3000 	ldr.w	r3, [r8]
  40aa90:	f013 0f02 	tst.w	r3, #2
  40aa94:	d0da      	beq.n	40aa4c <prvEMACHandlerTask+0xa4>
			ulISREvents &= ~EMAC_IF_TX_EVENT;
  40aa96:	f8d8 3000 	ldr.w	r3, [r8]
  40aa9a:	f023 0302 	bic.w	r3, r3, #2
  40aa9e:	f8c8 3000 	str.w	r3, [r8]
			while( xQueueReceive( xTxBufferQueue, &pucBuffer, 0 ) != pdFALSE )
  40aaa2:	4e33      	ldr	r6, [pc, #204]	; (40ab70 <prvEMACHandlerTask+0x1c8>)
  40aaa4:	4d33      	ldr	r5, [pc, #204]	; (40ab74 <prvEMACHandlerTask+0x1cc>)
  40aaa6:	2200      	movs	r2, #0
  40aaa8:	a902      	add	r1, sp, #8
  40aaaa:	6830      	ldr	r0, [r6, #0]
  40aaac:	47a8      	blx	r5
  40aaae:	2800      	cmp	r0, #0
  40aab0:	d0cc      	beq.n	40aa4c <prvEMACHandlerTask+0xa4>
					tx_release_count[ 0 ]++;
  40aab2:	6823      	ldr	r3, [r4, #0]
  40aab4:	3301      	adds	r3, #1
  40aab6:	6023      	str	r3, [r4, #0]
				uxCount = uxQueueMessagesWaiting( ( QueueHandle_t ) xTXDescriptorSemaphore );
  40aab8:	4b2f      	ldr	r3, [pc, #188]	; (40ab78 <prvEMACHandlerTask+0x1d0>)
  40aaba:	6818      	ldr	r0, [r3, #0]
  40aabc:	4b2f      	ldr	r3, [pc, #188]	; (40ab7c <prvEMACHandlerTask+0x1d4>)
  40aabe:	4798      	blx	r3
				if( uxCount < GMAC_TX_BUFFERS )
  40aac0:	2807      	cmp	r0, #7
  40aac2:	d8f0      	bhi.n	40aaa6 <prvEMACHandlerTask+0xfe>
					xSemaphoreGive( xTXDescriptorSemaphore );
  40aac4:	2300      	movs	r3, #0
  40aac6:	461a      	mov	r2, r3
  40aac8:	4619      	mov	r1, r3
  40aaca:	482b      	ldr	r0, [pc, #172]	; (40ab78 <prvEMACHandlerTask+0x1d0>)
  40aacc:	6800      	ldr	r0, [r0, #0]
  40aace:	4d2c      	ldr	r5, [pc, #176]	; (40ab80 <prvEMACHandlerTask+0x1d8>)
  40aad0:	47a8      	blx	r5
  40aad2:	e7e7      	b.n	40aaa4 <prvEMACHandlerTask+0xfc>
		}
		else if( xTaskCheckForTimeOut( &xPhyTime, &xPhyRemTime ) != pdFALSE )
  40aad4:	a903      	add	r1, sp, #12
  40aad6:	a804      	add	r0, sp, #16
  40aad8:	4b2a      	ldr	r3, [pc, #168]	; (40ab84 <prvEMACHandlerTask+0x1dc>)
  40aada:	4798      	blx	r3
  40aadc:	2800      	cmp	r0, #0
  40aade:	d0c9      	beq.n	40aa74 <prvEMACHandlerTask+0xcc>
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40aae0:	4d29      	ldr	r5, [pc, #164]	; (40ab88 <prvEMACHandlerTask+0x1e0>)
  40aae2:	682b      	ldr	r3, [r5, #0]
  40aae4:	f043 0310 	orr.w	r3, r3, #16
  40aae8:	602b      	str	r3, [r5, #0]
	rc = gmac_phy_read( GMAC, ethernet_phy_addr, usAddress, &ulValue );
  40aaea:	ab01      	add	r3, sp, #4
  40aaec:	2201      	movs	r2, #1
  40aaee:	4927      	ldr	r1, [pc, #156]	; (40ab8c <prvEMACHandlerTask+0x1e4>)
  40aaf0:	7809      	ldrb	r1, [r1, #0]
  40aaf2:	4628      	mov	r0, r5
  40aaf4:	4e26      	ldr	r6, [pc, #152]	; (40ab90 <prvEMACHandlerTask+0x1e8>)
  40aaf6:	47b0      	blx	r6
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40aaf8:	682b      	ldr	r3, [r5, #0]
  40aafa:	f023 0310 	bic.w	r3, r3, #16
  40aafe:	602b      	str	r3, [r5, #0]
	if( rc == GMAC_OK )
  40ab00:	b9a0      	cbnz	r0, 40ab2c <prvEMACHandlerTask+0x184>
		ulReturn = ulValue;
  40ab02:	9901      	ldr	r1, [sp, #4]
		{
			/* Check the link status again. */
			xStatus = ulReadMDIO( PHY_REG_01_BMSR );

			if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != ( xStatus & BMSR_LINK_STATUS ) )
  40ab04:	4b23      	ldr	r3, [pc, #140]	; (40ab94 <prvEMACHandlerTask+0x1ec>)
  40ab06:	681b      	ldr	r3, [r3, #0]
  40ab08:	404b      	eors	r3, r1
  40ab0a:	f013 0f04 	tst.w	r3, #4
  40ab0e:	d10f      	bne.n	40ab30 <prvEMACHandlerTask+0x188>
			{
				ulPHYLinkStatus = xStatus;
				FreeRTOS_printf( ( "prvEMACHandlerTask: PHY LS now %d\n", ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ) );
			}

			vTaskSetTimeOutState( &xPhyTime );
  40ab10:	a804      	add	r0, sp, #16
  40ab12:	4b0b      	ldr	r3, [pc, #44]	; (40ab40 <prvEMACHandlerTask+0x198>)
  40ab14:	4798      	blx	r3
			if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
  40ab16:	4b1f      	ldr	r3, [pc, #124]	; (40ab94 <prvEMACHandlerTask+0x1ec>)
  40ab18:	681b      	ldr	r3, [r3, #0]
  40ab1a:	f013 0f04 	tst.w	r3, #4
			{
				xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
  40ab1e:	bf14      	ite	ne
  40ab20:	f643 2398 	movwne	r3, #15000	; 0x3a98
			}
			else
			{
				xPhyRemTime = pdMS_TO_TICKS( PHY_LS_LOW_CHECK_TIME_MS );
  40ab24:	f44f 737a 	moveq.w	r3, #1000	; 0x3e8
  40ab28:	9303      	str	r3, [sp, #12]
  40ab2a:	e7a3      	b.n	40aa74 <prvEMACHandlerTask+0xcc>
		ulReturn = 0UL;
  40ab2c:	2100      	movs	r1, #0
  40ab2e:	e7e9      	b.n	40ab04 <prvEMACHandlerTask+0x15c>
				ulPHYLinkStatus = xStatus;
  40ab30:	4b18      	ldr	r3, [pc, #96]	; (40ab94 <prvEMACHandlerTask+0x1ec>)
  40ab32:	6019      	str	r1, [r3, #0]
				FreeRTOS_printf( ( "prvEMACHandlerTask: PHY LS now %d\n", ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ) );
  40ab34:	f3c1 0180 	ubfx	r1, r1, #2, #1
  40ab38:	4817      	ldr	r0, [pc, #92]	; (40ab98 <prvEMACHandlerTask+0x1f0>)
  40ab3a:	4b0b      	ldr	r3, [pc, #44]	; (40ab68 <prvEMACHandlerTask+0x1c0>)
  40ab3c:	4798      	blx	r3
  40ab3e:	e7e7      	b.n	40ab10 <prvEMACHandlerTask+0x168>
  40ab40:	0040ba55 	.word	0x0040ba55
  40ab44:	20013494 	.word	0x20013494
  40ab48:	0040bd29 	.word	0x0040bd29
  40ab4c:	200132f4 	.word	0x200132f4
  40ab50:	00409dd1 	.word	0x00409dd1
  40ab54:	200132c0 	.word	0x200132c0
  40ab58:	200000f4 	.word	0x200000f4
  40ab5c:	00405685 	.word	0x00405685
  40ab60:	00409d79 	.word	0x00409d79
  40ab64:	00413fcc 	.word	0x00413fcc
  40ab68:	0040c351 	.word	0x0040c351
  40ab6c:	0040a969 	.word	0x0040a969
  40ab70:	20013314 	.word	0x20013314
  40ab74:	0040b00d 	.word	0x0040b00d
  40ab78:	20013310 	.word	0x20013310
  40ab7c:	0040b2d9 	.word	0x0040b2d9
  40ab80:	0040addd 	.word	0x0040addd
  40ab84:	0040ba99 	.word	0x0040ba99
  40ab88:	40034000 	.word	0x40034000
  40ab8c:	20006b40 	.word	0x20006b40
  40ab90:	00401d0d 	.word	0x00401d0d
  40ab94:	200132fc 	.word	0x200132fc
  40ab98:	00413ffc 	.word	0x00413ffc
  40ab9c:	200132f8 	.word	0x200132f8
  40aba0:	00409e69 	.word	0x00409e69
  40aba4:	0040a3b1 	.word	0x0040a3b1

0040aba8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  40aba8:	b510      	push	{r4, lr}
  40abaa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40abac:	4b04      	ldr	r3, [pc, #16]	; (40abc0 <prvIsQueueEmpty+0x18>)
  40abae:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40abb0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40abb2:	4b04      	ldr	r3, [pc, #16]	; (40abc4 <prvIsQueueEmpty+0x1c>)
  40abb4:	4798      	blx	r3

	return xReturn;
}
  40abb6:	fab4 f084 	clz	r0, r4
  40abba:	0940      	lsrs	r0, r0, #5
  40abbc:	bd10      	pop	{r4, pc}
  40abbe:	bf00      	nop
  40abc0:	00409f15 	.word	0x00409f15
  40abc4:	00409f35 	.word	0x00409f35

0040abc8 <prvCopyDataToQueue>:
{
  40abc8:	b570      	push	{r4, r5, r6, lr}
  40abca:	4604      	mov	r4, r0
  40abcc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40abce:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40abd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40abd2:	b95a      	cbnz	r2, 40abec <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40abd4:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
  40abd6:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40abd8:	b113      	cbz	r3, 40abe0 <prvCopyDataToQueue+0x18>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40abda:	3501      	adds	r5, #1
  40abdc:	63a5      	str	r5, [r4, #56]	; 0x38
}
  40abde:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40abe0:	6860      	ldr	r0, [r4, #4]
  40abe2:	4b17      	ldr	r3, [pc, #92]	; (40ac40 <prvCopyDataToQueue+0x78>)
  40abe4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40abe6:	2300      	movs	r3, #0
  40abe8:	6063      	str	r3, [r4, #4]
  40abea:	e7f6      	b.n	40abda <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
  40abec:	b96e      	cbnz	r6, 40ac0a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40abee:	6880      	ldr	r0, [r0, #8]
  40abf0:	4b14      	ldr	r3, [pc, #80]	; (40ac44 <prvCopyDataToQueue+0x7c>)
  40abf2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40abf4:	68a3      	ldr	r3, [r4, #8]
  40abf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40abf8:	4413      	add	r3, r2
  40abfa:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40abfc:	6862      	ldr	r2, [r4, #4]
  40abfe:	4293      	cmp	r3, r2
  40ac00:	d319      	bcc.n	40ac36 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40ac02:	6823      	ldr	r3, [r4, #0]
  40ac04:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40ac06:	2000      	movs	r0, #0
  40ac08:	e7e7      	b.n	40abda <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40ac0a:	68c0      	ldr	r0, [r0, #12]
  40ac0c:	4b0d      	ldr	r3, [pc, #52]	; (40ac44 <prvCopyDataToQueue+0x7c>)
  40ac0e:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40ac10:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40ac12:	4252      	negs	r2, r2
  40ac14:	68e3      	ldr	r3, [r4, #12]
  40ac16:	4413      	add	r3, r2
  40ac18:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40ac1a:	6821      	ldr	r1, [r4, #0]
  40ac1c:	428b      	cmp	r3, r1
  40ac1e:	d202      	bcs.n	40ac26 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40ac20:	6863      	ldr	r3, [r4, #4]
  40ac22:	441a      	add	r2, r3
  40ac24:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40ac26:	2e02      	cmp	r6, #2
  40ac28:	d001      	beq.n	40ac2e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  40ac2a:	2000      	movs	r0, #0
  40ac2c:	e7d5      	b.n	40abda <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40ac2e:	b125      	cbz	r5, 40ac3a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
  40ac30:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  40ac32:	2000      	movs	r0, #0
  40ac34:	e7d1      	b.n	40abda <prvCopyDataToQueue+0x12>
  40ac36:	2000      	movs	r0, #0
  40ac38:	e7cf      	b.n	40abda <prvCopyDataToQueue+0x12>
  40ac3a:	2000      	movs	r0, #0
  40ac3c:	e7cd      	b.n	40abda <prvCopyDataToQueue+0x12>
  40ac3e:	bf00      	nop
  40ac40:	0040bbd5 	.word	0x0040bbd5
  40ac44:	0040c3d9 	.word	0x0040c3d9

0040ac48 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40ac48:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40ac4a:	b172      	cbz	r2, 40ac6a <prvCopyDataFromQueue+0x22>
{
  40ac4c:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40ac4e:	68c3      	ldr	r3, [r0, #12]
  40ac50:	4413      	add	r3, r2
  40ac52:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40ac54:	6844      	ldr	r4, [r0, #4]
  40ac56:	42a3      	cmp	r3, r4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40ac58:	bf24      	itt	cs
  40ac5a:	6803      	ldrcs	r3, [r0, #0]
  40ac5c:	60c3      	strcs	r3, [r0, #12]
  40ac5e:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40ac60:	68c1      	ldr	r1, [r0, #12]
  40ac62:	4620      	mov	r0, r4
  40ac64:	4b01      	ldr	r3, [pc, #4]	; (40ac6c <prvCopyDataFromQueue+0x24>)
  40ac66:	4798      	blx	r3
  40ac68:	bd10      	pop	{r4, pc}
  40ac6a:	4770      	bx	lr
  40ac6c:	0040c3d9 	.word	0x0040c3d9

0040ac70 <prvUnlockQueue>:
{
  40ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ac74:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  40ac76:	4b20      	ldr	r3, [pc, #128]	; (40acf8 <prvUnlockQueue+0x88>)
  40ac78:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  40ac7a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  40ac7e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  40ac80:	2c00      	cmp	r4, #0
  40ac82:	dd12      	ble.n	40acaa <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40ac84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40ac86:	b183      	cbz	r3, 40acaa <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40ac88:	f105 0724 	add.w	r7, r5, #36	; 0x24
  40ac8c:	4e1b      	ldr	r6, [pc, #108]	; (40acfc <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
  40ac8e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 40ad04 <prvUnlockQueue+0x94>
  40ac92:	e004      	b.n	40ac9e <prvUnlockQueue+0x2e>
  40ac94:	3c01      	subs	r4, #1
  40ac96:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  40ac98:	b13c      	cbz	r4, 40acaa <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40ac9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40ac9c:	b12b      	cbz	r3, 40acaa <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40ac9e:	4638      	mov	r0, r7
  40aca0:	47b0      	blx	r6
  40aca2:	2800      	cmp	r0, #0
  40aca4:	d0f6      	beq.n	40ac94 <prvUnlockQueue+0x24>
						vTaskMissedYield();
  40aca6:	47c0      	blx	r8
  40aca8:	e7f4      	b.n	40ac94 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
  40acaa:	23ff      	movs	r3, #255	; 0xff
  40acac:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  40acb0:	4b13      	ldr	r3, [pc, #76]	; (40ad00 <prvUnlockQueue+0x90>)
  40acb2:	4798      	blx	r3
	taskENTER_CRITICAL();
  40acb4:	4b10      	ldr	r3, [pc, #64]	; (40acf8 <prvUnlockQueue+0x88>)
  40acb6:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40acb8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40acbc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  40acbe:	2c00      	cmp	r4, #0
  40acc0:	dd12      	ble.n	40ace8 <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40acc2:	692b      	ldr	r3, [r5, #16]
  40acc4:	b183      	cbz	r3, 40ace8 <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40acc6:	f105 0710 	add.w	r7, r5, #16
  40acca:	4e0c      	ldr	r6, [pc, #48]	; (40acfc <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
  40accc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 40ad04 <prvUnlockQueue+0x94>
  40acd0:	e004      	b.n	40acdc <prvUnlockQueue+0x6c>
  40acd2:	3c01      	subs	r4, #1
  40acd4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  40acd6:	b13c      	cbz	r4, 40ace8 <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40acd8:	692b      	ldr	r3, [r5, #16]
  40acda:	b12b      	cbz	r3, 40ace8 <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40acdc:	4638      	mov	r0, r7
  40acde:	47b0      	blx	r6
  40ace0:	2800      	cmp	r0, #0
  40ace2:	d0f6      	beq.n	40acd2 <prvUnlockQueue+0x62>
					vTaskMissedYield();
  40ace4:	47c0      	blx	r8
  40ace6:	e7f4      	b.n	40acd2 <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
  40ace8:	23ff      	movs	r3, #255	; 0xff
  40acea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  40acee:	4b04      	ldr	r3, [pc, #16]	; (40ad00 <prvUnlockQueue+0x90>)
  40acf0:	4798      	blx	r3
  40acf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40acf6:	bf00      	nop
  40acf8:	00409f15 	.word	0x00409f15
  40acfc:	0040b979 	.word	0x0040b979
  40ad00:	00409f35 	.word	0x00409f35
  40ad04:	0040bafd 	.word	0x0040bafd

0040ad08 <xQueueGenericReset>:
{
  40ad08:	b538      	push	{r3, r4, r5, lr}
  40ad0a:	4604      	mov	r4, r0
  40ad0c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40ad0e:	4b19      	ldr	r3, [pc, #100]	; (40ad74 <xQueueGenericReset+0x6c>)
  40ad10:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40ad12:	6822      	ldr	r2, [r4, #0]
  40ad14:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40ad16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40ad18:	fb03 f301 	mul.w	r3, r3, r1
  40ad1c:	18d0      	adds	r0, r2, r3
  40ad1e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40ad20:	2000      	movs	r0, #0
  40ad22:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40ad24:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40ad26:	1a5b      	subs	r3, r3, r1
  40ad28:	4413      	add	r3, r2
  40ad2a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  40ad2c:	23ff      	movs	r3, #255	; 0xff
  40ad2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  40ad32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  40ad36:	b9a5      	cbnz	r5, 40ad62 <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40ad38:	6923      	ldr	r3, [r4, #16]
  40ad3a:	b91b      	cbnz	r3, 40ad44 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
  40ad3c:	4b0e      	ldr	r3, [pc, #56]	; (40ad78 <xQueueGenericReset+0x70>)
  40ad3e:	4798      	blx	r3
}
  40ad40:	2001      	movs	r0, #1
  40ad42:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40ad44:	f104 0010 	add.w	r0, r4, #16
  40ad48:	4b0c      	ldr	r3, [pc, #48]	; (40ad7c <xQueueGenericReset+0x74>)
  40ad4a:	4798      	blx	r3
  40ad4c:	2800      	cmp	r0, #0
  40ad4e:	d0f5      	beq.n	40ad3c <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
  40ad50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40ad54:	4b0a      	ldr	r3, [pc, #40]	; (40ad80 <xQueueGenericReset+0x78>)
  40ad56:	601a      	str	r2, [r3, #0]
  40ad58:	f3bf 8f4f 	dsb	sy
  40ad5c:	f3bf 8f6f 	isb	sy
  40ad60:	e7ec      	b.n	40ad3c <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40ad62:	f104 0010 	add.w	r0, r4, #16
  40ad66:	4d07      	ldr	r5, [pc, #28]	; (40ad84 <xQueueGenericReset+0x7c>)
  40ad68:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40ad6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40ad6e:	47a8      	blx	r5
  40ad70:	e7e4      	b.n	40ad3c <xQueueGenericReset+0x34>
  40ad72:	bf00      	nop
  40ad74:	00409f15 	.word	0x00409f15
  40ad78:	00409f35 	.word	0x00409f35
  40ad7c:	0040b979 	.word	0x0040b979
  40ad80:	e000ed04 	.word	0xe000ed04
  40ad84:	00409c5d 	.word	0x00409c5d

0040ad88 <xQueueGenericCreate>:
	{
  40ad88:	b570      	push	{r4, r5, r6, lr}
  40ad8a:	4606      	mov	r6, r0
  40ad8c:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40ad8e:	fb00 f001 	mul.w	r0, r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40ad92:	3048      	adds	r0, #72	; 0x48
  40ad94:	4b08      	ldr	r3, [pc, #32]	; (40adb8 <xQueueGenericCreate+0x30>)
  40ad96:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40ad98:	4604      	mov	r4, r0
  40ad9a:	b148      	cbz	r0, 40adb0 <xQueueGenericCreate+0x28>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40ad9c:	b155      	cbz	r5, 40adb4 <xQueueGenericCreate+0x2c>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40ad9e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  40ada2:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40ada4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40ada6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40ada8:	2101      	movs	r1, #1
  40adaa:	4620      	mov	r0, r4
  40adac:	4b03      	ldr	r3, [pc, #12]	; (40adbc <xQueueGenericCreate+0x34>)
  40adae:	4798      	blx	r3
	}
  40adb0:	4620      	mov	r0, r4
  40adb2:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40adb4:	6020      	str	r0, [r4, #0]
  40adb6:	e7f5      	b.n	40ada4 <xQueueGenericCreate+0x1c>
  40adb8:	0040a0a1 	.word	0x0040a0a1
  40adbc:	0040ad09 	.word	0x0040ad09

0040adc0 <xQueueCreateCountingSemaphore>:
	{
  40adc0:	b510      	push	{r4, lr}
  40adc2:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
  40adc4:	2202      	movs	r2, #2
  40adc6:	2100      	movs	r1, #0
  40adc8:	4b03      	ldr	r3, [pc, #12]	; (40add8 <xQueueCreateCountingSemaphore+0x18>)
  40adca:	4798      	blx	r3
		if( xHandle != NULL )
  40adcc:	4603      	mov	r3, r0
  40adce:	b100      	cbz	r0, 40add2 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
  40add0:	6384      	str	r4, [r0, #56]	; 0x38
	}
  40add2:	4618      	mov	r0, r3
  40add4:	bd10      	pop	{r4, pc}
  40add6:	bf00      	nop
  40add8:	0040ad89 	.word	0x0040ad89

0040addc <xQueueGenericSend>:
{
  40addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ade0:	b085      	sub	sp, #20
  40ade2:	4604      	mov	r4, r0
  40ade4:	4689      	mov	r9, r1
  40ade6:	9201      	str	r2, [sp, #4]
  40ade8:	461e      	mov	r6, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  40adea:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
  40adee:	4d44      	ldr	r5, [pc, #272]	; (40af00 <xQueueGenericSend+0x124>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  40adf0:	4f44      	ldr	r7, [pc, #272]	; (40af04 <xQueueGenericSend+0x128>)
					portYIELD_WITHIN_API();
  40adf2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40af0c <xQueueGenericSend+0x130>
  40adf6:	e032      	b.n	40ae5e <xQueueGenericSend+0x82>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40adf8:	4632      	mov	r2, r6
  40adfa:	4649      	mov	r1, r9
  40adfc:	4620      	mov	r0, r4
  40adfe:	4b42      	ldr	r3, [pc, #264]	; (40af08 <xQueueGenericSend+0x12c>)
  40ae00:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40ae02:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40ae04:	b973      	cbnz	r3, 40ae24 <xQueueGenericSend+0x48>
					else if( xYieldRequired != pdFALSE )
  40ae06:	b138      	cbz	r0, 40ae18 <xQueueGenericSend+0x3c>
						queueYIELD_IF_USING_PREEMPTION();
  40ae08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40ae0c:	4b3f      	ldr	r3, [pc, #252]	; (40af0c <xQueueGenericSend+0x130>)
  40ae0e:	601a      	str	r2, [r3, #0]
  40ae10:	f3bf 8f4f 	dsb	sy
  40ae14:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40ae18:	4b3d      	ldr	r3, [pc, #244]	; (40af10 <xQueueGenericSend+0x134>)
  40ae1a:	4798      	blx	r3
				return pdPASS;
  40ae1c:	2001      	movs	r0, #1
}
  40ae1e:	b005      	add	sp, #20
  40ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40ae24:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40ae28:	4b3a      	ldr	r3, [pc, #232]	; (40af14 <xQueueGenericSend+0x138>)
  40ae2a:	4798      	blx	r3
  40ae2c:	2800      	cmp	r0, #0
  40ae2e:	d0f3      	beq.n	40ae18 <xQueueGenericSend+0x3c>
							queueYIELD_IF_USING_PREEMPTION();
  40ae30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40ae34:	4b35      	ldr	r3, [pc, #212]	; (40af0c <xQueueGenericSend+0x130>)
  40ae36:	601a      	str	r2, [r3, #0]
  40ae38:	f3bf 8f4f 	dsb	sy
  40ae3c:	f3bf 8f6f 	isb	sy
  40ae40:	e7ea      	b.n	40ae18 <xQueueGenericSend+0x3c>
					taskEXIT_CRITICAL();
  40ae42:	4b33      	ldr	r3, [pc, #204]	; (40af10 <xQueueGenericSend+0x134>)
  40ae44:	4798      	blx	r3
					return errQUEUE_FULL;
  40ae46:	2000      	movs	r0, #0
  40ae48:	e7e9      	b.n	40ae1e <xQueueGenericSend+0x42>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40ae4a:	a802      	add	r0, sp, #8
  40ae4c:	47b8      	blx	r7
  40ae4e:	e013      	b.n	40ae78 <xQueueGenericSend+0x9c>
				prvUnlockQueue( pxQueue );
  40ae50:	4620      	mov	r0, r4
  40ae52:	4b31      	ldr	r3, [pc, #196]	; (40af18 <xQueueGenericSend+0x13c>)
  40ae54:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40ae56:	4b31      	ldr	r3, [pc, #196]	; (40af1c <xQueueGenericSend+0x140>)
  40ae58:	4798      	blx	r3
  40ae5a:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  40ae5e:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40ae60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40ae62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40ae64:	429a      	cmp	r2, r3
  40ae66:	d3c7      	bcc.n	40adf8 <xQueueGenericSend+0x1c>
  40ae68:	2e02      	cmp	r6, #2
  40ae6a:	d0c5      	beq.n	40adf8 <xQueueGenericSend+0x1c>
				if( xTicksToWait == ( TickType_t ) 0 )
  40ae6c:	9b01      	ldr	r3, [sp, #4]
  40ae6e:	2b00      	cmp	r3, #0
  40ae70:	d0e7      	beq.n	40ae42 <xQueueGenericSend+0x66>
				else if( xEntryTimeSet == pdFALSE )
  40ae72:	f1ba 0f00 	cmp.w	sl, #0
  40ae76:	d0e8      	beq.n	40ae4a <xQueueGenericSend+0x6e>
		taskEXIT_CRITICAL();
  40ae78:	4b25      	ldr	r3, [pc, #148]	; (40af10 <xQueueGenericSend+0x134>)
  40ae7a:	4798      	blx	r3
		vTaskSuspendAll();
  40ae7c:	4b28      	ldr	r3, [pc, #160]	; (40af20 <xQueueGenericSend+0x144>)
  40ae7e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40ae80:	47a8      	blx	r5
  40ae82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40ae86:	b25b      	sxtb	r3, r3
  40ae88:	f1b3 3fff 	cmp.w	r3, #4294967295
  40ae8c:	bf04      	itt	eq
  40ae8e:	2300      	moveq	r3, #0
  40ae90:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  40ae94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40ae98:	b25b      	sxtb	r3, r3
  40ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40ae9e:	bf04      	itt	eq
  40aea0:	2300      	moveq	r3, #0
  40aea2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  40aea6:	4b1a      	ldr	r3, [pc, #104]	; (40af10 <xQueueGenericSend+0x134>)
  40aea8:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40aeaa:	a901      	add	r1, sp, #4
  40aeac:	a802      	add	r0, sp, #8
  40aeae:	4b1d      	ldr	r3, [pc, #116]	; (40af24 <xQueueGenericSend+0x148>)
  40aeb0:	4798      	blx	r3
  40aeb2:	b9e8      	cbnz	r0, 40aef0 <xQueueGenericSend+0x114>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40aeb4:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40aeb6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  40aeba:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40aebe:	4b14      	ldr	r3, [pc, #80]	; (40af10 <xQueueGenericSend+0x134>)
  40aec0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40aec2:	45d3      	cmp	fp, sl
  40aec4:	d1c4      	bne.n	40ae50 <xQueueGenericSend+0x74>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40aec6:	9901      	ldr	r1, [sp, #4]
  40aec8:	f104 0010 	add.w	r0, r4, #16
  40aecc:	4b16      	ldr	r3, [pc, #88]	; (40af28 <xQueueGenericSend+0x14c>)
  40aece:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40aed0:	4620      	mov	r0, r4
  40aed2:	4b11      	ldr	r3, [pc, #68]	; (40af18 <xQueueGenericSend+0x13c>)
  40aed4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40aed6:	4b11      	ldr	r3, [pc, #68]	; (40af1c <xQueueGenericSend+0x140>)
  40aed8:	4798      	blx	r3
  40aeda:	2800      	cmp	r0, #0
  40aedc:	d1bd      	bne.n	40ae5a <xQueueGenericSend+0x7e>
					portYIELD_WITHIN_API();
  40aede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40aee2:	f8c8 3000 	str.w	r3, [r8]
  40aee6:	f3bf 8f4f 	dsb	sy
  40aeea:	f3bf 8f6f 	isb	sy
  40aeee:	e7b4      	b.n	40ae5a <xQueueGenericSend+0x7e>
			prvUnlockQueue( pxQueue );
  40aef0:	4620      	mov	r0, r4
  40aef2:	4b09      	ldr	r3, [pc, #36]	; (40af18 <xQueueGenericSend+0x13c>)
  40aef4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40aef6:	4b09      	ldr	r3, [pc, #36]	; (40af1c <xQueueGenericSend+0x140>)
  40aef8:	4798      	blx	r3
			return errQUEUE_FULL;
  40aefa:	2000      	movs	r0, #0
  40aefc:	e78f      	b.n	40ae1e <xQueueGenericSend+0x42>
  40aefe:	bf00      	nop
  40af00:	00409f15 	.word	0x00409f15
  40af04:	0040ba81 	.word	0x0040ba81
  40af08:	0040abc9 	.word	0x0040abc9
  40af0c:	e000ed04 	.word	0xe000ed04
  40af10:	00409f35 	.word	0x00409f35
  40af14:	0040b979 	.word	0x0040b979
  40af18:	0040ac71 	.word	0x0040ac71
  40af1c:	0040b775 	.word	0x0040b775
  40af20:	0040b639 	.word	0x0040b639
  40af24:	0040ba99 	.word	0x0040ba99
  40af28:	0040b929 	.word	0x0040b929

0040af2c <xQueueGenericSendFromISR>:
{
  40af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  40af2e:	f3ef 8611 	mrs	r6, BASEPRI
  40af32:	f04f 0450 	mov.w	r4, #80	; 0x50
  40af36:	f384 8811 	msr	BASEPRI, r4
  40af3a:	f3bf 8f6f 	isb	sy
  40af3e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40af42:	6b85      	ldr	r5, [r0, #56]	; 0x38
  40af44:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  40af46:	42a5      	cmp	r5, r4
  40af48:	d305      	bcc.n	40af56 <xQueueGenericSendFromISR+0x2a>
  40af4a:	2b02      	cmp	r3, #2
  40af4c:	d003      	beq.n	40af56 <xQueueGenericSendFromISR+0x2a>
			xReturn = errQUEUE_FULL;
  40af4e:	2000      	movs	r0, #0
	__asm volatile
  40af50:	f386 8811 	msr	BASEPRI, r6
}
  40af54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40af56:	4617      	mov	r7, r2
  40af58:	4605      	mov	r5, r0
			const int8_t cTxLock = pxQueue->cTxLock;
  40af5a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  40af5e:	b264      	sxtb	r4, r4
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40af60:	461a      	mov	r2, r3
  40af62:	4b0e      	ldr	r3, [pc, #56]	; (40af9c <xQueueGenericSendFromISR+0x70>)
  40af64:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  40af66:	f1b4 3fff 	cmp.w	r4, #4294967295
  40af6a:	d005      	beq.n	40af78 <xQueueGenericSendFromISR+0x4c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40af6c:	3401      	adds	r4, #1
  40af6e:	b264      	sxtb	r4, r4
  40af70:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
			xReturn = pdPASS;
  40af74:	2001      	movs	r0, #1
  40af76:	e7eb      	b.n	40af50 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40af78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40af7a:	b90b      	cbnz	r3, 40af80 <xQueueGenericSendFromISR+0x54>
			xReturn = pdPASS;
  40af7c:	2001      	movs	r0, #1
  40af7e:	e7e7      	b.n	40af50 <xQueueGenericSendFromISR+0x24>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40af80:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40af84:	4b06      	ldr	r3, [pc, #24]	; (40afa0 <xQueueGenericSendFromISR+0x74>)
  40af86:	4798      	blx	r3
  40af88:	b118      	cbz	r0, 40af92 <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
  40af8a:	b127      	cbz	r7, 40af96 <xQueueGenericSendFromISR+0x6a>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40af8c:	2001      	movs	r0, #1
  40af8e:	6038      	str	r0, [r7, #0]
  40af90:	e7de      	b.n	40af50 <xQueueGenericSendFromISR+0x24>
			xReturn = pdPASS;
  40af92:	2001      	movs	r0, #1
  40af94:	e7dc      	b.n	40af50 <xQueueGenericSendFromISR+0x24>
  40af96:	2001      	movs	r0, #1
  40af98:	e7da      	b.n	40af50 <xQueueGenericSendFromISR+0x24>
  40af9a:	bf00      	nop
  40af9c:	0040abc9 	.word	0x0040abc9
  40afa0:	0040b979 	.word	0x0040b979

0040afa4 <xQueueGiveFromISR>:
{
  40afa4:	b538      	push	{r3, r4, r5, lr}
	__asm volatile
  40afa6:	f3ef 8411 	mrs	r4, BASEPRI
  40afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
  40afae:	f383 8811 	msr	BASEPRI, r3
  40afb2:	f3bf 8f6f 	isb	sy
  40afb6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40afba:	6b82      	ldr	r2, [r0, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  40afbc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40afbe:	429a      	cmp	r2, r3
  40afc0:	d21c      	bcs.n	40affc <xQueueGiveFromISR+0x58>
			const int8_t cTxLock = pxQueue->cTxLock;
  40afc2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
  40afc6:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40afc8:	3201      	adds	r2, #1
  40afca:	6382      	str	r2, [r0, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  40afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
  40afd0:	d007      	beq.n	40afe2 <xQueueGiveFromISR+0x3e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40afd2:	3301      	adds	r3, #1
  40afd4:	b25b      	sxtb	r3, r3
  40afd6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
			xReturn = pdPASS;
  40afda:	2001      	movs	r0, #1
	__asm volatile
  40afdc:	f384 8811 	msr	BASEPRI, r4
}
  40afe0:	bd38      	pop	{r3, r4, r5, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40afe2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  40afe4:	b90b      	cbnz	r3, 40afea <xQueueGiveFromISR+0x46>
			xReturn = pdPASS;
  40afe6:	2001      	movs	r0, #1
  40afe8:	e7f8      	b.n	40afdc <xQueueGiveFromISR+0x38>
  40afea:	460d      	mov	r5, r1
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40afec:	3024      	adds	r0, #36	; 0x24
  40afee:	4b06      	ldr	r3, [pc, #24]	; (40b008 <xQueueGiveFromISR+0x64>)
  40aff0:	4798      	blx	r3
  40aff2:	b128      	cbz	r0, 40b000 <xQueueGiveFromISR+0x5c>
							if( pxHigherPriorityTaskWoken != NULL )
  40aff4:	b135      	cbz	r5, 40b004 <xQueueGiveFromISR+0x60>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40aff6:	2001      	movs	r0, #1
  40aff8:	6028      	str	r0, [r5, #0]
  40affa:	e7ef      	b.n	40afdc <xQueueGiveFromISR+0x38>
			xReturn = errQUEUE_FULL;
  40affc:	2000      	movs	r0, #0
  40affe:	e7ed      	b.n	40afdc <xQueueGiveFromISR+0x38>
			xReturn = pdPASS;
  40b000:	2001      	movs	r0, #1
  40b002:	e7eb      	b.n	40afdc <xQueueGiveFromISR+0x38>
  40b004:	2001      	movs	r0, #1
  40b006:	e7e9      	b.n	40afdc <xQueueGiveFromISR+0x38>
  40b008:	0040b979 	.word	0x0040b979

0040b00c <xQueueReceive>:
{
  40b00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b010:	b084      	sub	sp, #16
  40b012:	4604      	mov	r4, r0
  40b014:	4688      	mov	r8, r1
  40b016:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
  40b018:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
  40b01c:	4d3f      	ldr	r5, [pc, #252]	; (40b11c <xQueueReceive+0x110>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  40b01e:	4e40      	ldr	r6, [pc, #256]	; (40b120 <xQueueReceive+0x114>)
					portYIELD_WITHIN_API();
  40b020:	f8df 910c 	ldr.w	r9, [pc, #268]	; 40b130 <xQueueReceive+0x124>
  40b024:	e035      	b.n	40b092 <xQueueReceive+0x86>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40b026:	4641      	mov	r1, r8
  40b028:	4620      	mov	r0, r4
  40b02a:	4b3e      	ldr	r3, [pc, #248]	; (40b124 <xQueueReceive+0x118>)
  40b02c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  40b02e:	1e7b      	subs	r3, r7, #1
  40b030:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40b032:	6923      	ldr	r3, [r4, #16]
  40b034:	b92b      	cbnz	r3, 40b042 <xQueueReceive+0x36>
				taskEXIT_CRITICAL();
  40b036:	4b3c      	ldr	r3, [pc, #240]	; (40b128 <xQueueReceive+0x11c>)
  40b038:	4798      	blx	r3
				return pdPASS;
  40b03a:	2001      	movs	r0, #1
}
  40b03c:	b004      	add	sp, #16
  40b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40b042:	f104 0010 	add.w	r0, r4, #16
  40b046:	4b39      	ldr	r3, [pc, #228]	; (40b12c <xQueueReceive+0x120>)
  40b048:	4798      	blx	r3
  40b04a:	2800      	cmp	r0, #0
  40b04c:	d0f3      	beq.n	40b036 <xQueueReceive+0x2a>
						queueYIELD_IF_USING_PREEMPTION();
  40b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40b052:	4b37      	ldr	r3, [pc, #220]	; (40b130 <xQueueReceive+0x124>)
  40b054:	601a      	str	r2, [r3, #0]
  40b056:	f3bf 8f4f 	dsb	sy
  40b05a:	f3bf 8f6f 	isb	sy
  40b05e:	e7ea      	b.n	40b036 <xQueueReceive+0x2a>
					taskEXIT_CRITICAL();
  40b060:	4b31      	ldr	r3, [pc, #196]	; (40b128 <xQueueReceive+0x11c>)
  40b062:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40b064:	2000      	movs	r0, #0
  40b066:	e7e9      	b.n	40b03c <xQueueReceive+0x30>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40b068:	a802      	add	r0, sp, #8
  40b06a:	47b0      	blx	r6
  40b06c:	e01b      	b.n	40b0a6 <xQueueReceive+0x9a>
				prvUnlockQueue( pxQueue );
  40b06e:	4620      	mov	r0, r4
  40b070:	4b30      	ldr	r3, [pc, #192]	; (40b134 <xQueueReceive+0x128>)
  40b072:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40b074:	4b30      	ldr	r3, [pc, #192]	; (40b138 <xQueueReceive+0x12c>)
  40b076:	4798      	blx	r3
  40b078:	e009      	b.n	40b08e <xQueueReceive+0x82>
			prvUnlockQueue( pxQueue );
  40b07a:	4620      	mov	r0, r4
  40b07c:	4b2d      	ldr	r3, [pc, #180]	; (40b134 <xQueueReceive+0x128>)
  40b07e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40b080:	4b2d      	ldr	r3, [pc, #180]	; (40b138 <xQueueReceive+0x12c>)
  40b082:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40b084:	4620      	mov	r0, r4
  40b086:	4b2d      	ldr	r3, [pc, #180]	; (40b13c <xQueueReceive+0x130>)
  40b088:	4798      	blx	r3
  40b08a:	2800      	cmp	r0, #0
  40b08c:	d144      	bne.n	40b118 <xQueueReceive+0x10c>
  40b08e:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  40b092:	47a8      	blx	r5
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40b094:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40b096:	2f00      	cmp	r7, #0
  40b098:	d1c5      	bne.n	40b026 <xQueueReceive+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40b09a:	9b01      	ldr	r3, [sp, #4]
  40b09c:	2b00      	cmp	r3, #0
  40b09e:	d0df      	beq.n	40b060 <xQueueReceive+0x54>
				else if( xEntryTimeSet == pdFALSE )
  40b0a0:	f1ba 0f00 	cmp.w	sl, #0
  40b0a4:	d0e0      	beq.n	40b068 <xQueueReceive+0x5c>
		taskEXIT_CRITICAL();
  40b0a6:	4b20      	ldr	r3, [pc, #128]	; (40b128 <xQueueReceive+0x11c>)
  40b0a8:	4798      	blx	r3
		vTaskSuspendAll();
  40b0aa:	4b25      	ldr	r3, [pc, #148]	; (40b140 <xQueueReceive+0x134>)
  40b0ac:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40b0ae:	47a8      	blx	r5
  40b0b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40b0b4:	b25b      	sxtb	r3, r3
  40b0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  40b0ba:	bf04      	itt	eq
  40b0bc:	2300      	moveq	r3, #0
  40b0be:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  40b0c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40b0c6:	b25b      	sxtb	r3, r3
  40b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  40b0cc:	bf04      	itt	eq
  40b0ce:	2300      	moveq	r3, #0
  40b0d0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  40b0d4:	4b14      	ldr	r3, [pc, #80]	; (40b128 <xQueueReceive+0x11c>)
  40b0d6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40b0d8:	a901      	add	r1, sp, #4
  40b0da:	a802      	add	r0, sp, #8
  40b0dc:	4b19      	ldr	r3, [pc, #100]	; (40b144 <xQueueReceive+0x138>)
  40b0de:	4798      	blx	r3
  40b0e0:	2800      	cmp	r0, #0
  40b0e2:	d1ca      	bne.n	40b07a <xQueueReceive+0x6e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40b0e4:	4620      	mov	r0, r4
  40b0e6:	4b15      	ldr	r3, [pc, #84]	; (40b13c <xQueueReceive+0x130>)
  40b0e8:	4798      	blx	r3
  40b0ea:	2800      	cmp	r0, #0
  40b0ec:	d0bf      	beq.n	40b06e <xQueueReceive+0x62>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40b0ee:	9901      	ldr	r1, [sp, #4]
  40b0f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40b0f4:	4b14      	ldr	r3, [pc, #80]	; (40b148 <xQueueReceive+0x13c>)
  40b0f6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40b0f8:	4620      	mov	r0, r4
  40b0fa:	4b0e      	ldr	r3, [pc, #56]	; (40b134 <xQueueReceive+0x128>)
  40b0fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40b0fe:	4b0e      	ldr	r3, [pc, #56]	; (40b138 <xQueueReceive+0x12c>)
  40b100:	4798      	blx	r3
  40b102:	2800      	cmp	r0, #0
  40b104:	d1c3      	bne.n	40b08e <xQueueReceive+0x82>
					portYIELD_WITHIN_API();
  40b106:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40b10a:	f8c9 3000 	str.w	r3, [r9]
  40b10e:	f3bf 8f4f 	dsb	sy
  40b112:	f3bf 8f6f 	isb	sy
  40b116:	e7ba      	b.n	40b08e <xQueueReceive+0x82>
				return errQUEUE_EMPTY;
  40b118:	2000      	movs	r0, #0
  40b11a:	e78f      	b.n	40b03c <xQueueReceive+0x30>
  40b11c:	00409f15 	.word	0x00409f15
  40b120:	0040ba81 	.word	0x0040ba81
  40b124:	0040ac49 	.word	0x0040ac49
  40b128:	00409f35 	.word	0x00409f35
  40b12c:	0040b979 	.word	0x0040b979
  40b130:	e000ed04 	.word	0xe000ed04
  40b134:	0040ac71 	.word	0x0040ac71
  40b138:	0040b775 	.word	0x0040b775
  40b13c:	0040aba9 	.word	0x0040aba9
  40b140:	0040b639 	.word	0x0040b639
  40b144:	0040ba99 	.word	0x0040ba99
  40b148:	0040b929 	.word	0x0040b929

0040b14c <xQueueSemaphoreTake>:
{
  40b14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b150:	b085      	sub	sp, #20
  40b152:	4604      	mov	r4, r0
  40b154:	9101      	str	r1, [sp, #4]
	BaseType_t xInheritanceOccurred = pdFALSE;
  40b156:	f04f 0900 	mov.w	r9, #0
BaseType_t xEntryTimeSet = pdFALSE;
  40b15a:	464f      	mov	r7, r9
		taskENTER_CRITICAL();
  40b15c:	4d50      	ldr	r5, [pc, #320]	; (40b2a0 <xQueueSemaphoreTake+0x154>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  40b15e:	4e51      	ldr	r6, [pc, #324]	; (40b2a4 <xQueueSemaphoreTake+0x158>)
					portYIELD_WITHIN_API();
  40b160:	f8df 8150 	ldr.w	r8, [pc, #336]	; 40b2b4 <xQueueSemaphoreTake+0x168>
  40b164:	e041      	b.n	40b1ea <xQueueSemaphoreTake+0x9e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  40b166:	3b01      	subs	r3, #1
  40b168:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40b16a:	6823      	ldr	r3, [r4, #0]
  40b16c:	b14b      	cbz	r3, 40b182 <xQueueSemaphoreTake+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40b16e:	6923      	ldr	r3, [r4, #16]
  40b170:	b95b      	cbnz	r3, 40b18a <xQueueSemaphoreTake+0x3e>
				taskEXIT_CRITICAL();
  40b172:	4b4d      	ldr	r3, [pc, #308]	; (40b2a8 <xQueueSemaphoreTake+0x15c>)
  40b174:	4798      	blx	r3
				return pdPASS;
  40b176:	f04f 0901 	mov.w	r9, #1
}
  40b17a:	4648      	mov	r0, r9
  40b17c:	b005      	add	sp, #20
  40b17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40b182:	4b4a      	ldr	r3, [pc, #296]	; (40b2ac <xQueueSemaphoreTake+0x160>)
  40b184:	4798      	blx	r3
  40b186:	6060      	str	r0, [r4, #4]
  40b188:	e7f1      	b.n	40b16e <xQueueSemaphoreTake+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40b18a:	f104 0010 	add.w	r0, r4, #16
  40b18e:	4b48      	ldr	r3, [pc, #288]	; (40b2b0 <xQueueSemaphoreTake+0x164>)
  40b190:	4798      	blx	r3
  40b192:	2800      	cmp	r0, #0
  40b194:	d0ed      	beq.n	40b172 <xQueueSemaphoreTake+0x26>
						queueYIELD_IF_USING_PREEMPTION();
  40b196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40b19a:	4b46      	ldr	r3, [pc, #280]	; (40b2b4 <xQueueSemaphoreTake+0x168>)
  40b19c:	601a      	str	r2, [r3, #0]
  40b19e:	f3bf 8f4f 	dsb	sy
  40b1a2:	f3bf 8f6f 	isb	sy
  40b1a6:	e7e4      	b.n	40b172 <xQueueSemaphoreTake+0x26>
					taskEXIT_CRITICAL();
  40b1a8:	4b3f      	ldr	r3, [pc, #252]	; (40b2a8 <xQueueSemaphoreTake+0x15c>)
  40b1aa:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40b1ac:	f04f 0900 	mov.w	r9, #0
  40b1b0:	e7e3      	b.n	40b17a <xQueueSemaphoreTake+0x2e>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40b1b2:	a802      	add	r0, sp, #8
  40b1b4:	47b0      	blx	r6
  40b1b6:	e021      	b.n	40b1fc <xQueueSemaphoreTake+0xb0>
						taskENTER_CRITICAL();
  40b1b8:	47a8      	blx	r5
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40b1ba:	6860      	ldr	r0, [r4, #4]
  40b1bc:	4b3e      	ldr	r3, [pc, #248]	; (40b2b8 <xQueueSemaphoreTake+0x16c>)
  40b1be:	4798      	blx	r3
  40b1c0:	4681      	mov	r9, r0
						taskEXIT_CRITICAL();
  40b1c2:	4b39      	ldr	r3, [pc, #228]	; (40b2a8 <xQueueSemaphoreTake+0x15c>)
  40b1c4:	4798      	blx	r3
  40b1c6:	e040      	b.n	40b24a <xQueueSemaphoreTake+0xfe>
				prvUnlockQueue( pxQueue );
  40b1c8:	4620      	mov	r0, r4
  40b1ca:	4b3c      	ldr	r3, [pc, #240]	; (40b2bc <xQueueSemaphoreTake+0x170>)
  40b1cc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40b1ce:	4b3c      	ldr	r3, [pc, #240]	; (40b2c0 <xQueueSemaphoreTake+0x174>)
  40b1d0:	4798      	blx	r3
  40b1d2:	e009      	b.n	40b1e8 <xQueueSemaphoreTake+0x9c>
			prvUnlockQueue( pxQueue );
  40b1d4:	4620      	mov	r0, r4
  40b1d6:	4b39      	ldr	r3, [pc, #228]	; (40b2bc <xQueueSemaphoreTake+0x170>)
  40b1d8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40b1da:	4b39      	ldr	r3, [pc, #228]	; (40b2c0 <xQueueSemaphoreTake+0x174>)
  40b1dc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40b1de:	4620      	mov	r0, r4
  40b1e0:	4b38      	ldr	r3, [pc, #224]	; (40b2c4 <xQueueSemaphoreTake+0x178>)
  40b1e2:	4798      	blx	r3
  40b1e4:	2800      	cmp	r0, #0
  40b1e6:	d145      	bne.n	40b274 <xQueueSemaphoreTake+0x128>
  40b1e8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  40b1ea:	47a8      	blx	r5
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  40b1ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  40b1ee:	2b00      	cmp	r3, #0
  40b1f0:	d1b9      	bne.n	40b166 <xQueueSemaphoreTake+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40b1f2:	9b01      	ldr	r3, [sp, #4]
  40b1f4:	2b00      	cmp	r3, #0
  40b1f6:	d0d7      	beq.n	40b1a8 <xQueueSemaphoreTake+0x5c>
				else if( xEntryTimeSet == pdFALSE )
  40b1f8:	2f00      	cmp	r7, #0
  40b1fa:	d0da      	beq.n	40b1b2 <xQueueSemaphoreTake+0x66>
		taskEXIT_CRITICAL();
  40b1fc:	4b2a      	ldr	r3, [pc, #168]	; (40b2a8 <xQueueSemaphoreTake+0x15c>)
  40b1fe:	4798      	blx	r3
		vTaskSuspendAll();
  40b200:	4b31      	ldr	r3, [pc, #196]	; (40b2c8 <xQueueSemaphoreTake+0x17c>)
  40b202:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40b204:	47a8      	blx	r5
  40b206:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40b20a:	b25b      	sxtb	r3, r3
  40b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
  40b210:	bf04      	itt	eq
  40b212:	2300      	moveq	r3, #0
  40b214:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  40b218:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40b21c:	b25b      	sxtb	r3, r3
  40b21e:	f1b3 3fff 	cmp.w	r3, #4294967295
  40b222:	bf04      	itt	eq
  40b224:	2300      	moveq	r3, #0
  40b226:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  40b22a:	4b1f      	ldr	r3, [pc, #124]	; (40b2a8 <xQueueSemaphoreTake+0x15c>)
  40b22c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40b22e:	a901      	add	r1, sp, #4
  40b230:	a802      	add	r0, sp, #8
  40b232:	4b26      	ldr	r3, [pc, #152]	; (40b2cc <xQueueSemaphoreTake+0x180>)
  40b234:	4798      	blx	r3
  40b236:	2800      	cmp	r0, #0
  40b238:	d1cc      	bne.n	40b1d4 <xQueueSemaphoreTake+0x88>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40b23a:	4620      	mov	r0, r4
  40b23c:	4b21      	ldr	r3, [pc, #132]	; (40b2c4 <xQueueSemaphoreTake+0x178>)
  40b23e:	4798      	blx	r3
  40b240:	2800      	cmp	r0, #0
  40b242:	d0c1      	beq.n	40b1c8 <xQueueSemaphoreTake+0x7c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40b244:	6823      	ldr	r3, [r4, #0]
  40b246:	2b00      	cmp	r3, #0
  40b248:	d0b6      	beq.n	40b1b8 <xQueueSemaphoreTake+0x6c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40b24a:	9901      	ldr	r1, [sp, #4]
  40b24c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40b250:	4b1f      	ldr	r3, [pc, #124]	; (40b2d0 <xQueueSemaphoreTake+0x184>)
  40b252:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40b254:	4620      	mov	r0, r4
  40b256:	4b19      	ldr	r3, [pc, #100]	; (40b2bc <xQueueSemaphoreTake+0x170>)
  40b258:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40b25a:	4b19      	ldr	r3, [pc, #100]	; (40b2c0 <xQueueSemaphoreTake+0x174>)
  40b25c:	4798      	blx	r3
  40b25e:	2800      	cmp	r0, #0
  40b260:	d1c2      	bne.n	40b1e8 <xQueueSemaphoreTake+0x9c>
					portYIELD_WITHIN_API();
  40b262:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40b266:	f8c8 3000 	str.w	r3, [r8]
  40b26a:	f3bf 8f4f 	dsb	sy
  40b26e:	f3bf 8f6f 	isb	sy
  40b272:	e7b9      	b.n	40b1e8 <xQueueSemaphoreTake+0x9c>
					if( xInheritanceOccurred != pdFALSE )
  40b274:	f1b9 0f00 	cmp.w	r9, #0
  40b278:	f43f af7f 	beq.w	40b17a <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
  40b27c:	4b08      	ldr	r3, [pc, #32]	; (40b2a0 <xQueueSemaphoreTake+0x154>)
  40b27e:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  40b280:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40b282:	b15b      	cbz	r3, 40b29c <xQueueSemaphoreTake+0x150>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  40b284:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40b286:	6819      	ldr	r1, [r3, #0]
  40b288:	f1c1 0104 	rsb	r1, r1, #4
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  40b28c:	6860      	ldr	r0, [r4, #4]
  40b28e:	4b11      	ldr	r3, [pc, #68]	; (40b2d4 <xQueueSemaphoreTake+0x188>)
  40b290:	4798      	blx	r3
						taskEXIT_CRITICAL();
  40b292:	4b05      	ldr	r3, [pc, #20]	; (40b2a8 <xQueueSemaphoreTake+0x15c>)
  40b294:	4798      	blx	r3
				return errQUEUE_EMPTY;
  40b296:	f04f 0900 	mov.w	r9, #0
  40b29a:	e76e      	b.n	40b17a <xQueueSemaphoreTake+0x2e>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  40b29c:	2100      	movs	r1, #0
  40b29e:	e7f5      	b.n	40b28c <xQueueSemaphoreTake+0x140>
  40b2a0:	00409f15 	.word	0x00409f15
  40b2a4:	0040ba81 	.word	0x0040ba81
  40b2a8:	00409f35 	.word	0x00409f35
  40b2ac:	0040bd0d 	.word	0x0040bd0d
  40b2b0:	0040b979 	.word	0x0040b979
  40b2b4:	e000ed04 	.word	0xe000ed04
  40b2b8:	0040bb15 	.word	0x0040bb15
  40b2bc:	0040ac71 	.word	0x0040ac71
  40b2c0:	0040b775 	.word	0x0040b775
  40b2c4:	0040aba9 	.word	0x0040aba9
  40b2c8:	0040b639 	.word	0x0040b639
  40b2cc:	0040ba99 	.word	0x0040ba99
  40b2d0:	0040b929 	.word	0x0040b929
  40b2d4:	0040bc5d 	.word	0x0040bc5d

0040b2d8 <uxQueueMessagesWaiting>:
{
  40b2d8:	b510      	push	{r4, lr}
  40b2da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40b2dc:	4b03      	ldr	r3, [pc, #12]	; (40b2ec <uxQueueMessagesWaiting+0x14>)
  40b2de:	4798      	blx	r3
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  40b2e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40b2e2:	4b03      	ldr	r3, [pc, #12]	; (40b2f0 <uxQueueMessagesWaiting+0x18>)
  40b2e4:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  40b2e6:	4620      	mov	r0, r4
  40b2e8:	bd10      	pop	{r4, pc}
  40b2ea:	bf00      	nop
  40b2ec:	00409f15 	.word	0x00409f15
  40b2f0:	00409f35 	.word	0x00409f35

0040b2f4 <vQueueDelete>:
{
  40b2f4:	b508      	push	{r3, lr}
		vPortFree( pxQueue );
  40b2f6:	4b01      	ldr	r3, [pc, #4]	; (40b2fc <vQueueDelete+0x8>)
  40b2f8:	4798      	blx	r3
  40b2fa:	bd08      	pop	{r3, pc}
  40b2fc:	0040a1b9 	.word	0x0040a1b9

0040b300 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40b300:	4b08      	ldr	r3, [pc, #32]	; (40b324 <prvResetNextTaskUnblockTime+0x24>)
  40b302:	681b      	ldr	r3, [r3, #0]
  40b304:	681b      	ldr	r3, [r3, #0]
  40b306:	b13b      	cbz	r3, 40b318 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40b308:	4b06      	ldr	r3, [pc, #24]	; (40b324 <prvResetNextTaskUnblockTime+0x24>)
  40b30a:	681b      	ldr	r3, [r3, #0]
  40b30c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40b30e:	68db      	ldr	r3, [r3, #12]
  40b310:	685a      	ldr	r2, [r3, #4]
  40b312:	4b05      	ldr	r3, [pc, #20]	; (40b328 <prvResetNextTaskUnblockTime+0x28>)
  40b314:	601a      	str	r2, [r3, #0]
  40b316:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  40b318:	f04f 32ff 	mov.w	r2, #4294967295
  40b31c:	4b02      	ldr	r3, [pc, #8]	; (40b328 <prvResetNextTaskUnblockTime+0x28>)
  40b31e:	601a      	str	r2, [r3, #0]
  40b320:	4770      	bx	lr
  40b322:	bf00      	nop
  40b324:	2001331c 	.word	0x2001331c
  40b328:	200133b4 	.word	0x200133b4

0040b32c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  40b32c:	b570      	push	{r4, r5, r6, lr}
  40b32e:	4604      	mov	r4, r0
  40b330:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  40b332:	4b1d      	ldr	r3, [pc, #116]	; (40b3a8 <prvAddCurrentTaskToDelayedList+0x7c>)
  40b334:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40b336:	4b1d      	ldr	r3, [pc, #116]	; (40b3ac <prvAddCurrentTaskToDelayedList+0x80>)
  40b338:	6818      	ldr	r0, [r3, #0]
  40b33a:	3004      	adds	r0, #4
  40b33c:	4b1c      	ldr	r3, [pc, #112]	; (40b3b0 <prvAddCurrentTaskToDelayedList+0x84>)
  40b33e:	4798      	blx	r3
  40b340:	b948      	cbnz	r0, 40b356 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40b342:	4b1a      	ldr	r3, [pc, #104]	; (40b3ac <prvAddCurrentTaskToDelayedList+0x80>)
  40b344:	681a      	ldr	r2, [r3, #0]
  40b346:	491b      	ldr	r1, [pc, #108]	; (40b3b4 <prvAddCurrentTaskToDelayedList+0x88>)
  40b348:	680b      	ldr	r3, [r1, #0]
  40b34a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40b34c:	2201      	movs	r2, #1
  40b34e:	4082      	lsls	r2, r0
  40b350:	ea23 0302 	bic.w	r3, r3, r2
  40b354:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40b356:	f1b4 3fff 	cmp.w	r4, #4294967295
  40b35a:	d013      	beq.n	40b384 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  40b35c:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  40b35e:	4b13      	ldr	r3, [pc, #76]	; (40b3ac <prvAddCurrentTaskToDelayedList+0x80>)
  40b360:	681b      	ldr	r3, [r3, #0]
  40b362:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  40b364:	42a5      	cmp	r5, r4
  40b366:	d816      	bhi.n	40b396 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40b368:	4b13      	ldr	r3, [pc, #76]	; (40b3b8 <prvAddCurrentTaskToDelayedList+0x8c>)
  40b36a:	6818      	ldr	r0, [r3, #0]
  40b36c:	4b0f      	ldr	r3, [pc, #60]	; (40b3ac <prvAddCurrentTaskToDelayedList+0x80>)
  40b36e:	6819      	ldr	r1, [r3, #0]
  40b370:	3104      	adds	r1, #4
  40b372:	4b12      	ldr	r3, [pc, #72]	; (40b3bc <prvAddCurrentTaskToDelayedList+0x90>)
  40b374:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  40b376:	4b12      	ldr	r3, [pc, #72]	; (40b3c0 <prvAddCurrentTaskToDelayedList+0x94>)
  40b378:	681b      	ldr	r3, [r3, #0]
  40b37a:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
  40b37c:	bf3c      	itt	cc
  40b37e:	4b10      	ldrcc	r3, [pc, #64]	; (40b3c0 <prvAddCurrentTaskToDelayedList+0x94>)
  40b380:	601c      	strcc	r4, [r3, #0]
  40b382:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40b384:	2e00      	cmp	r6, #0
  40b386:	d0e9      	beq.n	40b35c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40b388:	4b08      	ldr	r3, [pc, #32]	; (40b3ac <prvAddCurrentTaskToDelayedList+0x80>)
  40b38a:	6819      	ldr	r1, [r3, #0]
  40b38c:	3104      	adds	r1, #4
  40b38e:	480d      	ldr	r0, [pc, #52]	; (40b3c4 <prvAddCurrentTaskToDelayedList+0x98>)
  40b390:	4b0d      	ldr	r3, [pc, #52]	; (40b3c8 <prvAddCurrentTaskToDelayedList+0x9c>)
  40b392:	4798      	blx	r3
  40b394:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40b396:	4b0d      	ldr	r3, [pc, #52]	; (40b3cc <prvAddCurrentTaskToDelayedList+0xa0>)
  40b398:	6818      	ldr	r0, [r3, #0]
  40b39a:	4b04      	ldr	r3, [pc, #16]	; (40b3ac <prvAddCurrentTaskToDelayedList+0x80>)
  40b39c:	6819      	ldr	r1, [r3, #0]
  40b39e:	3104      	adds	r1, #4
  40b3a0:	4b06      	ldr	r3, [pc, #24]	; (40b3bc <prvAddCurrentTaskToDelayedList+0x90>)
  40b3a2:	4798      	blx	r3
  40b3a4:	bd70      	pop	{r4, r5, r6, pc}
  40b3a6:	bf00      	nop
  40b3a8:	200133e8 	.word	0x200133e8
  40b3ac:	20013318 	.word	0x20013318
  40b3b0:	00409cc5 	.word	0x00409cc5
  40b3b4:	20013384 	.word	0x20013384
  40b3b8:	2001331c 	.word	0x2001331c
  40b3bc:	00409c91 	.word	0x00409c91
  40b3c0:	200133b4 	.word	0x200133b4
  40b3c4:	200133d4 	.word	0x200133d4
  40b3c8:	00409c79 	.word	0x00409c79
  40b3cc:	20013320 	.word	0x20013320

0040b3d0 <prvIdleTask>:
{
  40b3d0:	b508      	push	{r3, lr}
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40b3d2:	4d08      	ldr	r5, [pc, #32]	; (40b3f4 <prvIdleTask+0x24>)
				taskYIELD();
  40b3d4:	4e08      	ldr	r6, [pc, #32]	; (40b3f8 <prvIdleTask+0x28>)
			vApplicationIdleHook();
  40b3d6:	4c09      	ldr	r4, [pc, #36]	; (40b3fc <prvIdleTask+0x2c>)
  40b3d8:	e000      	b.n	40b3dc <prvIdleTask+0xc>
  40b3da:	47a0      	blx	r4
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40b3dc:	682b      	ldr	r3, [r5, #0]
  40b3de:	2b01      	cmp	r3, #1
  40b3e0:	d9fb      	bls.n	40b3da <prvIdleTask+0xa>
				taskYIELD();
  40b3e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40b3e6:	6033      	str	r3, [r6, #0]
  40b3e8:	f3bf 8f4f 	dsb	sy
  40b3ec:	f3bf 8f6f 	isb	sy
  40b3f0:	e7f3      	b.n	40b3da <prvIdleTask+0xa>
  40b3f2:	bf00      	nop
  40b3f4:	20013324 	.word	0x20013324
  40b3f8:	e000ed04 	.word	0xe000ed04
  40b3fc:	0040c239 	.word	0x0040c239

0040b400 <xTaskCreate>:
	{
  40b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b404:	b083      	sub	sp, #12
  40b406:	4683      	mov	fp, r0
  40b408:	460e      	mov	r6, r1
  40b40a:	9301      	str	r3, [sp, #4]
  40b40c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40b410:	0095      	lsls	r5, r2, #2
  40b412:	4628      	mov	r0, r5
  40b414:	4b59      	ldr	r3, [pc, #356]	; (40b57c <xTaskCreate+0x17c>)
  40b416:	4798      	blx	r3
			if( pxStack != NULL )
  40b418:	2800      	cmp	r0, #0
  40b41a:	f000 8085 	beq.w	40b528 <xTaskCreate+0x128>
  40b41e:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  40b420:	2058      	movs	r0, #88	; 0x58
  40b422:	4b56      	ldr	r3, [pc, #344]	; (40b57c <xTaskCreate+0x17c>)
  40b424:	4798      	blx	r3
				if( pxNewTCB != NULL )
  40b426:	4604      	mov	r4, r0
  40b428:	2800      	cmp	r0, #0
  40b42a:	d07a      	beq.n	40b522 <xTaskCreate+0x122>
					pxNewTCB->pxStack = pxStack;
  40b42c:	6307      	str	r7, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  40b42e:	3d04      	subs	r5, #4
  40b430:	443d      	add	r5, r7
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40b432:	f025 0507 	bic.w	r5, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40b436:	7833      	ldrb	r3, [r6, #0]
  40b438:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40b43c:	7833      	ldrb	r3, [r6, #0]
  40b43e:	b163      	cbz	r3, 40b45a <xTaskCreate+0x5a>
  40b440:	4633      	mov	r3, r6
  40b442:	f100 0234 	add.w	r2, r0, #52	; 0x34
  40b446:	f106 0113 	add.w	r1, r6, #19
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40b44a:	7858      	ldrb	r0, [r3, #1]
  40b44c:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40b450:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  40b454:	b108      	cbz	r0, 40b45a <xTaskCreate+0x5a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40b456:	428b      	cmp	r3, r1
  40b458:	d1f7      	bne.n	40b44a <xTaskCreate+0x4a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40b45a:	2700      	movs	r7, #0
  40b45c:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
  40b460:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40b462:	2e03      	cmp	r6, #3
  40b464:	bf28      	it	cs
  40b466:	2603      	movcs	r6, #3
	pxNewTCB->uxPriority = uxPriority;
  40b468:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  40b46a:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  40b46c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40b46e:	f104 0804 	add.w	r8, r4, #4
  40b472:	4640      	mov	r0, r8
  40b474:	f8df 9154 	ldr.w	r9, [pc, #340]	; 40b5cc <xTaskCreate+0x1cc>
  40b478:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  40b47a:	f104 0018 	add.w	r0, r4, #24
  40b47e:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40b480:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40b482:	f1c6 0604 	rsb	r6, r6, #4
  40b486:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  40b488:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  40b48a:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40b48c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40b490:	9a01      	ldr	r2, [sp, #4]
  40b492:	4659      	mov	r1, fp
  40b494:	4628      	mov	r0, r5
  40b496:	4b3a      	ldr	r3, [pc, #232]	; (40b580 <xTaskCreate+0x180>)
  40b498:	4798      	blx	r3
  40b49a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  40b49c:	f1ba 0f00 	cmp.w	sl, #0
  40b4a0:	d001      	beq.n	40b4a6 <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40b4a2:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  40b4a6:	4b37      	ldr	r3, [pc, #220]	; (40b584 <xTaskCreate+0x184>)
  40b4a8:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  40b4aa:	4a37      	ldr	r2, [pc, #220]	; (40b588 <xTaskCreate+0x188>)
  40b4ac:	6813      	ldr	r3, [r2, #0]
  40b4ae:	3301      	adds	r3, #1
  40b4b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  40b4b2:	4b36      	ldr	r3, [pc, #216]	; (40b58c <xTaskCreate+0x18c>)
  40b4b4:	681b      	ldr	r3, [r3, #0]
  40b4b6:	2b00      	cmp	r3, #0
  40b4b8:	d039      	beq.n	40b52e <xTaskCreate+0x12e>
			if( xSchedulerRunning == pdFALSE )
  40b4ba:	4b35      	ldr	r3, [pc, #212]	; (40b590 <xTaskCreate+0x190>)
  40b4bc:	681b      	ldr	r3, [r3, #0]
  40b4be:	b93b      	cbnz	r3, 40b4d0 <xTaskCreate+0xd0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40b4c0:	4b32      	ldr	r3, [pc, #200]	; (40b58c <xTaskCreate+0x18c>)
  40b4c2:	681b      	ldr	r3, [r3, #0]
  40b4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b4c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b4c8:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
  40b4ca:	bf9c      	itt	ls
  40b4cc:	4b2f      	ldrls	r3, [pc, #188]	; (40b58c <xTaskCreate+0x18c>)
  40b4ce:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
  40b4d0:	4a30      	ldr	r2, [pc, #192]	; (40b594 <xTaskCreate+0x194>)
  40b4d2:	6813      	ldr	r3, [r2, #0]
  40b4d4:	3301      	adds	r3, #1
  40b4d6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
  40b4d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40b4da:	4a2f      	ldr	r2, [pc, #188]	; (40b598 <xTaskCreate+0x198>)
  40b4dc:	6811      	ldr	r1, [r2, #0]
  40b4de:	2301      	movs	r3, #1
  40b4e0:	4083      	lsls	r3, r0
  40b4e2:	430b      	orrs	r3, r1
  40b4e4:	6013      	str	r3, [r2, #0]
  40b4e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40b4ea:	4641      	mov	r1, r8
  40b4ec:	4b2b      	ldr	r3, [pc, #172]	; (40b59c <xTaskCreate+0x19c>)
  40b4ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40b4f2:	4b2b      	ldr	r3, [pc, #172]	; (40b5a0 <xTaskCreate+0x1a0>)
  40b4f4:	4798      	blx	r3
	taskEXIT_CRITICAL();
  40b4f6:	4b2b      	ldr	r3, [pc, #172]	; (40b5a4 <xTaskCreate+0x1a4>)
  40b4f8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  40b4fa:	4b25      	ldr	r3, [pc, #148]	; (40b590 <xTaskCreate+0x190>)
  40b4fc:	681b      	ldr	r3, [r3, #0]
  40b4fe:	2b00      	cmp	r3, #0
  40b500:	d036      	beq.n	40b570 <xTaskCreate+0x170>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40b502:	4b22      	ldr	r3, [pc, #136]	; (40b58c <xTaskCreate+0x18c>)
  40b504:	681b      	ldr	r3, [r3, #0]
  40b506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40b508:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b50a:	429a      	cmp	r2, r3
  40b50c:	d234      	bcs.n	40b578 <xTaskCreate+0x178>
			taskYIELD_IF_USING_PREEMPTION();
  40b50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40b512:	4b25      	ldr	r3, [pc, #148]	; (40b5a8 <xTaskCreate+0x1a8>)
  40b514:	601a      	str	r2, [r3, #0]
  40b516:	f3bf 8f4f 	dsb	sy
  40b51a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40b51e:	2001      	movs	r0, #1
  40b520:	e027      	b.n	40b572 <xTaskCreate+0x172>
					vPortFree( pxStack );
  40b522:	4638      	mov	r0, r7
  40b524:	4b21      	ldr	r3, [pc, #132]	; (40b5ac <xTaskCreate+0x1ac>)
  40b526:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40b528:	f04f 30ff 	mov.w	r0, #4294967295
  40b52c:	e021      	b.n	40b572 <xTaskCreate+0x172>
			pxCurrentTCB = pxNewTCB;
  40b52e:	4b17      	ldr	r3, [pc, #92]	; (40b58c <xTaskCreate+0x18c>)
  40b530:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40b532:	6813      	ldr	r3, [r2, #0]
  40b534:	2b01      	cmp	r3, #1
  40b536:	d1cb      	bne.n	40b4d0 <xTaskCreate+0xd0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40b538:	4e18      	ldr	r6, [pc, #96]	; (40b59c <xTaskCreate+0x19c>)
  40b53a:	4630      	mov	r0, r6
  40b53c:	4d1c      	ldr	r5, [pc, #112]	; (40b5b0 <xTaskCreate+0x1b0>)
  40b53e:	47a8      	blx	r5
  40b540:	f106 0014 	add.w	r0, r6, #20
  40b544:	47a8      	blx	r5
  40b546:	f106 0028 	add.w	r0, r6, #40	; 0x28
  40b54a:	47a8      	blx	r5
  40b54c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  40b550:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  40b552:	4f18      	ldr	r7, [pc, #96]	; (40b5b4 <xTaskCreate+0x1b4>)
  40b554:	4638      	mov	r0, r7
  40b556:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40b558:	4e17      	ldr	r6, [pc, #92]	; (40b5b8 <xTaskCreate+0x1b8>)
  40b55a:	4630      	mov	r0, r6
  40b55c:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  40b55e:	4817      	ldr	r0, [pc, #92]	; (40b5bc <xTaskCreate+0x1bc>)
  40b560:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40b562:	4817      	ldr	r0, [pc, #92]	; (40b5c0 <xTaskCreate+0x1c0>)
  40b564:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40b566:	4b17      	ldr	r3, [pc, #92]	; (40b5c4 <xTaskCreate+0x1c4>)
  40b568:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40b56a:	4b17      	ldr	r3, [pc, #92]	; (40b5c8 <xTaskCreate+0x1c8>)
  40b56c:	601e      	str	r6, [r3, #0]
  40b56e:	e7af      	b.n	40b4d0 <xTaskCreate+0xd0>
			xReturn = pdPASS;
  40b570:	2001      	movs	r0, #1
	}
  40b572:	b003      	add	sp, #12
  40b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  40b578:	2001      	movs	r0, #1
		return xReturn;
  40b57a:	e7fa      	b.n	40b572 <xTaskCreate+0x172>
  40b57c:	0040a0a1 	.word	0x0040a0a1
  40b580:	00409ec1 	.word	0x00409ec1
  40b584:	00409f15 	.word	0x00409f15
  40b588:	20013374 	.word	0x20013374
  40b58c:	20013318 	.word	0x20013318
  40b590:	200133d0 	.word	0x200133d0
  40b594:	20013380 	.word	0x20013380
  40b598:	20013384 	.word	0x20013384
  40b59c:	20013324 	.word	0x20013324
  40b5a0:	00409c79 	.word	0x00409c79
  40b5a4:	00409f35 	.word	0x00409f35
  40b5a8:	e000ed04 	.word	0xe000ed04
  40b5ac:	0040a1b9 	.word	0x0040a1b9
  40b5b0:	00409c5d 	.word	0x00409c5d
  40b5b4:	20013388 	.word	0x20013388
  40b5b8:	2001339c 	.word	0x2001339c
  40b5bc:	200133bc 	.word	0x200133bc
  40b5c0:	200133d4 	.word	0x200133d4
  40b5c4:	2001331c 	.word	0x2001331c
  40b5c8:	20013320 	.word	0x20013320
  40b5cc:	00409c73 	.word	0x00409c73

0040b5d0 <vTaskStartScheduler>:
{
  40b5d0:	b510      	push	{r4, lr}
  40b5d2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  40b5d4:	4b10      	ldr	r3, [pc, #64]	; (40b618 <vTaskStartScheduler+0x48>)
  40b5d6:	9301      	str	r3, [sp, #4]
  40b5d8:	2300      	movs	r3, #0
  40b5da:	9300      	str	r3, [sp, #0]
  40b5dc:	2280      	movs	r2, #128	; 0x80
  40b5de:	490f      	ldr	r1, [pc, #60]	; (40b61c <vTaskStartScheduler+0x4c>)
  40b5e0:	480f      	ldr	r0, [pc, #60]	; (40b620 <vTaskStartScheduler+0x50>)
  40b5e2:	4c10      	ldr	r4, [pc, #64]	; (40b624 <vTaskStartScheduler+0x54>)
  40b5e4:	47a0      	blx	r4
	if( xReturn == pdPASS )
  40b5e6:	2801      	cmp	r0, #1
  40b5e8:	d001      	beq.n	40b5ee <vTaskStartScheduler+0x1e>
}
  40b5ea:	b002      	add	sp, #8
  40b5ec:	bd10      	pop	{r4, pc}
	__asm volatile
  40b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
  40b5f2:	f383 8811 	msr	BASEPRI, r3
  40b5f6:	f3bf 8f6f 	isb	sy
  40b5fa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  40b5fe:	f04f 32ff 	mov.w	r2, #4294967295
  40b602:	4b09      	ldr	r3, [pc, #36]	; (40b628 <vTaskStartScheduler+0x58>)
  40b604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40b606:	2201      	movs	r2, #1
  40b608:	4b08      	ldr	r3, [pc, #32]	; (40b62c <vTaskStartScheduler+0x5c>)
  40b60a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40b60c:	2200      	movs	r2, #0
  40b60e:	4b08      	ldr	r3, [pc, #32]	; (40b630 <vTaskStartScheduler+0x60>)
  40b610:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40b612:	4b08      	ldr	r3, [pc, #32]	; (40b634 <vTaskStartScheduler+0x64>)
  40b614:	4798      	blx	r3
}
  40b616:	e7e8      	b.n	40b5ea <vTaskStartScheduler+0x1a>
  40b618:	200133b0 	.word	0x200133b0
  40b61c:	00414074 	.word	0x00414074
  40b620:	0040b3d1 	.word	0x0040b3d1
  40b624:	0040b401 	.word	0x0040b401
  40b628:	200133b4 	.word	0x200133b4
  40b62c:	200133d0 	.word	0x200133d0
  40b630:	200133e8 	.word	0x200133e8
  40b634:	0040a001 	.word	0x0040a001

0040b638 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40b638:	4a02      	ldr	r2, [pc, #8]	; (40b644 <vTaskSuspendAll+0xc>)
  40b63a:	6813      	ldr	r3, [r2, #0]
  40b63c:	3301      	adds	r3, #1
  40b63e:	6013      	str	r3, [r2, #0]
  40b640:	4770      	bx	lr
  40b642:	bf00      	nop
  40b644:	2001337c 	.word	0x2001337c

0040b648 <xTaskGetTickCount>:
		xTicks = xTickCount;
  40b648:	4b01      	ldr	r3, [pc, #4]	; (40b650 <xTaskGetTickCount+0x8>)
  40b64a:	6818      	ldr	r0, [r3, #0]
}
  40b64c:	4770      	bx	lr
  40b64e:	bf00      	nop
  40b650:	200133e8 	.word	0x200133e8

0040b654 <xTaskIncrementTick>:
{
  40b654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40b658:	4b38      	ldr	r3, [pc, #224]	; (40b73c <xTaskIncrementTick+0xe8>)
  40b65a:	681b      	ldr	r3, [r3, #0]
  40b65c:	2b00      	cmp	r3, #0
  40b65e:	d167      	bne.n	40b730 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  40b660:	4b37      	ldr	r3, [pc, #220]	; (40b740 <xTaskIncrementTick+0xec>)
  40b662:	681a      	ldr	r2, [r3, #0]
  40b664:	f102 0801 	add.w	r8, r2, #1
		xTickCount = xConstTickCount;
  40b668:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  40b66c:	f1b8 0f00 	cmp.w	r8, #0
  40b670:	d017      	beq.n	40b6a2 <xTaskIncrementTick+0x4e>
		if( xConstTickCount >= xNextTaskUnblockTime )
  40b672:	4b34      	ldr	r3, [pc, #208]	; (40b744 <xTaskIncrementTick+0xf0>)
  40b674:	681b      	ldr	r3, [r3, #0]
  40b676:	4598      	cmp	r8, r3
  40b678:	d220      	bcs.n	40b6bc <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
  40b67a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40b67c:	4b32      	ldr	r3, [pc, #200]	; (40b748 <xTaskIncrementTick+0xf4>)
  40b67e:	681b      	ldr	r3, [r3, #0]
  40b680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b682:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40b686:	009b      	lsls	r3, r3, #2
  40b688:	4a30      	ldr	r2, [pc, #192]	; (40b74c <xTaskIncrementTick+0xf8>)
  40b68a:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  40b68c:	2b02      	cmp	r3, #2
  40b68e:	bf28      	it	cs
  40b690:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
  40b692:	4b2f      	ldr	r3, [pc, #188]	; (40b750 <xTaskIncrementTick+0xfc>)
  40b694:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40b696:	2b00      	cmp	r3, #0
}
  40b698:	bf0c      	ite	eq
  40b69a:	4628      	moveq	r0, r5
  40b69c:	2001      	movne	r0, #1
  40b69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			taskSWITCH_DELAYED_LISTS();
  40b6a2:	4a2c      	ldr	r2, [pc, #176]	; (40b754 <xTaskIncrementTick+0x100>)
  40b6a4:	6811      	ldr	r1, [r2, #0]
  40b6a6:	4b2c      	ldr	r3, [pc, #176]	; (40b758 <xTaskIncrementTick+0x104>)
  40b6a8:	6818      	ldr	r0, [r3, #0]
  40b6aa:	6010      	str	r0, [r2, #0]
  40b6ac:	6019      	str	r1, [r3, #0]
  40b6ae:	4a2b      	ldr	r2, [pc, #172]	; (40b75c <xTaskIncrementTick+0x108>)
  40b6b0:	6813      	ldr	r3, [r2, #0]
  40b6b2:	3301      	adds	r3, #1
  40b6b4:	6013      	str	r3, [r2, #0]
  40b6b6:	4b2a      	ldr	r3, [pc, #168]	; (40b760 <xTaskIncrementTick+0x10c>)
  40b6b8:	4798      	blx	r3
  40b6ba:	e7da      	b.n	40b672 <xTaskIncrementTick+0x1e>
  40b6bc:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40b6be:	4f25      	ldr	r7, [pc, #148]	; (40b754 <xTaskIncrementTick+0x100>)
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40b6c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 40b76c <xTaskIncrementTick+0x118>
					prvAddTaskToReadyList( pxTCB );
  40b6c4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 40b770 <xTaskIncrementTick+0x11c>
  40b6c8:	e021      	b.n	40b70e <xTaskIncrementTick+0xba>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40b6ca:	f04f 32ff 	mov.w	r2, #4294967295
  40b6ce:	4b1d      	ldr	r3, [pc, #116]	; (40b744 <xTaskIncrementTick+0xf0>)
  40b6d0:	601a      	str	r2, [r3, #0]
					break;
  40b6d2:	e7d3      	b.n	40b67c <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
  40b6d4:	4a1b      	ldr	r2, [pc, #108]	; (40b744 <xTaskIncrementTick+0xf0>)
  40b6d6:	6013      	str	r3, [r2, #0]
						break;
  40b6d8:	e7d0      	b.n	40b67c <xTaskIncrementTick+0x28>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40b6da:	f104 0018 	add.w	r0, r4, #24
  40b6de:	47d0      	blx	sl
					prvAddTaskToReadyList( pxTCB );
  40b6e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40b6e2:	f8d9 2000 	ldr.w	r2, [r9]
  40b6e6:	2301      	movs	r3, #1
  40b6e8:	4083      	lsls	r3, r0
  40b6ea:	4313      	orrs	r3, r2
  40b6ec:	f8c9 3000 	str.w	r3, [r9]
  40b6f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40b6f4:	4631      	mov	r1, r6
  40b6f6:	4b15      	ldr	r3, [pc, #84]	; (40b74c <xTaskIncrementTick+0xf8>)
  40b6f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40b6fc:	4b19      	ldr	r3, [pc, #100]	; (40b764 <xTaskIncrementTick+0x110>)
  40b6fe:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40b700:	4b11      	ldr	r3, [pc, #68]	; (40b748 <xTaskIncrementTick+0xf4>)
  40b702:	681b      	ldr	r3, [r3, #0]
  40b704:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  40b708:	429a      	cmp	r2, r3
  40b70a:	bf28      	it	cs
  40b70c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40b70e:	683b      	ldr	r3, [r7, #0]
  40b710:	681b      	ldr	r3, [r3, #0]
  40b712:	2b00      	cmp	r3, #0
  40b714:	d0d9      	beq.n	40b6ca <xTaskIncrementTick+0x76>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40b716:	683b      	ldr	r3, [r7, #0]
  40b718:	68db      	ldr	r3, [r3, #12]
  40b71a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40b71c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
  40b71e:	4598      	cmp	r8, r3
  40b720:	d3d8      	bcc.n	40b6d4 <xTaskIncrementTick+0x80>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40b722:	1d26      	adds	r6, r4, #4
  40b724:	4630      	mov	r0, r6
  40b726:	47d0      	blx	sl
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40b728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40b72a:	2b00      	cmp	r3, #0
  40b72c:	d1d5      	bne.n	40b6da <xTaskIncrementTick+0x86>
  40b72e:	e7d7      	b.n	40b6e0 <xTaskIncrementTick+0x8c>
		++uxPendedTicks;
  40b730:	4a0d      	ldr	r2, [pc, #52]	; (40b768 <xTaskIncrementTick+0x114>)
  40b732:	6813      	ldr	r3, [r2, #0]
  40b734:	3301      	adds	r3, #1
  40b736:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  40b738:	2500      	movs	r5, #0
  40b73a:	e7aa      	b.n	40b692 <xTaskIncrementTick+0x3e>
  40b73c:	2001337c 	.word	0x2001337c
  40b740:	200133e8 	.word	0x200133e8
  40b744:	200133b4 	.word	0x200133b4
  40b748:	20013318 	.word	0x20013318
  40b74c:	20013324 	.word	0x20013324
  40b750:	200133ec 	.word	0x200133ec
  40b754:	2001331c 	.word	0x2001331c
  40b758:	20013320 	.word	0x20013320
  40b75c:	200133b8 	.word	0x200133b8
  40b760:	0040b301 	.word	0x0040b301
  40b764:	00409c79 	.word	0x00409c79
  40b768:	20013378 	.word	0x20013378
  40b76c:	00409cc5 	.word	0x00409cc5
  40b770:	20013384 	.word	0x20013384

0040b774 <xTaskResumeAll>:
{
  40b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  40b778:	4b2e      	ldr	r3, [pc, #184]	; (40b834 <xTaskResumeAll+0xc0>)
  40b77a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40b77c:	4b2e      	ldr	r3, [pc, #184]	; (40b838 <xTaskResumeAll+0xc4>)
  40b77e:	681a      	ldr	r2, [r3, #0]
  40b780:	3a01      	subs	r2, #1
  40b782:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40b784:	681b      	ldr	r3, [r3, #0]
  40b786:	2b00      	cmp	r3, #0
  40b788:	d14c      	bne.n	40b824 <xTaskResumeAll+0xb0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40b78a:	4b2c      	ldr	r3, [pc, #176]	; (40b83c <xTaskResumeAll+0xc8>)
  40b78c:	681b      	ldr	r3, [r3, #0]
  40b78e:	b333      	cbz	r3, 40b7de <xTaskResumeAll+0x6a>
  40b790:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40b792:	4e2b      	ldr	r6, [pc, #172]	; (40b840 <xTaskResumeAll+0xcc>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40b794:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 40b86c <xTaskResumeAll+0xf8>
					prvAddTaskToReadyList( pxTCB );
  40b798:	4f2a      	ldr	r7, [pc, #168]	; (40b844 <xTaskResumeAll+0xd0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40b79a:	6833      	ldr	r3, [r6, #0]
  40b79c:	b30b      	cbz	r3, 40b7e2 <xTaskResumeAll+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40b79e:	68f3      	ldr	r3, [r6, #12]
  40b7a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40b7a2:	f104 0018 	add.w	r0, r4, #24
  40b7a6:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40b7a8:	1d25      	adds	r5, r4, #4
  40b7aa:	4628      	mov	r0, r5
  40b7ac:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  40b7ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40b7b0:	683a      	ldr	r2, [r7, #0]
  40b7b2:	2301      	movs	r3, #1
  40b7b4:	4083      	lsls	r3, r0
  40b7b6:	4313      	orrs	r3, r2
  40b7b8:	603b      	str	r3, [r7, #0]
  40b7ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40b7be:	4629      	mov	r1, r5
  40b7c0:	4b21      	ldr	r3, [pc, #132]	; (40b848 <xTaskResumeAll+0xd4>)
  40b7c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40b7c6:	4b21      	ldr	r3, [pc, #132]	; (40b84c <xTaskResumeAll+0xd8>)
  40b7c8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40b7ca:	4b21      	ldr	r3, [pc, #132]	; (40b850 <xTaskResumeAll+0xdc>)
  40b7cc:	681b      	ldr	r3, [r3, #0]
  40b7ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b7d2:	429a      	cmp	r2, r3
  40b7d4:	d3e1      	bcc.n	40b79a <xTaskResumeAll+0x26>
						xYieldPending = pdTRUE;
  40b7d6:	2201      	movs	r2, #1
  40b7d8:	4b1e      	ldr	r3, [pc, #120]	; (40b854 <xTaskResumeAll+0xe0>)
  40b7da:	601a      	str	r2, [r3, #0]
  40b7dc:	e7dd      	b.n	40b79a <xTaskResumeAll+0x26>
BaseType_t xAlreadyYielded = pdFALSE;
  40b7de:	2400      	movs	r4, #0
  40b7e0:	e021      	b.n	40b826 <xTaskResumeAll+0xb2>
				if( pxTCB != NULL )
  40b7e2:	b10c      	cbz	r4, 40b7e8 <xTaskResumeAll+0x74>
					prvResetNextTaskUnblockTime();
  40b7e4:	4b1c      	ldr	r3, [pc, #112]	; (40b858 <xTaskResumeAll+0xe4>)
  40b7e6:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  40b7e8:	4b1c      	ldr	r3, [pc, #112]	; (40b85c <xTaskResumeAll+0xe8>)
  40b7ea:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  40b7ec:	b16c      	cbz	r4, 40b80a <xTaskResumeAll+0x96>
							if( xTaskIncrementTick() != pdFALSE )
  40b7ee:	4d1c      	ldr	r5, [pc, #112]	; (40b860 <xTaskResumeAll+0xec>)
								xYieldPending = pdTRUE;
  40b7f0:	4f18      	ldr	r7, [pc, #96]	; (40b854 <xTaskResumeAll+0xe0>)
  40b7f2:	2601      	movs	r6, #1
  40b7f4:	e001      	b.n	40b7fa <xTaskResumeAll+0x86>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  40b7f6:	3c01      	subs	r4, #1
  40b7f8:	d004      	beq.n	40b804 <xTaskResumeAll+0x90>
							if( xTaskIncrementTick() != pdFALSE )
  40b7fa:	47a8      	blx	r5
  40b7fc:	2800      	cmp	r0, #0
  40b7fe:	d0fa      	beq.n	40b7f6 <xTaskResumeAll+0x82>
								xYieldPending = pdTRUE;
  40b800:	603e      	str	r6, [r7, #0]
  40b802:	e7f8      	b.n	40b7f6 <xTaskResumeAll+0x82>
						uxPendedTicks = 0;
  40b804:	2200      	movs	r2, #0
  40b806:	4b15      	ldr	r3, [pc, #84]	; (40b85c <xTaskResumeAll+0xe8>)
  40b808:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  40b80a:	4b12      	ldr	r3, [pc, #72]	; (40b854 <xTaskResumeAll+0xe0>)
  40b80c:	681b      	ldr	r3, [r3, #0]
  40b80e:	b17b      	cbz	r3, 40b830 <xTaskResumeAll+0xbc>
					taskYIELD_IF_USING_PREEMPTION();
  40b810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40b814:	4b13      	ldr	r3, [pc, #76]	; (40b864 <xTaskResumeAll+0xf0>)
  40b816:	601a      	str	r2, [r3, #0]
  40b818:	f3bf 8f4f 	dsb	sy
  40b81c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40b820:	2401      	movs	r4, #1
  40b822:	e000      	b.n	40b826 <xTaskResumeAll+0xb2>
BaseType_t xAlreadyYielded = pdFALSE;
  40b824:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40b826:	4b10      	ldr	r3, [pc, #64]	; (40b868 <xTaskResumeAll+0xf4>)
  40b828:	4798      	blx	r3
}
  40b82a:	4620      	mov	r0, r4
  40b82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
  40b830:	2400      	movs	r4, #0
  40b832:	e7f8      	b.n	40b826 <xTaskResumeAll+0xb2>
  40b834:	00409f15 	.word	0x00409f15
  40b838:	2001337c 	.word	0x2001337c
  40b83c:	20013374 	.word	0x20013374
  40b840:	200133bc 	.word	0x200133bc
  40b844:	20013384 	.word	0x20013384
  40b848:	20013324 	.word	0x20013324
  40b84c:	00409c79 	.word	0x00409c79
  40b850:	20013318 	.word	0x20013318
  40b854:	200133ec 	.word	0x200133ec
  40b858:	0040b301 	.word	0x0040b301
  40b85c:	20013378 	.word	0x20013378
  40b860:	0040b655 	.word	0x0040b655
  40b864:	e000ed04 	.word	0xe000ed04
  40b868:	00409f35 	.word	0x00409f35
  40b86c:	00409cc5 	.word	0x00409cc5

0040b870 <vTaskDelay>:
	{
  40b870:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40b872:	b940      	cbnz	r0, 40b886 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
  40b874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40b878:	4b09      	ldr	r3, [pc, #36]	; (40b8a0 <vTaskDelay+0x30>)
  40b87a:	601a      	str	r2, [r3, #0]
  40b87c:	f3bf 8f4f 	dsb	sy
  40b880:	f3bf 8f6f 	isb	sy
  40b884:	bd10      	pop	{r4, pc}
  40b886:	4604      	mov	r4, r0
			vTaskSuspendAll();
  40b888:	4b06      	ldr	r3, [pc, #24]	; (40b8a4 <vTaskDelay+0x34>)
  40b88a:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  40b88c:	2100      	movs	r1, #0
  40b88e:	4620      	mov	r0, r4
  40b890:	4b05      	ldr	r3, [pc, #20]	; (40b8a8 <vTaskDelay+0x38>)
  40b892:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40b894:	4b05      	ldr	r3, [pc, #20]	; (40b8ac <vTaskDelay+0x3c>)
  40b896:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40b898:	2800      	cmp	r0, #0
  40b89a:	d1f3      	bne.n	40b884 <vTaskDelay+0x14>
  40b89c:	e7ea      	b.n	40b874 <vTaskDelay+0x4>
  40b89e:	bf00      	nop
  40b8a0:	e000ed04 	.word	0xe000ed04
  40b8a4:	0040b639 	.word	0x0040b639
  40b8a8:	0040b32d 	.word	0x0040b32d
  40b8ac:	0040b775 	.word	0x0040b775

0040b8b0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40b8b0:	4b18      	ldr	r3, [pc, #96]	; (40b914 <vTaskSwitchContext+0x64>)
  40b8b2:	681b      	ldr	r3, [r3, #0]
  40b8b4:	bb1b      	cbnz	r3, 40b8fe <vTaskSwitchContext+0x4e>
{
  40b8b6:	b410      	push	{r4}
		xYieldPending = pdFALSE;
  40b8b8:	2200      	movs	r2, #0
  40b8ba:	4b17      	ldr	r3, [pc, #92]	; (40b918 <vTaskSwitchContext+0x68>)
  40b8bc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40b8be:	4b17      	ldr	r3, [pc, #92]	; (40b91c <vTaskSwitchContext+0x6c>)
  40b8c0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40b8c2:	fab3 f383 	clz	r3, r3
  40b8c6:	b2db      	uxtb	r3, r3
  40b8c8:	f1c3 031f 	rsb	r3, r3, #31
  40b8cc:	4a14      	ldr	r2, [pc, #80]	; (40b920 <vTaskSwitchContext+0x70>)
  40b8ce:	0099      	lsls	r1, r3, #2
  40b8d0:	18c8      	adds	r0, r1, r3
  40b8d2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40b8d6:	6844      	ldr	r4, [r0, #4]
  40b8d8:	6864      	ldr	r4, [r4, #4]
  40b8da:	6044      	str	r4, [r0, #4]
  40b8dc:	4419      	add	r1, r3
  40b8de:	4602      	mov	r2, r0
  40b8e0:	3208      	adds	r2, #8
  40b8e2:	4294      	cmp	r4, r2
  40b8e4:	d00f      	beq.n	40b906 <vTaskSwitchContext+0x56>
  40b8e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40b8ea:	4a0d      	ldr	r2, [pc, #52]	; (40b920 <vTaskSwitchContext+0x70>)
  40b8ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40b8f0:	685b      	ldr	r3, [r3, #4]
  40b8f2:	68da      	ldr	r2, [r3, #12]
  40b8f4:	4b0b      	ldr	r3, [pc, #44]	; (40b924 <vTaskSwitchContext+0x74>)
  40b8f6:	601a      	str	r2, [r3, #0]
}
  40b8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b8fc:	4770      	bx	lr
		xYieldPending = pdTRUE;
  40b8fe:	2201      	movs	r2, #1
  40b900:	4b05      	ldr	r3, [pc, #20]	; (40b918 <vTaskSwitchContext+0x68>)
  40b902:	601a      	str	r2, [r3, #0]
  40b904:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40b906:	6860      	ldr	r0, [r4, #4]
  40b908:	460a      	mov	r2, r1
  40b90a:	4905      	ldr	r1, [pc, #20]	; (40b920 <vTaskSwitchContext+0x70>)
  40b90c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40b910:	6050      	str	r0, [r2, #4]
  40b912:	e7e8      	b.n	40b8e6 <vTaskSwitchContext+0x36>
  40b914:	2001337c 	.word	0x2001337c
  40b918:	200133ec 	.word	0x200133ec
  40b91c:	20013384 	.word	0x20013384
  40b920:	20013324 	.word	0x20013324
  40b924:	20013318 	.word	0x20013318

0040b928 <vTaskPlaceOnEventList>:
{
  40b928:	b510      	push	{r4, lr}
  40b92a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40b92c:	4b04      	ldr	r3, [pc, #16]	; (40b940 <vTaskPlaceOnEventList+0x18>)
  40b92e:	6819      	ldr	r1, [r3, #0]
  40b930:	3118      	adds	r1, #24
  40b932:	4b04      	ldr	r3, [pc, #16]	; (40b944 <vTaskPlaceOnEventList+0x1c>)
  40b934:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  40b936:	2101      	movs	r1, #1
  40b938:	4620      	mov	r0, r4
  40b93a:	4b03      	ldr	r3, [pc, #12]	; (40b948 <vTaskPlaceOnEventList+0x20>)
  40b93c:	4798      	blx	r3
  40b93e:	bd10      	pop	{r4, pc}
  40b940:	20013318 	.word	0x20013318
  40b944:	00409c91 	.word	0x00409c91
  40b948:	0040b32d 	.word	0x0040b32d

0040b94c <vTaskPlaceOnUnorderedEventList>:
{
  40b94c:	b510      	push	{r4, lr}
  40b94e:	4614      	mov	r4, r2
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
  40b950:	4b06      	ldr	r3, [pc, #24]	; (40b96c <vTaskPlaceOnUnorderedEventList+0x20>)
  40b952:	681a      	ldr	r2, [r3, #0]
  40b954:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  40b958:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40b95a:	6819      	ldr	r1, [r3, #0]
  40b95c:	3118      	adds	r1, #24
  40b95e:	4b04      	ldr	r3, [pc, #16]	; (40b970 <vTaskPlaceOnUnorderedEventList+0x24>)
  40b960:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  40b962:	2101      	movs	r1, #1
  40b964:	4620      	mov	r0, r4
  40b966:	4b03      	ldr	r3, [pc, #12]	; (40b974 <vTaskPlaceOnUnorderedEventList+0x28>)
  40b968:	4798      	blx	r3
  40b96a:	bd10      	pop	{r4, pc}
  40b96c:	20013318 	.word	0x20013318
  40b970:	00409c79 	.word	0x00409c79
  40b974:	0040b32d 	.word	0x0040b32d

0040b978 <xTaskRemoveFromEventList>:
{
  40b978:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40b97a:	68c3      	ldr	r3, [r0, #12]
  40b97c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40b97e:	f104 0518 	add.w	r5, r4, #24
  40b982:	4628      	mov	r0, r5
  40b984:	4b13      	ldr	r3, [pc, #76]	; (40b9d4 <xTaskRemoveFromEventList+0x5c>)
  40b986:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40b988:	4b13      	ldr	r3, [pc, #76]	; (40b9d8 <xTaskRemoveFromEventList+0x60>)
  40b98a:	681b      	ldr	r3, [r3, #0]
  40b98c:	b9eb      	cbnz	r3, 40b9ca <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  40b98e:	1d25      	adds	r5, r4, #4
  40b990:	4628      	mov	r0, r5
  40b992:	4b10      	ldr	r3, [pc, #64]	; (40b9d4 <xTaskRemoveFromEventList+0x5c>)
  40b994:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40b996:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40b998:	4a10      	ldr	r2, [pc, #64]	; (40b9dc <xTaskRemoveFromEventList+0x64>)
  40b99a:	6811      	ldr	r1, [r2, #0]
  40b99c:	2301      	movs	r3, #1
  40b99e:	4083      	lsls	r3, r0
  40b9a0:	430b      	orrs	r3, r1
  40b9a2:	6013      	str	r3, [r2, #0]
  40b9a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40b9a8:	4629      	mov	r1, r5
  40b9aa:	4b0d      	ldr	r3, [pc, #52]	; (40b9e0 <xTaskRemoveFromEventList+0x68>)
  40b9ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40b9b0:	4b0c      	ldr	r3, [pc, #48]	; (40b9e4 <xTaskRemoveFromEventList+0x6c>)
  40b9b2:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40b9b4:	4b0c      	ldr	r3, [pc, #48]	; (40b9e8 <xTaskRemoveFromEventList+0x70>)
  40b9b6:	681b      	ldr	r3, [r3, #0]
  40b9b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b9bc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
  40b9be:	bf83      	ittte	hi
  40b9c0:	2001      	movhi	r0, #1
  40b9c2:	4b0a      	ldrhi	r3, [pc, #40]	; (40b9ec <xTaskRemoveFromEventList+0x74>)
  40b9c4:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
  40b9c6:	2000      	movls	r0, #0
}
  40b9c8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40b9ca:	4629      	mov	r1, r5
  40b9cc:	4808      	ldr	r0, [pc, #32]	; (40b9f0 <xTaskRemoveFromEventList+0x78>)
  40b9ce:	4b05      	ldr	r3, [pc, #20]	; (40b9e4 <xTaskRemoveFromEventList+0x6c>)
  40b9d0:	4798      	blx	r3
  40b9d2:	e7ef      	b.n	40b9b4 <xTaskRemoveFromEventList+0x3c>
  40b9d4:	00409cc5 	.word	0x00409cc5
  40b9d8:	2001337c 	.word	0x2001337c
  40b9dc:	20013384 	.word	0x20013384
  40b9e0:	20013324 	.word	0x20013324
  40b9e4:	00409c79 	.word	0x00409c79
  40b9e8:	20013318 	.word	0x20013318
  40b9ec:	200133ec 	.word	0x200133ec
  40b9f0:	200133bc 	.word	0x200133bc

0040b9f4 <vTaskRemoveFromUnorderedEventList>:
{
  40b9f4:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
  40b9f6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  40b9fa:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
  40b9fc:	68c4      	ldr	r4, [r0, #12]
	( void ) uxListRemove( pxEventListItem );
  40b9fe:	4e0f      	ldr	r6, [pc, #60]	; (40ba3c <vTaskRemoveFromUnorderedEventList+0x48>)
  40ba00:	47b0      	blx	r6
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  40ba02:	1d25      	adds	r5, r4, #4
  40ba04:	4628      	mov	r0, r5
  40ba06:	47b0      	blx	r6
	prvAddTaskToReadyList( pxUnblockedTCB );
  40ba08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40ba0a:	4a0d      	ldr	r2, [pc, #52]	; (40ba40 <vTaskRemoveFromUnorderedEventList+0x4c>)
  40ba0c:	6811      	ldr	r1, [r2, #0]
  40ba0e:	2301      	movs	r3, #1
  40ba10:	4083      	lsls	r3, r0
  40ba12:	430b      	orrs	r3, r1
  40ba14:	6013      	str	r3, [r2, #0]
  40ba16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40ba1a:	4629      	mov	r1, r5
  40ba1c:	4b09      	ldr	r3, [pc, #36]	; (40ba44 <vTaskRemoveFromUnorderedEventList+0x50>)
  40ba1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40ba22:	4b09      	ldr	r3, [pc, #36]	; (40ba48 <vTaskRemoveFromUnorderedEventList+0x54>)
  40ba24:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40ba26:	4b09      	ldr	r3, [pc, #36]	; (40ba4c <vTaskRemoveFromUnorderedEventList+0x58>)
  40ba28:	681b      	ldr	r3, [r3, #0]
  40ba2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40ba2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40ba2e:	429a      	cmp	r2, r3
  40ba30:	d902      	bls.n	40ba38 <vTaskRemoveFromUnorderedEventList+0x44>
		xYieldPending = pdTRUE;
  40ba32:	2201      	movs	r2, #1
  40ba34:	4b06      	ldr	r3, [pc, #24]	; (40ba50 <vTaskRemoveFromUnorderedEventList+0x5c>)
  40ba36:	601a      	str	r2, [r3, #0]
  40ba38:	bd70      	pop	{r4, r5, r6, pc}
  40ba3a:	bf00      	nop
  40ba3c:	00409cc5 	.word	0x00409cc5
  40ba40:	20013384 	.word	0x20013384
  40ba44:	20013324 	.word	0x20013324
  40ba48:	00409c79 	.word	0x00409c79
  40ba4c:	20013318 	.word	0x20013318
  40ba50:	200133ec 	.word	0x200133ec

0040ba54 <vTaskSetTimeOutState>:
{
  40ba54:	b510      	push	{r4, lr}
  40ba56:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40ba58:	4b05      	ldr	r3, [pc, #20]	; (40ba70 <vTaskSetTimeOutState+0x1c>)
  40ba5a:	4798      	blx	r3
		pxTimeOut->xOverflowCount = xNumOfOverflows;
  40ba5c:	4b05      	ldr	r3, [pc, #20]	; (40ba74 <vTaskSetTimeOutState+0x20>)
  40ba5e:	681b      	ldr	r3, [r3, #0]
  40ba60:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
  40ba62:	4b05      	ldr	r3, [pc, #20]	; (40ba78 <vTaskSetTimeOutState+0x24>)
  40ba64:	681b      	ldr	r3, [r3, #0]
  40ba66:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
  40ba68:	4b04      	ldr	r3, [pc, #16]	; (40ba7c <vTaskSetTimeOutState+0x28>)
  40ba6a:	4798      	blx	r3
  40ba6c:	bd10      	pop	{r4, pc}
  40ba6e:	bf00      	nop
  40ba70:	00409f15 	.word	0x00409f15
  40ba74:	200133b8 	.word	0x200133b8
  40ba78:	200133e8 	.word	0x200133e8
  40ba7c:	00409f35 	.word	0x00409f35

0040ba80 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40ba80:	4b03      	ldr	r3, [pc, #12]	; (40ba90 <vTaskInternalSetTimeOutState+0x10>)
  40ba82:	681b      	ldr	r3, [r3, #0]
  40ba84:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40ba86:	4b03      	ldr	r3, [pc, #12]	; (40ba94 <vTaskInternalSetTimeOutState+0x14>)
  40ba88:	681b      	ldr	r3, [r3, #0]
  40ba8a:	6043      	str	r3, [r0, #4]
  40ba8c:	4770      	bx	lr
  40ba8e:	bf00      	nop
  40ba90:	200133b8 	.word	0x200133b8
  40ba94:	200133e8 	.word	0x200133e8

0040ba98 <xTaskCheckForTimeOut>:
{
  40ba98:	b570      	push	{r4, r5, r6, lr}
  40ba9a:	4604      	mov	r4, r0
  40ba9c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40ba9e:	4b12      	ldr	r3, [pc, #72]	; (40bae8 <xTaskCheckForTimeOut+0x50>)
  40baa0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40baa2:	4b12      	ldr	r3, [pc, #72]	; (40baec <xTaskCheckForTimeOut+0x54>)
  40baa4:	681b      	ldr	r3, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40baa6:	682a      	ldr	r2, [r5, #0]
  40baa8:	f1b2 3fff 	cmp.w	r2, #4294967295
  40baac:	d018      	beq.n	40bae0 <xTaskCheckForTimeOut+0x48>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40baae:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40bab0:	480f      	ldr	r0, [pc, #60]	; (40baf0 <xTaskCheckForTimeOut+0x58>)
  40bab2:	6800      	ldr	r0, [r0, #0]
  40bab4:	6826      	ldr	r6, [r4, #0]
  40bab6:	4286      	cmp	r6, r0
  40bab8:	d001      	beq.n	40babe <xTaskCheckForTimeOut+0x26>
  40baba:	428b      	cmp	r3, r1
  40babc:	d212      	bcs.n	40bae4 <xTaskCheckForTimeOut+0x4c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40babe:	1a5b      	subs	r3, r3, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40bac0:	4293      	cmp	r3, r2
  40bac2:	d306      	bcc.n	40bad2 <xTaskCheckForTimeOut+0x3a>
			*pxTicksToWait = 0;
  40bac4:	2300      	movs	r3, #0
  40bac6:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
  40bac8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  40baca:	4b0a      	ldr	r3, [pc, #40]	; (40baf4 <xTaskCheckForTimeOut+0x5c>)
  40bacc:	4798      	blx	r3
}
  40bace:	4620      	mov	r0, r4
  40bad0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  40bad2:	1ad3      	subs	r3, r2, r3
  40bad4:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  40bad6:	4620      	mov	r0, r4
  40bad8:	4b07      	ldr	r3, [pc, #28]	; (40baf8 <xTaskCheckForTimeOut+0x60>)
  40bada:	4798      	blx	r3
			xReturn = pdFALSE;
  40badc:	2400      	movs	r4, #0
  40bade:	e7f4      	b.n	40baca <xTaskCheckForTimeOut+0x32>
				xReturn = pdFALSE;
  40bae0:	2400      	movs	r4, #0
  40bae2:	e7f2      	b.n	40baca <xTaskCheckForTimeOut+0x32>
			xReturn = pdTRUE;
  40bae4:	2401      	movs	r4, #1
  40bae6:	e7f0      	b.n	40baca <xTaskCheckForTimeOut+0x32>
  40bae8:	00409f15 	.word	0x00409f15
  40baec:	200133e8 	.word	0x200133e8
  40baf0:	200133b8 	.word	0x200133b8
  40baf4:	00409f35 	.word	0x00409f35
  40baf8:	0040ba81 	.word	0x0040ba81

0040bafc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40bafc:	2201      	movs	r2, #1
  40bafe:	4b01      	ldr	r3, [pc, #4]	; (40bb04 <vTaskMissedYield+0x8>)
  40bb00:	601a      	str	r2, [r3, #0]
  40bb02:	4770      	bx	lr
  40bb04:	200133ec 	.word	0x200133ec

0040bb08 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
  40bb08:	4b01      	ldr	r3, [pc, #4]	; (40bb10 <xTaskGetCurrentTaskHandle+0x8>)
  40bb0a:	6818      	ldr	r0, [r3, #0]
	}
  40bb0c:	4770      	bx	lr
  40bb0e:	bf00      	nop
  40bb10:	20013318 	.word	0x20013318

0040bb14 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  40bb14:	2800      	cmp	r0, #0
  40bb16:	d050      	beq.n	40bbba <xTaskPriorityInherit+0xa6>
	{
  40bb18:	b538      	push	{r3, r4, r5, lr}
  40bb1a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  40bb1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40bb1e:	4928      	ldr	r1, [pc, #160]	; (40bbc0 <xTaskPriorityInherit+0xac>)
  40bb20:	6809      	ldr	r1, [r1, #0]
  40bb22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40bb24:	428a      	cmp	r2, r1
  40bb26:	d23f      	bcs.n	40bba8 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40bb28:	6981      	ldr	r1, [r0, #24]
  40bb2a:	2900      	cmp	r1, #0
  40bb2c:	db05      	blt.n	40bb3a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40bb2e:	4924      	ldr	r1, [pc, #144]	; (40bbc0 <xTaskPriorityInherit+0xac>)
  40bb30:	6809      	ldr	r1, [r1, #0]
  40bb32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40bb34:	f1c1 0104 	rsb	r1, r1, #4
  40bb38:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  40bb3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40bb3e:	4921      	ldr	r1, [pc, #132]	; (40bbc4 <xTaskPriorityInherit+0xb0>)
  40bb40:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40bb44:	6961      	ldr	r1, [r4, #20]
  40bb46:	4291      	cmp	r1, r2
  40bb48:	d005      	beq.n	40bb56 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40bb4a:	4a1d      	ldr	r2, [pc, #116]	; (40bbc0 <xTaskPriorityInherit+0xac>)
  40bb4c:	6812      	ldr	r2, [r2, #0]
  40bb4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40bb50:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  40bb52:	2001      	movs	r0, #1
  40bb54:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40bb56:	1d25      	adds	r5, r4, #4
  40bb58:	4628      	mov	r0, r5
  40bb5a:	4b1b      	ldr	r3, [pc, #108]	; (40bbc8 <xTaskPriorityInherit+0xb4>)
  40bb5c:	4798      	blx	r3
  40bb5e:	b970      	cbnz	r0, 40bb7e <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  40bb60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40bb62:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40bb66:	009b      	lsls	r3, r3, #2
  40bb68:	4916      	ldr	r1, [pc, #88]	; (40bbc4 <xTaskPriorityInherit+0xb0>)
  40bb6a:	58cb      	ldr	r3, [r1, r3]
  40bb6c:	b93b      	cbnz	r3, 40bb7e <xTaskPriorityInherit+0x6a>
  40bb6e:	4817      	ldr	r0, [pc, #92]	; (40bbcc <xTaskPriorityInherit+0xb8>)
  40bb70:	6803      	ldr	r3, [r0, #0]
  40bb72:	2101      	movs	r1, #1
  40bb74:	fa01 f202 	lsl.w	r2, r1, r2
  40bb78:	ea23 0202 	bic.w	r2, r3, r2
  40bb7c:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  40bb7e:	4b10      	ldr	r3, [pc, #64]	; (40bbc0 <xTaskPriorityInherit+0xac>)
  40bb80:	681b      	ldr	r3, [r3, #0]
  40bb82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40bb84:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  40bb86:	4a11      	ldr	r2, [pc, #68]	; (40bbcc <xTaskPriorityInherit+0xb8>)
  40bb88:	6811      	ldr	r1, [r2, #0]
  40bb8a:	2401      	movs	r4, #1
  40bb8c:	fa04 f300 	lsl.w	r3, r4, r0
  40bb90:	430b      	orrs	r3, r1
  40bb92:	6013      	str	r3, [r2, #0]
  40bb94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bb98:	4629      	mov	r1, r5
  40bb9a:	4b0a      	ldr	r3, [pc, #40]	; (40bbc4 <xTaskPriorityInherit+0xb0>)
  40bb9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40bba0:	4b0b      	ldr	r3, [pc, #44]	; (40bbd0 <xTaskPriorityInherit+0xbc>)
  40bba2:	4798      	blx	r3
				xReturn = pdTRUE;
  40bba4:	4620      	mov	r0, r4
  40bba6:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  40bba8:	4a05      	ldr	r2, [pc, #20]	; (40bbc0 <xTaskPriorityInherit+0xac>)
  40bbaa:	6812      	ldr	r2, [r2, #0]
  40bbac:	6c80      	ldr	r0, [r0, #72]	; 0x48
  40bbae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  40bbb0:	4298      	cmp	r0, r3
  40bbb2:	bf2c      	ite	cs
  40bbb4:	2000      	movcs	r0, #0
  40bbb6:	2001      	movcc	r0, #1
  40bbb8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40bbba:	2000      	movs	r0, #0
		return xReturn;
  40bbbc:	4770      	bx	lr
  40bbbe:	bf00      	nop
  40bbc0:	20013318 	.word	0x20013318
  40bbc4:	20013324 	.word	0x20013324
  40bbc8:	00409cc5 	.word	0x00409cc5
  40bbcc:	20013384 	.word	0x20013384
  40bbd0:	00409c79 	.word	0x00409c79

0040bbd4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  40bbd4:	2800      	cmp	r0, #0
  40bbd6:	d035      	beq.n	40bc44 <xTaskPriorityDisinherit+0x70>
	{
  40bbd8:	b538      	push	{r3, r4, r5, lr}
  40bbda:	4604      	mov	r4, r0
			( pxTCB->uxMutexesHeld )--;
  40bbdc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40bbde:	3a01      	subs	r2, #1
  40bbe0:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40bbe2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40bbe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  40bbe6:	4288      	cmp	r0, r1
  40bbe8:	d02e      	beq.n	40bc48 <xTaskPriorityDisinherit+0x74>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40bbea:	b10a      	cbz	r2, 40bbf0 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
  40bbec:	2000      	movs	r0, #0
	}
  40bbee:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40bbf0:	1d25      	adds	r5, r4, #4
  40bbf2:	4628      	mov	r0, r5
  40bbf4:	4b15      	ldr	r3, [pc, #84]	; (40bc4c <xTaskPriorityDisinherit+0x78>)
  40bbf6:	4798      	blx	r3
  40bbf8:	b970      	cbnz	r0, 40bc18 <xTaskPriorityDisinherit+0x44>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40bbfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40bbfc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40bc00:	009b      	lsls	r3, r3, #2
  40bc02:	4913      	ldr	r1, [pc, #76]	; (40bc50 <xTaskPriorityDisinherit+0x7c>)
  40bc04:	58cb      	ldr	r3, [r1, r3]
  40bc06:	b93b      	cbnz	r3, 40bc18 <xTaskPriorityDisinherit+0x44>
  40bc08:	4812      	ldr	r0, [pc, #72]	; (40bc54 <xTaskPriorityDisinherit+0x80>)
  40bc0a:	6803      	ldr	r3, [r0, #0]
  40bc0c:	2101      	movs	r1, #1
  40bc0e:	fa01 f202 	lsl.w	r2, r1, r2
  40bc12:	ea23 0202 	bic.w	r2, r3, r2
  40bc16:	6002      	str	r2, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40bc18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40bc1a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40bc1c:	f1c0 0304 	rsb	r3, r0, #4
  40bc20:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40bc22:	4a0c      	ldr	r2, [pc, #48]	; (40bc54 <xTaskPriorityDisinherit+0x80>)
  40bc24:	6811      	ldr	r1, [r2, #0]
  40bc26:	2401      	movs	r4, #1
  40bc28:	fa04 f300 	lsl.w	r3, r4, r0
  40bc2c:	430b      	orrs	r3, r1
  40bc2e:	6013      	str	r3, [r2, #0]
  40bc30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bc34:	4629      	mov	r1, r5
  40bc36:	4b06      	ldr	r3, [pc, #24]	; (40bc50 <xTaskPriorityDisinherit+0x7c>)
  40bc38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40bc3c:	4b06      	ldr	r3, [pc, #24]	; (40bc58 <xTaskPriorityDisinherit+0x84>)
  40bc3e:	4798      	blx	r3
					xReturn = pdTRUE;
  40bc40:	4620      	mov	r0, r4
  40bc42:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40bc44:	2000      	movs	r0, #0
  40bc46:	4770      	bx	lr
  40bc48:	2000      	movs	r0, #0
  40bc4a:	bd38      	pop	{r3, r4, r5, pc}
  40bc4c:	00409cc5 	.word	0x00409cc5
  40bc50:	20013324 	.word	0x20013324
  40bc54:	20013384 	.word	0x20013384
  40bc58:	00409c79 	.word	0x00409c79

0040bc5c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  40bc5c:	2800      	cmp	r0, #0
  40bc5e:	d03f      	beq.n	40bce0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	{
  40bc60:	b538      	push	{r3, r4, r5, lr}
  40bc62:	4604      	mov	r4, r0
  40bc64:	6c82      	ldr	r2, [r0, #72]	; 0x48
  40bc66:	4291      	cmp	r1, r2
  40bc68:	bf38      	it	cc
  40bc6a:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
  40bc6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40bc6e:	428a      	cmp	r2, r1
  40bc70:	d002      	beq.n	40bc78 <vTaskPriorityDisinheritAfterTimeout+0x1c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  40bc72:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  40bc74:	2801      	cmp	r0, #1
  40bc76:	d000      	beq.n	40bc7a <vTaskPriorityDisinheritAfterTimeout+0x1e>
  40bc78:	bd38      	pop	{r3, r4, r5, pc}
					pxTCB->uxPriority = uxPriorityToUse;
  40bc7a:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40bc7c:	69a0      	ldr	r0, [r4, #24]
  40bc7e:	2800      	cmp	r0, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40bc80:	bfa4      	itt	ge
  40bc82:	f1c1 0104 	rsbge	r1, r1, #4
  40bc86:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  40bc88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40bc8c:	4915      	ldr	r1, [pc, #84]	; (40bce4 <vTaskPriorityDisinheritAfterTimeout+0x88>)
  40bc8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40bc92:	6961      	ldr	r1, [r4, #20]
  40bc94:	4291      	cmp	r1, r2
  40bc96:	d1ef      	bne.n	40bc78 <vTaskPriorityDisinheritAfterTimeout+0x1c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40bc98:	1d25      	adds	r5, r4, #4
  40bc9a:	4628      	mov	r0, r5
  40bc9c:	4b12      	ldr	r3, [pc, #72]	; (40bce8 <vTaskPriorityDisinheritAfterTimeout+0x8c>)
  40bc9e:	4798      	blx	r3
  40bca0:	b970      	cbnz	r0, 40bcc0 <vTaskPriorityDisinheritAfterTimeout+0x64>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40bca2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40bca4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40bca8:	009b      	lsls	r3, r3, #2
  40bcaa:	490e      	ldr	r1, [pc, #56]	; (40bce4 <vTaskPriorityDisinheritAfterTimeout+0x88>)
  40bcac:	58cb      	ldr	r3, [r1, r3]
  40bcae:	b93b      	cbnz	r3, 40bcc0 <vTaskPriorityDisinheritAfterTimeout+0x64>
  40bcb0:	480e      	ldr	r0, [pc, #56]	; (40bcec <vTaskPriorityDisinheritAfterTimeout+0x90>)
  40bcb2:	6803      	ldr	r3, [r0, #0]
  40bcb4:	2101      	movs	r1, #1
  40bcb6:	fa01 f202 	lsl.w	r2, r1, r2
  40bcba:	ea23 0202 	bic.w	r2, r3, r2
  40bcbe:	6002      	str	r2, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  40bcc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40bcc2:	4a0a      	ldr	r2, [pc, #40]	; (40bcec <vTaskPriorityDisinheritAfterTimeout+0x90>)
  40bcc4:	6811      	ldr	r1, [r2, #0]
  40bcc6:	2301      	movs	r3, #1
  40bcc8:	4083      	lsls	r3, r0
  40bcca:	430b      	orrs	r3, r1
  40bccc:	6013      	str	r3, [r2, #0]
  40bcce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40bcd2:	4629      	mov	r1, r5
  40bcd4:	4b03      	ldr	r3, [pc, #12]	; (40bce4 <vTaskPriorityDisinheritAfterTimeout+0x88>)
  40bcd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40bcda:	4b05      	ldr	r3, [pc, #20]	; (40bcf0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
  40bcdc:	4798      	blx	r3
	}
  40bcde:	e7cb      	b.n	40bc78 <vTaskPriorityDisinheritAfterTimeout+0x1c>
  40bce0:	4770      	bx	lr
  40bce2:	bf00      	nop
  40bce4:	20013324 	.word	0x20013324
  40bce8:	00409cc5 	.word	0x00409cc5
  40bcec:	20013384 	.word	0x20013384
  40bcf0:	00409c79 	.word	0x00409c79

0040bcf4 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
  40bcf4:	4b04      	ldr	r3, [pc, #16]	; (40bd08 <uxTaskResetEventItemValue+0x14>)
  40bcf6:	681a      	ldr	r2, [r3, #0]
  40bcf8:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40bcfa:	681a      	ldr	r2, [r3, #0]
  40bcfc:	681b      	ldr	r3, [r3, #0]
  40bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bd00:	f1c3 0304 	rsb	r3, r3, #4
  40bd04:	6193      	str	r3, [r2, #24]
}
  40bd06:	4770      	bx	lr
  40bd08:	20013318 	.word	0x20013318

0040bd0c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  40bd0c:	4b05      	ldr	r3, [pc, #20]	; (40bd24 <pvTaskIncrementMutexHeldCount+0x18>)
  40bd0e:	681b      	ldr	r3, [r3, #0]
  40bd10:	b123      	cbz	r3, 40bd1c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  40bd12:	4b04      	ldr	r3, [pc, #16]	; (40bd24 <pvTaskIncrementMutexHeldCount+0x18>)
  40bd14:	681a      	ldr	r2, [r3, #0]
  40bd16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  40bd18:	3301      	adds	r3, #1
  40bd1a:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  40bd1c:	4b01      	ldr	r3, [pc, #4]	; (40bd24 <pvTaskIncrementMutexHeldCount+0x18>)
  40bd1e:	6818      	ldr	r0, [r3, #0]
	}
  40bd20:	4770      	bx	lr
  40bd22:	bf00      	nop
  40bd24:	20013318 	.word	0x20013318

0040bd28 <ulTaskNotifyTake>:
	{
  40bd28:	b538      	push	{r3, r4, r5, lr}
  40bd2a:	4605      	mov	r5, r0
  40bd2c:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
  40bd2e:	4b1a      	ldr	r3, [pc, #104]	; (40bd98 <ulTaskNotifyTake+0x70>)
  40bd30:	4798      	blx	r3
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
  40bd32:	4b1a      	ldr	r3, [pc, #104]	; (40bd9c <ulTaskNotifyTake+0x74>)
  40bd34:	681b      	ldr	r3, [r3, #0]
  40bd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40bd38:	b92b      	cbnz	r3, 40bd46 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
  40bd3a:	4b18      	ldr	r3, [pc, #96]	; (40bd9c <ulTaskNotifyTake+0x74>)
  40bd3c:	681b      	ldr	r3, [r3, #0]
  40bd3e:	2201      	movs	r2, #1
  40bd40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if( xTicksToWait > ( TickType_t ) 0 )
  40bd44:	b9ac      	cbnz	r4, 40bd72 <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
  40bd46:	4b16      	ldr	r3, [pc, #88]	; (40bda0 <ulTaskNotifyTake+0x78>)
  40bd48:	4798      	blx	r3
		taskENTER_CRITICAL();
  40bd4a:	4b13      	ldr	r3, [pc, #76]	; (40bd98 <ulTaskNotifyTake+0x70>)
  40bd4c:	4798      	blx	r3
			ulReturn = pxCurrentTCB->ulNotifiedValue;
  40bd4e:	4b13      	ldr	r3, [pc, #76]	; (40bd9c <ulTaskNotifyTake+0x74>)
  40bd50:	681b      	ldr	r3, [r3, #0]
  40bd52:	6d1c      	ldr	r4, [r3, #80]	; 0x50
			if( ulReturn != 0UL )
  40bd54:	b124      	cbz	r4, 40bd60 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
  40bd56:	b9cd      	cbnz	r5, 40bd8c <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
  40bd58:	4b10      	ldr	r3, [pc, #64]	; (40bd9c <ulTaskNotifyTake+0x74>)
  40bd5a:	681b      	ldr	r3, [r3, #0]
  40bd5c:	1e62      	subs	r2, r4, #1
  40bd5e:	651a      	str	r2, [r3, #80]	; 0x50
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40bd60:	4b0e      	ldr	r3, [pc, #56]	; (40bd9c <ulTaskNotifyTake+0x74>)
  40bd62:	681b      	ldr	r3, [r3, #0]
  40bd64:	2200      	movs	r2, #0
  40bd66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
  40bd6a:	4b0d      	ldr	r3, [pc, #52]	; (40bda0 <ulTaskNotifyTake+0x78>)
  40bd6c:	4798      	blx	r3
	}
  40bd6e:	4620      	mov	r0, r4
  40bd70:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  40bd72:	4611      	mov	r1, r2
  40bd74:	4620      	mov	r0, r4
  40bd76:	4b0b      	ldr	r3, [pc, #44]	; (40bda4 <ulTaskNotifyTake+0x7c>)
  40bd78:	4798      	blx	r3
					portYIELD_WITHIN_API();
  40bd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40bd7e:	4b0a      	ldr	r3, [pc, #40]	; (40bda8 <ulTaskNotifyTake+0x80>)
  40bd80:	601a      	str	r2, [r3, #0]
  40bd82:	f3bf 8f4f 	dsb	sy
  40bd86:	f3bf 8f6f 	isb	sy
  40bd8a:	e7dc      	b.n	40bd46 <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
  40bd8c:	4b03      	ldr	r3, [pc, #12]	; (40bd9c <ulTaskNotifyTake+0x74>)
  40bd8e:	681b      	ldr	r3, [r3, #0]
  40bd90:	2200      	movs	r2, #0
  40bd92:	651a      	str	r2, [r3, #80]	; 0x50
  40bd94:	e7e4      	b.n	40bd60 <ulTaskNotifyTake+0x38>
  40bd96:	bf00      	nop
  40bd98:	00409f15 	.word	0x00409f15
  40bd9c:	20013318 	.word	0x20013318
  40bda0:	00409f35 	.word	0x00409f35
  40bda4:	0040b32d 	.word	0x0040b32d
  40bda8:	e000ed04 	.word	0xe000ed04

0040bdac <vTaskNotifyGiveFromISR>:
	{
  40bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  40bdae:	f3ef 8511 	mrs	r5, BASEPRI
  40bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
  40bdb6:	f383 8811 	msr	BASEPRI, r3
  40bdba:	f3bf 8f6f 	isb	sy
  40bdbe:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  40bdc2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
  40bdc6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  40bdc8:	2202      	movs	r2, #2
  40bdca:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			( pxTCB->ulNotifiedValue )++;
  40bdce:	6d02      	ldr	r2, [r0, #80]	; 0x50
  40bdd0:	3201      	adds	r2, #1
  40bdd2:	6502      	str	r2, [r0, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  40bdd4:	2b01      	cmp	r3, #1
  40bdd6:	d002      	beq.n	40bdde <vTaskNotifyGiveFromISR+0x32>
	__asm volatile
  40bdd8:	f385 8811 	msr	BASEPRI, r5
  40bddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bdde:	460e      	mov	r6, r1
  40bde0:	4604      	mov	r4, r0
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40bde2:	4b15      	ldr	r3, [pc, #84]	; (40be38 <vTaskNotifyGiveFromISR+0x8c>)
  40bde4:	681b      	ldr	r3, [r3, #0]
  40bde6:	b9e3      	cbnz	r3, 40be22 <vTaskNotifyGiveFromISR+0x76>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40bde8:	1d07      	adds	r7, r0, #4
  40bdea:	4638      	mov	r0, r7
  40bdec:	4b13      	ldr	r3, [pc, #76]	; (40be3c <vTaskNotifyGiveFromISR+0x90>)
  40bdee:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  40bdf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40bdf2:	4a13      	ldr	r2, [pc, #76]	; (40be40 <vTaskNotifyGiveFromISR+0x94>)
  40bdf4:	6811      	ldr	r1, [r2, #0]
  40bdf6:	2301      	movs	r3, #1
  40bdf8:	4083      	lsls	r3, r0
  40bdfa:	430b      	orrs	r3, r1
  40bdfc:	6013      	str	r3, [r2, #0]
  40bdfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40be02:	4639      	mov	r1, r7
  40be04:	4b0f      	ldr	r3, [pc, #60]	; (40be44 <vTaskNotifyGiveFromISR+0x98>)
  40be06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40be0a:	4b0f      	ldr	r3, [pc, #60]	; (40be48 <vTaskNotifyGiveFromISR+0x9c>)
  40be0c:	4798      	blx	r3
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  40be0e:	4b0f      	ldr	r3, [pc, #60]	; (40be4c <vTaskNotifyGiveFromISR+0xa0>)
  40be10:	681b      	ldr	r3, [r3, #0]
  40be12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40be16:	429a      	cmp	r2, r3
  40be18:	d9de      	bls.n	40bdd8 <vTaskNotifyGiveFromISR+0x2c>
					if( pxHigherPriorityTaskWoken != NULL )
  40be1a:	b146      	cbz	r6, 40be2e <vTaskNotifyGiveFromISR+0x82>
						*pxHigherPriorityTaskWoken = pdTRUE;
  40be1c:	2301      	movs	r3, #1
  40be1e:	6033      	str	r3, [r6, #0]
  40be20:	e7da      	b.n	40bdd8 <vTaskNotifyGiveFromISR+0x2c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
  40be22:	f100 0118 	add.w	r1, r0, #24
  40be26:	480a      	ldr	r0, [pc, #40]	; (40be50 <vTaskNotifyGiveFromISR+0xa4>)
  40be28:	4b07      	ldr	r3, [pc, #28]	; (40be48 <vTaskNotifyGiveFromISR+0x9c>)
  40be2a:	4798      	blx	r3
  40be2c:	e7ef      	b.n	40be0e <vTaskNotifyGiveFromISR+0x62>
						xYieldPending = pdTRUE;
  40be2e:	2201      	movs	r2, #1
  40be30:	4b08      	ldr	r3, [pc, #32]	; (40be54 <vTaskNotifyGiveFromISR+0xa8>)
  40be32:	601a      	str	r2, [r3, #0]
  40be34:	e7d0      	b.n	40bdd8 <vTaskNotifyGiveFromISR+0x2c>
  40be36:	bf00      	nop
  40be38:	2001337c 	.word	0x2001337c
  40be3c:	00409cc5 	.word	0x00409cc5
  40be40:	20013384 	.word	0x20013384
  40be44:	20013324 	.word	0x20013324
  40be48:	00409c79 	.word	0x00409c79
  40be4c:	20013318 	.word	0x20013318
  40be50:	200133bc 	.word	0x200133bc
  40be54:	200133ec 	.word	0x200133ec

0040be58 <main_memories_trans_task>:
	// Management of sleep mode in Idle Hook from FreeRTOS
	sleepmgr_enter_sleep();
}

static void main_memories_trans_task(void *pvParameters)
{
  40be58:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	while (true) {
		// Wait for a semaphore which signals that a transfer is requested
		if( xSemaphoreTake( main_trans_semphr, portMAX_DELAY ) == pdTRUE ) {
  40be5a:	4e06      	ldr	r6, [pc, #24]	; (40be74 <main_memories_trans_task+0x1c>)
  40be5c:	4d06      	ldr	r5, [pc, #24]	; (40be78 <main_memories_trans_task+0x20>)
			udi_msc_process_trans();
  40be5e:	4f07      	ldr	r7, [pc, #28]	; (40be7c <main_memories_trans_task+0x24>)
		if( xSemaphoreTake( main_trans_semphr, portMAX_DELAY ) == pdTRUE ) {
  40be60:	f04f 34ff 	mov.w	r4, #4294967295
  40be64:	4621      	mov	r1, r4
  40be66:	6830      	ldr	r0, [r6, #0]
  40be68:	47a8      	blx	r5
  40be6a:	2801      	cmp	r0, #1
  40be6c:	d1fa      	bne.n	40be64 <main_memories_trans_task+0xc>
			udi_msc_process_trans();
  40be6e:	47b8      	blx	r7
  40be70:	e7f6      	b.n	40be60 <main_memories_trans_task+0x8>
  40be72:	bf00      	nop
  40be74:	200133f4 	.word	0x200133f4
  40be78:	0040b14d 	.word	0x0040b14d
  40be7c:	00400db1 	.word	0x00400db1

0040be80 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40be80:	b5f0      	push	{r4, r5, r6, r7, lr}
  40be82:	b083      	sub	sp, #12
  40be84:	4605      	mov	r5, r0
  40be86:	460c      	mov	r4, r1
	uint32_t val = 0;
  40be88:	2300      	movs	r3, #0
  40be8a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40be8c:	4b18      	ldr	r3, [pc, #96]	; (40bef0 <usart_serial_getchar+0x70>)
  40be8e:	4298      	cmp	r0, r3
  40be90:	d00a      	beq.n	40bea8 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40be92:	4b18      	ldr	r3, [pc, #96]	; (40bef4 <usart_serial_getchar+0x74>)
  40be94:	4298      	cmp	r0, r3
  40be96:	d00f      	beq.n	40beb8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40be98:	4b17      	ldr	r3, [pc, #92]	; (40bef8 <usart_serial_getchar+0x78>)
  40be9a:	4298      	cmp	r0, r3
  40be9c:	d014      	beq.n	40bec8 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40be9e:	4b17      	ldr	r3, [pc, #92]	; (40befc <usart_serial_getchar+0x7c>)
  40bea0:	429d      	cmp	r5, r3
  40bea2:	d01b      	beq.n	40bedc <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40bea4:	b003      	add	sp, #12
  40bea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40bea8:	461f      	mov	r7, r3
  40beaa:	4e15      	ldr	r6, [pc, #84]	; (40bf00 <usart_serial_getchar+0x80>)
  40beac:	4621      	mov	r1, r4
  40beae:	4638      	mov	r0, r7
  40beb0:	47b0      	blx	r6
  40beb2:	2800      	cmp	r0, #0
  40beb4:	d1fa      	bne.n	40beac <usart_serial_getchar+0x2c>
  40beb6:	e7f2      	b.n	40be9e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40beb8:	461e      	mov	r6, r3
  40beba:	4d11      	ldr	r5, [pc, #68]	; (40bf00 <usart_serial_getchar+0x80>)
  40bebc:	4621      	mov	r1, r4
  40bebe:	4630      	mov	r0, r6
  40bec0:	47a8      	blx	r5
  40bec2:	2800      	cmp	r0, #0
  40bec4:	d1fa      	bne.n	40bebc <usart_serial_getchar+0x3c>
  40bec6:	e7ed      	b.n	40bea4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40bec8:	461e      	mov	r6, r3
  40beca:	4d0e      	ldr	r5, [pc, #56]	; (40bf04 <usart_serial_getchar+0x84>)
  40becc:	a901      	add	r1, sp, #4
  40bece:	4630      	mov	r0, r6
  40bed0:	47a8      	blx	r5
  40bed2:	2800      	cmp	r0, #0
  40bed4:	d1fa      	bne.n	40becc <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  40bed6:	9b01      	ldr	r3, [sp, #4]
  40bed8:	7023      	strb	r3, [r4, #0]
  40beda:	e7e3      	b.n	40bea4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40bedc:	461e      	mov	r6, r3
  40bede:	4d09      	ldr	r5, [pc, #36]	; (40bf04 <usart_serial_getchar+0x84>)
  40bee0:	a901      	add	r1, sp, #4
  40bee2:	4630      	mov	r0, r6
  40bee4:	47a8      	blx	r5
  40bee6:	2800      	cmp	r0, #0
  40bee8:	d1fa      	bne.n	40bee0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40beea:	9b01      	ldr	r3, [sp, #4]
  40beec:	7023      	strb	r3, [r4, #0]
}
  40beee:	e7d9      	b.n	40bea4 <usart_serial_getchar+0x24>
  40bef0:	400e0600 	.word	0x400e0600
  40bef4:	40060600 	.word	0x40060600
  40bef8:	400a0000 	.word	0x400a0000
  40befc:	400a4000 	.word	0x400a4000
  40bf00:	00402541 	.word	0x00402541
  40bf04:	00403d55 	.word	0x00403d55

0040bf08 <usart_serial_putchar>:
{
  40bf08:	b570      	push	{r4, r5, r6, lr}
  40bf0a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40bf0c:	4b18      	ldr	r3, [pc, #96]	; (40bf70 <usart_serial_putchar+0x68>)
  40bf0e:	4298      	cmp	r0, r3
  40bf10:	d00a      	beq.n	40bf28 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  40bf12:	4b18      	ldr	r3, [pc, #96]	; (40bf74 <usart_serial_putchar+0x6c>)
  40bf14:	4298      	cmp	r0, r3
  40bf16:	d010      	beq.n	40bf3a <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  40bf18:	4b17      	ldr	r3, [pc, #92]	; (40bf78 <usart_serial_putchar+0x70>)
  40bf1a:	4298      	cmp	r0, r3
  40bf1c:	d016      	beq.n	40bf4c <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  40bf1e:	4b17      	ldr	r3, [pc, #92]	; (40bf7c <usart_serial_putchar+0x74>)
  40bf20:	4298      	cmp	r0, r3
  40bf22:	d01c      	beq.n	40bf5e <usart_serial_putchar+0x56>
	return 0;
  40bf24:	2000      	movs	r0, #0
}
  40bf26:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40bf28:	461e      	mov	r6, r3
  40bf2a:	4d15      	ldr	r5, [pc, #84]	; (40bf80 <usart_serial_putchar+0x78>)
  40bf2c:	4621      	mov	r1, r4
  40bf2e:	4630      	mov	r0, r6
  40bf30:	47a8      	blx	r5
  40bf32:	2800      	cmp	r0, #0
  40bf34:	d1fa      	bne.n	40bf2c <usart_serial_putchar+0x24>
		return 1;
  40bf36:	2001      	movs	r0, #1
  40bf38:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40bf3a:	461e      	mov	r6, r3
  40bf3c:	4d10      	ldr	r5, [pc, #64]	; (40bf80 <usart_serial_putchar+0x78>)
  40bf3e:	4621      	mov	r1, r4
  40bf40:	4630      	mov	r0, r6
  40bf42:	47a8      	blx	r5
  40bf44:	2800      	cmp	r0, #0
  40bf46:	d1fa      	bne.n	40bf3e <usart_serial_putchar+0x36>
		return 1;
  40bf48:	2001      	movs	r0, #1
  40bf4a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40bf4c:	461e      	mov	r6, r3
  40bf4e:	4d0d      	ldr	r5, [pc, #52]	; (40bf84 <usart_serial_putchar+0x7c>)
  40bf50:	4621      	mov	r1, r4
  40bf52:	4630      	mov	r0, r6
  40bf54:	47a8      	blx	r5
  40bf56:	2800      	cmp	r0, #0
  40bf58:	d1fa      	bne.n	40bf50 <usart_serial_putchar+0x48>
		return 1;
  40bf5a:	2001      	movs	r0, #1
  40bf5c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40bf5e:	461e      	mov	r6, r3
  40bf60:	4d08      	ldr	r5, [pc, #32]	; (40bf84 <usart_serial_putchar+0x7c>)
  40bf62:	4621      	mov	r1, r4
  40bf64:	4630      	mov	r0, r6
  40bf66:	47a8      	blx	r5
  40bf68:	2800      	cmp	r0, #0
  40bf6a:	d1fa      	bne.n	40bf62 <usart_serial_putchar+0x5a>
		return 1;
  40bf6c:	2001      	movs	r0, #1
  40bf6e:	bd70      	pop	{r4, r5, r6, pc}
  40bf70:	400e0600 	.word	0x400e0600
  40bf74:	40060600 	.word	0x40060600
  40bf78:	400a0000 	.word	0x400a0000
  40bf7c:	400a4000 	.word	0x400a4000
  40bf80:	00402531 	.word	0x00402531
  40bf84:	00403d41 	.word	0x00403d41

0040bf88 <uxRand>:
	ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
  40bf88:	4b04      	ldr	r3, [pc, #16]	; (40bf9c <uxRand+0x14>)
  40bf8a:	681a      	ldr	r2, [r3, #0]
  40bf8c:	4804      	ldr	r0, [pc, #16]	; (40bfa0 <uxRand+0x18>)
  40bf8e:	fb00 f002 	mul.w	r0, r0, r2
  40bf92:	3001      	adds	r0, #1
  40bf94:	6018      	str	r0, [r3, #0]
}
  40bf96:	f3c0 400e 	ubfx	r0, r0, #16, #15
  40bf9a:	4770      	bx	lr
  40bf9c:	200133f8 	.word	0x200133f8
  40bfa0:	015a4e35 	.word	0x015a4e35

0040bfa4 <xApplicationDNSQueryHook>:
}
  40bfa4:	2000      	movs	r0, #0
  40bfa6:	4770      	bx	lr

0040bfa8 <MyLedToggle>:
{	if (wMyTick1ms>=250)	// MZ_TESTE
  40bfa8:	4b0a      	ldr	r3, [pc, #40]	; (40bfd4 <MyLedToggle+0x2c>)
  40bfaa:	781b      	ldrb	r3, [r3, #0]
  40bfac:	2bf9      	cmp	r3, #249	; 0xf9
  40bfae:	d90b      	bls.n	40bfc8 <MyLedToggle+0x20>
	{	wMyTick1ms = 0;
  40bfb0:	2200      	movs	r2, #0
  40bfb2:	4b08      	ldr	r3, [pc, #32]	; (40bfd4 <MyLedToggle+0x2c>)
  40bfb4:	701a      	strb	r2, [r3, #0]
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40bfb6:	4b08      	ldr	r3, [pc, #32]	; (40bfd8 <MyLedToggle+0x30>)
  40bfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40bfba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  40bfbe:	d104      	bne.n	40bfca <MyLedToggle+0x22>
		port->PIO_SODR = mask;
  40bfc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40bfc4:	4b04      	ldr	r3, [pc, #16]	; (40bfd8 <MyLedToggle+0x30>)
  40bfc6:	631a      	str	r2, [r3, #48]	; 0x30
  40bfc8:	4770      	bx	lr
		port->PIO_CODR = mask;
  40bfca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40bfce:	4b02      	ldr	r3, [pc, #8]	; (40bfd8 <MyLedToggle+0x30>)
  40bfd0:	635a      	str	r2, [r3, #52]	; 0x34
  40bfd2:	4770      	bx	lr
  40bfd4:	200133fc 	.word	0x200133fc
  40bfd8:	400e1400 	.word	0x400e1400

0040bfdc <main>:
{
  40bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bfe0:	b086      	sub	sp, #24
	cpu_irq_enable();
  40bfe2:	2501      	movs	r5, #1
  40bfe4:	4b3b      	ldr	r3, [pc, #236]	; (40c0d4 <main+0xf8>)
  40bfe6:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("dmb");
  40bfe8:	f3bf 8f5f 	dmb	sy
  40bfec:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
  40bfee:	4b3a      	ldr	r3, [pc, #232]	; (40c0d8 <main+0xfc>)
  40bff0:	2400      	movs	r4, #0
  40bff2:	701c      	strb	r4, [r3, #0]
  40bff4:	705c      	strb	r4, [r3, #1]
  40bff6:	709c      	strb	r4, [r3, #2]
  40bff8:	70dc      	strb	r4, [r3, #3]
  40bffa:	711c      	strb	r4, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40bffc:	715d      	strb	r5, [r3, #5]
	sysclk_init();
  40bffe:	4b37      	ldr	r3, [pc, #220]	; (40c0dc <main+0x100>)
  40c000:	4798      	blx	r3
	board_init();
  40c002:	4b37      	ldr	r3, [pc, #220]	; (40c0e0 <main+0x104>)
  40c004:	4798      	blx	r3
	ui_init();
  40c006:	4b37      	ldr	r3, [pc, #220]	; (40c0e4 <main+0x108>)
  40c008:	4798      	blx	r3
	ui_powerdown();
  40c00a:	4b37      	ldr	r3, [pc, #220]	; (40c0e8 <main+0x10c>)
  40c00c:	4798      	blx	r3
  40c00e:	2007      	movs	r0, #7
  40c010:	4e36      	ldr	r6, [pc, #216]	; (40c0ec <main+0x110>)
  40c012:	47b0      	blx	r6
	pio_configure_pin_group(CONF_UART_PIO, CONF_PINS_UART,
  40c014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40c018:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40c01c:	4834      	ldr	r0, [pc, #208]	; (40c0f0 <main+0x114>)
  40c01e:	4b35      	ldr	r3, [pc, #212]	; (40c0f4 <main+0x118>)
  40c020:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40c022:	4f35      	ldr	r7, [pc, #212]	; (40c0f8 <main+0x11c>)
  40c024:	4b35      	ldr	r3, [pc, #212]	; (40c0fc <main+0x120>)
  40c026:	601f      	str	r7, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40c028:	4a35      	ldr	r2, [pc, #212]	; (40c100 <main+0x124>)
  40c02a:	4b36      	ldr	r3, [pc, #216]	; (40c104 <main+0x128>)
  40c02c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40c02e:	4a36      	ldr	r2, [pc, #216]	; (40c108 <main+0x12c>)
  40c030:	4b36      	ldr	r3, [pc, #216]	; (40c10c <main+0x130>)
  40c032:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40c034:	4b36      	ldr	r3, [pc, #216]	; (40c110 <main+0x134>)
  40c036:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
  40c038:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40c03c:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
  40c03e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40c042:	9305      	str	r3, [sp, #20]
  40c044:	2007      	movs	r0, #7
  40c046:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
  40c048:	a903      	add	r1, sp, #12
  40c04a:	4638      	mov	r0, r7
  40c04c:	4b31      	ldr	r3, [pc, #196]	; (40c114 <main+0x138>)
  40c04e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40c050:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40c16c <main+0x190>
  40c054:	f8d8 3000 	ldr.w	r3, [r8]
  40c058:	4621      	mov	r1, r4
  40c05a:	6898      	ldr	r0, [r3, #8]
  40c05c:	4f2e      	ldr	r7, [pc, #184]	; (40c118 <main+0x13c>)
  40c05e:	47b8      	blx	r7
	setbuf(stdin, NULL);
  40c060:	f8d8 3000 	ldr.w	r3, [r8]
  40c064:	4621      	mov	r1, r4
  40c066:	6858      	ldr	r0, [r3, #4]
  40c068:	47b8      	blx	r7
	printf ("\n\n");
  40c06a:	482c      	ldr	r0, [pc, #176]	; (40c11c <main+0x140>)
  40c06c:	4f2c      	ldr	r7, [pc, #176]	; (40c120 <main+0x144>)
  40c06e:	47b8      	blx	r7
	printf ("*** CRAAM - HATS Data Acquisition Module    ***\n");
  40c070:	482c      	ldr	r0, [pc, #176]	; (40c124 <main+0x148>)
  40c072:	47b8      	blx	r7
	printf ("*** FW: 27-01-Tick1ms - 12/june/2019 - 004  ***\n\n");
  40c074:	482c      	ldr	r0, [pc, #176]	; (40c128 <main+0x14c>)
  40c076:	47b8      	blx	r7
	ctrl_access_init(); // Required with FreeRTOS
  40c078:	4b2c      	ldr	r3, [pc, #176]	; (40c12c <main+0x150>)
  40c07a:	4798      	blx	r3
	memories_initialization();
  40c07c:	4b2c      	ldr	r3, [pc, #176]	; (40c130 <main+0x154>)
  40c07e:	4798      	blx	r3
    pmc_enable_periph_clk(ID_GMAC);
  40c080:	202c      	movs	r0, #44	; 0x2c
  40c082:	47b0      	blx	r6
    FreeRTOS_IPInit( ucIPAddress,
  40c084:	4b2b      	ldr	r3, [pc, #172]	; (40c134 <main+0x158>)
  40c086:	9300      	str	r3, [sp, #0]
  40c088:	4b2b      	ldr	r3, [pc, #172]	; (40c138 <main+0x15c>)
  40c08a:	4a2c      	ldr	r2, [pc, #176]	; (40c13c <main+0x160>)
  40c08c:	492c      	ldr	r1, [pc, #176]	; (40c140 <main+0x164>)
  40c08e:	482d      	ldr	r0, [pc, #180]	; (40c144 <main+0x168>)
  40c090:	4e2d      	ldr	r6, [pc, #180]	; (40c148 <main+0x16c>)
  40c092:	47b0      	blx	r6
	vSemaphoreCreateBinary(main_trans_semphr);
  40c094:	2203      	movs	r2, #3
  40c096:	4621      	mov	r1, r4
  40c098:	4628      	mov	r0, r5
  40c09a:	4b2c      	ldr	r3, [pc, #176]	; (40c14c <main+0x170>)
  40c09c:	4798      	blx	r3
  40c09e:	4b2c      	ldr	r3, [pc, #176]	; (40c150 <main+0x174>)
  40c0a0:	6018      	str	r0, [r3, #0]
  40c0a2:	b120      	cbz	r0, 40c0ae <main+0xd2>
  40c0a4:	4623      	mov	r3, r4
  40c0a6:	4622      	mov	r2, r4
  40c0a8:	4621      	mov	r1, r4
  40c0aa:	4c2a      	ldr	r4, [pc, #168]	; (40c154 <main+0x178>)
  40c0ac:	47a0      	blx	r4
	udc_start();
  40c0ae:	4b2a      	ldr	r3, [pc, #168]	; (40c158 <main+0x17c>)
  40c0b0:	4798      	blx	r3
	xTaskCreate(main_memories_trans_task,
  40c0b2:	2400      	movs	r4, #0
  40c0b4:	9401      	str	r4, [sp, #4]
  40c0b6:	2301      	movs	r3, #1
  40c0b8:	9300      	str	r3, [sp, #0]
  40c0ba:	4623      	mov	r3, r4
  40c0bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  40c0c0:	4926      	ldr	r1, [pc, #152]	; (40c15c <main+0x180>)
  40c0c2:	4827      	ldr	r0, [pc, #156]	; (40c160 <main+0x184>)
  40c0c4:	4d27      	ldr	r5, [pc, #156]	; (40c164 <main+0x188>)
  40c0c6:	47a8      	blx	r5
	vTaskStartScheduler();
  40c0c8:	4b27      	ldr	r3, [pc, #156]	; (40c168 <main+0x18c>)
  40c0ca:	4798      	blx	r3
}
  40c0cc:	4620      	mov	r0, r4
  40c0ce:	b006      	add	sp, #24
  40c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c0d4:	200000c8 	.word	0x200000c8
  40c0d8:	2001343c 	.word	0x2001343c
  40c0dc:	0040029d 	.word	0x0040029d
  40c0e0:	0040160d 	.word	0x0040160d
  40c0e4:	00400165 	.word	0x00400165
  40c0e8:	00400175 	.word	0x00400175
  40c0ec:	00402141 	.word	0x00402141
  40c0f0:	400e0e00 	.word	0x400e0e00
  40c0f4:	00401eb5 	.word	0x00401eb5
  40c0f8:	400e0600 	.word	0x400e0600
  40c0fc:	2001344c 	.word	0x2001344c
  40c100:	0040bf09 	.word	0x0040bf09
  40c104:	20013448 	.word	0x20013448
  40c108:	0040be81 	.word	0x0040be81
  40c10c:	20013444 	.word	0x20013444
  40c110:	05b8d800 	.word	0x05b8d800
  40c114:	004024f9 	.word	0x004024f9
  40c118:	0040c671 	.word	0x0040c671
  40c11c:	0041407c 	.word	0x0041407c
  40c120:	0040c351 	.word	0x0040c351
  40c124:	00414080 	.word	0x00414080
  40c128:	004140b4 	.word	0x004140b4
  40c12c:	00400331 	.word	0x00400331
  40c130:	0040c2fd 	.word	0x0040c2fd
  40c134:	00414104 	.word	0x00414104
  40c138:	004140f8 	.word	0x004140f8
  40c13c:	004140fc 	.word	0x004140fc
  40c140:	0041410c 	.word	0x0041410c
  40c144:	00414100 	.word	0x00414100
  40c148:	00405519 	.word	0x00405519
  40c14c:	0040ad89 	.word	0x0040ad89
  40c150:	200133f4 	.word	0x200133f4
  40c154:	0040addd 	.word	0x0040addd
  40c158:	00401089 	.word	0x00401089
  40c15c:	004140e8 	.word	0x004140e8
  40c160:	0040be59 	.word	0x0040be59
  40c164:	0040b401 	.word	0x0040b401
  40c168:	0040b5d1 	.word	0x0040b5d1
  40c16c:	200000fc 	.word	0x200000fc

0040c170 <vApplicationIPNetworkEventHook>:
	if( eNetworkEvent == eNetworkUp )
  40c170:	2800      	cmp	r0, #0
  40c172:	d14e      	bne.n	40c212 <vApplicationIPNetworkEventHook+0xa2>
{
  40c174:	b570      	push	{r4, r5, r6, lr}
  40c176:	b08a      	sub	sp, #40	; 0x28
		if( xTasksAlreadyCreated == pdFALSE )
  40c178:	4b26      	ldr	r3, [pc, #152]	; (40c214 <vApplicationIPNetworkEventHook+0xa4>)
  40c17a:	681b      	ldr	r3, [r3, #0]
  40c17c:	b913      	cbnz	r3, 40c184 <vApplicationIPNetworkEventHook+0x14>
			xTasksAlreadyCreated = pdTRUE;
  40c17e:	2201      	movs	r2, #1
  40c180:	4b24      	ldr	r3, [pc, #144]	; (40c214 <vApplicationIPNetworkEventHook+0xa4>)
  40c182:	601a      	str	r2, [r3, #0]
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
  40c184:	ab06      	add	r3, sp, #24
  40c186:	aa07      	add	r2, sp, #28
  40c188:	a908      	add	r1, sp, #32
  40c18a:	a809      	add	r0, sp, #36	; 0x24
  40c18c:	4c22      	ldr	r4, [pc, #136]	; (40c218 <vApplicationIPNetworkEventHook+0xa8>)
  40c18e:	47a0      	blx	r4
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
  40c190:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c192:	4e22      	ldr	r6, [pc, #136]	; (40c21c <vApplicationIPNetworkEventHook+0xac>)
  40c194:	0e13      	lsrs	r3, r2, #24
  40c196:	9301      	str	r3, [sp, #4]
  40c198:	f3c2 4307 	ubfx	r3, r2, #16, #8
  40c19c:	9300      	str	r3, [sp, #0]
  40c19e:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40c1a2:	b2d2      	uxtb	r2, r2
  40c1a4:	4631      	mov	r1, r6
  40c1a6:	a802      	add	r0, sp, #8
  40c1a8:	4d1d      	ldr	r5, [pc, #116]	; (40c220 <vApplicationIPNetworkEventHook+0xb0>)
  40c1aa:	47a8      	blx	r5
		FreeRTOS_printf( ( "\r\n\r\nIP Address: %s\r\n", cBuffer ) );
  40c1ac:	a902      	add	r1, sp, #8
  40c1ae:	481d      	ldr	r0, [pc, #116]	; (40c224 <vApplicationIPNetworkEventHook+0xb4>)
  40c1b0:	4c1d      	ldr	r4, [pc, #116]	; (40c228 <vApplicationIPNetworkEventHook+0xb8>)
  40c1b2:	47a0      	blx	r4
		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
  40c1b4:	9a08      	ldr	r2, [sp, #32]
  40c1b6:	0e13      	lsrs	r3, r2, #24
  40c1b8:	9301      	str	r3, [sp, #4]
  40c1ba:	f3c2 4307 	ubfx	r3, r2, #16, #8
  40c1be:	9300      	str	r3, [sp, #0]
  40c1c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40c1c4:	b2d2      	uxtb	r2, r2
  40c1c6:	4631      	mov	r1, r6
  40c1c8:	a802      	add	r0, sp, #8
  40c1ca:	47a8      	blx	r5
		FreeRTOS_printf( ( "Subnet Mask: %s\r\n", cBuffer ) );
  40c1cc:	a902      	add	r1, sp, #8
  40c1ce:	4817      	ldr	r0, [pc, #92]	; (40c22c <vApplicationIPNetworkEventHook+0xbc>)
  40c1d0:	47a0      	blx	r4
		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
  40c1d2:	9a07      	ldr	r2, [sp, #28]
  40c1d4:	0e13      	lsrs	r3, r2, #24
  40c1d6:	9301      	str	r3, [sp, #4]
  40c1d8:	f3c2 4307 	ubfx	r3, r2, #16, #8
  40c1dc:	9300      	str	r3, [sp, #0]
  40c1de:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40c1e2:	b2d2      	uxtb	r2, r2
  40c1e4:	4631      	mov	r1, r6
  40c1e6:	a802      	add	r0, sp, #8
  40c1e8:	47a8      	blx	r5
		FreeRTOS_printf( ( "Gateway Address: %s\r\n", cBuffer ) );
  40c1ea:	a902      	add	r1, sp, #8
  40c1ec:	4810      	ldr	r0, [pc, #64]	; (40c230 <vApplicationIPNetworkEventHook+0xc0>)
  40c1ee:	47a0      	blx	r4
		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
  40c1f0:	9a06      	ldr	r2, [sp, #24]
  40c1f2:	0e13      	lsrs	r3, r2, #24
  40c1f4:	9301      	str	r3, [sp, #4]
  40c1f6:	f3c2 4307 	ubfx	r3, r2, #16, #8
  40c1fa:	9300      	str	r3, [sp, #0]
  40c1fc:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40c200:	b2d2      	uxtb	r2, r2
  40c202:	4631      	mov	r1, r6
  40c204:	a802      	add	r0, sp, #8
  40c206:	47a8      	blx	r5
		FreeRTOS_printf( ( "DNS Server Address: %s\r\n\r\n\r\n", cBuffer ) );
  40c208:	a902      	add	r1, sp, #8
  40c20a:	480a      	ldr	r0, [pc, #40]	; (40c234 <vApplicationIPNetworkEventHook+0xc4>)
  40c20c:	47a0      	blx	r4
}
  40c20e:	b00a      	add	sp, #40	; 0x28
  40c210:	bd70      	pop	{r4, r5, r6, pc}
  40c212:	4770      	bx	lr
  40c214:	20013404 	.word	0x20013404
  40c218:	00405635 	.word	0x00405635
  40c21c:	00414110 	.word	0x00414110
  40c220:	0040c8a9 	.word	0x0040c8a9
  40c224:	0041411c 	.word	0x0041411c
  40c228:	0040c351 	.word	0x0040c351
  40c22c:	00414134 	.word	0x00414134
  40c230:	00414148 	.word	0x00414148
  40c234:	00414160 	.word	0x00414160

0040c238 <vApplicationIdleHook>:
{
  40c238:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
  40c23a:	b672      	cpsid	i
  40c23c:	f3bf 8f5f 	dmb	sy
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  40c240:	2200      	movs	r2, #0
  40c242:	4b0f      	ldr	r3, [pc, #60]	; (40c280 <vApplicationIdleHook+0x48>)
  40c244:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
  40c246:	4b0f      	ldr	r3, [pc, #60]	; (40c284 <vApplicationIdleHook+0x4c>)
  40c248:	781b      	ldrb	r3, [r3, #0]
  40c24a:	b943      	cbnz	r3, 40c25e <vApplicationIdleHook+0x26>
  40c24c:	4b0d      	ldr	r3, [pc, #52]	; (40c284 <vApplicationIdleHook+0x4c>)
  40c24e:	4610      	mov	r0, r2
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  40c250:	3001      	adds	r0, #1
  40c252:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
  40c254:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40c258:	2a00      	cmp	r2, #0
  40c25a:	d0f9      	beq.n	40c250 <vApplicationIdleHook+0x18>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  40c25c:	b930      	cbnz	r0, 40c26c <vApplicationIdleHook+0x34>
		cpu_irq_enable();
  40c25e:	2201      	movs	r2, #1
  40c260:	4b07      	ldr	r3, [pc, #28]	; (40c280 <vApplicationIdleHook+0x48>)
  40c262:	701a      	strb	r2, [r3, #0]
  40c264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40c268:	b662      	cpsie	i
  40c26a:	bd08      	pop	{r3, pc}
  __ASM volatile ("cpsid i" : : : "memory");
  40c26c:	b672      	cpsid	i
  40c26e:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  40c272:	2200      	movs	r2, #0
  40c274:	4b02      	ldr	r3, [pc, #8]	; (40c280 <vApplicationIdleHook+0x48>)
  40c276:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  40c278:	4b03      	ldr	r3, [pc, #12]	; (40c288 <vApplicationIdleHook+0x50>)
  40c27a:	4798      	blx	r3
  40c27c:	bd08      	pop	{r3, pc}
  40c27e:	bf00      	nop
  40c280:	200000c8 	.word	0x200000c8
  40c284:	2001343c 	.word	0x2001343c
  40c288:	00402275 	.word	0x00402275

0040c28c <main_msc_notify_trans>:
		}
	}
}

void main_msc_notify_trans(void)
{
  40c28c:	b508      	push	{r3, lr}
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
  40c28e:	4904      	ldr	r1, [pc, #16]	; (40c2a0 <main_msc_notify_trans+0x14>)
  40c290:	2300      	movs	r3, #0
  40c292:	600b      	str	r3, [r1, #0]
	// One transfer is requested 
	// It is now time for main_memories_trans_task() to run
	xSemaphoreGiveFromISR( main_trans_semphr, &xHigherPriorityTaskWoken );
  40c294:	4b03      	ldr	r3, [pc, #12]	; (40c2a4 <main_msc_notify_trans+0x18>)
  40c296:	6818      	ldr	r0, [r3, #0]
  40c298:	4b03      	ldr	r3, [pc, #12]	; (40c2a8 <main_msc_notify_trans+0x1c>)
  40c29a:	4798      	blx	r3
  40c29c:	bd08      	pop	{r3, pc}
  40c29e:	bf00      	nop
  40c2a0:	20013400 	.word	0x20013400
  40c2a4:	200133f4 	.word	0x200133f4
  40c2a8:	0040afa5 	.word	0x0040afa5

0040c2ac <main_suspend_action>:
}

void main_suspend_action(void)
{
  40c2ac:	b508      	push	{r3, lr}
	ui_powerdown();
  40c2ae:	4b01      	ldr	r3, [pc, #4]	; (40c2b4 <main_suspend_action+0x8>)
  40c2b0:	4798      	blx	r3
  40c2b2:	bd08      	pop	{r3, pc}
  40c2b4:	00400175 	.word	0x00400175

0040c2b8 <main_resume_action>:
}

void main_resume_action(void)
{
  40c2b8:	b508      	push	{r3, lr}
	ui_wakeup();
  40c2ba:	4b01      	ldr	r3, [pc, #4]	; (40c2c0 <main_resume_action+0x8>)
  40c2bc:	4798      	blx	r3
  40c2be:	bd08      	pop	{r3, pc}
  40c2c0:	00400177 	.word	0x00400177

0040c2c4 <main_sof_action>:
}

void main_sof_action(void)
{
  40c2c4:	b508      	push	{r3, lr}
	if (!main_b_msc_enable)
  40c2c6:	4b04      	ldr	r3, [pc, #16]	; (40c2d8 <main_sof_action+0x14>)
  40c2c8:	781b      	ldrb	r3, [r3, #0]
  40c2ca:	b903      	cbnz	r3, 40c2ce <main_sof_action+0xa>
  40c2cc:	bd08      	pop	{r3, pc}
		return;
	ui_process(udd_get_frame_number());
  40c2ce:	4b03      	ldr	r3, [pc, #12]	; (40c2dc <main_sof_action+0x18>)
  40c2d0:	4798      	blx	r3
  40c2d2:	4b03      	ldr	r3, [pc, #12]	; (40c2e0 <main_sof_action+0x1c>)
  40c2d4:	4798      	blx	r3
  40c2d6:	e7f9      	b.n	40c2cc <main_sof_action+0x8>
  40c2d8:	200133f0 	.word	0x200133f0
  40c2dc:	00403689 	.word	0x00403689
  40c2e0:	00400181 	.word	0x00400181

0040c2e4 <main_msc_enable>:
}

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
  40c2e4:	2001      	movs	r0, #1
  40c2e6:	4b01      	ldr	r3, [pc, #4]	; (40c2ec <main_msc_enable+0x8>)
  40c2e8:	7018      	strb	r0, [r3, #0]
	return true;
}
  40c2ea:	4770      	bx	lr
  40c2ec:	200133f0 	.word	0x200133f0

0040c2f0 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
  40c2f0:	2200      	movs	r2, #0
  40c2f2:	4b01      	ldr	r3, [pc, #4]	; (40c2f8 <main_msc_disable+0x8>)
  40c2f4:	701a      	strb	r2, [r3, #0]
  40c2f6:	4770      	bx	lr
  40c2f8:	200133f0 	.word	0x200133f0

0040c2fc <memories_initialization>:
	pio_set_pin_low(PIN_EBI_NLB);
}
#endif

void memories_initialization(void)
{
  40c2fc:	4770      	bx	lr
	...

0040c300 <__libc_init_array>:
  40c300:	b570      	push	{r4, r5, r6, lr}
  40c302:	4e0f      	ldr	r6, [pc, #60]	; (40c340 <__libc_init_array+0x40>)
  40c304:	4d0f      	ldr	r5, [pc, #60]	; (40c344 <__libc_init_array+0x44>)
  40c306:	1b76      	subs	r6, r6, r5
  40c308:	10b6      	asrs	r6, r6, #2
  40c30a:	bf18      	it	ne
  40c30c:	2400      	movne	r4, #0
  40c30e:	d005      	beq.n	40c31c <__libc_init_array+0x1c>
  40c310:	3401      	adds	r4, #1
  40c312:	f855 3b04 	ldr.w	r3, [r5], #4
  40c316:	4798      	blx	r3
  40c318:	42a6      	cmp	r6, r4
  40c31a:	d1f9      	bne.n	40c310 <__libc_init_array+0x10>
  40c31c:	4e0a      	ldr	r6, [pc, #40]	; (40c348 <__libc_init_array+0x48>)
  40c31e:	4d0b      	ldr	r5, [pc, #44]	; (40c34c <__libc_init_array+0x4c>)
  40c320:	1b76      	subs	r6, r6, r5
  40c322:	f008 f881 	bl	414428 <_init>
  40c326:	10b6      	asrs	r6, r6, #2
  40c328:	bf18      	it	ne
  40c32a:	2400      	movne	r4, #0
  40c32c:	d006      	beq.n	40c33c <__libc_init_array+0x3c>
  40c32e:	3401      	adds	r4, #1
  40c330:	f855 3b04 	ldr.w	r3, [r5], #4
  40c334:	4798      	blx	r3
  40c336:	42a6      	cmp	r6, r4
  40c338:	d1f9      	bne.n	40c32e <__libc_init_array+0x2e>
  40c33a:	bd70      	pop	{r4, r5, r6, pc}
  40c33c:	bd70      	pop	{r4, r5, r6, pc}
  40c33e:	bf00      	nop
  40c340:	00414434 	.word	0x00414434
  40c344:	00414434 	.word	0x00414434
  40c348:	0041443c 	.word	0x0041443c
  40c34c:	00414434 	.word	0x00414434

0040c350 <iprintf>:
  40c350:	b40f      	push	{r0, r1, r2, r3}
  40c352:	b500      	push	{lr}
  40c354:	4907      	ldr	r1, [pc, #28]	; (40c374 <iprintf+0x24>)
  40c356:	b083      	sub	sp, #12
  40c358:	ab04      	add	r3, sp, #16
  40c35a:	6808      	ldr	r0, [r1, #0]
  40c35c:	f853 2b04 	ldr.w	r2, [r3], #4
  40c360:	6881      	ldr	r1, [r0, #8]
  40c362:	9301      	str	r3, [sp, #4]
  40c364:	f001 ff88 	bl	40e278 <_vfiprintf_r>
  40c368:	b003      	add	sp, #12
  40c36a:	f85d eb04 	ldr.w	lr, [sp], #4
  40c36e:	b004      	add	sp, #16
  40c370:	4770      	bx	lr
  40c372:	bf00      	nop
  40c374:	200000fc 	.word	0x200000fc

0040c378 <memcmp>:
  40c378:	2a03      	cmp	r2, #3
  40c37a:	b470      	push	{r4, r5, r6}
  40c37c:	d922      	bls.n	40c3c4 <memcmp+0x4c>
  40c37e:	ea40 0301 	orr.w	r3, r0, r1
  40c382:	079b      	lsls	r3, r3, #30
  40c384:	d011      	beq.n	40c3aa <memcmp+0x32>
  40c386:	7803      	ldrb	r3, [r0, #0]
  40c388:	780c      	ldrb	r4, [r1, #0]
  40c38a:	42a3      	cmp	r3, r4
  40c38c:	d11d      	bne.n	40c3ca <memcmp+0x52>
  40c38e:	440a      	add	r2, r1
  40c390:	3101      	adds	r1, #1
  40c392:	e005      	b.n	40c3a0 <memcmp+0x28>
  40c394:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40c398:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c39c:	42a3      	cmp	r3, r4
  40c39e:	d114      	bne.n	40c3ca <memcmp+0x52>
  40c3a0:	4291      	cmp	r1, r2
  40c3a2:	d1f7      	bne.n	40c394 <memcmp+0x1c>
  40c3a4:	2000      	movs	r0, #0
  40c3a6:	bc70      	pop	{r4, r5, r6}
  40c3a8:	4770      	bx	lr
  40c3aa:	680d      	ldr	r5, [r1, #0]
  40c3ac:	6806      	ldr	r6, [r0, #0]
  40c3ae:	42ae      	cmp	r6, r5
  40c3b0:	460c      	mov	r4, r1
  40c3b2:	4603      	mov	r3, r0
  40c3b4:	f101 0104 	add.w	r1, r1, #4
  40c3b8:	f100 0004 	add.w	r0, r0, #4
  40c3bc:	d108      	bne.n	40c3d0 <memcmp+0x58>
  40c3be:	3a04      	subs	r2, #4
  40c3c0:	2a03      	cmp	r2, #3
  40c3c2:	d8f2      	bhi.n	40c3aa <memcmp+0x32>
  40c3c4:	2a00      	cmp	r2, #0
  40c3c6:	d1de      	bne.n	40c386 <memcmp+0xe>
  40c3c8:	e7ec      	b.n	40c3a4 <memcmp+0x2c>
  40c3ca:	1b18      	subs	r0, r3, r4
  40c3cc:	bc70      	pop	{r4, r5, r6}
  40c3ce:	4770      	bx	lr
  40c3d0:	4621      	mov	r1, r4
  40c3d2:	4618      	mov	r0, r3
  40c3d4:	e7d7      	b.n	40c386 <memcmp+0xe>
  40c3d6:	bf00      	nop

0040c3d8 <memcpy>:
  40c3d8:	4684      	mov	ip, r0
  40c3da:	ea41 0300 	orr.w	r3, r1, r0
  40c3de:	f013 0303 	ands.w	r3, r3, #3
  40c3e2:	d16d      	bne.n	40c4c0 <memcpy+0xe8>
  40c3e4:	3a40      	subs	r2, #64	; 0x40
  40c3e6:	d341      	bcc.n	40c46c <memcpy+0x94>
  40c3e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3ec:	f840 3b04 	str.w	r3, [r0], #4
  40c3f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3f4:	f840 3b04 	str.w	r3, [r0], #4
  40c3f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40c3fc:	f840 3b04 	str.w	r3, [r0], #4
  40c400:	f851 3b04 	ldr.w	r3, [r1], #4
  40c404:	f840 3b04 	str.w	r3, [r0], #4
  40c408:	f851 3b04 	ldr.w	r3, [r1], #4
  40c40c:	f840 3b04 	str.w	r3, [r0], #4
  40c410:	f851 3b04 	ldr.w	r3, [r1], #4
  40c414:	f840 3b04 	str.w	r3, [r0], #4
  40c418:	f851 3b04 	ldr.w	r3, [r1], #4
  40c41c:	f840 3b04 	str.w	r3, [r0], #4
  40c420:	f851 3b04 	ldr.w	r3, [r1], #4
  40c424:	f840 3b04 	str.w	r3, [r0], #4
  40c428:	f851 3b04 	ldr.w	r3, [r1], #4
  40c42c:	f840 3b04 	str.w	r3, [r0], #4
  40c430:	f851 3b04 	ldr.w	r3, [r1], #4
  40c434:	f840 3b04 	str.w	r3, [r0], #4
  40c438:	f851 3b04 	ldr.w	r3, [r1], #4
  40c43c:	f840 3b04 	str.w	r3, [r0], #4
  40c440:	f851 3b04 	ldr.w	r3, [r1], #4
  40c444:	f840 3b04 	str.w	r3, [r0], #4
  40c448:	f851 3b04 	ldr.w	r3, [r1], #4
  40c44c:	f840 3b04 	str.w	r3, [r0], #4
  40c450:	f851 3b04 	ldr.w	r3, [r1], #4
  40c454:	f840 3b04 	str.w	r3, [r0], #4
  40c458:	f851 3b04 	ldr.w	r3, [r1], #4
  40c45c:	f840 3b04 	str.w	r3, [r0], #4
  40c460:	f851 3b04 	ldr.w	r3, [r1], #4
  40c464:	f840 3b04 	str.w	r3, [r0], #4
  40c468:	3a40      	subs	r2, #64	; 0x40
  40c46a:	d2bd      	bcs.n	40c3e8 <memcpy+0x10>
  40c46c:	3230      	adds	r2, #48	; 0x30
  40c46e:	d311      	bcc.n	40c494 <memcpy+0xbc>
  40c470:	f851 3b04 	ldr.w	r3, [r1], #4
  40c474:	f840 3b04 	str.w	r3, [r0], #4
  40c478:	f851 3b04 	ldr.w	r3, [r1], #4
  40c47c:	f840 3b04 	str.w	r3, [r0], #4
  40c480:	f851 3b04 	ldr.w	r3, [r1], #4
  40c484:	f840 3b04 	str.w	r3, [r0], #4
  40c488:	f851 3b04 	ldr.w	r3, [r1], #4
  40c48c:	f840 3b04 	str.w	r3, [r0], #4
  40c490:	3a10      	subs	r2, #16
  40c492:	d2ed      	bcs.n	40c470 <memcpy+0x98>
  40c494:	320c      	adds	r2, #12
  40c496:	d305      	bcc.n	40c4a4 <memcpy+0xcc>
  40c498:	f851 3b04 	ldr.w	r3, [r1], #4
  40c49c:	f840 3b04 	str.w	r3, [r0], #4
  40c4a0:	3a04      	subs	r2, #4
  40c4a2:	d2f9      	bcs.n	40c498 <memcpy+0xc0>
  40c4a4:	3204      	adds	r2, #4
  40c4a6:	d008      	beq.n	40c4ba <memcpy+0xe2>
  40c4a8:	07d2      	lsls	r2, r2, #31
  40c4aa:	bf1c      	itt	ne
  40c4ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c4b0:	f800 3b01 	strbne.w	r3, [r0], #1
  40c4b4:	d301      	bcc.n	40c4ba <memcpy+0xe2>
  40c4b6:	880b      	ldrh	r3, [r1, #0]
  40c4b8:	8003      	strh	r3, [r0, #0]
  40c4ba:	4660      	mov	r0, ip
  40c4bc:	4770      	bx	lr
  40c4be:	bf00      	nop
  40c4c0:	2a08      	cmp	r2, #8
  40c4c2:	d313      	bcc.n	40c4ec <memcpy+0x114>
  40c4c4:	078b      	lsls	r3, r1, #30
  40c4c6:	d08d      	beq.n	40c3e4 <memcpy+0xc>
  40c4c8:	f010 0303 	ands.w	r3, r0, #3
  40c4cc:	d08a      	beq.n	40c3e4 <memcpy+0xc>
  40c4ce:	f1c3 0304 	rsb	r3, r3, #4
  40c4d2:	1ad2      	subs	r2, r2, r3
  40c4d4:	07db      	lsls	r3, r3, #31
  40c4d6:	bf1c      	itt	ne
  40c4d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40c4dc:	f800 3b01 	strbne.w	r3, [r0], #1
  40c4e0:	d380      	bcc.n	40c3e4 <memcpy+0xc>
  40c4e2:	f831 3b02 	ldrh.w	r3, [r1], #2
  40c4e6:	f820 3b02 	strh.w	r3, [r0], #2
  40c4ea:	e77b      	b.n	40c3e4 <memcpy+0xc>
  40c4ec:	3a04      	subs	r2, #4
  40c4ee:	d3d9      	bcc.n	40c4a4 <memcpy+0xcc>
  40c4f0:	3a01      	subs	r2, #1
  40c4f2:	f811 3b01 	ldrb.w	r3, [r1], #1
  40c4f6:	f800 3b01 	strb.w	r3, [r0], #1
  40c4fa:	d2f9      	bcs.n	40c4f0 <memcpy+0x118>
  40c4fc:	780b      	ldrb	r3, [r1, #0]
  40c4fe:	7003      	strb	r3, [r0, #0]
  40c500:	784b      	ldrb	r3, [r1, #1]
  40c502:	7043      	strb	r3, [r0, #1]
  40c504:	788b      	ldrb	r3, [r1, #2]
  40c506:	7083      	strb	r3, [r0, #2]
  40c508:	4660      	mov	r0, ip
  40c50a:	4770      	bx	lr

0040c50c <memmove>:
  40c50c:	4288      	cmp	r0, r1
  40c50e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c510:	d90d      	bls.n	40c52e <memmove+0x22>
  40c512:	188b      	adds	r3, r1, r2
  40c514:	4298      	cmp	r0, r3
  40c516:	d20a      	bcs.n	40c52e <memmove+0x22>
  40c518:	1884      	adds	r4, r0, r2
  40c51a:	2a00      	cmp	r2, #0
  40c51c:	d051      	beq.n	40c5c2 <memmove+0xb6>
  40c51e:	4622      	mov	r2, r4
  40c520:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c524:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40c528:	4299      	cmp	r1, r3
  40c52a:	d1f9      	bne.n	40c520 <memmove+0x14>
  40c52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c52e:	2a0f      	cmp	r2, #15
  40c530:	d948      	bls.n	40c5c4 <memmove+0xb8>
  40c532:	ea41 0300 	orr.w	r3, r1, r0
  40c536:	079b      	lsls	r3, r3, #30
  40c538:	d146      	bne.n	40c5c8 <memmove+0xbc>
  40c53a:	f100 0410 	add.w	r4, r0, #16
  40c53e:	f101 0310 	add.w	r3, r1, #16
  40c542:	4615      	mov	r5, r2
  40c544:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c548:	f844 6c10 	str.w	r6, [r4, #-16]
  40c54c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c550:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c554:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c558:	f844 6c08 	str.w	r6, [r4, #-8]
  40c55c:	3d10      	subs	r5, #16
  40c55e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c562:	f844 6c04 	str.w	r6, [r4, #-4]
  40c566:	2d0f      	cmp	r5, #15
  40c568:	f103 0310 	add.w	r3, r3, #16
  40c56c:	f104 0410 	add.w	r4, r4, #16
  40c570:	d8e8      	bhi.n	40c544 <memmove+0x38>
  40c572:	f1a2 0310 	sub.w	r3, r2, #16
  40c576:	f023 030f 	bic.w	r3, r3, #15
  40c57a:	f002 0e0f 	and.w	lr, r2, #15
  40c57e:	3310      	adds	r3, #16
  40c580:	f1be 0f03 	cmp.w	lr, #3
  40c584:	4419      	add	r1, r3
  40c586:	4403      	add	r3, r0
  40c588:	d921      	bls.n	40c5ce <memmove+0xc2>
  40c58a:	1f1e      	subs	r6, r3, #4
  40c58c:	460d      	mov	r5, r1
  40c58e:	4674      	mov	r4, lr
  40c590:	3c04      	subs	r4, #4
  40c592:	f855 7b04 	ldr.w	r7, [r5], #4
  40c596:	f846 7f04 	str.w	r7, [r6, #4]!
  40c59a:	2c03      	cmp	r4, #3
  40c59c:	d8f8      	bhi.n	40c590 <memmove+0x84>
  40c59e:	f1ae 0404 	sub.w	r4, lr, #4
  40c5a2:	f024 0403 	bic.w	r4, r4, #3
  40c5a6:	3404      	adds	r4, #4
  40c5a8:	4421      	add	r1, r4
  40c5aa:	4423      	add	r3, r4
  40c5ac:	f002 0203 	and.w	r2, r2, #3
  40c5b0:	b162      	cbz	r2, 40c5cc <memmove+0xc0>
  40c5b2:	3b01      	subs	r3, #1
  40c5b4:	440a      	add	r2, r1
  40c5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c5ba:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c5be:	428a      	cmp	r2, r1
  40c5c0:	d1f9      	bne.n	40c5b6 <memmove+0xaa>
  40c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c5c4:	4603      	mov	r3, r0
  40c5c6:	e7f3      	b.n	40c5b0 <memmove+0xa4>
  40c5c8:	4603      	mov	r3, r0
  40c5ca:	e7f2      	b.n	40c5b2 <memmove+0xa6>
  40c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c5ce:	4672      	mov	r2, lr
  40c5d0:	e7ee      	b.n	40c5b0 <memmove+0xa4>
  40c5d2:	bf00      	nop

0040c5d4 <memset>:
  40c5d4:	b470      	push	{r4, r5, r6}
  40c5d6:	0786      	lsls	r6, r0, #30
  40c5d8:	d046      	beq.n	40c668 <memset+0x94>
  40c5da:	1e54      	subs	r4, r2, #1
  40c5dc:	2a00      	cmp	r2, #0
  40c5de:	d041      	beq.n	40c664 <memset+0x90>
  40c5e0:	b2ca      	uxtb	r2, r1
  40c5e2:	4603      	mov	r3, r0
  40c5e4:	e002      	b.n	40c5ec <memset+0x18>
  40c5e6:	f114 34ff 	adds.w	r4, r4, #4294967295
  40c5ea:	d33b      	bcc.n	40c664 <memset+0x90>
  40c5ec:	f803 2b01 	strb.w	r2, [r3], #1
  40c5f0:	079d      	lsls	r5, r3, #30
  40c5f2:	d1f8      	bne.n	40c5e6 <memset+0x12>
  40c5f4:	2c03      	cmp	r4, #3
  40c5f6:	d92e      	bls.n	40c656 <memset+0x82>
  40c5f8:	b2cd      	uxtb	r5, r1
  40c5fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40c5fe:	2c0f      	cmp	r4, #15
  40c600:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40c604:	d919      	bls.n	40c63a <memset+0x66>
  40c606:	f103 0210 	add.w	r2, r3, #16
  40c60a:	4626      	mov	r6, r4
  40c60c:	3e10      	subs	r6, #16
  40c60e:	2e0f      	cmp	r6, #15
  40c610:	f842 5c10 	str.w	r5, [r2, #-16]
  40c614:	f842 5c0c 	str.w	r5, [r2, #-12]
  40c618:	f842 5c08 	str.w	r5, [r2, #-8]
  40c61c:	f842 5c04 	str.w	r5, [r2, #-4]
  40c620:	f102 0210 	add.w	r2, r2, #16
  40c624:	d8f2      	bhi.n	40c60c <memset+0x38>
  40c626:	f1a4 0210 	sub.w	r2, r4, #16
  40c62a:	f022 020f 	bic.w	r2, r2, #15
  40c62e:	f004 040f 	and.w	r4, r4, #15
  40c632:	3210      	adds	r2, #16
  40c634:	2c03      	cmp	r4, #3
  40c636:	4413      	add	r3, r2
  40c638:	d90d      	bls.n	40c656 <memset+0x82>
  40c63a:	461e      	mov	r6, r3
  40c63c:	4622      	mov	r2, r4
  40c63e:	3a04      	subs	r2, #4
  40c640:	2a03      	cmp	r2, #3
  40c642:	f846 5b04 	str.w	r5, [r6], #4
  40c646:	d8fa      	bhi.n	40c63e <memset+0x6a>
  40c648:	1f22      	subs	r2, r4, #4
  40c64a:	f022 0203 	bic.w	r2, r2, #3
  40c64e:	3204      	adds	r2, #4
  40c650:	4413      	add	r3, r2
  40c652:	f004 0403 	and.w	r4, r4, #3
  40c656:	b12c      	cbz	r4, 40c664 <memset+0x90>
  40c658:	b2c9      	uxtb	r1, r1
  40c65a:	441c      	add	r4, r3
  40c65c:	f803 1b01 	strb.w	r1, [r3], #1
  40c660:	429c      	cmp	r4, r3
  40c662:	d1fb      	bne.n	40c65c <memset+0x88>
  40c664:	bc70      	pop	{r4, r5, r6}
  40c666:	4770      	bx	lr
  40c668:	4614      	mov	r4, r2
  40c66a:	4603      	mov	r3, r0
  40c66c:	e7c2      	b.n	40c5f4 <memset+0x20>
  40c66e:	bf00      	nop

0040c670 <setbuf>:
  40c670:	2900      	cmp	r1, #0
  40c672:	bf0c      	ite	eq
  40c674:	2202      	moveq	r2, #2
  40c676:	2200      	movne	r2, #0
  40c678:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c67c:	f000 b800 	b.w	40c680 <setvbuf>

0040c680 <setvbuf>:
  40c680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40c684:	4c61      	ldr	r4, [pc, #388]	; (40c80c <setvbuf+0x18c>)
  40c686:	6825      	ldr	r5, [r4, #0]
  40c688:	b083      	sub	sp, #12
  40c68a:	4604      	mov	r4, r0
  40c68c:	460f      	mov	r7, r1
  40c68e:	4690      	mov	r8, r2
  40c690:	461e      	mov	r6, r3
  40c692:	b115      	cbz	r5, 40c69a <setvbuf+0x1a>
  40c694:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40c696:	2b00      	cmp	r3, #0
  40c698:	d064      	beq.n	40c764 <setvbuf+0xe4>
  40c69a:	f1b8 0f02 	cmp.w	r8, #2
  40c69e:	d006      	beq.n	40c6ae <setvbuf+0x2e>
  40c6a0:	f1b8 0f01 	cmp.w	r8, #1
  40c6a4:	f200 809f 	bhi.w	40c7e6 <setvbuf+0x166>
  40c6a8:	2e00      	cmp	r6, #0
  40c6aa:	f2c0 809c 	blt.w	40c7e6 <setvbuf+0x166>
  40c6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c6b0:	07d8      	lsls	r0, r3, #31
  40c6b2:	d534      	bpl.n	40c71e <setvbuf+0x9e>
  40c6b4:	4621      	mov	r1, r4
  40c6b6:	4628      	mov	r0, r5
  40c6b8:	f003 fd3c 	bl	410134 <_fflush_r>
  40c6bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c6be:	b141      	cbz	r1, 40c6d2 <setvbuf+0x52>
  40c6c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c6c4:	4299      	cmp	r1, r3
  40c6c6:	d002      	beq.n	40c6ce <setvbuf+0x4e>
  40c6c8:	4628      	mov	r0, r5
  40c6ca:	f003 feb1 	bl	410430 <_free_r>
  40c6ce:	2300      	movs	r3, #0
  40c6d0:	6323      	str	r3, [r4, #48]	; 0x30
  40c6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c6d6:	2200      	movs	r2, #0
  40c6d8:	61a2      	str	r2, [r4, #24]
  40c6da:	6062      	str	r2, [r4, #4]
  40c6dc:	061a      	lsls	r2, r3, #24
  40c6de:	d43a      	bmi.n	40c756 <setvbuf+0xd6>
  40c6e0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40c6e4:	f023 0303 	bic.w	r3, r3, #3
  40c6e8:	f1b8 0f02 	cmp.w	r8, #2
  40c6ec:	81a3      	strh	r3, [r4, #12]
  40c6ee:	d01d      	beq.n	40c72c <setvbuf+0xac>
  40c6f0:	ab01      	add	r3, sp, #4
  40c6f2:	466a      	mov	r2, sp
  40c6f4:	4621      	mov	r1, r4
  40c6f6:	4628      	mov	r0, r5
  40c6f8:	f004 f946 	bl	410988 <__swhatbuf_r>
  40c6fc:	89a3      	ldrh	r3, [r4, #12]
  40c6fe:	4318      	orrs	r0, r3
  40c700:	81a0      	strh	r0, [r4, #12]
  40c702:	2e00      	cmp	r6, #0
  40c704:	d132      	bne.n	40c76c <setvbuf+0xec>
  40c706:	9e00      	ldr	r6, [sp, #0]
  40c708:	4630      	mov	r0, r6
  40c70a:	f004 f9b5 	bl	410a78 <malloc>
  40c70e:	4607      	mov	r7, r0
  40c710:	2800      	cmp	r0, #0
  40c712:	d06b      	beq.n	40c7ec <setvbuf+0x16c>
  40c714:	89a3      	ldrh	r3, [r4, #12]
  40c716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c71a:	81a3      	strh	r3, [r4, #12]
  40c71c:	e028      	b.n	40c770 <setvbuf+0xf0>
  40c71e:	89a3      	ldrh	r3, [r4, #12]
  40c720:	0599      	lsls	r1, r3, #22
  40c722:	d4c7      	bmi.n	40c6b4 <setvbuf+0x34>
  40c724:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c726:	f004 f92b 	bl	410980 <__retarget_lock_acquire_recursive>
  40c72a:	e7c3      	b.n	40c6b4 <setvbuf+0x34>
  40c72c:	2500      	movs	r5, #0
  40c72e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40c730:	2600      	movs	r6, #0
  40c732:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c736:	f043 0302 	orr.w	r3, r3, #2
  40c73a:	2001      	movs	r0, #1
  40c73c:	60a6      	str	r6, [r4, #8]
  40c73e:	07ce      	lsls	r6, r1, #31
  40c740:	81a3      	strh	r3, [r4, #12]
  40c742:	6022      	str	r2, [r4, #0]
  40c744:	6122      	str	r2, [r4, #16]
  40c746:	6160      	str	r0, [r4, #20]
  40c748:	d401      	bmi.n	40c74e <setvbuf+0xce>
  40c74a:	0598      	lsls	r0, r3, #22
  40c74c:	d53e      	bpl.n	40c7cc <setvbuf+0x14c>
  40c74e:	4628      	mov	r0, r5
  40c750:	b003      	add	sp, #12
  40c752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c756:	6921      	ldr	r1, [r4, #16]
  40c758:	4628      	mov	r0, r5
  40c75a:	f003 fe69 	bl	410430 <_free_r>
  40c75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c762:	e7bd      	b.n	40c6e0 <setvbuf+0x60>
  40c764:	4628      	mov	r0, r5
  40c766:	f003 fd3d 	bl	4101e4 <__sinit>
  40c76a:	e796      	b.n	40c69a <setvbuf+0x1a>
  40c76c:	2f00      	cmp	r7, #0
  40c76e:	d0cb      	beq.n	40c708 <setvbuf+0x88>
  40c770:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40c772:	2b00      	cmp	r3, #0
  40c774:	d033      	beq.n	40c7de <setvbuf+0x15e>
  40c776:	9b00      	ldr	r3, [sp, #0]
  40c778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c77c:	6027      	str	r7, [r4, #0]
  40c77e:	429e      	cmp	r6, r3
  40c780:	bf1c      	itt	ne
  40c782:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40c786:	81a2      	strhne	r2, [r4, #12]
  40c788:	f1b8 0f01 	cmp.w	r8, #1
  40c78c:	bf04      	itt	eq
  40c78e:	f042 0201 	orreq.w	r2, r2, #1
  40c792:	81a2      	strheq	r2, [r4, #12]
  40c794:	b292      	uxth	r2, r2
  40c796:	f012 0308 	ands.w	r3, r2, #8
  40c79a:	6127      	str	r7, [r4, #16]
  40c79c:	6166      	str	r6, [r4, #20]
  40c79e:	d00e      	beq.n	40c7be <setvbuf+0x13e>
  40c7a0:	07d1      	lsls	r1, r2, #31
  40c7a2:	d51a      	bpl.n	40c7da <setvbuf+0x15a>
  40c7a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40c7a6:	4276      	negs	r6, r6
  40c7a8:	2300      	movs	r3, #0
  40c7aa:	f015 0501 	ands.w	r5, r5, #1
  40c7ae:	61a6      	str	r6, [r4, #24]
  40c7b0:	60a3      	str	r3, [r4, #8]
  40c7b2:	d009      	beq.n	40c7c8 <setvbuf+0x148>
  40c7b4:	2500      	movs	r5, #0
  40c7b6:	4628      	mov	r0, r5
  40c7b8:	b003      	add	sp, #12
  40c7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c7be:	60a3      	str	r3, [r4, #8]
  40c7c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40c7c2:	f015 0501 	ands.w	r5, r5, #1
  40c7c6:	d1f5      	bne.n	40c7b4 <setvbuf+0x134>
  40c7c8:	0593      	lsls	r3, r2, #22
  40c7ca:	d4c0      	bmi.n	40c74e <setvbuf+0xce>
  40c7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c7ce:	f004 f8d9 	bl	410984 <__retarget_lock_release_recursive>
  40c7d2:	4628      	mov	r0, r5
  40c7d4:	b003      	add	sp, #12
  40c7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c7da:	60a6      	str	r6, [r4, #8]
  40c7dc:	e7f0      	b.n	40c7c0 <setvbuf+0x140>
  40c7de:	4628      	mov	r0, r5
  40c7e0:	f003 fd00 	bl	4101e4 <__sinit>
  40c7e4:	e7c7      	b.n	40c776 <setvbuf+0xf6>
  40c7e6:	f04f 35ff 	mov.w	r5, #4294967295
  40c7ea:	e7b0      	b.n	40c74e <setvbuf+0xce>
  40c7ec:	f8dd 9000 	ldr.w	r9, [sp]
  40c7f0:	45b1      	cmp	r9, r6
  40c7f2:	d004      	beq.n	40c7fe <setvbuf+0x17e>
  40c7f4:	4648      	mov	r0, r9
  40c7f6:	f004 f93f 	bl	410a78 <malloc>
  40c7fa:	4607      	mov	r7, r0
  40c7fc:	b920      	cbnz	r0, 40c808 <setvbuf+0x188>
  40c7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c802:	f04f 35ff 	mov.w	r5, #4294967295
  40c806:	e792      	b.n	40c72e <setvbuf+0xae>
  40c808:	464e      	mov	r6, r9
  40c80a:	e783      	b.n	40c714 <setvbuf+0x94>
  40c80c:	200000fc 	.word	0x200000fc

0040c810 <snprintf>:
  40c810:	b40c      	push	{r2, r3}
  40c812:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c814:	4b23      	ldr	r3, [pc, #140]	; (40c8a4 <snprintf+0x94>)
  40c816:	1e0c      	subs	r4, r1, #0
  40c818:	b09d      	sub	sp, #116	; 0x74
  40c81a:	681d      	ldr	r5, [r3, #0]
  40c81c:	db3d      	blt.n	40c89a <snprintf+0x8a>
  40c81e:	f44f 7302 	mov.w	r3, #520	; 0x208
  40c822:	9002      	str	r0, [sp, #8]
  40c824:	9006      	str	r0, [sp, #24]
  40c826:	f8ad 3014 	strh.w	r3, [sp, #20]
  40c82a:	ae23      	add	r6, sp, #140	; 0x8c
  40c82c:	d017      	beq.n	40c85e <snprintf+0x4e>
  40c82e:	3c01      	subs	r4, #1
  40c830:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c832:	9404      	str	r4, [sp, #16]
  40c834:	4633      	mov	r3, r6
  40c836:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40c83a:	a902      	add	r1, sp, #8
  40c83c:	4628      	mov	r0, r5
  40c83e:	9407      	str	r4, [sp, #28]
  40c840:	9601      	str	r6, [sp, #4]
  40c842:	f8ad 7016 	strh.w	r7, [sp, #22]
  40c846:	f000 faa9 	bl	40cd9c <_svfprintf_r>
  40c84a:	1c42      	adds	r2, r0, #1
  40c84c:	db1b      	blt.n	40c886 <snprintf+0x76>
  40c84e:	9b02      	ldr	r3, [sp, #8]
  40c850:	2200      	movs	r2, #0
  40c852:	701a      	strb	r2, [r3, #0]
  40c854:	b01d      	add	sp, #116	; 0x74
  40c856:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40c85a:	b002      	add	sp, #8
  40c85c:	4770      	bx	lr
  40c85e:	4633      	mov	r3, r6
  40c860:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40c864:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c866:	9404      	str	r4, [sp, #16]
  40c868:	a902      	add	r1, sp, #8
  40c86a:	4628      	mov	r0, r5
  40c86c:	9407      	str	r4, [sp, #28]
  40c86e:	9601      	str	r6, [sp, #4]
  40c870:	f8ad 7016 	strh.w	r7, [sp, #22]
  40c874:	f000 fa92 	bl	40cd9c <_svfprintf_r>
  40c878:	1c43      	adds	r3, r0, #1
  40c87a:	db07      	blt.n	40c88c <snprintf+0x7c>
  40c87c:	b01d      	add	sp, #116	; 0x74
  40c87e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40c882:	b002      	add	sp, #8
  40c884:	4770      	bx	lr
  40c886:	238b      	movs	r3, #139	; 0x8b
  40c888:	602b      	str	r3, [r5, #0]
  40c88a:	e7e0      	b.n	40c84e <snprintf+0x3e>
  40c88c:	238b      	movs	r3, #139	; 0x8b
  40c88e:	602b      	str	r3, [r5, #0]
  40c890:	b01d      	add	sp, #116	; 0x74
  40c892:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40c896:	b002      	add	sp, #8
  40c898:	4770      	bx	lr
  40c89a:	238b      	movs	r3, #139	; 0x8b
  40c89c:	602b      	str	r3, [r5, #0]
  40c89e:	f04f 30ff 	mov.w	r0, #4294967295
  40c8a2:	e7eb      	b.n	40c87c <snprintf+0x6c>
  40c8a4:	200000fc 	.word	0x200000fc

0040c8a8 <sprintf>:
  40c8a8:	b40e      	push	{r1, r2, r3}
  40c8aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c8ac:	b09c      	sub	sp, #112	; 0x70
  40c8ae:	ab21      	add	r3, sp, #132	; 0x84
  40c8b0:	490f      	ldr	r1, [pc, #60]	; (40c8f0 <sprintf+0x48>)
  40c8b2:	f853 2b04 	ldr.w	r2, [r3], #4
  40c8b6:	9301      	str	r3, [sp, #4]
  40c8b8:	4605      	mov	r5, r0
  40c8ba:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40c8be:	6808      	ldr	r0, [r1, #0]
  40c8c0:	9502      	str	r5, [sp, #8]
  40c8c2:	f44f 7702 	mov.w	r7, #520	; 0x208
  40c8c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40c8ca:	a902      	add	r1, sp, #8
  40c8cc:	9506      	str	r5, [sp, #24]
  40c8ce:	f8ad 7014 	strh.w	r7, [sp, #20]
  40c8d2:	9404      	str	r4, [sp, #16]
  40c8d4:	9407      	str	r4, [sp, #28]
  40c8d6:	f8ad 6016 	strh.w	r6, [sp, #22]
  40c8da:	f000 fa5f 	bl	40cd9c <_svfprintf_r>
  40c8de:	9b02      	ldr	r3, [sp, #8]
  40c8e0:	2200      	movs	r2, #0
  40c8e2:	701a      	strb	r2, [r3, #0]
  40c8e4:	b01c      	add	sp, #112	; 0x70
  40c8e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40c8ea:	b003      	add	sp, #12
  40c8ec:	4770      	bx	lr
  40c8ee:	bf00      	nop
  40c8f0:	200000fc 	.word	0x200000fc
	...
  40c900:	eba2 0003 	sub.w	r0, r2, r3
  40c904:	4770      	bx	lr
  40c906:	bf00      	nop

0040c908 <strcmp>:
  40c908:	7802      	ldrb	r2, [r0, #0]
  40c90a:	780b      	ldrb	r3, [r1, #0]
  40c90c:	2a01      	cmp	r2, #1
  40c90e:	bf28      	it	cs
  40c910:	429a      	cmpcs	r2, r3
  40c912:	d1f5      	bne.n	40c900 <sprintf+0x58>
  40c914:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40c918:	ea40 0401 	orr.w	r4, r0, r1
  40c91c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40c920:	f06f 0c00 	mvn.w	ip, #0
  40c924:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40c928:	b312      	cbz	r2, 40c970 <strcmp+0x68>
  40c92a:	ea80 0401 	eor.w	r4, r0, r1
  40c92e:	f014 0f07 	tst.w	r4, #7
  40c932:	d16a      	bne.n	40ca0a <strcmp+0x102>
  40c934:	f000 0407 	and.w	r4, r0, #7
  40c938:	f020 0007 	bic.w	r0, r0, #7
  40c93c:	f004 0503 	and.w	r5, r4, #3
  40c940:	f021 0107 	bic.w	r1, r1, #7
  40c944:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40c948:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40c94c:	f014 0f04 	tst.w	r4, #4
  40c950:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40c954:	fa0c f405 	lsl.w	r4, ip, r5
  40c958:	ea62 0204 	orn	r2, r2, r4
  40c95c:	ea66 0604 	orn	r6, r6, r4
  40c960:	d00a      	beq.n	40c978 <strcmp+0x70>
  40c962:	ea63 0304 	orn	r3, r3, r4
  40c966:	4662      	mov	r2, ip
  40c968:	ea67 0704 	orn	r7, r7, r4
  40c96c:	4666      	mov	r6, ip
  40c96e:	e003      	b.n	40c978 <strcmp+0x70>
  40c970:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40c974:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40c978:	fa82 f54c 	uadd8	r5, r2, ip
  40c97c:	ea82 0406 	eor.w	r4, r2, r6
  40c980:	faa4 f48c 	sel	r4, r4, ip
  40c984:	bb6c      	cbnz	r4, 40c9e2 <strcmp+0xda>
  40c986:	fa83 f54c 	uadd8	r5, r3, ip
  40c98a:	ea83 0507 	eor.w	r5, r3, r7
  40c98e:	faa5 f58c 	sel	r5, r5, ip
  40c992:	b995      	cbnz	r5, 40c9ba <strcmp+0xb2>
  40c994:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40c998:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40c99c:	fa82 f54c 	uadd8	r5, r2, ip
  40c9a0:	ea82 0406 	eor.w	r4, r2, r6
  40c9a4:	faa4 f48c 	sel	r4, r4, ip
  40c9a8:	fa83 f54c 	uadd8	r5, r3, ip
  40c9ac:	ea83 0507 	eor.w	r5, r3, r7
  40c9b0:	faa5 f58c 	sel	r5, r5, ip
  40c9b4:	4325      	orrs	r5, r4
  40c9b6:	d0db      	beq.n	40c970 <strcmp+0x68>
  40c9b8:	b99c      	cbnz	r4, 40c9e2 <strcmp+0xda>
  40c9ba:	ba2d      	rev	r5, r5
  40c9bc:	fab5 f485 	clz	r4, r5
  40c9c0:	f024 0407 	bic.w	r4, r4, #7
  40c9c4:	fa27 f104 	lsr.w	r1, r7, r4
  40c9c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40c9cc:	fa23 f304 	lsr.w	r3, r3, r4
  40c9d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40c9d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c9d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c9dc:	eba0 0001 	sub.w	r0, r0, r1
  40c9e0:	4770      	bx	lr
  40c9e2:	ba24      	rev	r4, r4
  40c9e4:	fab4 f484 	clz	r4, r4
  40c9e8:	f024 0407 	bic.w	r4, r4, #7
  40c9ec:	fa26 f104 	lsr.w	r1, r6, r4
  40c9f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40c9f4:	fa22 f204 	lsr.w	r2, r2, r4
  40c9f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40c9fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ca00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40ca04:	eba0 0001 	sub.w	r0, r0, r1
  40ca08:	4770      	bx	lr
  40ca0a:	f014 0f03 	tst.w	r4, #3
  40ca0e:	d13c      	bne.n	40ca8a <strcmp+0x182>
  40ca10:	f010 0403 	ands.w	r4, r0, #3
  40ca14:	d128      	bne.n	40ca68 <strcmp+0x160>
  40ca16:	f850 2b08 	ldr.w	r2, [r0], #8
  40ca1a:	f851 3b08 	ldr.w	r3, [r1], #8
  40ca1e:	fa82 f54c 	uadd8	r5, r2, ip
  40ca22:	ea82 0503 	eor.w	r5, r2, r3
  40ca26:	faa5 f58c 	sel	r5, r5, ip
  40ca2a:	b95d      	cbnz	r5, 40ca44 <strcmp+0x13c>
  40ca2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40ca30:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40ca34:	fa82 f54c 	uadd8	r5, r2, ip
  40ca38:	ea82 0503 	eor.w	r5, r2, r3
  40ca3c:	faa5 f58c 	sel	r5, r5, ip
  40ca40:	2d00      	cmp	r5, #0
  40ca42:	d0e8      	beq.n	40ca16 <strcmp+0x10e>
  40ca44:	ba2d      	rev	r5, r5
  40ca46:	fab5 f485 	clz	r4, r5
  40ca4a:	f024 0407 	bic.w	r4, r4, #7
  40ca4e:	fa23 f104 	lsr.w	r1, r3, r4
  40ca52:	fa22 f204 	lsr.w	r2, r2, r4
  40ca56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40ca5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ca5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40ca62:	eba0 0001 	sub.w	r0, r0, r1
  40ca66:	4770      	bx	lr
  40ca68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40ca6c:	f020 0003 	bic.w	r0, r0, #3
  40ca70:	f850 2b08 	ldr.w	r2, [r0], #8
  40ca74:	f021 0103 	bic.w	r1, r1, #3
  40ca78:	f851 3b08 	ldr.w	r3, [r1], #8
  40ca7c:	fa0c f404 	lsl.w	r4, ip, r4
  40ca80:	ea62 0204 	orn	r2, r2, r4
  40ca84:	ea63 0304 	orn	r3, r3, r4
  40ca88:	e7c9      	b.n	40ca1e <strcmp+0x116>
  40ca8a:	f010 0403 	ands.w	r4, r0, #3
  40ca8e:	d01a      	beq.n	40cac6 <strcmp+0x1be>
  40ca90:	eba1 0104 	sub.w	r1, r1, r4
  40ca94:	f020 0003 	bic.w	r0, r0, #3
  40ca98:	07e4      	lsls	r4, r4, #31
  40ca9a:	f850 2b04 	ldr.w	r2, [r0], #4
  40ca9e:	d006      	beq.n	40caae <strcmp+0x1a6>
  40caa0:	d20f      	bcs.n	40cac2 <strcmp+0x1ba>
  40caa2:	788b      	ldrb	r3, [r1, #2]
  40caa4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40caa8:	1ae4      	subs	r4, r4, r3
  40caaa:	d106      	bne.n	40caba <strcmp+0x1b2>
  40caac:	b12b      	cbz	r3, 40caba <strcmp+0x1b2>
  40caae:	78cb      	ldrb	r3, [r1, #3]
  40cab0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40cab4:	1ae4      	subs	r4, r4, r3
  40cab6:	d100      	bne.n	40caba <strcmp+0x1b2>
  40cab8:	b91b      	cbnz	r3, 40cac2 <strcmp+0x1ba>
  40caba:	4620      	mov	r0, r4
  40cabc:	f85d 4b10 	ldr.w	r4, [sp], #16
  40cac0:	4770      	bx	lr
  40cac2:	f101 0104 	add.w	r1, r1, #4
  40cac6:	f850 2b04 	ldr.w	r2, [r0], #4
  40caca:	07cc      	lsls	r4, r1, #31
  40cacc:	f021 0103 	bic.w	r1, r1, #3
  40cad0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cad4:	d848      	bhi.n	40cb68 <strcmp+0x260>
  40cad6:	d224      	bcs.n	40cb22 <strcmp+0x21a>
  40cad8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40cadc:	fa82 f54c 	uadd8	r5, r2, ip
  40cae0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40cae4:	faa5 f58c 	sel	r5, r5, ip
  40cae8:	d10a      	bne.n	40cb00 <strcmp+0x1f8>
  40caea:	b965      	cbnz	r5, 40cb06 <strcmp+0x1fe>
  40caec:	f851 3b04 	ldr.w	r3, [r1], #4
  40caf0:	ea84 0402 	eor.w	r4, r4, r2
  40caf4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40caf8:	d10e      	bne.n	40cb18 <strcmp+0x210>
  40cafa:	f850 2b04 	ldr.w	r2, [r0], #4
  40cafe:	e7eb      	b.n	40cad8 <strcmp+0x1d0>
  40cb00:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40cb04:	e055      	b.n	40cbb2 <strcmp+0x2aa>
  40cb06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40cb0a:	d14d      	bne.n	40cba8 <strcmp+0x2a0>
  40cb0c:	7808      	ldrb	r0, [r1, #0]
  40cb0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40cb12:	f1c0 0000 	rsb	r0, r0, #0
  40cb16:	4770      	bx	lr
  40cb18:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40cb1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40cb20:	e047      	b.n	40cbb2 <strcmp+0x2aa>
  40cb22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40cb26:	fa82 f54c 	uadd8	r5, r2, ip
  40cb2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40cb2e:	faa5 f58c 	sel	r5, r5, ip
  40cb32:	d10a      	bne.n	40cb4a <strcmp+0x242>
  40cb34:	b965      	cbnz	r5, 40cb50 <strcmp+0x248>
  40cb36:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb3a:	ea84 0402 	eor.w	r4, r4, r2
  40cb3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40cb42:	d10c      	bne.n	40cb5e <strcmp+0x256>
  40cb44:	f850 2b04 	ldr.w	r2, [r0], #4
  40cb48:	e7eb      	b.n	40cb22 <strcmp+0x21a>
  40cb4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40cb4e:	e030      	b.n	40cbb2 <strcmp+0x2aa>
  40cb50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40cb54:	d128      	bne.n	40cba8 <strcmp+0x2a0>
  40cb56:	880b      	ldrh	r3, [r1, #0]
  40cb58:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40cb5c:	e029      	b.n	40cbb2 <strcmp+0x2aa>
  40cb5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40cb62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40cb66:	e024      	b.n	40cbb2 <strcmp+0x2aa>
  40cb68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40cb6c:	fa82 f54c 	uadd8	r5, r2, ip
  40cb70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40cb74:	faa5 f58c 	sel	r5, r5, ip
  40cb78:	d10a      	bne.n	40cb90 <strcmp+0x288>
  40cb7a:	b965      	cbnz	r5, 40cb96 <strcmp+0x28e>
  40cb7c:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb80:	ea84 0402 	eor.w	r4, r4, r2
  40cb84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40cb88:	d109      	bne.n	40cb9e <strcmp+0x296>
  40cb8a:	f850 2b04 	ldr.w	r2, [r0], #4
  40cb8e:	e7eb      	b.n	40cb68 <strcmp+0x260>
  40cb90:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40cb94:	e00d      	b.n	40cbb2 <strcmp+0x2aa>
  40cb96:	f015 0fff 	tst.w	r5, #255	; 0xff
  40cb9a:	d105      	bne.n	40cba8 <strcmp+0x2a0>
  40cb9c:	680b      	ldr	r3, [r1, #0]
  40cb9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40cba2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40cba6:	e004      	b.n	40cbb2 <strcmp+0x2aa>
  40cba8:	f04f 0000 	mov.w	r0, #0
  40cbac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40cbb0:	4770      	bx	lr
  40cbb2:	ba12      	rev	r2, r2
  40cbb4:	ba1b      	rev	r3, r3
  40cbb6:	fa82 f44c 	uadd8	r4, r2, ip
  40cbba:	ea82 0403 	eor.w	r4, r2, r3
  40cbbe:	faa4 f58c 	sel	r5, r4, ip
  40cbc2:	fab5 f485 	clz	r4, r5
  40cbc6:	fa02 f204 	lsl.w	r2, r2, r4
  40cbca:	fa03 f304 	lsl.w	r3, r3, r4
  40cbce:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40cbd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40cbd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40cbda:	4770      	bx	lr

0040cbdc <strcpy>:
  40cbdc:	ea80 0201 	eor.w	r2, r0, r1
  40cbe0:	4684      	mov	ip, r0
  40cbe2:	f012 0f03 	tst.w	r2, #3
  40cbe6:	d14f      	bne.n	40cc88 <strcpy+0xac>
  40cbe8:	f011 0f03 	tst.w	r1, #3
  40cbec:	d132      	bne.n	40cc54 <strcpy+0x78>
  40cbee:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40cbf2:	f011 0f04 	tst.w	r1, #4
  40cbf6:	f851 3b04 	ldr.w	r3, [r1], #4
  40cbfa:	d00b      	beq.n	40cc14 <strcpy+0x38>
  40cbfc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40cc00:	439a      	bics	r2, r3
  40cc02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40cc06:	bf04      	itt	eq
  40cc08:	f84c 3b04 	streq.w	r3, [ip], #4
  40cc0c:	f851 3b04 	ldreq.w	r3, [r1], #4
  40cc10:	d116      	bne.n	40cc40 <strcpy+0x64>
  40cc12:	bf00      	nop
  40cc14:	f851 4b04 	ldr.w	r4, [r1], #4
  40cc18:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40cc1c:	439a      	bics	r2, r3
  40cc1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40cc22:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40cc26:	d10b      	bne.n	40cc40 <strcpy+0x64>
  40cc28:	f84c 3b04 	str.w	r3, [ip], #4
  40cc2c:	43a2      	bics	r2, r4
  40cc2e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40cc32:	bf04      	itt	eq
  40cc34:	f851 3b04 	ldreq.w	r3, [r1], #4
  40cc38:	f84c 4b04 	streq.w	r4, [ip], #4
  40cc3c:	d0ea      	beq.n	40cc14 <strcpy+0x38>
  40cc3e:	4623      	mov	r3, r4
  40cc40:	f80c 3b01 	strb.w	r3, [ip], #1
  40cc44:	f013 0fff 	tst.w	r3, #255	; 0xff
  40cc48:	ea4f 2333 	mov.w	r3, r3, ror #8
  40cc4c:	d1f8      	bne.n	40cc40 <strcpy+0x64>
  40cc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40cc52:	4770      	bx	lr
  40cc54:	f011 0f01 	tst.w	r1, #1
  40cc58:	d006      	beq.n	40cc68 <strcpy+0x8c>
  40cc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40cc5e:	f80c 2b01 	strb.w	r2, [ip], #1
  40cc62:	2a00      	cmp	r2, #0
  40cc64:	bf08      	it	eq
  40cc66:	4770      	bxeq	lr
  40cc68:	f011 0f02 	tst.w	r1, #2
  40cc6c:	d0bf      	beq.n	40cbee <strcpy+0x12>
  40cc6e:	f831 2b02 	ldrh.w	r2, [r1], #2
  40cc72:	f012 0fff 	tst.w	r2, #255	; 0xff
  40cc76:	bf16      	itet	ne
  40cc78:	f82c 2b02 	strhne.w	r2, [ip], #2
  40cc7c:	f88c 2000 	strbeq.w	r2, [ip]
  40cc80:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40cc84:	d1b3      	bne.n	40cbee <strcpy+0x12>
  40cc86:	4770      	bx	lr
  40cc88:	f811 2b01 	ldrb.w	r2, [r1], #1
  40cc8c:	f80c 2b01 	strb.w	r2, [ip], #1
  40cc90:	2a00      	cmp	r2, #0
  40cc92:	d1f9      	bne.n	40cc88 <strcpy+0xac>
  40cc94:	4770      	bx	lr
  40cc96:	bf00      	nop
	...

0040ccc0 <strlen>:
  40ccc0:	f890 f000 	pld	[r0]
  40ccc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40ccc8:	f020 0107 	bic.w	r1, r0, #7
  40cccc:	f06f 0c00 	mvn.w	ip, #0
  40ccd0:	f010 0407 	ands.w	r4, r0, #7
  40ccd4:	f891 f020 	pld	[r1, #32]
  40ccd8:	f040 8049 	bne.w	40cd6e <strlen+0xae>
  40ccdc:	f04f 0400 	mov.w	r4, #0
  40cce0:	f06f 0007 	mvn.w	r0, #7
  40cce4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cce8:	f891 f040 	pld	[r1, #64]	; 0x40
  40ccec:	f100 0008 	add.w	r0, r0, #8
  40ccf0:	fa82 f24c 	uadd8	r2, r2, ip
  40ccf4:	faa4 f28c 	sel	r2, r4, ip
  40ccf8:	fa83 f34c 	uadd8	r3, r3, ip
  40ccfc:	faa2 f38c 	sel	r3, r2, ip
  40cd00:	bb4b      	cbnz	r3, 40cd56 <strlen+0x96>
  40cd02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40cd06:	fa82 f24c 	uadd8	r2, r2, ip
  40cd0a:	f100 0008 	add.w	r0, r0, #8
  40cd0e:	faa4 f28c 	sel	r2, r4, ip
  40cd12:	fa83 f34c 	uadd8	r3, r3, ip
  40cd16:	faa2 f38c 	sel	r3, r2, ip
  40cd1a:	b9e3      	cbnz	r3, 40cd56 <strlen+0x96>
  40cd1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40cd20:	fa82 f24c 	uadd8	r2, r2, ip
  40cd24:	f100 0008 	add.w	r0, r0, #8
  40cd28:	faa4 f28c 	sel	r2, r4, ip
  40cd2c:	fa83 f34c 	uadd8	r3, r3, ip
  40cd30:	faa2 f38c 	sel	r3, r2, ip
  40cd34:	b97b      	cbnz	r3, 40cd56 <strlen+0x96>
  40cd36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40cd3a:	f101 0120 	add.w	r1, r1, #32
  40cd3e:	fa82 f24c 	uadd8	r2, r2, ip
  40cd42:	f100 0008 	add.w	r0, r0, #8
  40cd46:	faa4 f28c 	sel	r2, r4, ip
  40cd4a:	fa83 f34c 	uadd8	r3, r3, ip
  40cd4e:	faa2 f38c 	sel	r3, r2, ip
  40cd52:	2b00      	cmp	r3, #0
  40cd54:	d0c6      	beq.n	40cce4 <strlen+0x24>
  40cd56:	2a00      	cmp	r2, #0
  40cd58:	bf04      	itt	eq
  40cd5a:	3004      	addeq	r0, #4
  40cd5c:	461a      	moveq	r2, r3
  40cd5e:	ba12      	rev	r2, r2
  40cd60:	fab2 f282 	clz	r2, r2
  40cd64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40cd68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40cd6c:	4770      	bx	lr
  40cd6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cd72:	f004 0503 	and.w	r5, r4, #3
  40cd76:	f1c4 0000 	rsb	r0, r4, #0
  40cd7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40cd7e:	f014 0f04 	tst.w	r4, #4
  40cd82:	f891 f040 	pld	[r1, #64]	; 0x40
  40cd86:	fa0c f505 	lsl.w	r5, ip, r5
  40cd8a:	ea62 0205 	orn	r2, r2, r5
  40cd8e:	bf1c      	itt	ne
  40cd90:	ea63 0305 	ornne	r3, r3, r5
  40cd94:	4662      	movne	r2, ip
  40cd96:	f04f 0400 	mov.w	r4, #0
  40cd9a:	e7a9      	b.n	40ccf0 <strlen+0x30>

0040cd9c <_svfprintf_r>:
  40cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cda0:	b0c3      	sub	sp, #268	; 0x10c
  40cda2:	460c      	mov	r4, r1
  40cda4:	910b      	str	r1, [sp, #44]	; 0x2c
  40cda6:	4692      	mov	sl, r2
  40cda8:	930f      	str	r3, [sp, #60]	; 0x3c
  40cdaa:	900c      	str	r0, [sp, #48]	; 0x30
  40cdac:	f003 fdd6 	bl	41095c <_localeconv_r>
  40cdb0:	6803      	ldr	r3, [r0, #0]
  40cdb2:	931a      	str	r3, [sp, #104]	; 0x68
  40cdb4:	4618      	mov	r0, r3
  40cdb6:	f7ff ff83 	bl	40ccc0 <strlen>
  40cdba:	89a3      	ldrh	r3, [r4, #12]
  40cdbc:	9019      	str	r0, [sp, #100]	; 0x64
  40cdbe:	0619      	lsls	r1, r3, #24
  40cdc0:	d503      	bpl.n	40cdca <_svfprintf_r+0x2e>
  40cdc2:	6923      	ldr	r3, [r4, #16]
  40cdc4:	2b00      	cmp	r3, #0
  40cdc6:	f001 8003 	beq.w	40ddd0 <_svfprintf_r+0x1034>
  40cdca:	2300      	movs	r3, #0
  40cdcc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40cdd0:	9313      	str	r3, [sp, #76]	; 0x4c
  40cdd2:	9315      	str	r3, [sp, #84]	; 0x54
  40cdd4:	9314      	str	r3, [sp, #80]	; 0x50
  40cdd6:	9327      	str	r3, [sp, #156]	; 0x9c
  40cdd8:	9326      	str	r3, [sp, #152]	; 0x98
  40cdda:	9318      	str	r3, [sp, #96]	; 0x60
  40cddc:	931b      	str	r3, [sp, #108]	; 0x6c
  40cdde:	9309      	str	r3, [sp, #36]	; 0x24
  40cde0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40cde4:	46c8      	mov	r8, r9
  40cde6:	9316      	str	r3, [sp, #88]	; 0x58
  40cde8:	9317      	str	r3, [sp, #92]	; 0x5c
  40cdea:	f89a 3000 	ldrb.w	r3, [sl]
  40cdee:	4654      	mov	r4, sl
  40cdf0:	b1e3      	cbz	r3, 40ce2c <_svfprintf_r+0x90>
  40cdf2:	2b25      	cmp	r3, #37	; 0x25
  40cdf4:	d102      	bne.n	40cdfc <_svfprintf_r+0x60>
  40cdf6:	e019      	b.n	40ce2c <_svfprintf_r+0x90>
  40cdf8:	2b25      	cmp	r3, #37	; 0x25
  40cdfa:	d003      	beq.n	40ce04 <_svfprintf_r+0x68>
  40cdfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40ce00:	2b00      	cmp	r3, #0
  40ce02:	d1f9      	bne.n	40cdf8 <_svfprintf_r+0x5c>
  40ce04:	eba4 050a 	sub.w	r5, r4, sl
  40ce08:	b185      	cbz	r5, 40ce2c <_svfprintf_r+0x90>
  40ce0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ce0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ce0e:	f8c8 a000 	str.w	sl, [r8]
  40ce12:	3301      	adds	r3, #1
  40ce14:	442a      	add	r2, r5
  40ce16:	2b07      	cmp	r3, #7
  40ce18:	f8c8 5004 	str.w	r5, [r8, #4]
  40ce1c:	9227      	str	r2, [sp, #156]	; 0x9c
  40ce1e:	9326      	str	r3, [sp, #152]	; 0x98
  40ce20:	dc7f      	bgt.n	40cf22 <_svfprintf_r+0x186>
  40ce22:	f108 0808 	add.w	r8, r8, #8
  40ce26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ce28:	442b      	add	r3, r5
  40ce2a:	9309      	str	r3, [sp, #36]	; 0x24
  40ce2c:	7823      	ldrb	r3, [r4, #0]
  40ce2e:	2b00      	cmp	r3, #0
  40ce30:	d07f      	beq.n	40cf32 <_svfprintf_r+0x196>
  40ce32:	2300      	movs	r3, #0
  40ce34:	461a      	mov	r2, r3
  40ce36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40ce3a:	4619      	mov	r1, r3
  40ce3c:	930d      	str	r3, [sp, #52]	; 0x34
  40ce3e:	469b      	mov	fp, r3
  40ce40:	f04f 30ff 	mov.w	r0, #4294967295
  40ce44:	7863      	ldrb	r3, [r4, #1]
  40ce46:	900a      	str	r0, [sp, #40]	; 0x28
  40ce48:	f104 0a01 	add.w	sl, r4, #1
  40ce4c:	f10a 0a01 	add.w	sl, sl, #1
  40ce50:	f1a3 0020 	sub.w	r0, r3, #32
  40ce54:	2858      	cmp	r0, #88	; 0x58
  40ce56:	f200 83c1 	bhi.w	40d5dc <_svfprintf_r+0x840>
  40ce5a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40ce5e:	0238      	.short	0x0238
  40ce60:	03bf03bf 	.word	0x03bf03bf
  40ce64:	03bf0240 	.word	0x03bf0240
  40ce68:	03bf03bf 	.word	0x03bf03bf
  40ce6c:	03bf03bf 	.word	0x03bf03bf
  40ce70:	024503bf 	.word	0x024503bf
  40ce74:	03bf0203 	.word	0x03bf0203
  40ce78:	026b005d 	.word	0x026b005d
  40ce7c:	028603bf 	.word	0x028603bf
  40ce80:	039d039d 	.word	0x039d039d
  40ce84:	039d039d 	.word	0x039d039d
  40ce88:	039d039d 	.word	0x039d039d
  40ce8c:	039d039d 	.word	0x039d039d
  40ce90:	03bf039d 	.word	0x03bf039d
  40ce94:	03bf03bf 	.word	0x03bf03bf
  40ce98:	03bf03bf 	.word	0x03bf03bf
  40ce9c:	03bf03bf 	.word	0x03bf03bf
  40cea0:	03bf03bf 	.word	0x03bf03bf
  40cea4:	033703bf 	.word	0x033703bf
  40cea8:	03bf0357 	.word	0x03bf0357
  40ceac:	03bf0357 	.word	0x03bf0357
  40ceb0:	03bf03bf 	.word	0x03bf03bf
  40ceb4:	039803bf 	.word	0x039803bf
  40ceb8:	03bf03bf 	.word	0x03bf03bf
  40cebc:	03bf03ad 	.word	0x03bf03ad
  40cec0:	03bf03bf 	.word	0x03bf03bf
  40cec4:	03bf03bf 	.word	0x03bf03bf
  40cec8:	03bf0259 	.word	0x03bf0259
  40cecc:	031e03bf 	.word	0x031e03bf
  40ced0:	03bf03bf 	.word	0x03bf03bf
  40ced4:	03bf03bf 	.word	0x03bf03bf
  40ced8:	03bf03bf 	.word	0x03bf03bf
  40cedc:	03bf03bf 	.word	0x03bf03bf
  40cee0:	03bf03bf 	.word	0x03bf03bf
  40cee4:	02db02c6 	.word	0x02db02c6
  40cee8:	03570357 	.word	0x03570357
  40ceec:	028b0357 	.word	0x028b0357
  40cef0:	03bf02db 	.word	0x03bf02db
  40cef4:	029003bf 	.word	0x029003bf
  40cef8:	029d03bf 	.word	0x029d03bf
  40cefc:	02b401cc 	.word	0x02b401cc
  40cf00:	03bf0208 	.word	0x03bf0208
  40cf04:	03bf01e1 	.word	0x03bf01e1
  40cf08:	03bf007e 	.word	0x03bf007e
  40cf0c:	020d03bf 	.word	0x020d03bf
  40cf10:	980d      	ldr	r0, [sp, #52]	; 0x34
  40cf12:	930f      	str	r3, [sp, #60]	; 0x3c
  40cf14:	4240      	negs	r0, r0
  40cf16:	900d      	str	r0, [sp, #52]	; 0x34
  40cf18:	f04b 0b04 	orr.w	fp, fp, #4
  40cf1c:	f89a 3000 	ldrb.w	r3, [sl]
  40cf20:	e794      	b.n	40ce4c <_svfprintf_r+0xb0>
  40cf22:	aa25      	add	r2, sp, #148	; 0x94
  40cf24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40cf26:	980c      	ldr	r0, [sp, #48]	; 0x30
  40cf28:	f004 fdcc 	bl	411ac4 <__ssprint_r>
  40cf2c:	b940      	cbnz	r0, 40cf40 <_svfprintf_r+0x1a4>
  40cf2e:	46c8      	mov	r8, r9
  40cf30:	e779      	b.n	40ce26 <_svfprintf_r+0x8a>
  40cf32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40cf34:	b123      	cbz	r3, 40cf40 <_svfprintf_r+0x1a4>
  40cf36:	980c      	ldr	r0, [sp, #48]	; 0x30
  40cf38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40cf3a:	aa25      	add	r2, sp, #148	; 0x94
  40cf3c:	f004 fdc2 	bl	411ac4 <__ssprint_r>
  40cf40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cf42:	899b      	ldrh	r3, [r3, #12]
  40cf44:	f013 0f40 	tst.w	r3, #64	; 0x40
  40cf48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cf4a:	bf18      	it	ne
  40cf4c:	f04f 33ff 	movne.w	r3, #4294967295
  40cf50:	9309      	str	r3, [sp, #36]	; 0x24
  40cf52:	9809      	ldr	r0, [sp, #36]	; 0x24
  40cf54:	b043      	add	sp, #268	; 0x10c
  40cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cf5a:	f01b 0f20 	tst.w	fp, #32
  40cf5e:	9311      	str	r3, [sp, #68]	; 0x44
  40cf60:	f040 81dd 	bne.w	40d31e <_svfprintf_r+0x582>
  40cf64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cf66:	f01b 0f10 	tst.w	fp, #16
  40cf6a:	4613      	mov	r3, r2
  40cf6c:	f040 856e 	bne.w	40da4c <_svfprintf_r+0xcb0>
  40cf70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40cf74:	f000 856a 	beq.w	40da4c <_svfprintf_r+0xcb0>
  40cf78:	8814      	ldrh	r4, [r2, #0]
  40cf7a:	3204      	adds	r2, #4
  40cf7c:	2500      	movs	r5, #0
  40cf7e:	2301      	movs	r3, #1
  40cf80:	920f      	str	r2, [sp, #60]	; 0x3c
  40cf82:	2700      	movs	r7, #0
  40cf84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40cf88:	990a      	ldr	r1, [sp, #40]	; 0x28
  40cf8a:	1c4a      	adds	r2, r1, #1
  40cf8c:	f000 8265 	beq.w	40d45a <_svfprintf_r+0x6be>
  40cf90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40cf94:	9207      	str	r2, [sp, #28]
  40cf96:	ea54 0205 	orrs.w	r2, r4, r5
  40cf9a:	f040 8264 	bne.w	40d466 <_svfprintf_r+0x6ca>
  40cf9e:	2900      	cmp	r1, #0
  40cfa0:	f040 843c 	bne.w	40d81c <_svfprintf_r+0xa80>
  40cfa4:	2b00      	cmp	r3, #0
  40cfa6:	f040 84d7 	bne.w	40d958 <_svfprintf_r+0xbbc>
  40cfaa:	f01b 0301 	ands.w	r3, fp, #1
  40cfae:	930e      	str	r3, [sp, #56]	; 0x38
  40cfb0:	f000 8604 	beq.w	40dbbc <_svfprintf_r+0xe20>
  40cfb4:	ae42      	add	r6, sp, #264	; 0x108
  40cfb6:	2330      	movs	r3, #48	; 0x30
  40cfb8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40cfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cfbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cfc0:	4293      	cmp	r3, r2
  40cfc2:	bfb8      	it	lt
  40cfc4:	4613      	movlt	r3, r2
  40cfc6:	9308      	str	r3, [sp, #32]
  40cfc8:	2300      	movs	r3, #0
  40cfca:	9312      	str	r3, [sp, #72]	; 0x48
  40cfcc:	b117      	cbz	r7, 40cfd4 <_svfprintf_r+0x238>
  40cfce:	9b08      	ldr	r3, [sp, #32]
  40cfd0:	3301      	adds	r3, #1
  40cfd2:	9308      	str	r3, [sp, #32]
  40cfd4:	9b07      	ldr	r3, [sp, #28]
  40cfd6:	f013 0302 	ands.w	r3, r3, #2
  40cfda:	9310      	str	r3, [sp, #64]	; 0x40
  40cfdc:	d002      	beq.n	40cfe4 <_svfprintf_r+0x248>
  40cfde:	9b08      	ldr	r3, [sp, #32]
  40cfe0:	3302      	adds	r3, #2
  40cfe2:	9308      	str	r3, [sp, #32]
  40cfe4:	9b07      	ldr	r3, [sp, #28]
  40cfe6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40cfea:	f040 830e 	bne.w	40d60a <_svfprintf_r+0x86e>
  40cfee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cff0:	9a08      	ldr	r2, [sp, #32]
  40cff2:	eba3 0b02 	sub.w	fp, r3, r2
  40cff6:	f1bb 0f00 	cmp.w	fp, #0
  40cffa:	f340 8306 	ble.w	40d60a <_svfprintf_r+0x86e>
  40cffe:	f1bb 0f10 	cmp.w	fp, #16
  40d002:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d004:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40d006:	dd29      	ble.n	40d05c <_svfprintf_r+0x2c0>
  40d008:	4643      	mov	r3, r8
  40d00a:	4621      	mov	r1, r4
  40d00c:	46a8      	mov	r8, r5
  40d00e:	2710      	movs	r7, #16
  40d010:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d012:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d014:	e006      	b.n	40d024 <_svfprintf_r+0x288>
  40d016:	f1ab 0b10 	sub.w	fp, fp, #16
  40d01a:	f1bb 0f10 	cmp.w	fp, #16
  40d01e:	f103 0308 	add.w	r3, r3, #8
  40d022:	dd18      	ble.n	40d056 <_svfprintf_r+0x2ba>
  40d024:	3201      	adds	r2, #1
  40d026:	48b7      	ldr	r0, [pc, #732]	; (40d304 <_svfprintf_r+0x568>)
  40d028:	9226      	str	r2, [sp, #152]	; 0x98
  40d02a:	3110      	adds	r1, #16
  40d02c:	2a07      	cmp	r2, #7
  40d02e:	9127      	str	r1, [sp, #156]	; 0x9c
  40d030:	e883 0081 	stmia.w	r3, {r0, r7}
  40d034:	ddef      	ble.n	40d016 <_svfprintf_r+0x27a>
  40d036:	aa25      	add	r2, sp, #148	; 0x94
  40d038:	4629      	mov	r1, r5
  40d03a:	4620      	mov	r0, r4
  40d03c:	f004 fd42 	bl	411ac4 <__ssprint_r>
  40d040:	2800      	cmp	r0, #0
  40d042:	f47f af7d 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d046:	f1ab 0b10 	sub.w	fp, fp, #16
  40d04a:	f1bb 0f10 	cmp.w	fp, #16
  40d04e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40d050:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40d052:	464b      	mov	r3, r9
  40d054:	dce6      	bgt.n	40d024 <_svfprintf_r+0x288>
  40d056:	4645      	mov	r5, r8
  40d058:	460c      	mov	r4, r1
  40d05a:	4698      	mov	r8, r3
  40d05c:	3201      	adds	r2, #1
  40d05e:	4ba9      	ldr	r3, [pc, #676]	; (40d304 <_svfprintf_r+0x568>)
  40d060:	9226      	str	r2, [sp, #152]	; 0x98
  40d062:	445c      	add	r4, fp
  40d064:	2a07      	cmp	r2, #7
  40d066:	9427      	str	r4, [sp, #156]	; 0x9c
  40d068:	e888 0808 	stmia.w	r8, {r3, fp}
  40d06c:	f300 8498 	bgt.w	40d9a0 <_svfprintf_r+0xc04>
  40d070:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40d074:	f108 0808 	add.w	r8, r8, #8
  40d078:	b177      	cbz	r7, 40d098 <_svfprintf_r+0x2fc>
  40d07a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d07c:	3301      	adds	r3, #1
  40d07e:	3401      	adds	r4, #1
  40d080:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40d084:	2201      	movs	r2, #1
  40d086:	2b07      	cmp	r3, #7
  40d088:	9427      	str	r4, [sp, #156]	; 0x9c
  40d08a:	9326      	str	r3, [sp, #152]	; 0x98
  40d08c:	e888 0006 	stmia.w	r8, {r1, r2}
  40d090:	f300 83db 	bgt.w	40d84a <_svfprintf_r+0xaae>
  40d094:	f108 0808 	add.w	r8, r8, #8
  40d098:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d09a:	b16b      	cbz	r3, 40d0b8 <_svfprintf_r+0x31c>
  40d09c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d09e:	3301      	adds	r3, #1
  40d0a0:	3402      	adds	r4, #2
  40d0a2:	a91e      	add	r1, sp, #120	; 0x78
  40d0a4:	2202      	movs	r2, #2
  40d0a6:	2b07      	cmp	r3, #7
  40d0a8:	9427      	str	r4, [sp, #156]	; 0x9c
  40d0aa:	9326      	str	r3, [sp, #152]	; 0x98
  40d0ac:	e888 0006 	stmia.w	r8, {r1, r2}
  40d0b0:	f300 83d6 	bgt.w	40d860 <_svfprintf_r+0xac4>
  40d0b4:	f108 0808 	add.w	r8, r8, #8
  40d0b8:	2d80      	cmp	r5, #128	; 0x80
  40d0ba:	f000 8315 	beq.w	40d6e8 <_svfprintf_r+0x94c>
  40d0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d0c2:	1a9f      	subs	r7, r3, r2
  40d0c4:	2f00      	cmp	r7, #0
  40d0c6:	dd36      	ble.n	40d136 <_svfprintf_r+0x39a>
  40d0c8:	2f10      	cmp	r7, #16
  40d0ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d0cc:	4d8e      	ldr	r5, [pc, #568]	; (40d308 <_svfprintf_r+0x56c>)
  40d0ce:	dd27      	ble.n	40d120 <_svfprintf_r+0x384>
  40d0d0:	4642      	mov	r2, r8
  40d0d2:	4621      	mov	r1, r4
  40d0d4:	46b0      	mov	r8, r6
  40d0d6:	f04f 0b10 	mov.w	fp, #16
  40d0da:	462e      	mov	r6, r5
  40d0dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d0de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d0e0:	e004      	b.n	40d0ec <_svfprintf_r+0x350>
  40d0e2:	3f10      	subs	r7, #16
  40d0e4:	2f10      	cmp	r7, #16
  40d0e6:	f102 0208 	add.w	r2, r2, #8
  40d0ea:	dd15      	ble.n	40d118 <_svfprintf_r+0x37c>
  40d0ec:	3301      	adds	r3, #1
  40d0ee:	3110      	adds	r1, #16
  40d0f0:	2b07      	cmp	r3, #7
  40d0f2:	9127      	str	r1, [sp, #156]	; 0x9c
  40d0f4:	9326      	str	r3, [sp, #152]	; 0x98
  40d0f6:	e882 0840 	stmia.w	r2, {r6, fp}
  40d0fa:	ddf2      	ble.n	40d0e2 <_svfprintf_r+0x346>
  40d0fc:	aa25      	add	r2, sp, #148	; 0x94
  40d0fe:	4629      	mov	r1, r5
  40d100:	4620      	mov	r0, r4
  40d102:	f004 fcdf 	bl	411ac4 <__ssprint_r>
  40d106:	2800      	cmp	r0, #0
  40d108:	f47f af1a 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d10c:	3f10      	subs	r7, #16
  40d10e:	2f10      	cmp	r7, #16
  40d110:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40d112:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d114:	464a      	mov	r2, r9
  40d116:	dce9      	bgt.n	40d0ec <_svfprintf_r+0x350>
  40d118:	4635      	mov	r5, r6
  40d11a:	460c      	mov	r4, r1
  40d11c:	4646      	mov	r6, r8
  40d11e:	4690      	mov	r8, r2
  40d120:	3301      	adds	r3, #1
  40d122:	443c      	add	r4, r7
  40d124:	2b07      	cmp	r3, #7
  40d126:	9427      	str	r4, [sp, #156]	; 0x9c
  40d128:	9326      	str	r3, [sp, #152]	; 0x98
  40d12a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40d12e:	f300 8381 	bgt.w	40d834 <_svfprintf_r+0xa98>
  40d132:	f108 0808 	add.w	r8, r8, #8
  40d136:	9b07      	ldr	r3, [sp, #28]
  40d138:	05df      	lsls	r7, r3, #23
  40d13a:	f100 8268 	bmi.w	40d60e <_svfprintf_r+0x872>
  40d13e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d140:	990e      	ldr	r1, [sp, #56]	; 0x38
  40d142:	f8c8 6000 	str.w	r6, [r8]
  40d146:	3301      	adds	r3, #1
  40d148:	440c      	add	r4, r1
  40d14a:	2b07      	cmp	r3, #7
  40d14c:	9427      	str	r4, [sp, #156]	; 0x9c
  40d14e:	f8c8 1004 	str.w	r1, [r8, #4]
  40d152:	9326      	str	r3, [sp, #152]	; 0x98
  40d154:	f300 834d 	bgt.w	40d7f2 <_svfprintf_r+0xa56>
  40d158:	f108 0808 	add.w	r8, r8, #8
  40d15c:	9b07      	ldr	r3, [sp, #28]
  40d15e:	075b      	lsls	r3, r3, #29
  40d160:	d53a      	bpl.n	40d1d8 <_svfprintf_r+0x43c>
  40d162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d164:	9a08      	ldr	r2, [sp, #32]
  40d166:	1a9d      	subs	r5, r3, r2
  40d168:	2d00      	cmp	r5, #0
  40d16a:	dd35      	ble.n	40d1d8 <_svfprintf_r+0x43c>
  40d16c:	2d10      	cmp	r5, #16
  40d16e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d170:	dd20      	ble.n	40d1b4 <_svfprintf_r+0x418>
  40d172:	2610      	movs	r6, #16
  40d174:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d176:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40d17a:	e004      	b.n	40d186 <_svfprintf_r+0x3ea>
  40d17c:	3d10      	subs	r5, #16
  40d17e:	2d10      	cmp	r5, #16
  40d180:	f108 0808 	add.w	r8, r8, #8
  40d184:	dd16      	ble.n	40d1b4 <_svfprintf_r+0x418>
  40d186:	3301      	adds	r3, #1
  40d188:	4a5e      	ldr	r2, [pc, #376]	; (40d304 <_svfprintf_r+0x568>)
  40d18a:	9326      	str	r3, [sp, #152]	; 0x98
  40d18c:	3410      	adds	r4, #16
  40d18e:	2b07      	cmp	r3, #7
  40d190:	9427      	str	r4, [sp, #156]	; 0x9c
  40d192:	e888 0044 	stmia.w	r8, {r2, r6}
  40d196:	ddf1      	ble.n	40d17c <_svfprintf_r+0x3e0>
  40d198:	aa25      	add	r2, sp, #148	; 0x94
  40d19a:	4659      	mov	r1, fp
  40d19c:	4638      	mov	r0, r7
  40d19e:	f004 fc91 	bl	411ac4 <__ssprint_r>
  40d1a2:	2800      	cmp	r0, #0
  40d1a4:	f47f aecc 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d1a8:	3d10      	subs	r5, #16
  40d1aa:	2d10      	cmp	r5, #16
  40d1ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d1ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d1b0:	46c8      	mov	r8, r9
  40d1b2:	dce8      	bgt.n	40d186 <_svfprintf_r+0x3ea>
  40d1b4:	3301      	adds	r3, #1
  40d1b6:	4a53      	ldr	r2, [pc, #332]	; (40d304 <_svfprintf_r+0x568>)
  40d1b8:	9326      	str	r3, [sp, #152]	; 0x98
  40d1ba:	442c      	add	r4, r5
  40d1bc:	2b07      	cmp	r3, #7
  40d1be:	9427      	str	r4, [sp, #156]	; 0x9c
  40d1c0:	e888 0024 	stmia.w	r8, {r2, r5}
  40d1c4:	dd08      	ble.n	40d1d8 <_svfprintf_r+0x43c>
  40d1c6:	aa25      	add	r2, sp, #148	; 0x94
  40d1c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d1ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d1cc:	f004 fc7a 	bl	411ac4 <__ssprint_r>
  40d1d0:	2800      	cmp	r0, #0
  40d1d2:	f47f aeb5 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d1d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d1da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d1dc:	9908      	ldr	r1, [sp, #32]
  40d1de:	428a      	cmp	r2, r1
  40d1e0:	bfac      	ite	ge
  40d1e2:	189b      	addge	r3, r3, r2
  40d1e4:	185b      	addlt	r3, r3, r1
  40d1e6:	9309      	str	r3, [sp, #36]	; 0x24
  40d1e8:	2c00      	cmp	r4, #0
  40d1ea:	f040 830d 	bne.w	40d808 <_svfprintf_r+0xa6c>
  40d1ee:	2300      	movs	r3, #0
  40d1f0:	9326      	str	r3, [sp, #152]	; 0x98
  40d1f2:	46c8      	mov	r8, r9
  40d1f4:	e5f9      	b.n	40cdea <_svfprintf_r+0x4e>
  40d1f6:	9311      	str	r3, [sp, #68]	; 0x44
  40d1f8:	f01b 0320 	ands.w	r3, fp, #32
  40d1fc:	f040 81e3 	bne.w	40d5c6 <_svfprintf_r+0x82a>
  40d200:	f01b 0210 	ands.w	r2, fp, #16
  40d204:	f040 842e 	bne.w	40da64 <_svfprintf_r+0xcc8>
  40d208:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40d20c:	f000 842a 	beq.w	40da64 <_svfprintf_r+0xcc8>
  40d210:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40d212:	4613      	mov	r3, r2
  40d214:	460a      	mov	r2, r1
  40d216:	3204      	adds	r2, #4
  40d218:	880c      	ldrh	r4, [r1, #0]
  40d21a:	920f      	str	r2, [sp, #60]	; 0x3c
  40d21c:	2500      	movs	r5, #0
  40d21e:	e6b0      	b.n	40cf82 <_svfprintf_r+0x1e6>
  40d220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d222:	9311      	str	r3, [sp, #68]	; 0x44
  40d224:	6816      	ldr	r6, [r2, #0]
  40d226:	2400      	movs	r4, #0
  40d228:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40d22c:	1d15      	adds	r5, r2, #4
  40d22e:	2e00      	cmp	r6, #0
  40d230:	f000 86a7 	beq.w	40df82 <_svfprintf_r+0x11e6>
  40d234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d236:	1c53      	adds	r3, r2, #1
  40d238:	f000 8609 	beq.w	40de4e <_svfprintf_r+0x10b2>
  40d23c:	4621      	mov	r1, r4
  40d23e:	4630      	mov	r0, r6
  40d240:	f003 feee 	bl	411020 <memchr>
  40d244:	2800      	cmp	r0, #0
  40d246:	f000 86e1 	beq.w	40e00c <_svfprintf_r+0x1270>
  40d24a:	1b83      	subs	r3, r0, r6
  40d24c:	930e      	str	r3, [sp, #56]	; 0x38
  40d24e:	940a      	str	r4, [sp, #40]	; 0x28
  40d250:	950f      	str	r5, [sp, #60]	; 0x3c
  40d252:	f8cd b01c 	str.w	fp, [sp, #28]
  40d256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d25a:	9308      	str	r3, [sp, #32]
  40d25c:	9412      	str	r4, [sp, #72]	; 0x48
  40d25e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40d262:	e6b3      	b.n	40cfcc <_svfprintf_r+0x230>
  40d264:	f89a 3000 	ldrb.w	r3, [sl]
  40d268:	2201      	movs	r2, #1
  40d26a:	212b      	movs	r1, #43	; 0x2b
  40d26c:	e5ee      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d26e:	f04b 0b20 	orr.w	fp, fp, #32
  40d272:	f89a 3000 	ldrb.w	r3, [sl]
  40d276:	e5e9      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d278:	9311      	str	r3, [sp, #68]	; 0x44
  40d27a:	2a00      	cmp	r2, #0
  40d27c:	f040 8795 	bne.w	40e1aa <_svfprintf_r+0x140e>
  40d280:	4b22      	ldr	r3, [pc, #136]	; (40d30c <_svfprintf_r+0x570>)
  40d282:	9318      	str	r3, [sp, #96]	; 0x60
  40d284:	f01b 0f20 	tst.w	fp, #32
  40d288:	f040 8111 	bne.w	40d4ae <_svfprintf_r+0x712>
  40d28c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d28e:	f01b 0f10 	tst.w	fp, #16
  40d292:	4613      	mov	r3, r2
  40d294:	f040 83e1 	bne.w	40da5a <_svfprintf_r+0xcbe>
  40d298:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40d29c:	f000 83dd 	beq.w	40da5a <_svfprintf_r+0xcbe>
  40d2a0:	3304      	adds	r3, #4
  40d2a2:	8814      	ldrh	r4, [r2, #0]
  40d2a4:	930f      	str	r3, [sp, #60]	; 0x3c
  40d2a6:	2500      	movs	r5, #0
  40d2a8:	f01b 0f01 	tst.w	fp, #1
  40d2ac:	f000 810c 	beq.w	40d4c8 <_svfprintf_r+0x72c>
  40d2b0:	ea54 0305 	orrs.w	r3, r4, r5
  40d2b4:	f000 8108 	beq.w	40d4c8 <_svfprintf_r+0x72c>
  40d2b8:	2330      	movs	r3, #48	; 0x30
  40d2ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40d2be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40d2c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40d2c6:	f04b 0b02 	orr.w	fp, fp, #2
  40d2ca:	2302      	movs	r3, #2
  40d2cc:	e659      	b.n	40cf82 <_svfprintf_r+0x1e6>
  40d2ce:	f89a 3000 	ldrb.w	r3, [sl]
  40d2d2:	2900      	cmp	r1, #0
  40d2d4:	f47f adba 	bne.w	40ce4c <_svfprintf_r+0xb0>
  40d2d8:	2201      	movs	r2, #1
  40d2da:	2120      	movs	r1, #32
  40d2dc:	e5b6      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d2de:	f04b 0b01 	orr.w	fp, fp, #1
  40d2e2:	f89a 3000 	ldrb.w	r3, [sl]
  40d2e6:	e5b1      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d2e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40d2ea:	6823      	ldr	r3, [r4, #0]
  40d2ec:	930d      	str	r3, [sp, #52]	; 0x34
  40d2ee:	4618      	mov	r0, r3
  40d2f0:	2800      	cmp	r0, #0
  40d2f2:	4623      	mov	r3, r4
  40d2f4:	f103 0304 	add.w	r3, r3, #4
  40d2f8:	f6ff ae0a 	blt.w	40cf10 <_svfprintf_r+0x174>
  40d2fc:	930f      	str	r3, [sp, #60]	; 0x3c
  40d2fe:	f89a 3000 	ldrb.w	r3, [sl]
  40d302:	e5a3      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d304:	004141c8 	.word	0x004141c8
  40d308:	004141d8 	.word	0x004141d8
  40d30c:	004141a8 	.word	0x004141a8
  40d310:	f04b 0b10 	orr.w	fp, fp, #16
  40d314:	f01b 0f20 	tst.w	fp, #32
  40d318:	9311      	str	r3, [sp, #68]	; 0x44
  40d31a:	f43f ae23 	beq.w	40cf64 <_svfprintf_r+0x1c8>
  40d31e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d320:	3507      	adds	r5, #7
  40d322:	f025 0307 	bic.w	r3, r5, #7
  40d326:	f103 0208 	add.w	r2, r3, #8
  40d32a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d32e:	920f      	str	r2, [sp, #60]	; 0x3c
  40d330:	2301      	movs	r3, #1
  40d332:	e626      	b.n	40cf82 <_svfprintf_r+0x1e6>
  40d334:	f89a 3000 	ldrb.w	r3, [sl]
  40d338:	2b2a      	cmp	r3, #42	; 0x2a
  40d33a:	f10a 0401 	add.w	r4, sl, #1
  40d33e:	f000 8727 	beq.w	40e190 <_svfprintf_r+0x13f4>
  40d342:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40d346:	2809      	cmp	r0, #9
  40d348:	46a2      	mov	sl, r4
  40d34a:	f200 86ad 	bhi.w	40e0a8 <_svfprintf_r+0x130c>
  40d34e:	2300      	movs	r3, #0
  40d350:	461c      	mov	r4, r3
  40d352:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40d356:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40d35a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40d35e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40d362:	2809      	cmp	r0, #9
  40d364:	d9f5      	bls.n	40d352 <_svfprintf_r+0x5b6>
  40d366:	940a      	str	r4, [sp, #40]	; 0x28
  40d368:	e572      	b.n	40ce50 <_svfprintf_r+0xb4>
  40d36a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40d36e:	f89a 3000 	ldrb.w	r3, [sl]
  40d372:	e56b      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d374:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40d378:	f89a 3000 	ldrb.w	r3, [sl]
  40d37c:	e566      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d37e:	f89a 3000 	ldrb.w	r3, [sl]
  40d382:	2b6c      	cmp	r3, #108	; 0x6c
  40d384:	bf03      	ittte	eq
  40d386:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40d38a:	f04b 0b20 	orreq.w	fp, fp, #32
  40d38e:	f10a 0a01 	addeq.w	sl, sl, #1
  40d392:	f04b 0b10 	orrne.w	fp, fp, #16
  40d396:	e559      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d398:	2a00      	cmp	r2, #0
  40d39a:	f040 8711 	bne.w	40e1c0 <_svfprintf_r+0x1424>
  40d39e:	f01b 0f20 	tst.w	fp, #32
  40d3a2:	f040 84f9 	bne.w	40dd98 <_svfprintf_r+0xffc>
  40d3a6:	f01b 0f10 	tst.w	fp, #16
  40d3aa:	f040 84ac 	bne.w	40dd06 <_svfprintf_r+0xf6a>
  40d3ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40d3b2:	f000 84a8 	beq.w	40dd06 <_svfprintf_r+0xf6a>
  40d3b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d3b8:	6813      	ldr	r3, [r2, #0]
  40d3ba:	3204      	adds	r2, #4
  40d3bc:	920f      	str	r2, [sp, #60]	; 0x3c
  40d3be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40d3c2:	801a      	strh	r2, [r3, #0]
  40d3c4:	e511      	b.n	40cdea <_svfprintf_r+0x4e>
  40d3c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40d3c8:	4bb3      	ldr	r3, [pc, #716]	; (40d698 <_svfprintf_r+0x8fc>)
  40d3ca:	680c      	ldr	r4, [r1, #0]
  40d3cc:	9318      	str	r3, [sp, #96]	; 0x60
  40d3ce:	2230      	movs	r2, #48	; 0x30
  40d3d0:	2378      	movs	r3, #120	; 0x78
  40d3d2:	3104      	adds	r1, #4
  40d3d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40d3d8:	9311      	str	r3, [sp, #68]	; 0x44
  40d3da:	f04b 0b02 	orr.w	fp, fp, #2
  40d3de:	910f      	str	r1, [sp, #60]	; 0x3c
  40d3e0:	2500      	movs	r5, #0
  40d3e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40d3e6:	2302      	movs	r3, #2
  40d3e8:	e5cb      	b.n	40cf82 <_svfprintf_r+0x1e6>
  40d3ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40d3ec:	9311      	str	r3, [sp, #68]	; 0x44
  40d3ee:	680a      	ldr	r2, [r1, #0]
  40d3f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40d3f4:	2300      	movs	r3, #0
  40d3f6:	460a      	mov	r2, r1
  40d3f8:	461f      	mov	r7, r3
  40d3fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40d3fe:	3204      	adds	r2, #4
  40d400:	2301      	movs	r3, #1
  40d402:	9308      	str	r3, [sp, #32]
  40d404:	f8cd b01c 	str.w	fp, [sp, #28]
  40d408:	970a      	str	r7, [sp, #40]	; 0x28
  40d40a:	9712      	str	r7, [sp, #72]	; 0x48
  40d40c:	920f      	str	r2, [sp, #60]	; 0x3c
  40d40e:	930e      	str	r3, [sp, #56]	; 0x38
  40d410:	ae28      	add	r6, sp, #160	; 0xa0
  40d412:	e5df      	b.n	40cfd4 <_svfprintf_r+0x238>
  40d414:	9311      	str	r3, [sp, #68]	; 0x44
  40d416:	2a00      	cmp	r2, #0
  40d418:	f040 86ea 	bne.w	40e1f0 <_svfprintf_r+0x1454>
  40d41c:	f01b 0f20 	tst.w	fp, #32
  40d420:	d15d      	bne.n	40d4de <_svfprintf_r+0x742>
  40d422:	f01b 0f10 	tst.w	fp, #16
  40d426:	f040 8308 	bne.w	40da3a <_svfprintf_r+0xc9e>
  40d42a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40d42e:	f000 8304 	beq.w	40da3a <_svfprintf_r+0xc9e>
  40d432:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40d434:	f9b1 4000 	ldrsh.w	r4, [r1]
  40d438:	3104      	adds	r1, #4
  40d43a:	17e5      	asrs	r5, r4, #31
  40d43c:	4622      	mov	r2, r4
  40d43e:	462b      	mov	r3, r5
  40d440:	910f      	str	r1, [sp, #60]	; 0x3c
  40d442:	2a00      	cmp	r2, #0
  40d444:	f173 0300 	sbcs.w	r3, r3, #0
  40d448:	db58      	blt.n	40d4fc <_svfprintf_r+0x760>
  40d44a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40d44c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40d450:	1c4a      	adds	r2, r1, #1
  40d452:	f04f 0301 	mov.w	r3, #1
  40d456:	f47f ad9b 	bne.w	40cf90 <_svfprintf_r+0x1f4>
  40d45a:	ea54 0205 	orrs.w	r2, r4, r5
  40d45e:	f000 81df 	beq.w	40d820 <_svfprintf_r+0xa84>
  40d462:	f8cd b01c 	str.w	fp, [sp, #28]
  40d466:	2b01      	cmp	r3, #1
  40d468:	f000 827b 	beq.w	40d962 <_svfprintf_r+0xbc6>
  40d46c:	2b02      	cmp	r3, #2
  40d46e:	f040 8206 	bne.w	40d87e <_svfprintf_r+0xae2>
  40d472:	9818      	ldr	r0, [sp, #96]	; 0x60
  40d474:	464e      	mov	r6, r9
  40d476:	0923      	lsrs	r3, r4, #4
  40d478:	f004 010f 	and.w	r1, r4, #15
  40d47c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40d480:	092a      	lsrs	r2, r5, #4
  40d482:	461c      	mov	r4, r3
  40d484:	4615      	mov	r5, r2
  40d486:	5c43      	ldrb	r3, [r0, r1]
  40d488:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40d48c:	ea54 0305 	orrs.w	r3, r4, r5
  40d490:	d1f1      	bne.n	40d476 <_svfprintf_r+0x6da>
  40d492:	eba9 0306 	sub.w	r3, r9, r6
  40d496:	930e      	str	r3, [sp, #56]	; 0x38
  40d498:	e590      	b.n	40cfbc <_svfprintf_r+0x220>
  40d49a:	9311      	str	r3, [sp, #68]	; 0x44
  40d49c:	2a00      	cmp	r2, #0
  40d49e:	f040 86a3 	bne.w	40e1e8 <_svfprintf_r+0x144c>
  40d4a2:	4b7e      	ldr	r3, [pc, #504]	; (40d69c <_svfprintf_r+0x900>)
  40d4a4:	9318      	str	r3, [sp, #96]	; 0x60
  40d4a6:	f01b 0f20 	tst.w	fp, #32
  40d4aa:	f43f aeef 	beq.w	40d28c <_svfprintf_r+0x4f0>
  40d4ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d4b0:	3507      	adds	r5, #7
  40d4b2:	f025 0307 	bic.w	r3, r5, #7
  40d4b6:	f103 0208 	add.w	r2, r3, #8
  40d4ba:	f01b 0f01 	tst.w	fp, #1
  40d4be:	920f      	str	r2, [sp, #60]	; 0x3c
  40d4c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d4c4:	f47f aef4 	bne.w	40d2b0 <_svfprintf_r+0x514>
  40d4c8:	2302      	movs	r3, #2
  40d4ca:	e55a      	b.n	40cf82 <_svfprintf_r+0x1e6>
  40d4cc:	9311      	str	r3, [sp, #68]	; 0x44
  40d4ce:	2a00      	cmp	r2, #0
  40d4d0:	f040 8686 	bne.w	40e1e0 <_svfprintf_r+0x1444>
  40d4d4:	f04b 0b10 	orr.w	fp, fp, #16
  40d4d8:	f01b 0f20 	tst.w	fp, #32
  40d4dc:	d0a1      	beq.n	40d422 <_svfprintf_r+0x686>
  40d4de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d4e0:	3507      	adds	r5, #7
  40d4e2:	f025 0507 	bic.w	r5, r5, #7
  40d4e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  40d4ea:	2a00      	cmp	r2, #0
  40d4ec:	f105 0108 	add.w	r1, r5, #8
  40d4f0:	461d      	mov	r5, r3
  40d4f2:	f173 0300 	sbcs.w	r3, r3, #0
  40d4f6:	910f      	str	r1, [sp, #60]	; 0x3c
  40d4f8:	4614      	mov	r4, r2
  40d4fa:	daa6      	bge.n	40d44a <_svfprintf_r+0x6ae>
  40d4fc:	272d      	movs	r7, #45	; 0x2d
  40d4fe:	4264      	negs	r4, r4
  40d500:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d504:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40d508:	2301      	movs	r3, #1
  40d50a:	e53d      	b.n	40cf88 <_svfprintf_r+0x1ec>
  40d50c:	9311      	str	r3, [sp, #68]	; 0x44
  40d50e:	2a00      	cmp	r2, #0
  40d510:	f040 8662 	bne.w	40e1d8 <_svfprintf_r+0x143c>
  40d514:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d516:	3507      	adds	r5, #7
  40d518:	f025 0307 	bic.w	r3, r5, #7
  40d51c:	f103 0208 	add.w	r2, r3, #8
  40d520:	920f      	str	r2, [sp, #60]	; 0x3c
  40d522:	681a      	ldr	r2, [r3, #0]
  40d524:	9215      	str	r2, [sp, #84]	; 0x54
  40d526:	685b      	ldr	r3, [r3, #4]
  40d528:	9314      	str	r3, [sp, #80]	; 0x50
  40d52a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d52c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40d52e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40d532:	4628      	mov	r0, r5
  40d534:	4621      	mov	r1, r4
  40d536:	f04f 32ff 	mov.w	r2, #4294967295
  40d53a:	4b59      	ldr	r3, [pc, #356]	; (40d6a0 <_svfprintf_r+0x904>)
  40d53c:	f005 f990 	bl	412860 <__aeabi_dcmpun>
  40d540:	2800      	cmp	r0, #0
  40d542:	f040 834a 	bne.w	40dbda <_svfprintf_r+0xe3e>
  40d546:	4628      	mov	r0, r5
  40d548:	4621      	mov	r1, r4
  40d54a:	f04f 32ff 	mov.w	r2, #4294967295
  40d54e:	4b54      	ldr	r3, [pc, #336]	; (40d6a0 <_svfprintf_r+0x904>)
  40d550:	f005 f968 	bl	412824 <__aeabi_dcmple>
  40d554:	2800      	cmp	r0, #0
  40d556:	f040 8340 	bne.w	40dbda <_svfprintf_r+0xe3e>
  40d55a:	a815      	add	r0, sp, #84	; 0x54
  40d55c:	c80d      	ldmia	r0, {r0, r2, r3}
  40d55e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d560:	f005 f956 	bl	412810 <__aeabi_dcmplt>
  40d564:	2800      	cmp	r0, #0
  40d566:	f040 8530 	bne.w	40dfca <_svfprintf_r+0x122e>
  40d56a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40d56e:	4e4d      	ldr	r6, [pc, #308]	; (40d6a4 <_svfprintf_r+0x908>)
  40d570:	4b4d      	ldr	r3, [pc, #308]	; (40d6a8 <_svfprintf_r+0x90c>)
  40d572:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40d576:	9007      	str	r0, [sp, #28]
  40d578:	9811      	ldr	r0, [sp, #68]	; 0x44
  40d57a:	2203      	movs	r2, #3
  40d57c:	2100      	movs	r1, #0
  40d57e:	9208      	str	r2, [sp, #32]
  40d580:	910a      	str	r1, [sp, #40]	; 0x28
  40d582:	2847      	cmp	r0, #71	; 0x47
  40d584:	bfd8      	it	le
  40d586:	461e      	movle	r6, r3
  40d588:	920e      	str	r2, [sp, #56]	; 0x38
  40d58a:	9112      	str	r1, [sp, #72]	; 0x48
  40d58c:	e51e      	b.n	40cfcc <_svfprintf_r+0x230>
  40d58e:	f04b 0b08 	orr.w	fp, fp, #8
  40d592:	f89a 3000 	ldrb.w	r3, [sl]
  40d596:	e459      	b.n	40ce4c <_svfprintf_r+0xb0>
  40d598:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40d59c:	2300      	movs	r3, #0
  40d59e:	461c      	mov	r4, r3
  40d5a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40d5a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40d5a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40d5ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40d5b0:	2809      	cmp	r0, #9
  40d5b2:	d9f5      	bls.n	40d5a0 <_svfprintf_r+0x804>
  40d5b4:	940d      	str	r4, [sp, #52]	; 0x34
  40d5b6:	e44b      	b.n	40ce50 <_svfprintf_r+0xb4>
  40d5b8:	f04b 0b10 	orr.w	fp, fp, #16
  40d5bc:	9311      	str	r3, [sp, #68]	; 0x44
  40d5be:	f01b 0320 	ands.w	r3, fp, #32
  40d5c2:	f43f ae1d 	beq.w	40d200 <_svfprintf_r+0x464>
  40d5c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d5c8:	3507      	adds	r5, #7
  40d5ca:	f025 0307 	bic.w	r3, r5, #7
  40d5ce:	f103 0208 	add.w	r2, r3, #8
  40d5d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d5d6:	920f      	str	r2, [sp, #60]	; 0x3c
  40d5d8:	2300      	movs	r3, #0
  40d5da:	e4d2      	b.n	40cf82 <_svfprintf_r+0x1e6>
  40d5dc:	9311      	str	r3, [sp, #68]	; 0x44
  40d5de:	2a00      	cmp	r2, #0
  40d5e0:	f040 85e7 	bne.w	40e1b2 <_svfprintf_r+0x1416>
  40d5e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d5e6:	2a00      	cmp	r2, #0
  40d5e8:	f43f aca3 	beq.w	40cf32 <_svfprintf_r+0x196>
  40d5ec:	2300      	movs	r3, #0
  40d5ee:	2101      	movs	r1, #1
  40d5f0:	461f      	mov	r7, r3
  40d5f2:	9108      	str	r1, [sp, #32]
  40d5f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40d5f8:	f8cd b01c 	str.w	fp, [sp, #28]
  40d5fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40d600:	930a      	str	r3, [sp, #40]	; 0x28
  40d602:	9312      	str	r3, [sp, #72]	; 0x48
  40d604:	910e      	str	r1, [sp, #56]	; 0x38
  40d606:	ae28      	add	r6, sp, #160	; 0xa0
  40d608:	e4e4      	b.n	40cfd4 <_svfprintf_r+0x238>
  40d60a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d60c:	e534      	b.n	40d078 <_svfprintf_r+0x2dc>
  40d60e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d610:	2b65      	cmp	r3, #101	; 0x65
  40d612:	f340 80a7 	ble.w	40d764 <_svfprintf_r+0x9c8>
  40d616:	a815      	add	r0, sp, #84	; 0x54
  40d618:	c80d      	ldmia	r0, {r0, r2, r3}
  40d61a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d61c:	f005 f8ee 	bl	4127fc <__aeabi_dcmpeq>
  40d620:	2800      	cmp	r0, #0
  40d622:	f000 8150 	beq.w	40d8c6 <_svfprintf_r+0xb2a>
  40d626:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d628:	4a20      	ldr	r2, [pc, #128]	; (40d6ac <_svfprintf_r+0x910>)
  40d62a:	f8c8 2000 	str.w	r2, [r8]
  40d62e:	3301      	adds	r3, #1
  40d630:	3401      	adds	r4, #1
  40d632:	2201      	movs	r2, #1
  40d634:	2b07      	cmp	r3, #7
  40d636:	9427      	str	r4, [sp, #156]	; 0x9c
  40d638:	9326      	str	r3, [sp, #152]	; 0x98
  40d63a:	f8c8 2004 	str.w	r2, [r8, #4]
  40d63e:	f300 836a 	bgt.w	40dd16 <_svfprintf_r+0xf7a>
  40d642:	f108 0808 	add.w	r8, r8, #8
  40d646:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40d648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d64a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d64c:	4293      	cmp	r3, r2
  40d64e:	db03      	blt.n	40d658 <_svfprintf_r+0x8bc>
  40d650:	9b07      	ldr	r3, [sp, #28]
  40d652:	07dd      	lsls	r5, r3, #31
  40d654:	f57f ad82 	bpl.w	40d15c <_svfprintf_r+0x3c0>
  40d658:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d65a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40d65c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d65e:	f8c8 2000 	str.w	r2, [r8]
  40d662:	3301      	adds	r3, #1
  40d664:	440c      	add	r4, r1
  40d666:	2b07      	cmp	r3, #7
  40d668:	f8c8 1004 	str.w	r1, [r8, #4]
  40d66c:	9427      	str	r4, [sp, #156]	; 0x9c
  40d66e:	9326      	str	r3, [sp, #152]	; 0x98
  40d670:	f300 839e 	bgt.w	40ddb0 <_svfprintf_r+0x1014>
  40d674:	f108 0808 	add.w	r8, r8, #8
  40d678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d67a:	1e5e      	subs	r6, r3, #1
  40d67c:	2e00      	cmp	r6, #0
  40d67e:	f77f ad6d 	ble.w	40d15c <_svfprintf_r+0x3c0>
  40d682:	2e10      	cmp	r6, #16
  40d684:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d686:	4d0a      	ldr	r5, [pc, #40]	; (40d6b0 <_svfprintf_r+0x914>)
  40d688:	f340 81f5 	ble.w	40da76 <_svfprintf_r+0xcda>
  40d68c:	4622      	mov	r2, r4
  40d68e:	2710      	movs	r7, #16
  40d690:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40d694:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40d696:	e013      	b.n	40d6c0 <_svfprintf_r+0x924>
  40d698:	004141a8 	.word	0x004141a8
  40d69c:	00414194 	.word	0x00414194
  40d6a0:	7fefffff 	.word	0x7fefffff
  40d6a4:	00414188 	.word	0x00414188
  40d6a8:	00414184 	.word	0x00414184
  40d6ac:	004141c4 	.word	0x004141c4
  40d6b0:	004141d8 	.word	0x004141d8
  40d6b4:	f108 0808 	add.w	r8, r8, #8
  40d6b8:	3e10      	subs	r6, #16
  40d6ba:	2e10      	cmp	r6, #16
  40d6bc:	f340 81da 	ble.w	40da74 <_svfprintf_r+0xcd8>
  40d6c0:	3301      	adds	r3, #1
  40d6c2:	3210      	adds	r2, #16
  40d6c4:	2b07      	cmp	r3, #7
  40d6c6:	9227      	str	r2, [sp, #156]	; 0x9c
  40d6c8:	9326      	str	r3, [sp, #152]	; 0x98
  40d6ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  40d6ce:	ddf1      	ble.n	40d6b4 <_svfprintf_r+0x918>
  40d6d0:	aa25      	add	r2, sp, #148	; 0x94
  40d6d2:	4621      	mov	r1, r4
  40d6d4:	4658      	mov	r0, fp
  40d6d6:	f004 f9f5 	bl	411ac4 <__ssprint_r>
  40d6da:	2800      	cmp	r0, #0
  40d6dc:	f47f ac30 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d6e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40d6e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d6e4:	46c8      	mov	r8, r9
  40d6e6:	e7e7      	b.n	40d6b8 <_svfprintf_r+0x91c>
  40d6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d6ea:	9a08      	ldr	r2, [sp, #32]
  40d6ec:	1a9f      	subs	r7, r3, r2
  40d6ee:	2f00      	cmp	r7, #0
  40d6f0:	f77f ace5 	ble.w	40d0be <_svfprintf_r+0x322>
  40d6f4:	2f10      	cmp	r7, #16
  40d6f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d6f8:	4db6      	ldr	r5, [pc, #728]	; (40d9d4 <_svfprintf_r+0xc38>)
  40d6fa:	dd27      	ble.n	40d74c <_svfprintf_r+0x9b0>
  40d6fc:	4642      	mov	r2, r8
  40d6fe:	4621      	mov	r1, r4
  40d700:	46b0      	mov	r8, r6
  40d702:	f04f 0b10 	mov.w	fp, #16
  40d706:	462e      	mov	r6, r5
  40d708:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d70a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d70c:	e004      	b.n	40d718 <_svfprintf_r+0x97c>
  40d70e:	3f10      	subs	r7, #16
  40d710:	2f10      	cmp	r7, #16
  40d712:	f102 0208 	add.w	r2, r2, #8
  40d716:	dd15      	ble.n	40d744 <_svfprintf_r+0x9a8>
  40d718:	3301      	adds	r3, #1
  40d71a:	3110      	adds	r1, #16
  40d71c:	2b07      	cmp	r3, #7
  40d71e:	9127      	str	r1, [sp, #156]	; 0x9c
  40d720:	9326      	str	r3, [sp, #152]	; 0x98
  40d722:	e882 0840 	stmia.w	r2, {r6, fp}
  40d726:	ddf2      	ble.n	40d70e <_svfprintf_r+0x972>
  40d728:	aa25      	add	r2, sp, #148	; 0x94
  40d72a:	4629      	mov	r1, r5
  40d72c:	4620      	mov	r0, r4
  40d72e:	f004 f9c9 	bl	411ac4 <__ssprint_r>
  40d732:	2800      	cmp	r0, #0
  40d734:	f47f ac04 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d738:	3f10      	subs	r7, #16
  40d73a:	2f10      	cmp	r7, #16
  40d73c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40d73e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d740:	464a      	mov	r2, r9
  40d742:	dce9      	bgt.n	40d718 <_svfprintf_r+0x97c>
  40d744:	4635      	mov	r5, r6
  40d746:	460c      	mov	r4, r1
  40d748:	4646      	mov	r6, r8
  40d74a:	4690      	mov	r8, r2
  40d74c:	3301      	adds	r3, #1
  40d74e:	443c      	add	r4, r7
  40d750:	2b07      	cmp	r3, #7
  40d752:	9427      	str	r4, [sp, #156]	; 0x9c
  40d754:	9326      	str	r3, [sp, #152]	; 0x98
  40d756:	e888 00a0 	stmia.w	r8, {r5, r7}
  40d75a:	f300 8232 	bgt.w	40dbc2 <_svfprintf_r+0xe26>
  40d75e:	f108 0808 	add.w	r8, r8, #8
  40d762:	e4ac      	b.n	40d0be <_svfprintf_r+0x322>
  40d764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d766:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40d768:	2b01      	cmp	r3, #1
  40d76a:	f340 81fe 	ble.w	40db6a <_svfprintf_r+0xdce>
  40d76e:	3701      	adds	r7, #1
  40d770:	3401      	adds	r4, #1
  40d772:	2301      	movs	r3, #1
  40d774:	2f07      	cmp	r7, #7
  40d776:	9427      	str	r4, [sp, #156]	; 0x9c
  40d778:	9726      	str	r7, [sp, #152]	; 0x98
  40d77a:	f8c8 6000 	str.w	r6, [r8]
  40d77e:	f8c8 3004 	str.w	r3, [r8, #4]
  40d782:	f300 8203 	bgt.w	40db8c <_svfprintf_r+0xdf0>
  40d786:	f108 0808 	add.w	r8, r8, #8
  40d78a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40d78c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40d78e:	f8c8 3000 	str.w	r3, [r8]
  40d792:	3701      	adds	r7, #1
  40d794:	4414      	add	r4, r2
  40d796:	2f07      	cmp	r7, #7
  40d798:	9427      	str	r4, [sp, #156]	; 0x9c
  40d79a:	9726      	str	r7, [sp, #152]	; 0x98
  40d79c:	f8c8 2004 	str.w	r2, [r8, #4]
  40d7a0:	f300 8200 	bgt.w	40dba4 <_svfprintf_r+0xe08>
  40d7a4:	f108 0808 	add.w	r8, r8, #8
  40d7a8:	a815      	add	r0, sp, #84	; 0x54
  40d7aa:	c80d      	ldmia	r0, {r0, r2, r3}
  40d7ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d7ae:	f005 f825 	bl	4127fc <__aeabi_dcmpeq>
  40d7b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d7b4:	2800      	cmp	r0, #0
  40d7b6:	f040 8101 	bne.w	40d9bc <_svfprintf_r+0xc20>
  40d7ba:	3b01      	subs	r3, #1
  40d7bc:	3701      	adds	r7, #1
  40d7be:	3601      	adds	r6, #1
  40d7c0:	441c      	add	r4, r3
  40d7c2:	2f07      	cmp	r7, #7
  40d7c4:	9726      	str	r7, [sp, #152]	; 0x98
  40d7c6:	9427      	str	r4, [sp, #156]	; 0x9c
  40d7c8:	f8c8 6000 	str.w	r6, [r8]
  40d7cc:	f8c8 3004 	str.w	r3, [r8, #4]
  40d7d0:	f300 8127 	bgt.w	40da22 <_svfprintf_r+0xc86>
  40d7d4:	f108 0808 	add.w	r8, r8, #8
  40d7d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40d7da:	f8c8 2004 	str.w	r2, [r8, #4]
  40d7de:	3701      	adds	r7, #1
  40d7e0:	4414      	add	r4, r2
  40d7e2:	ab21      	add	r3, sp, #132	; 0x84
  40d7e4:	2f07      	cmp	r7, #7
  40d7e6:	9427      	str	r4, [sp, #156]	; 0x9c
  40d7e8:	9726      	str	r7, [sp, #152]	; 0x98
  40d7ea:	f8c8 3000 	str.w	r3, [r8]
  40d7ee:	f77f acb3 	ble.w	40d158 <_svfprintf_r+0x3bc>
  40d7f2:	aa25      	add	r2, sp, #148	; 0x94
  40d7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d7f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d7f8:	f004 f964 	bl	411ac4 <__ssprint_r>
  40d7fc:	2800      	cmp	r0, #0
  40d7fe:	f47f ab9f 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d802:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d804:	46c8      	mov	r8, r9
  40d806:	e4a9      	b.n	40d15c <_svfprintf_r+0x3c0>
  40d808:	aa25      	add	r2, sp, #148	; 0x94
  40d80a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d80c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d80e:	f004 f959 	bl	411ac4 <__ssprint_r>
  40d812:	2800      	cmp	r0, #0
  40d814:	f43f aceb 	beq.w	40d1ee <_svfprintf_r+0x452>
  40d818:	f7ff bb92 	b.w	40cf40 <_svfprintf_r+0x1a4>
  40d81c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40d820:	2b01      	cmp	r3, #1
  40d822:	f000 8134 	beq.w	40da8e <_svfprintf_r+0xcf2>
  40d826:	2b02      	cmp	r3, #2
  40d828:	d125      	bne.n	40d876 <_svfprintf_r+0xada>
  40d82a:	f8cd b01c 	str.w	fp, [sp, #28]
  40d82e:	2400      	movs	r4, #0
  40d830:	2500      	movs	r5, #0
  40d832:	e61e      	b.n	40d472 <_svfprintf_r+0x6d6>
  40d834:	aa25      	add	r2, sp, #148	; 0x94
  40d836:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d838:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d83a:	f004 f943 	bl	411ac4 <__ssprint_r>
  40d83e:	2800      	cmp	r0, #0
  40d840:	f47f ab7e 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d844:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d846:	46c8      	mov	r8, r9
  40d848:	e475      	b.n	40d136 <_svfprintf_r+0x39a>
  40d84a:	aa25      	add	r2, sp, #148	; 0x94
  40d84c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d84e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d850:	f004 f938 	bl	411ac4 <__ssprint_r>
  40d854:	2800      	cmp	r0, #0
  40d856:	f47f ab73 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d85a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d85c:	46c8      	mov	r8, r9
  40d85e:	e41b      	b.n	40d098 <_svfprintf_r+0x2fc>
  40d860:	aa25      	add	r2, sp, #148	; 0x94
  40d862:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d864:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d866:	f004 f92d 	bl	411ac4 <__ssprint_r>
  40d86a:	2800      	cmp	r0, #0
  40d86c:	f47f ab68 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d870:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d872:	46c8      	mov	r8, r9
  40d874:	e420      	b.n	40d0b8 <_svfprintf_r+0x31c>
  40d876:	f8cd b01c 	str.w	fp, [sp, #28]
  40d87a:	2400      	movs	r4, #0
  40d87c:	2500      	movs	r5, #0
  40d87e:	4649      	mov	r1, r9
  40d880:	e000      	b.n	40d884 <_svfprintf_r+0xae8>
  40d882:	4631      	mov	r1, r6
  40d884:	08e2      	lsrs	r2, r4, #3
  40d886:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40d88a:	08e8      	lsrs	r0, r5, #3
  40d88c:	f004 0307 	and.w	r3, r4, #7
  40d890:	4605      	mov	r5, r0
  40d892:	4614      	mov	r4, r2
  40d894:	3330      	adds	r3, #48	; 0x30
  40d896:	ea54 0205 	orrs.w	r2, r4, r5
  40d89a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d89e:	f101 36ff 	add.w	r6, r1, #4294967295
  40d8a2:	d1ee      	bne.n	40d882 <_svfprintf_r+0xae6>
  40d8a4:	9a07      	ldr	r2, [sp, #28]
  40d8a6:	07d2      	lsls	r2, r2, #31
  40d8a8:	f57f adf3 	bpl.w	40d492 <_svfprintf_r+0x6f6>
  40d8ac:	2b30      	cmp	r3, #48	; 0x30
  40d8ae:	f43f adf0 	beq.w	40d492 <_svfprintf_r+0x6f6>
  40d8b2:	3902      	subs	r1, #2
  40d8b4:	2330      	movs	r3, #48	; 0x30
  40d8b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  40d8ba:	eba9 0301 	sub.w	r3, r9, r1
  40d8be:	930e      	str	r3, [sp, #56]	; 0x38
  40d8c0:	460e      	mov	r6, r1
  40d8c2:	f7ff bb7b 	b.w	40cfbc <_svfprintf_r+0x220>
  40d8c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40d8c8:	2900      	cmp	r1, #0
  40d8ca:	f340 822e 	ble.w	40dd2a <_svfprintf_r+0xf8e>
  40d8ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d8d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d8d2:	4293      	cmp	r3, r2
  40d8d4:	bfa8      	it	ge
  40d8d6:	4613      	movge	r3, r2
  40d8d8:	2b00      	cmp	r3, #0
  40d8da:	461f      	mov	r7, r3
  40d8dc:	dd0d      	ble.n	40d8fa <_svfprintf_r+0xb5e>
  40d8de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d8e0:	f8c8 6000 	str.w	r6, [r8]
  40d8e4:	3301      	adds	r3, #1
  40d8e6:	443c      	add	r4, r7
  40d8e8:	2b07      	cmp	r3, #7
  40d8ea:	9427      	str	r4, [sp, #156]	; 0x9c
  40d8ec:	f8c8 7004 	str.w	r7, [r8, #4]
  40d8f0:	9326      	str	r3, [sp, #152]	; 0x98
  40d8f2:	f300 831f 	bgt.w	40df34 <_svfprintf_r+0x1198>
  40d8f6:	f108 0808 	add.w	r8, r8, #8
  40d8fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d8fc:	2f00      	cmp	r7, #0
  40d8fe:	bfa8      	it	ge
  40d900:	1bdb      	subge	r3, r3, r7
  40d902:	2b00      	cmp	r3, #0
  40d904:	461f      	mov	r7, r3
  40d906:	f340 80d6 	ble.w	40dab6 <_svfprintf_r+0xd1a>
  40d90a:	2f10      	cmp	r7, #16
  40d90c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d90e:	4d31      	ldr	r5, [pc, #196]	; (40d9d4 <_svfprintf_r+0xc38>)
  40d910:	f340 81ed 	ble.w	40dcee <_svfprintf_r+0xf52>
  40d914:	4642      	mov	r2, r8
  40d916:	4621      	mov	r1, r4
  40d918:	46b0      	mov	r8, r6
  40d91a:	f04f 0b10 	mov.w	fp, #16
  40d91e:	462e      	mov	r6, r5
  40d920:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d922:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d924:	e004      	b.n	40d930 <_svfprintf_r+0xb94>
  40d926:	3208      	adds	r2, #8
  40d928:	3f10      	subs	r7, #16
  40d92a:	2f10      	cmp	r7, #16
  40d92c:	f340 81db 	ble.w	40dce6 <_svfprintf_r+0xf4a>
  40d930:	3301      	adds	r3, #1
  40d932:	3110      	adds	r1, #16
  40d934:	2b07      	cmp	r3, #7
  40d936:	9127      	str	r1, [sp, #156]	; 0x9c
  40d938:	9326      	str	r3, [sp, #152]	; 0x98
  40d93a:	e882 0840 	stmia.w	r2, {r6, fp}
  40d93e:	ddf2      	ble.n	40d926 <_svfprintf_r+0xb8a>
  40d940:	aa25      	add	r2, sp, #148	; 0x94
  40d942:	4629      	mov	r1, r5
  40d944:	4620      	mov	r0, r4
  40d946:	f004 f8bd 	bl	411ac4 <__ssprint_r>
  40d94a:	2800      	cmp	r0, #0
  40d94c:	f47f aaf8 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d950:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40d952:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40d954:	464a      	mov	r2, r9
  40d956:	e7e7      	b.n	40d928 <_svfprintf_r+0xb8c>
  40d958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d95a:	930e      	str	r3, [sp, #56]	; 0x38
  40d95c:	464e      	mov	r6, r9
  40d95e:	f7ff bb2d 	b.w	40cfbc <_svfprintf_r+0x220>
  40d962:	2d00      	cmp	r5, #0
  40d964:	bf08      	it	eq
  40d966:	2c0a      	cmpeq	r4, #10
  40d968:	f0c0 808f 	bcc.w	40da8a <_svfprintf_r+0xcee>
  40d96c:	464e      	mov	r6, r9
  40d96e:	4620      	mov	r0, r4
  40d970:	4629      	mov	r1, r5
  40d972:	220a      	movs	r2, #10
  40d974:	2300      	movs	r3, #0
  40d976:	f004 ffb1 	bl	4128dc <__aeabi_uldivmod>
  40d97a:	3230      	adds	r2, #48	; 0x30
  40d97c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40d980:	4620      	mov	r0, r4
  40d982:	4629      	mov	r1, r5
  40d984:	2300      	movs	r3, #0
  40d986:	220a      	movs	r2, #10
  40d988:	f004 ffa8 	bl	4128dc <__aeabi_uldivmod>
  40d98c:	4604      	mov	r4, r0
  40d98e:	460d      	mov	r5, r1
  40d990:	ea54 0305 	orrs.w	r3, r4, r5
  40d994:	d1eb      	bne.n	40d96e <_svfprintf_r+0xbd2>
  40d996:	eba9 0306 	sub.w	r3, r9, r6
  40d99a:	930e      	str	r3, [sp, #56]	; 0x38
  40d99c:	f7ff bb0e 	b.w	40cfbc <_svfprintf_r+0x220>
  40d9a0:	aa25      	add	r2, sp, #148	; 0x94
  40d9a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d9a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d9a6:	f004 f88d 	bl	411ac4 <__ssprint_r>
  40d9aa:	2800      	cmp	r0, #0
  40d9ac:	f47f aac8 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40d9b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40d9b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40d9b6:	46c8      	mov	r8, r9
  40d9b8:	f7ff bb5e 	b.w	40d078 <_svfprintf_r+0x2dc>
  40d9bc:	1e5e      	subs	r6, r3, #1
  40d9be:	2e00      	cmp	r6, #0
  40d9c0:	f77f af0a 	ble.w	40d7d8 <_svfprintf_r+0xa3c>
  40d9c4:	2e10      	cmp	r6, #16
  40d9c6:	4d03      	ldr	r5, [pc, #12]	; (40d9d4 <_svfprintf_r+0xc38>)
  40d9c8:	dd22      	ble.n	40da10 <_svfprintf_r+0xc74>
  40d9ca:	4622      	mov	r2, r4
  40d9cc:	f04f 0b10 	mov.w	fp, #16
  40d9d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d9d2:	e006      	b.n	40d9e2 <_svfprintf_r+0xc46>
  40d9d4:	004141d8 	.word	0x004141d8
  40d9d8:	3e10      	subs	r6, #16
  40d9da:	2e10      	cmp	r6, #16
  40d9dc:	f108 0808 	add.w	r8, r8, #8
  40d9e0:	dd15      	ble.n	40da0e <_svfprintf_r+0xc72>
  40d9e2:	3701      	adds	r7, #1
  40d9e4:	3210      	adds	r2, #16
  40d9e6:	2f07      	cmp	r7, #7
  40d9e8:	9227      	str	r2, [sp, #156]	; 0x9c
  40d9ea:	9726      	str	r7, [sp, #152]	; 0x98
  40d9ec:	e888 0820 	stmia.w	r8, {r5, fp}
  40d9f0:	ddf2      	ble.n	40d9d8 <_svfprintf_r+0xc3c>
  40d9f2:	aa25      	add	r2, sp, #148	; 0x94
  40d9f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d9f6:	4620      	mov	r0, r4
  40d9f8:	f004 f864 	bl	411ac4 <__ssprint_r>
  40d9fc:	2800      	cmp	r0, #0
  40d9fe:	f47f aa9f 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40da02:	3e10      	subs	r6, #16
  40da04:	2e10      	cmp	r6, #16
  40da06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40da08:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40da0a:	46c8      	mov	r8, r9
  40da0c:	dce9      	bgt.n	40d9e2 <_svfprintf_r+0xc46>
  40da0e:	4614      	mov	r4, r2
  40da10:	3701      	adds	r7, #1
  40da12:	4434      	add	r4, r6
  40da14:	2f07      	cmp	r7, #7
  40da16:	9427      	str	r4, [sp, #156]	; 0x9c
  40da18:	9726      	str	r7, [sp, #152]	; 0x98
  40da1a:	e888 0060 	stmia.w	r8, {r5, r6}
  40da1e:	f77f aed9 	ble.w	40d7d4 <_svfprintf_r+0xa38>
  40da22:	aa25      	add	r2, sp, #148	; 0x94
  40da24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40da26:	980c      	ldr	r0, [sp, #48]	; 0x30
  40da28:	f004 f84c 	bl	411ac4 <__ssprint_r>
  40da2c:	2800      	cmp	r0, #0
  40da2e:	f47f aa87 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40da32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40da34:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40da36:	46c8      	mov	r8, r9
  40da38:	e6ce      	b.n	40d7d8 <_svfprintf_r+0xa3c>
  40da3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40da3c:	6814      	ldr	r4, [r2, #0]
  40da3e:	4613      	mov	r3, r2
  40da40:	3304      	adds	r3, #4
  40da42:	17e5      	asrs	r5, r4, #31
  40da44:	930f      	str	r3, [sp, #60]	; 0x3c
  40da46:	4622      	mov	r2, r4
  40da48:	462b      	mov	r3, r5
  40da4a:	e4fa      	b.n	40d442 <_svfprintf_r+0x6a6>
  40da4c:	3204      	adds	r2, #4
  40da4e:	681c      	ldr	r4, [r3, #0]
  40da50:	920f      	str	r2, [sp, #60]	; 0x3c
  40da52:	2301      	movs	r3, #1
  40da54:	2500      	movs	r5, #0
  40da56:	f7ff ba94 	b.w	40cf82 <_svfprintf_r+0x1e6>
  40da5a:	681c      	ldr	r4, [r3, #0]
  40da5c:	3304      	adds	r3, #4
  40da5e:	930f      	str	r3, [sp, #60]	; 0x3c
  40da60:	2500      	movs	r5, #0
  40da62:	e421      	b.n	40d2a8 <_svfprintf_r+0x50c>
  40da64:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40da66:	460a      	mov	r2, r1
  40da68:	3204      	adds	r2, #4
  40da6a:	680c      	ldr	r4, [r1, #0]
  40da6c:	920f      	str	r2, [sp, #60]	; 0x3c
  40da6e:	2500      	movs	r5, #0
  40da70:	f7ff ba87 	b.w	40cf82 <_svfprintf_r+0x1e6>
  40da74:	4614      	mov	r4, r2
  40da76:	3301      	adds	r3, #1
  40da78:	4434      	add	r4, r6
  40da7a:	2b07      	cmp	r3, #7
  40da7c:	9427      	str	r4, [sp, #156]	; 0x9c
  40da7e:	9326      	str	r3, [sp, #152]	; 0x98
  40da80:	e888 0060 	stmia.w	r8, {r5, r6}
  40da84:	f77f ab68 	ble.w	40d158 <_svfprintf_r+0x3bc>
  40da88:	e6b3      	b.n	40d7f2 <_svfprintf_r+0xa56>
  40da8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40da8e:	f8cd b01c 	str.w	fp, [sp, #28]
  40da92:	ae42      	add	r6, sp, #264	; 0x108
  40da94:	3430      	adds	r4, #48	; 0x30
  40da96:	2301      	movs	r3, #1
  40da98:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40da9c:	930e      	str	r3, [sp, #56]	; 0x38
  40da9e:	f7ff ba8d 	b.w	40cfbc <_svfprintf_r+0x220>
  40daa2:	aa25      	add	r2, sp, #148	; 0x94
  40daa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40daa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40daa8:	f004 f80c 	bl	411ac4 <__ssprint_r>
  40daac:	2800      	cmp	r0, #0
  40daae:	f47f aa47 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40dab2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40dab4:	46c8      	mov	r8, r9
  40dab6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40dab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40daba:	429a      	cmp	r2, r3
  40dabc:	db44      	blt.n	40db48 <_svfprintf_r+0xdac>
  40dabe:	9b07      	ldr	r3, [sp, #28]
  40dac0:	07d9      	lsls	r1, r3, #31
  40dac2:	d441      	bmi.n	40db48 <_svfprintf_r+0xdac>
  40dac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40dac6:	9812      	ldr	r0, [sp, #72]	; 0x48
  40dac8:	1a9a      	subs	r2, r3, r2
  40daca:	1a1d      	subs	r5, r3, r0
  40dacc:	4295      	cmp	r5, r2
  40dace:	bfa8      	it	ge
  40dad0:	4615      	movge	r5, r2
  40dad2:	2d00      	cmp	r5, #0
  40dad4:	dd0e      	ble.n	40daf4 <_svfprintf_r+0xd58>
  40dad6:	9926      	ldr	r1, [sp, #152]	; 0x98
  40dad8:	f8c8 5004 	str.w	r5, [r8, #4]
  40dadc:	3101      	adds	r1, #1
  40dade:	4406      	add	r6, r0
  40dae0:	442c      	add	r4, r5
  40dae2:	2907      	cmp	r1, #7
  40dae4:	f8c8 6000 	str.w	r6, [r8]
  40dae8:	9427      	str	r4, [sp, #156]	; 0x9c
  40daea:	9126      	str	r1, [sp, #152]	; 0x98
  40daec:	f300 823b 	bgt.w	40df66 <_svfprintf_r+0x11ca>
  40daf0:	f108 0808 	add.w	r8, r8, #8
  40daf4:	2d00      	cmp	r5, #0
  40daf6:	bfac      	ite	ge
  40daf8:	1b56      	subge	r6, r2, r5
  40dafa:	4616      	movlt	r6, r2
  40dafc:	2e00      	cmp	r6, #0
  40dafe:	f77f ab2d 	ble.w	40d15c <_svfprintf_r+0x3c0>
  40db02:	2e10      	cmp	r6, #16
  40db04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40db06:	4db0      	ldr	r5, [pc, #704]	; (40ddc8 <_svfprintf_r+0x102c>)
  40db08:	ddb5      	ble.n	40da76 <_svfprintf_r+0xcda>
  40db0a:	4622      	mov	r2, r4
  40db0c:	2710      	movs	r7, #16
  40db0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40db12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40db14:	e004      	b.n	40db20 <_svfprintf_r+0xd84>
  40db16:	f108 0808 	add.w	r8, r8, #8
  40db1a:	3e10      	subs	r6, #16
  40db1c:	2e10      	cmp	r6, #16
  40db1e:	dda9      	ble.n	40da74 <_svfprintf_r+0xcd8>
  40db20:	3301      	adds	r3, #1
  40db22:	3210      	adds	r2, #16
  40db24:	2b07      	cmp	r3, #7
  40db26:	9227      	str	r2, [sp, #156]	; 0x9c
  40db28:	9326      	str	r3, [sp, #152]	; 0x98
  40db2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40db2e:	ddf2      	ble.n	40db16 <_svfprintf_r+0xd7a>
  40db30:	aa25      	add	r2, sp, #148	; 0x94
  40db32:	4621      	mov	r1, r4
  40db34:	4658      	mov	r0, fp
  40db36:	f003 ffc5 	bl	411ac4 <__ssprint_r>
  40db3a:	2800      	cmp	r0, #0
  40db3c:	f47f aa00 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40db40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40db42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40db44:	46c8      	mov	r8, r9
  40db46:	e7e8      	b.n	40db1a <_svfprintf_r+0xd7e>
  40db48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40db4a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40db4c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40db4e:	f8c8 1000 	str.w	r1, [r8]
  40db52:	3301      	adds	r3, #1
  40db54:	4404      	add	r4, r0
  40db56:	2b07      	cmp	r3, #7
  40db58:	9427      	str	r4, [sp, #156]	; 0x9c
  40db5a:	f8c8 0004 	str.w	r0, [r8, #4]
  40db5e:	9326      	str	r3, [sp, #152]	; 0x98
  40db60:	f300 81f5 	bgt.w	40df4e <_svfprintf_r+0x11b2>
  40db64:	f108 0808 	add.w	r8, r8, #8
  40db68:	e7ac      	b.n	40dac4 <_svfprintf_r+0xd28>
  40db6a:	9b07      	ldr	r3, [sp, #28]
  40db6c:	07da      	lsls	r2, r3, #31
  40db6e:	f53f adfe 	bmi.w	40d76e <_svfprintf_r+0x9d2>
  40db72:	3701      	adds	r7, #1
  40db74:	3401      	adds	r4, #1
  40db76:	2301      	movs	r3, #1
  40db78:	2f07      	cmp	r7, #7
  40db7a:	9427      	str	r4, [sp, #156]	; 0x9c
  40db7c:	9726      	str	r7, [sp, #152]	; 0x98
  40db7e:	f8c8 6000 	str.w	r6, [r8]
  40db82:	f8c8 3004 	str.w	r3, [r8, #4]
  40db86:	f77f ae25 	ble.w	40d7d4 <_svfprintf_r+0xa38>
  40db8a:	e74a      	b.n	40da22 <_svfprintf_r+0xc86>
  40db8c:	aa25      	add	r2, sp, #148	; 0x94
  40db8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40db90:	980c      	ldr	r0, [sp, #48]	; 0x30
  40db92:	f003 ff97 	bl	411ac4 <__ssprint_r>
  40db96:	2800      	cmp	r0, #0
  40db98:	f47f a9d2 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40db9c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40db9e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40dba0:	46c8      	mov	r8, r9
  40dba2:	e5f2      	b.n	40d78a <_svfprintf_r+0x9ee>
  40dba4:	aa25      	add	r2, sp, #148	; 0x94
  40dba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40dba8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dbaa:	f003 ff8b 	bl	411ac4 <__ssprint_r>
  40dbae:	2800      	cmp	r0, #0
  40dbb0:	f47f a9c6 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40dbb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40dbb6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40dbb8:	46c8      	mov	r8, r9
  40dbba:	e5f5      	b.n	40d7a8 <_svfprintf_r+0xa0c>
  40dbbc:	464e      	mov	r6, r9
  40dbbe:	f7ff b9fd 	b.w	40cfbc <_svfprintf_r+0x220>
  40dbc2:	aa25      	add	r2, sp, #148	; 0x94
  40dbc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40dbc6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dbc8:	f003 ff7c 	bl	411ac4 <__ssprint_r>
  40dbcc:	2800      	cmp	r0, #0
  40dbce:	f47f a9b7 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40dbd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40dbd4:	46c8      	mov	r8, r9
  40dbd6:	f7ff ba72 	b.w	40d0be <_svfprintf_r+0x322>
  40dbda:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40dbdc:	4622      	mov	r2, r4
  40dbde:	4620      	mov	r0, r4
  40dbe0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40dbe2:	4623      	mov	r3, r4
  40dbe4:	4621      	mov	r1, r4
  40dbe6:	f004 fe3b 	bl	412860 <__aeabi_dcmpun>
  40dbea:	2800      	cmp	r0, #0
  40dbec:	f040 8286 	bne.w	40e0fc <_svfprintf_r+0x1360>
  40dbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40dbf2:	3301      	adds	r3, #1
  40dbf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dbf6:	f023 0320 	bic.w	r3, r3, #32
  40dbfa:	930e      	str	r3, [sp, #56]	; 0x38
  40dbfc:	f000 81e2 	beq.w	40dfc4 <_svfprintf_r+0x1228>
  40dc00:	2b47      	cmp	r3, #71	; 0x47
  40dc02:	f000 811e 	beq.w	40de42 <_svfprintf_r+0x10a6>
  40dc06:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40dc0a:	9307      	str	r3, [sp, #28]
  40dc0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40dc0e:	1e1f      	subs	r7, r3, #0
  40dc10:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40dc12:	9308      	str	r3, [sp, #32]
  40dc14:	bfbb      	ittet	lt
  40dc16:	463b      	movlt	r3, r7
  40dc18:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40dc1c:	2300      	movge	r3, #0
  40dc1e:	232d      	movlt	r3, #45	; 0x2d
  40dc20:	9310      	str	r3, [sp, #64]	; 0x40
  40dc22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dc24:	2b66      	cmp	r3, #102	; 0x66
  40dc26:	f000 81bb 	beq.w	40dfa0 <_svfprintf_r+0x1204>
  40dc2a:	2b46      	cmp	r3, #70	; 0x46
  40dc2c:	f000 80df 	beq.w	40ddee <_svfprintf_r+0x1052>
  40dc30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40dc32:	9a08      	ldr	r2, [sp, #32]
  40dc34:	2b45      	cmp	r3, #69	; 0x45
  40dc36:	bf0c      	ite	eq
  40dc38:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40dc3a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40dc3c:	a823      	add	r0, sp, #140	; 0x8c
  40dc3e:	a920      	add	r1, sp, #128	; 0x80
  40dc40:	bf08      	it	eq
  40dc42:	1c5d      	addeq	r5, r3, #1
  40dc44:	9004      	str	r0, [sp, #16]
  40dc46:	9103      	str	r1, [sp, #12]
  40dc48:	a81f      	add	r0, sp, #124	; 0x7c
  40dc4a:	2102      	movs	r1, #2
  40dc4c:	463b      	mov	r3, r7
  40dc4e:	9002      	str	r0, [sp, #8]
  40dc50:	9501      	str	r5, [sp, #4]
  40dc52:	9100      	str	r1, [sp, #0]
  40dc54:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dc56:	f001 faa3 	bl	40f1a0 <_dtoa_r>
  40dc5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dc5c:	2b67      	cmp	r3, #103	; 0x67
  40dc5e:	4606      	mov	r6, r0
  40dc60:	f040 81e0 	bne.w	40e024 <_svfprintf_r+0x1288>
  40dc64:	f01b 0f01 	tst.w	fp, #1
  40dc68:	f000 8246 	beq.w	40e0f8 <_svfprintf_r+0x135c>
  40dc6c:	1974      	adds	r4, r6, r5
  40dc6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40dc70:	9808      	ldr	r0, [sp, #32]
  40dc72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40dc74:	4639      	mov	r1, r7
  40dc76:	f004 fdc1 	bl	4127fc <__aeabi_dcmpeq>
  40dc7a:	2800      	cmp	r0, #0
  40dc7c:	f040 8165 	bne.w	40df4a <_svfprintf_r+0x11ae>
  40dc80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40dc82:	42a3      	cmp	r3, r4
  40dc84:	d206      	bcs.n	40dc94 <_svfprintf_r+0xef8>
  40dc86:	2130      	movs	r1, #48	; 0x30
  40dc88:	1c5a      	adds	r2, r3, #1
  40dc8a:	9223      	str	r2, [sp, #140]	; 0x8c
  40dc8c:	7019      	strb	r1, [r3, #0]
  40dc8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40dc90:	429c      	cmp	r4, r3
  40dc92:	d8f9      	bhi.n	40dc88 <_svfprintf_r+0xeec>
  40dc94:	1b9b      	subs	r3, r3, r6
  40dc96:	9313      	str	r3, [sp, #76]	; 0x4c
  40dc98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40dc9a:	2b47      	cmp	r3, #71	; 0x47
  40dc9c:	f000 80e9 	beq.w	40de72 <_svfprintf_r+0x10d6>
  40dca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dca2:	2b65      	cmp	r3, #101	; 0x65
  40dca4:	f340 81cd 	ble.w	40e042 <_svfprintf_r+0x12a6>
  40dca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dcaa:	2b66      	cmp	r3, #102	; 0x66
  40dcac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40dcae:	9312      	str	r3, [sp, #72]	; 0x48
  40dcb0:	f000 819e 	beq.w	40dff0 <_svfprintf_r+0x1254>
  40dcb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40dcb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40dcb8:	4619      	mov	r1, r3
  40dcba:	4291      	cmp	r1, r2
  40dcbc:	f300 818a 	bgt.w	40dfd4 <_svfprintf_r+0x1238>
  40dcc0:	f01b 0f01 	tst.w	fp, #1
  40dcc4:	f040 8213 	bne.w	40e0ee <_svfprintf_r+0x1352>
  40dcc8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40dccc:	9308      	str	r3, [sp, #32]
  40dcce:	2367      	movs	r3, #103	; 0x67
  40dcd0:	920e      	str	r2, [sp, #56]	; 0x38
  40dcd2:	9311      	str	r3, [sp, #68]	; 0x44
  40dcd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40dcd6:	2b00      	cmp	r3, #0
  40dcd8:	f040 80c4 	bne.w	40de64 <_svfprintf_r+0x10c8>
  40dcdc:	930a      	str	r3, [sp, #40]	; 0x28
  40dcde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40dce2:	f7ff b973 	b.w	40cfcc <_svfprintf_r+0x230>
  40dce6:	4635      	mov	r5, r6
  40dce8:	460c      	mov	r4, r1
  40dcea:	4646      	mov	r6, r8
  40dcec:	4690      	mov	r8, r2
  40dcee:	3301      	adds	r3, #1
  40dcf0:	443c      	add	r4, r7
  40dcf2:	2b07      	cmp	r3, #7
  40dcf4:	9427      	str	r4, [sp, #156]	; 0x9c
  40dcf6:	9326      	str	r3, [sp, #152]	; 0x98
  40dcf8:	e888 00a0 	stmia.w	r8, {r5, r7}
  40dcfc:	f73f aed1 	bgt.w	40daa2 <_svfprintf_r+0xd06>
  40dd00:	f108 0808 	add.w	r8, r8, #8
  40dd04:	e6d7      	b.n	40dab6 <_svfprintf_r+0xd1a>
  40dd06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40dd08:	6813      	ldr	r3, [r2, #0]
  40dd0a:	3204      	adds	r2, #4
  40dd0c:	920f      	str	r2, [sp, #60]	; 0x3c
  40dd0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dd10:	601a      	str	r2, [r3, #0]
  40dd12:	f7ff b86a 	b.w	40cdea <_svfprintf_r+0x4e>
  40dd16:	aa25      	add	r2, sp, #148	; 0x94
  40dd18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40dd1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dd1c:	f003 fed2 	bl	411ac4 <__ssprint_r>
  40dd20:	2800      	cmp	r0, #0
  40dd22:	f47f a90d 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40dd26:	46c8      	mov	r8, r9
  40dd28:	e48d      	b.n	40d646 <_svfprintf_r+0x8aa>
  40dd2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40dd2c:	4a27      	ldr	r2, [pc, #156]	; (40ddcc <_svfprintf_r+0x1030>)
  40dd2e:	f8c8 2000 	str.w	r2, [r8]
  40dd32:	3301      	adds	r3, #1
  40dd34:	3401      	adds	r4, #1
  40dd36:	2201      	movs	r2, #1
  40dd38:	2b07      	cmp	r3, #7
  40dd3a:	9427      	str	r4, [sp, #156]	; 0x9c
  40dd3c:	9326      	str	r3, [sp, #152]	; 0x98
  40dd3e:	f8c8 2004 	str.w	r2, [r8, #4]
  40dd42:	dc72      	bgt.n	40de2a <_svfprintf_r+0x108e>
  40dd44:	f108 0808 	add.w	r8, r8, #8
  40dd48:	b929      	cbnz	r1, 40dd56 <_svfprintf_r+0xfba>
  40dd4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40dd4c:	b91b      	cbnz	r3, 40dd56 <_svfprintf_r+0xfba>
  40dd4e:	9b07      	ldr	r3, [sp, #28]
  40dd50:	07d8      	lsls	r0, r3, #31
  40dd52:	f57f aa03 	bpl.w	40d15c <_svfprintf_r+0x3c0>
  40dd56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40dd58:	9819      	ldr	r0, [sp, #100]	; 0x64
  40dd5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40dd5c:	f8c8 2000 	str.w	r2, [r8]
  40dd60:	3301      	adds	r3, #1
  40dd62:	4602      	mov	r2, r0
  40dd64:	4422      	add	r2, r4
  40dd66:	2b07      	cmp	r3, #7
  40dd68:	9227      	str	r2, [sp, #156]	; 0x9c
  40dd6a:	f8c8 0004 	str.w	r0, [r8, #4]
  40dd6e:	9326      	str	r3, [sp, #152]	; 0x98
  40dd70:	f300 818d 	bgt.w	40e08e <_svfprintf_r+0x12f2>
  40dd74:	f108 0808 	add.w	r8, r8, #8
  40dd78:	2900      	cmp	r1, #0
  40dd7a:	f2c0 8165 	blt.w	40e048 <_svfprintf_r+0x12ac>
  40dd7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40dd80:	f8c8 6000 	str.w	r6, [r8]
  40dd84:	3301      	adds	r3, #1
  40dd86:	188c      	adds	r4, r1, r2
  40dd88:	2b07      	cmp	r3, #7
  40dd8a:	9427      	str	r4, [sp, #156]	; 0x9c
  40dd8c:	9326      	str	r3, [sp, #152]	; 0x98
  40dd8e:	f8c8 1004 	str.w	r1, [r8, #4]
  40dd92:	f77f a9e1 	ble.w	40d158 <_svfprintf_r+0x3bc>
  40dd96:	e52c      	b.n	40d7f2 <_svfprintf_r+0xa56>
  40dd98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40dd9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40dd9c:	6813      	ldr	r3, [r2, #0]
  40dd9e:	17cd      	asrs	r5, r1, #31
  40dda0:	4608      	mov	r0, r1
  40dda2:	3204      	adds	r2, #4
  40dda4:	4629      	mov	r1, r5
  40dda6:	920f      	str	r2, [sp, #60]	; 0x3c
  40dda8:	e9c3 0100 	strd	r0, r1, [r3]
  40ddac:	f7ff b81d 	b.w	40cdea <_svfprintf_r+0x4e>
  40ddb0:	aa25      	add	r2, sp, #148	; 0x94
  40ddb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ddb4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ddb6:	f003 fe85 	bl	411ac4 <__ssprint_r>
  40ddba:	2800      	cmp	r0, #0
  40ddbc:	f47f a8c0 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40ddc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ddc2:	46c8      	mov	r8, r9
  40ddc4:	e458      	b.n	40d678 <_svfprintf_r+0x8dc>
  40ddc6:	bf00      	nop
  40ddc8:	004141d8 	.word	0x004141d8
  40ddcc:	004141c4 	.word	0x004141c4
  40ddd0:	2140      	movs	r1, #64	; 0x40
  40ddd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ddd4:	f002 fe58 	bl	410a88 <_malloc_r>
  40ddd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ddda:	6010      	str	r0, [r2, #0]
  40dddc:	6110      	str	r0, [r2, #16]
  40ddde:	2800      	cmp	r0, #0
  40dde0:	f000 81f2 	beq.w	40e1c8 <_svfprintf_r+0x142c>
  40dde4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dde6:	2340      	movs	r3, #64	; 0x40
  40dde8:	6153      	str	r3, [r2, #20]
  40ddea:	f7fe bfee 	b.w	40cdca <_svfprintf_r+0x2e>
  40ddee:	a823      	add	r0, sp, #140	; 0x8c
  40ddf0:	a920      	add	r1, sp, #128	; 0x80
  40ddf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ddf4:	9004      	str	r0, [sp, #16]
  40ddf6:	9103      	str	r1, [sp, #12]
  40ddf8:	a81f      	add	r0, sp, #124	; 0x7c
  40ddfa:	2103      	movs	r1, #3
  40ddfc:	9002      	str	r0, [sp, #8]
  40ddfe:	9a08      	ldr	r2, [sp, #32]
  40de00:	9401      	str	r4, [sp, #4]
  40de02:	463b      	mov	r3, r7
  40de04:	9100      	str	r1, [sp, #0]
  40de06:	980c      	ldr	r0, [sp, #48]	; 0x30
  40de08:	f001 f9ca 	bl	40f1a0 <_dtoa_r>
  40de0c:	4625      	mov	r5, r4
  40de0e:	4606      	mov	r6, r0
  40de10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40de12:	2b46      	cmp	r3, #70	; 0x46
  40de14:	eb06 0405 	add.w	r4, r6, r5
  40de18:	f47f af29 	bne.w	40dc6e <_svfprintf_r+0xed2>
  40de1c:	7833      	ldrb	r3, [r6, #0]
  40de1e:	2b30      	cmp	r3, #48	; 0x30
  40de20:	f000 8178 	beq.w	40e114 <_svfprintf_r+0x1378>
  40de24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40de26:	442c      	add	r4, r5
  40de28:	e721      	b.n	40dc6e <_svfprintf_r+0xed2>
  40de2a:	aa25      	add	r2, sp, #148	; 0x94
  40de2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40de2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40de30:	f003 fe48 	bl	411ac4 <__ssprint_r>
  40de34:	2800      	cmp	r0, #0
  40de36:	f47f a883 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40de3a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40de3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40de3e:	46c8      	mov	r8, r9
  40de40:	e782      	b.n	40dd48 <_svfprintf_r+0xfac>
  40de42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40de44:	2b00      	cmp	r3, #0
  40de46:	bf08      	it	eq
  40de48:	2301      	moveq	r3, #1
  40de4a:	930a      	str	r3, [sp, #40]	; 0x28
  40de4c:	e6db      	b.n	40dc06 <_svfprintf_r+0xe6a>
  40de4e:	4630      	mov	r0, r6
  40de50:	940a      	str	r4, [sp, #40]	; 0x28
  40de52:	f7fe ff35 	bl	40ccc0 <strlen>
  40de56:	950f      	str	r5, [sp, #60]	; 0x3c
  40de58:	900e      	str	r0, [sp, #56]	; 0x38
  40de5a:	f8cd b01c 	str.w	fp, [sp, #28]
  40de5e:	4603      	mov	r3, r0
  40de60:	f7ff b9f9 	b.w	40d256 <_svfprintf_r+0x4ba>
  40de64:	272d      	movs	r7, #45	; 0x2d
  40de66:	2300      	movs	r3, #0
  40de68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40de6c:	930a      	str	r3, [sp, #40]	; 0x28
  40de6e:	f7ff b8ae 	b.w	40cfce <_svfprintf_r+0x232>
  40de72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40de74:	9312      	str	r3, [sp, #72]	; 0x48
  40de76:	461a      	mov	r2, r3
  40de78:	3303      	adds	r3, #3
  40de7a:	db04      	blt.n	40de86 <_svfprintf_r+0x10ea>
  40de7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40de7e:	4619      	mov	r1, r3
  40de80:	4291      	cmp	r1, r2
  40de82:	f6bf af17 	bge.w	40dcb4 <_svfprintf_r+0xf18>
  40de86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40de88:	3b02      	subs	r3, #2
  40de8a:	9311      	str	r3, [sp, #68]	; 0x44
  40de8c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40de90:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40de94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40de96:	3b01      	subs	r3, #1
  40de98:	2b00      	cmp	r3, #0
  40de9a:	931f      	str	r3, [sp, #124]	; 0x7c
  40de9c:	bfbd      	ittte	lt
  40de9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40dea0:	f1c3 0301 	rsblt	r3, r3, #1
  40dea4:	222d      	movlt	r2, #45	; 0x2d
  40dea6:	222b      	movge	r2, #43	; 0x2b
  40dea8:	2b09      	cmp	r3, #9
  40deaa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40deae:	f340 8116 	ble.w	40e0de <_svfprintf_r+0x1342>
  40deb2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40deb6:	4620      	mov	r0, r4
  40deb8:	4dab      	ldr	r5, [pc, #684]	; (40e168 <_svfprintf_r+0x13cc>)
  40deba:	e000      	b.n	40debe <_svfprintf_r+0x1122>
  40debc:	4610      	mov	r0, r2
  40debe:	fb85 1203 	smull	r1, r2, r5, r3
  40dec2:	17d9      	asrs	r1, r3, #31
  40dec4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40dec8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40decc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40ded0:	3230      	adds	r2, #48	; 0x30
  40ded2:	2909      	cmp	r1, #9
  40ded4:	f800 2c01 	strb.w	r2, [r0, #-1]
  40ded8:	460b      	mov	r3, r1
  40deda:	f100 32ff 	add.w	r2, r0, #4294967295
  40dede:	dced      	bgt.n	40debc <_svfprintf_r+0x1120>
  40dee0:	3330      	adds	r3, #48	; 0x30
  40dee2:	3802      	subs	r0, #2
  40dee4:	b2d9      	uxtb	r1, r3
  40dee6:	4284      	cmp	r4, r0
  40dee8:	f802 1c01 	strb.w	r1, [r2, #-1]
  40deec:	f240 8165 	bls.w	40e1ba <_svfprintf_r+0x141e>
  40def0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40def4:	4613      	mov	r3, r2
  40def6:	e001      	b.n	40defc <_svfprintf_r+0x1160>
  40def8:	f813 1b01 	ldrb.w	r1, [r3], #1
  40defc:	f800 1b01 	strb.w	r1, [r0], #1
  40df00:	42a3      	cmp	r3, r4
  40df02:	d1f9      	bne.n	40def8 <_svfprintf_r+0x115c>
  40df04:	3301      	adds	r3, #1
  40df06:	1a9b      	subs	r3, r3, r2
  40df08:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40df0c:	4413      	add	r3, r2
  40df0e:	aa21      	add	r2, sp, #132	; 0x84
  40df10:	1a9b      	subs	r3, r3, r2
  40df12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40df14:	931b      	str	r3, [sp, #108]	; 0x6c
  40df16:	2a01      	cmp	r2, #1
  40df18:	4413      	add	r3, r2
  40df1a:	930e      	str	r3, [sp, #56]	; 0x38
  40df1c:	f340 8119 	ble.w	40e152 <_svfprintf_r+0x13b6>
  40df20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40df22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40df24:	4413      	add	r3, r2
  40df26:	930e      	str	r3, [sp, #56]	; 0x38
  40df28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40df2c:	9308      	str	r3, [sp, #32]
  40df2e:	2300      	movs	r3, #0
  40df30:	9312      	str	r3, [sp, #72]	; 0x48
  40df32:	e6cf      	b.n	40dcd4 <_svfprintf_r+0xf38>
  40df34:	aa25      	add	r2, sp, #148	; 0x94
  40df36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40df38:	980c      	ldr	r0, [sp, #48]	; 0x30
  40df3a:	f003 fdc3 	bl	411ac4 <__ssprint_r>
  40df3e:	2800      	cmp	r0, #0
  40df40:	f47e affe 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40df44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40df46:	46c8      	mov	r8, r9
  40df48:	e4d7      	b.n	40d8fa <_svfprintf_r+0xb5e>
  40df4a:	4623      	mov	r3, r4
  40df4c:	e6a2      	b.n	40dc94 <_svfprintf_r+0xef8>
  40df4e:	aa25      	add	r2, sp, #148	; 0x94
  40df50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40df52:	980c      	ldr	r0, [sp, #48]	; 0x30
  40df54:	f003 fdb6 	bl	411ac4 <__ssprint_r>
  40df58:	2800      	cmp	r0, #0
  40df5a:	f47e aff1 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40df5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40df60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40df62:	46c8      	mov	r8, r9
  40df64:	e5ae      	b.n	40dac4 <_svfprintf_r+0xd28>
  40df66:	aa25      	add	r2, sp, #148	; 0x94
  40df68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40df6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40df6c:	f003 fdaa 	bl	411ac4 <__ssprint_r>
  40df70:	2800      	cmp	r0, #0
  40df72:	f47e afe5 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40df76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40df78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40df7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40df7c:	1a9a      	subs	r2, r3, r2
  40df7e:	46c8      	mov	r8, r9
  40df80:	e5b8      	b.n	40daf4 <_svfprintf_r+0xd58>
  40df82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40df84:	9612      	str	r6, [sp, #72]	; 0x48
  40df86:	2b06      	cmp	r3, #6
  40df88:	bf28      	it	cs
  40df8a:	2306      	movcs	r3, #6
  40df8c:	960a      	str	r6, [sp, #40]	; 0x28
  40df8e:	4637      	mov	r7, r6
  40df90:	9308      	str	r3, [sp, #32]
  40df92:	950f      	str	r5, [sp, #60]	; 0x3c
  40df94:	f8cd b01c 	str.w	fp, [sp, #28]
  40df98:	930e      	str	r3, [sp, #56]	; 0x38
  40df9a:	4e74      	ldr	r6, [pc, #464]	; (40e16c <_svfprintf_r+0x13d0>)
  40df9c:	f7ff b816 	b.w	40cfcc <_svfprintf_r+0x230>
  40dfa0:	a823      	add	r0, sp, #140	; 0x8c
  40dfa2:	a920      	add	r1, sp, #128	; 0x80
  40dfa4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40dfa6:	9004      	str	r0, [sp, #16]
  40dfa8:	9103      	str	r1, [sp, #12]
  40dfaa:	a81f      	add	r0, sp, #124	; 0x7c
  40dfac:	2103      	movs	r1, #3
  40dfae:	9002      	str	r0, [sp, #8]
  40dfb0:	9a08      	ldr	r2, [sp, #32]
  40dfb2:	9501      	str	r5, [sp, #4]
  40dfb4:	463b      	mov	r3, r7
  40dfb6:	9100      	str	r1, [sp, #0]
  40dfb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dfba:	f001 f8f1 	bl	40f1a0 <_dtoa_r>
  40dfbe:	4606      	mov	r6, r0
  40dfc0:	1944      	adds	r4, r0, r5
  40dfc2:	e72b      	b.n	40de1c <_svfprintf_r+0x1080>
  40dfc4:	2306      	movs	r3, #6
  40dfc6:	930a      	str	r3, [sp, #40]	; 0x28
  40dfc8:	e61d      	b.n	40dc06 <_svfprintf_r+0xe6a>
  40dfca:	272d      	movs	r7, #45	; 0x2d
  40dfcc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40dfd0:	f7ff bacd 	b.w	40d56e <_svfprintf_r+0x7d2>
  40dfd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40dfd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40dfd8:	4413      	add	r3, r2
  40dfda:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40dfdc:	930e      	str	r3, [sp, #56]	; 0x38
  40dfde:	2a00      	cmp	r2, #0
  40dfe0:	f340 80b0 	ble.w	40e144 <_svfprintf_r+0x13a8>
  40dfe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40dfe8:	9308      	str	r3, [sp, #32]
  40dfea:	2367      	movs	r3, #103	; 0x67
  40dfec:	9311      	str	r3, [sp, #68]	; 0x44
  40dfee:	e671      	b.n	40dcd4 <_svfprintf_r+0xf38>
  40dff0:	2b00      	cmp	r3, #0
  40dff2:	f340 80c3 	ble.w	40e17c <_svfprintf_r+0x13e0>
  40dff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40dff8:	2a00      	cmp	r2, #0
  40dffa:	f040 8099 	bne.w	40e130 <_svfprintf_r+0x1394>
  40dffe:	f01b 0f01 	tst.w	fp, #1
  40e002:	f040 8095 	bne.w	40e130 <_svfprintf_r+0x1394>
  40e006:	9308      	str	r3, [sp, #32]
  40e008:	930e      	str	r3, [sp, #56]	; 0x38
  40e00a:	e663      	b.n	40dcd4 <_svfprintf_r+0xf38>
  40e00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e00e:	9308      	str	r3, [sp, #32]
  40e010:	930e      	str	r3, [sp, #56]	; 0x38
  40e012:	900a      	str	r0, [sp, #40]	; 0x28
  40e014:	950f      	str	r5, [sp, #60]	; 0x3c
  40e016:	f8cd b01c 	str.w	fp, [sp, #28]
  40e01a:	9012      	str	r0, [sp, #72]	; 0x48
  40e01c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40e020:	f7fe bfd4 	b.w	40cfcc <_svfprintf_r+0x230>
  40e024:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e026:	2b47      	cmp	r3, #71	; 0x47
  40e028:	f47f ae20 	bne.w	40dc6c <_svfprintf_r+0xed0>
  40e02c:	f01b 0f01 	tst.w	fp, #1
  40e030:	f47f aeee 	bne.w	40de10 <_svfprintf_r+0x1074>
  40e034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40e036:	1b9b      	subs	r3, r3, r6
  40e038:	9313      	str	r3, [sp, #76]	; 0x4c
  40e03a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e03c:	2b47      	cmp	r3, #71	; 0x47
  40e03e:	f43f af18 	beq.w	40de72 <_svfprintf_r+0x10d6>
  40e042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40e044:	9312      	str	r3, [sp, #72]	; 0x48
  40e046:	e721      	b.n	40de8c <_svfprintf_r+0x10f0>
  40e048:	424f      	negs	r7, r1
  40e04a:	3110      	adds	r1, #16
  40e04c:	4d48      	ldr	r5, [pc, #288]	; (40e170 <_svfprintf_r+0x13d4>)
  40e04e:	da2f      	bge.n	40e0b0 <_svfprintf_r+0x1314>
  40e050:	2410      	movs	r4, #16
  40e052:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40e056:	e004      	b.n	40e062 <_svfprintf_r+0x12c6>
  40e058:	f108 0808 	add.w	r8, r8, #8
  40e05c:	3f10      	subs	r7, #16
  40e05e:	2f10      	cmp	r7, #16
  40e060:	dd26      	ble.n	40e0b0 <_svfprintf_r+0x1314>
  40e062:	3301      	adds	r3, #1
  40e064:	3210      	adds	r2, #16
  40e066:	2b07      	cmp	r3, #7
  40e068:	9227      	str	r2, [sp, #156]	; 0x9c
  40e06a:	9326      	str	r3, [sp, #152]	; 0x98
  40e06c:	f8c8 5000 	str.w	r5, [r8]
  40e070:	f8c8 4004 	str.w	r4, [r8, #4]
  40e074:	ddf0      	ble.n	40e058 <_svfprintf_r+0x12bc>
  40e076:	aa25      	add	r2, sp, #148	; 0x94
  40e078:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e07a:	4658      	mov	r0, fp
  40e07c:	f003 fd22 	bl	411ac4 <__ssprint_r>
  40e080:	2800      	cmp	r0, #0
  40e082:	f47e af5d 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40e086:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40e088:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e08a:	46c8      	mov	r8, r9
  40e08c:	e7e6      	b.n	40e05c <_svfprintf_r+0x12c0>
  40e08e:	aa25      	add	r2, sp, #148	; 0x94
  40e090:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e092:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e094:	f003 fd16 	bl	411ac4 <__ssprint_r>
  40e098:	2800      	cmp	r0, #0
  40e09a:	f47e af51 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40e09e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40e0a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40e0a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e0a4:	46c8      	mov	r8, r9
  40e0a6:	e667      	b.n	40dd78 <_svfprintf_r+0xfdc>
  40e0a8:	2000      	movs	r0, #0
  40e0aa:	900a      	str	r0, [sp, #40]	; 0x28
  40e0ac:	f7fe bed0 	b.w	40ce50 <_svfprintf_r+0xb4>
  40e0b0:	3301      	adds	r3, #1
  40e0b2:	443a      	add	r2, r7
  40e0b4:	2b07      	cmp	r3, #7
  40e0b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  40e0ba:	9227      	str	r2, [sp, #156]	; 0x9c
  40e0bc:	9326      	str	r3, [sp, #152]	; 0x98
  40e0be:	f108 0808 	add.w	r8, r8, #8
  40e0c2:	f77f ae5c 	ble.w	40dd7e <_svfprintf_r+0xfe2>
  40e0c6:	aa25      	add	r2, sp, #148	; 0x94
  40e0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e0ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e0cc:	f003 fcfa 	bl	411ac4 <__ssprint_r>
  40e0d0:	2800      	cmp	r0, #0
  40e0d2:	f47e af35 	bne.w	40cf40 <_svfprintf_r+0x1a4>
  40e0d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40e0d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40e0da:	46c8      	mov	r8, r9
  40e0dc:	e64f      	b.n	40dd7e <_svfprintf_r+0xfe2>
  40e0de:	3330      	adds	r3, #48	; 0x30
  40e0e0:	2230      	movs	r2, #48	; 0x30
  40e0e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40e0e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40e0ea:	ab22      	add	r3, sp, #136	; 0x88
  40e0ec:	e70f      	b.n	40df0e <_svfprintf_r+0x1172>
  40e0ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40e0f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40e0f2:	4413      	add	r3, r2
  40e0f4:	930e      	str	r3, [sp, #56]	; 0x38
  40e0f6:	e775      	b.n	40dfe4 <_svfprintf_r+0x1248>
  40e0f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40e0fa:	e5cb      	b.n	40dc94 <_svfprintf_r+0xef8>
  40e0fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40e0fe:	4e1d      	ldr	r6, [pc, #116]	; (40e174 <_svfprintf_r+0x13d8>)
  40e100:	2b00      	cmp	r3, #0
  40e102:	bfb6      	itet	lt
  40e104:	272d      	movlt	r7, #45	; 0x2d
  40e106:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40e10a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40e10e:	4b1a      	ldr	r3, [pc, #104]	; (40e178 <_svfprintf_r+0x13dc>)
  40e110:	f7ff ba2f 	b.w	40d572 <_svfprintf_r+0x7d6>
  40e114:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40e116:	9808      	ldr	r0, [sp, #32]
  40e118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40e11a:	4639      	mov	r1, r7
  40e11c:	f004 fb6e 	bl	4127fc <__aeabi_dcmpeq>
  40e120:	2800      	cmp	r0, #0
  40e122:	f47f ae7f 	bne.w	40de24 <_svfprintf_r+0x1088>
  40e126:	f1c5 0501 	rsb	r5, r5, #1
  40e12a:	951f      	str	r5, [sp, #124]	; 0x7c
  40e12c:	442c      	add	r4, r5
  40e12e:	e59e      	b.n	40dc6e <_svfprintf_r+0xed2>
  40e130:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40e132:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40e134:	4413      	add	r3, r2
  40e136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40e138:	441a      	add	r2, r3
  40e13a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40e13e:	920e      	str	r2, [sp, #56]	; 0x38
  40e140:	9308      	str	r3, [sp, #32]
  40e142:	e5c7      	b.n	40dcd4 <_svfprintf_r+0xf38>
  40e144:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40e146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40e148:	f1c3 0301 	rsb	r3, r3, #1
  40e14c:	441a      	add	r2, r3
  40e14e:	4613      	mov	r3, r2
  40e150:	e7d0      	b.n	40e0f4 <_svfprintf_r+0x1358>
  40e152:	f01b 0301 	ands.w	r3, fp, #1
  40e156:	9312      	str	r3, [sp, #72]	; 0x48
  40e158:	f47f aee2 	bne.w	40df20 <_svfprintf_r+0x1184>
  40e15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e15e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40e162:	9308      	str	r3, [sp, #32]
  40e164:	e5b6      	b.n	40dcd4 <_svfprintf_r+0xf38>
  40e166:	bf00      	nop
  40e168:	66666667 	.word	0x66666667
  40e16c:	004141bc 	.word	0x004141bc
  40e170:	004141d8 	.word	0x004141d8
  40e174:	00414190 	.word	0x00414190
  40e178:	0041418c 	.word	0x0041418c
  40e17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e17e:	b913      	cbnz	r3, 40e186 <_svfprintf_r+0x13ea>
  40e180:	f01b 0f01 	tst.w	fp, #1
  40e184:	d002      	beq.n	40e18c <_svfprintf_r+0x13f0>
  40e186:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40e188:	3301      	adds	r3, #1
  40e18a:	e7d4      	b.n	40e136 <_svfprintf_r+0x139a>
  40e18c:	2301      	movs	r3, #1
  40e18e:	e73a      	b.n	40e006 <_svfprintf_r+0x126a>
  40e190:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40e192:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e196:	6828      	ldr	r0, [r5, #0]
  40e198:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40e19c:	900a      	str	r0, [sp, #40]	; 0x28
  40e19e:	4628      	mov	r0, r5
  40e1a0:	3004      	adds	r0, #4
  40e1a2:	46a2      	mov	sl, r4
  40e1a4:	900f      	str	r0, [sp, #60]	; 0x3c
  40e1a6:	f7fe be51 	b.w	40ce4c <_svfprintf_r+0xb0>
  40e1aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1ae:	f7ff b867 	b.w	40d280 <_svfprintf_r+0x4e4>
  40e1b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1b6:	f7ff ba15 	b.w	40d5e4 <_svfprintf_r+0x848>
  40e1ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40e1be:	e6a6      	b.n	40df0e <_svfprintf_r+0x1172>
  40e1c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1c4:	f7ff b8eb 	b.w	40d39e <_svfprintf_r+0x602>
  40e1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e1ca:	230c      	movs	r3, #12
  40e1cc:	6013      	str	r3, [r2, #0]
  40e1ce:	f04f 33ff 	mov.w	r3, #4294967295
  40e1d2:	9309      	str	r3, [sp, #36]	; 0x24
  40e1d4:	f7fe bebd 	b.w	40cf52 <_svfprintf_r+0x1b6>
  40e1d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1dc:	f7ff b99a 	b.w	40d514 <_svfprintf_r+0x778>
  40e1e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1e4:	f7ff b976 	b.w	40d4d4 <_svfprintf_r+0x738>
  40e1e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1ec:	f7ff b959 	b.w	40d4a2 <_svfprintf_r+0x706>
  40e1f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40e1f4:	f7ff b912 	b.w	40d41c <_svfprintf_r+0x680>

0040e1f8 <__sprint_r.part.0>:
  40e1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e1fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40e1fe:	049c      	lsls	r4, r3, #18
  40e200:	4693      	mov	fp, r2
  40e202:	d52f      	bpl.n	40e264 <__sprint_r.part.0+0x6c>
  40e204:	6893      	ldr	r3, [r2, #8]
  40e206:	6812      	ldr	r2, [r2, #0]
  40e208:	b353      	cbz	r3, 40e260 <__sprint_r.part.0+0x68>
  40e20a:	460e      	mov	r6, r1
  40e20c:	4607      	mov	r7, r0
  40e20e:	f102 0908 	add.w	r9, r2, #8
  40e212:	e919 0420 	ldmdb	r9, {r5, sl}
  40e216:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40e21a:	d017      	beq.n	40e24c <__sprint_r.part.0+0x54>
  40e21c:	3d04      	subs	r5, #4
  40e21e:	2400      	movs	r4, #0
  40e220:	e001      	b.n	40e226 <__sprint_r.part.0+0x2e>
  40e222:	45a0      	cmp	r8, r4
  40e224:	d010      	beq.n	40e248 <__sprint_r.part.0+0x50>
  40e226:	4632      	mov	r2, r6
  40e228:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40e22c:	4638      	mov	r0, r7
  40e22e:	f002 f87b 	bl	410328 <_fputwc_r>
  40e232:	1c43      	adds	r3, r0, #1
  40e234:	f104 0401 	add.w	r4, r4, #1
  40e238:	d1f3      	bne.n	40e222 <__sprint_r.part.0+0x2a>
  40e23a:	2300      	movs	r3, #0
  40e23c:	f8cb 3008 	str.w	r3, [fp, #8]
  40e240:	f8cb 3004 	str.w	r3, [fp, #4]
  40e244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e248:	f8db 3008 	ldr.w	r3, [fp, #8]
  40e24c:	f02a 0a03 	bic.w	sl, sl, #3
  40e250:	eba3 030a 	sub.w	r3, r3, sl
  40e254:	f8cb 3008 	str.w	r3, [fp, #8]
  40e258:	f109 0908 	add.w	r9, r9, #8
  40e25c:	2b00      	cmp	r3, #0
  40e25e:	d1d8      	bne.n	40e212 <__sprint_r.part.0+0x1a>
  40e260:	2000      	movs	r0, #0
  40e262:	e7ea      	b.n	40e23a <__sprint_r.part.0+0x42>
  40e264:	f002 f9ca 	bl	4105fc <__sfvwrite_r>
  40e268:	2300      	movs	r3, #0
  40e26a:	f8cb 3008 	str.w	r3, [fp, #8]
  40e26e:	f8cb 3004 	str.w	r3, [fp, #4]
  40e272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e276:	bf00      	nop

0040e278 <_vfiprintf_r>:
  40e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e27c:	b0ad      	sub	sp, #180	; 0xb4
  40e27e:	461d      	mov	r5, r3
  40e280:	468b      	mov	fp, r1
  40e282:	4690      	mov	r8, r2
  40e284:	9307      	str	r3, [sp, #28]
  40e286:	9006      	str	r0, [sp, #24]
  40e288:	b118      	cbz	r0, 40e292 <_vfiprintf_r+0x1a>
  40e28a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e28c:	2b00      	cmp	r3, #0
  40e28e:	f000 80f3 	beq.w	40e478 <_vfiprintf_r+0x200>
  40e292:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e296:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40e29a:	07df      	lsls	r7, r3, #31
  40e29c:	b281      	uxth	r1, r0
  40e29e:	d402      	bmi.n	40e2a6 <_vfiprintf_r+0x2e>
  40e2a0:	058e      	lsls	r6, r1, #22
  40e2a2:	f140 80fc 	bpl.w	40e49e <_vfiprintf_r+0x226>
  40e2a6:	048c      	lsls	r4, r1, #18
  40e2a8:	d40a      	bmi.n	40e2c0 <_vfiprintf_r+0x48>
  40e2aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e2ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40e2b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40e2b6:	f8ab 100c 	strh.w	r1, [fp, #12]
  40e2ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40e2be:	b289      	uxth	r1, r1
  40e2c0:	0708      	lsls	r0, r1, #28
  40e2c2:	f140 80b3 	bpl.w	40e42c <_vfiprintf_r+0x1b4>
  40e2c6:	f8db 3010 	ldr.w	r3, [fp, #16]
  40e2ca:	2b00      	cmp	r3, #0
  40e2cc:	f000 80ae 	beq.w	40e42c <_vfiprintf_r+0x1b4>
  40e2d0:	f001 031a 	and.w	r3, r1, #26
  40e2d4:	2b0a      	cmp	r3, #10
  40e2d6:	f000 80b5 	beq.w	40e444 <_vfiprintf_r+0x1cc>
  40e2da:	2300      	movs	r3, #0
  40e2dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40e2e0:	930b      	str	r3, [sp, #44]	; 0x2c
  40e2e2:	9311      	str	r3, [sp, #68]	; 0x44
  40e2e4:	9310      	str	r3, [sp, #64]	; 0x40
  40e2e6:	9303      	str	r3, [sp, #12]
  40e2e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40e2ec:	46ca      	mov	sl, r9
  40e2ee:	f8cd b010 	str.w	fp, [sp, #16]
  40e2f2:	f898 3000 	ldrb.w	r3, [r8]
  40e2f6:	4644      	mov	r4, r8
  40e2f8:	b1fb      	cbz	r3, 40e33a <_vfiprintf_r+0xc2>
  40e2fa:	2b25      	cmp	r3, #37	; 0x25
  40e2fc:	d102      	bne.n	40e304 <_vfiprintf_r+0x8c>
  40e2fe:	e01c      	b.n	40e33a <_vfiprintf_r+0xc2>
  40e300:	2b25      	cmp	r3, #37	; 0x25
  40e302:	d003      	beq.n	40e30c <_vfiprintf_r+0x94>
  40e304:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40e308:	2b00      	cmp	r3, #0
  40e30a:	d1f9      	bne.n	40e300 <_vfiprintf_r+0x88>
  40e30c:	eba4 0508 	sub.w	r5, r4, r8
  40e310:	b19d      	cbz	r5, 40e33a <_vfiprintf_r+0xc2>
  40e312:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e314:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e316:	f8ca 8000 	str.w	r8, [sl]
  40e31a:	3301      	adds	r3, #1
  40e31c:	442a      	add	r2, r5
  40e31e:	2b07      	cmp	r3, #7
  40e320:	f8ca 5004 	str.w	r5, [sl, #4]
  40e324:	9211      	str	r2, [sp, #68]	; 0x44
  40e326:	9310      	str	r3, [sp, #64]	; 0x40
  40e328:	dd7a      	ble.n	40e420 <_vfiprintf_r+0x1a8>
  40e32a:	2a00      	cmp	r2, #0
  40e32c:	f040 84b0 	bne.w	40ec90 <_vfiprintf_r+0xa18>
  40e330:	9b03      	ldr	r3, [sp, #12]
  40e332:	9210      	str	r2, [sp, #64]	; 0x40
  40e334:	442b      	add	r3, r5
  40e336:	46ca      	mov	sl, r9
  40e338:	9303      	str	r3, [sp, #12]
  40e33a:	7823      	ldrb	r3, [r4, #0]
  40e33c:	2b00      	cmp	r3, #0
  40e33e:	f000 83e0 	beq.w	40eb02 <_vfiprintf_r+0x88a>
  40e342:	2000      	movs	r0, #0
  40e344:	f04f 0300 	mov.w	r3, #0
  40e348:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40e34c:	f104 0801 	add.w	r8, r4, #1
  40e350:	7862      	ldrb	r2, [r4, #1]
  40e352:	4605      	mov	r5, r0
  40e354:	4606      	mov	r6, r0
  40e356:	4603      	mov	r3, r0
  40e358:	f04f 34ff 	mov.w	r4, #4294967295
  40e35c:	f108 0801 	add.w	r8, r8, #1
  40e360:	f1a2 0120 	sub.w	r1, r2, #32
  40e364:	2958      	cmp	r1, #88	; 0x58
  40e366:	f200 82de 	bhi.w	40e926 <_vfiprintf_r+0x6ae>
  40e36a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40e36e:	0221      	.short	0x0221
  40e370:	02dc02dc 	.word	0x02dc02dc
  40e374:	02dc0229 	.word	0x02dc0229
  40e378:	02dc02dc 	.word	0x02dc02dc
  40e37c:	02dc02dc 	.word	0x02dc02dc
  40e380:	028902dc 	.word	0x028902dc
  40e384:	02dc0295 	.word	0x02dc0295
  40e388:	02bd00a2 	.word	0x02bd00a2
  40e38c:	019f02dc 	.word	0x019f02dc
  40e390:	01a401a4 	.word	0x01a401a4
  40e394:	01a401a4 	.word	0x01a401a4
  40e398:	01a401a4 	.word	0x01a401a4
  40e39c:	01a401a4 	.word	0x01a401a4
  40e3a0:	02dc01a4 	.word	0x02dc01a4
  40e3a4:	02dc02dc 	.word	0x02dc02dc
  40e3a8:	02dc02dc 	.word	0x02dc02dc
  40e3ac:	02dc02dc 	.word	0x02dc02dc
  40e3b0:	02dc02dc 	.word	0x02dc02dc
  40e3b4:	01b202dc 	.word	0x01b202dc
  40e3b8:	02dc02dc 	.word	0x02dc02dc
  40e3bc:	02dc02dc 	.word	0x02dc02dc
  40e3c0:	02dc02dc 	.word	0x02dc02dc
  40e3c4:	02dc02dc 	.word	0x02dc02dc
  40e3c8:	02dc02dc 	.word	0x02dc02dc
  40e3cc:	02dc0197 	.word	0x02dc0197
  40e3d0:	02dc02dc 	.word	0x02dc02dc
  40e3d4:	02dc02dc 	.word	0x02dc02dc
  40e3d8:	02dc019b 	.word	0x02dc019b
  40e3dc:	025302dc 	.word	0x025302dc
  40e3e0:	02dc02dc 	.word	0x02dc02dc
  40e3e4:	02dc02dc 	.word	0x02dc02dc
  40e3e8:	02dc02dc 	.word	0x02dc02dc
  40e3ec:	02dc02dc 	.word	0x02dc02dc
  40e3f0:	02dc02dc 	.word	0x02dc02dc
  40e3f4:	021b025a 	.word	0x021b025a
  40e3f8:	02dc02dc 	.word	0x02dc02dc
  40e3fc:	026e02dc 	.word	0x026e02dc
  40e400:	02dc021b 	.word	0x02dc021b
  40e404:	027302dc 	.word	0x027302dc
  40e408:	01f502dc 	.word	0x01f502dc
  40e40c:	02090182 	.word	0x02090182
  40e410:	02dc02d7 	.word	0x02dc02d7
  40e414:	02dc029a 	.word	0x02dc029a
  40e418:	02dc00a7 	.word	0x02dc00a7
  40e41c:	022e02dc 	.word	0x022e02dc
  40e420:	f10a 0a08 	add.w	sl, sl, #8
  40e424:	9b03      	ldr	r3, [sp, #12]
  40e426:	442b      	add	r3, r5
  40e428:	9303      	str	r3, [sp, #12]
  40e42a:	e786      	b.n	40e33a <_vfiprintf_r+0xc2>
  40e42c:	4659      	mov	r1, fp
  40e42e:	9806      	ldr	r0, [sp, #24]
  40e430:	f000 fdac 	bl	40ef8c <__swsetup_r>
  40e434:	bb18      	cbnz	r0, 40e47e <_vfiprintf_r+0x206>
  40e436:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40e43a:	f001 031a 	and.w	r3, r1, #26
  40e43e:	2b0a      	cmp	r3, #10
  40e440:	f47f af4b 	bne.w	40e2da <_vfiprintf_r+0x62>
  40e444:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40e448:	2b00      	cmp	r3, #0
  40e44a:	f6ff af46 	blt.w	40e2da <_vfiprintf_r+0x62>
  40e44e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e452:	07db      	lsls	r3, r3, #31
  40e454:	d405      	bmi.n	40e462 <_vfiprintf_r+0x1ea>
  40e456:	058f      	lsls	r7, r1, #22
  40e458:	d403      	bmi.n	40e462 <_vfiprintf_r+0x1ea>
  40e45a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40e45e:	f002 fa91 	bl	410984 <__retarget_lock_release_recursive>
  40e462:	462b      	mov	r3, r5
  40e464:	4642      	mov	r2, r8
  40e466:	4659      	mov	r1, fp
  40e468:	9806      	ldr	r0, [sp, #24]
  40e46a:	f000 fd4d 	bl	40ef08 <__sbprintf>
  40e46e:	9003      	str	r0, [sp, #12]
  40e470:	9803      	ldr	r0, [sp, #12]
  40e472:	b02d      	add	sp, #180	; 0xb4
  40e474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e478:	f001 feb4 	bl	4101e4 <__sinit>
  40e47c:	e709      	b.n	40e292 <_vfiprintf_r+0x1a>
  40e47e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e482:	07d9      	lsls	r1, r3, #31
  40e484:	d404      	bmi.n	40e490 <_vfiprintf_r+0x218>
  40e486:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40e48a:	059a      	lsls	r2, r3, #22
  40e48c:	f140 84aa 	bpl.w	40ede4 <_vfiprintf_r+0xb6c>
  40e490:	f04f 33ff 	mov.w	r3, #4294967295
  40e494:	9303      	str	r3, [sp, #12]
  40e496:	9803      	ldr	r0, [sp, #12]
  40e498:	b02d      	add	sp, #180	; 0xb4
  40e49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e49e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40e4a2:	f002 fa6d 	bl	410980 <__retarget_lock_acquire_recursive>
  40e4a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40e4aa:	b281      	uxth	r1, r0
  40e4ac:	e6fb      	b.n	40e2a6 <_vfiprintf_r+0x2e>
  40e4ae:	4276      	negs	r6, r6
  40e4b0:	9207      	str	r2, [sp, #28]
  40e4b2:	f043 0304 	orr.w	r3, r3, #4
  40e4b6:	f898 2000 	ldrb.w	r2, [r8]
  40e4ba:	e74f      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e4bc:	9608      	str	r6, [sp, #32]
  40e4be:	069e      	lsls	r6, r3, #26
  40e4c0:	f100 8450 	bmi.w	40ed64 <_vfiprintf_r+0xaec>
  40e4c4:	9907      	ldr	r1, [sp, #28]
  40e4c6:	06dd      	lsls	r5, r3, #27
  40e4c8:	460a      	mov	r2, r1
  40e4ca:	f100 83ef 	bmi.w	40ecac <_vfiprintf_r+0xa34>
  40e4ce:	0658      	lsls	r0, r3, #25
  40e4d0:	f140 83ec 	bpl.w	40ecac <_vfiprintf_r+0xa34>
  40e4d4:	880e      	ldrh	r6, [r1, #0]
  40e4d6:	3104      	adds	r1, #4
  40e4d8:	2700      	movs	r7, #0
  40e4da:	2201      	movs	r2, #1
  40e4dc:	9107      	str	r1, [sp, #28]
  40e4de:	f04f 0100 	mov.w	r1, #0
  40e4e2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e4e6:	2500      	movs	r5, #0
  40e4e8:	1c61      	adds	r1, r4, #1
  40e4ea:	f000 8116 	beq.w	40e71a <_vfiprintf_r+0x4a2>
  40e4ee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40e4f2:	9102      	str	r1, [sp, #8]
  40e4f4:	ea56 0107 	orrs.w	r1, r6, r7
  40e4f8:	f040 8114 	bne.w	40e724 <_vfiprintf_r+0x4ac>
  40e4fc:	2c00      	cmp	r4, #0
  40e4fe:	f040 835c 	bne.w	40ebba <_vfiprintf_r+0x942>
  40e502:	2a00      	cmp	r2, #0
  40e504:	f040 83b7 	bne.w	40ec76 <_vfiprintf_r+0x9fe>
  40e508:	f013 0301 	ands.w	r3, r3, #1
  40e50c:	9305      	str	r3, [sp, #20]
  40e50e:	f000 8457 	beq.w	40edc0 <_vfiprintf_r+0xb48>
  40e512:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40e516:	2330      	movs	r3, #48	; 0x30
  40e518:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40e51c:	9b05      	ldr	r3, [sp, #20]
  40e51e:	42a3      	cmp	r3, r4
  40e520:	bfb8      	it	lt
  40e522:	4623      	movlt	r3, r4
  40e524:	9301      	str	r3, [sp, #4]
  40e526:	b10d      	cbz	r5, 40e52c <_vfiprintf_r+0x2b4>
  40e528:	3301      	adds	r3, #1
  40e52a:	9301      	str	r3, [sp, #4]
  40e52c:	9b02      	ldr	r3, [sp, #8]
  40e52e:	f013 0302 	ands.w	r3, r3, #2
  40e532:	9309      	str	r3, [sp, #36]	; 0x24
  40e534:	d002      	beq.n	40e53c <_vfiprintf_r+0x2c4>
  40e536:	9b01      	ldr	r3, [sp, #4]
  40e538:	3302      	adds	r3, #2
  40e53a:	9301      	str	r3, [sp, #4]
  40e53c:	9b02      	ldr	r3, [sp, #8]
  40e53e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40e542:	930a      	str	r3, [sp, #40]	; 0x28
  40e544:	f040 8217 	bne.w	40e976 <_vfiprintf_r+0x6fe>
  40e548:	9b08      	ldr	r3, [sp, #32]
  40e54a:	9a01      	ldr	r2, [sp, #4]
  40e54c:	1a9d      	subs	r5, r3, r2
  40e54e:	2d00      	cmp	r5, #0
  40e550:	f340 8211 	ble.w	40e976 <_vfiprintf_r+0x6fe>
  40e554:	2d10      	cmp	r5, #16
  40e556:	f340 8490 	ble.w	40ee7a <_vfiprintf_r+0xc02>
  40e55a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e55c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e55e:	4ec4      	ldr	r6, [pc, #784]	; (40e870 <_vfiprintf_r+0x5f8>)
  40e560:	46d6      	mov	lr, sl
  40e562:	2710      	movs	r7, #16
  40e564:	46a2      	mov	sl, r4
  40e566:	4619      	mov	r1, r3
  40e568:	9c06      	ldr	r4, [sp, #24]
  40e56a:	e007      	b.n	40e57c <_vfiprintf_r+0x304>
  40e56c:	f101 0c02 	add.w	ip, r1, #2
  40e570:	f10e 0e08 	add.w	lr, lr, #8
  40e574:	4601      	mov	r1, r0
  40e576:	3d10      	subs	r5, #16
  40e578:	2d10      	cmp	r5, #16
  40e57a:	dd11      	ble.n	40e5a0 <_vfiprintf_r+0x328>
  40e57c:	1c48      	adds	r0, r1, #1
  40e57e:	3210      	adds	r2, #16
  40e580:	2807      	cmp	r0, #7
  40e582:	9211      	str	r2, [sp, #68]	; 0x44
  40e584:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40e588:	9010      	str	r0, [sp, #64]	; 0x40
  40e58a:	ddef      	ble.n	40e56c <_vfiprintf_r+0x2f4>
  40e58c:	2a00      	cmp	r2, #0
  40e58e:	f040 81e4 	bne.w	40e95a <_vfiprintf_r+0x6e2>
  40e592:	3d10      	subs	r5, #16
  40e594:	2d10      	cmp	r5, #16
  40e596:	4611      	mov	r1, r2
  40e598:	f04f 0c01 	mov.w	ip, #1
  40e59c:	46ce      	mov	lr, r9
  40e59e:	dced      	bgt.n	40e57c <_vfiprintf_r+0x304>
  40e5a0:	4654      	mov	r4, sl
  40e5a2:	4661      	mov	r1, ip
  40e5a4:	46f2      	mov	sl, lr
  40e5a6:	442a      	add	r2, r5
  40e5a8:	2907      	cmp	r1, #7
  40e5aa:	9211      	str	r2, [sp, #68]	; 0x44
  40e5ac:	f8ca 6000 	str.w	r6, [sl]
  40e5b0:	f8ca 5004 	str.w	r5, [sl, #4]
  40e5b4:	9110      	str	r1, [sp, #64]	; 0x40
  40e5b6:	f300 82ec 	bgt.w	40eb92 <_vfiprintf_r+0x91a>
  40e5ba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e5be:	f10a 0a08 	add.w	sl, sl, #8
  40e5c2:	1c48      	adds	r0, r1, #1
  40e5c4:	2d00      	cmp	r5, #0
  40e5c6:	f040 81de 	bne.w	40e986 <_vfiprintf_r+0x70e>
  40e5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e5cc:	2b00      	cmp	r3, #0
  40e5ce:	f000 81f8 	beq.w	40e9c2 <_vfiprintf_r+0x74a>
  40e5d2:	3202      	adds	r2, #2
  40e5d4:	a90e      	add	r1, sp, #56	; 0x38
  40e5d6:	2302      	movs	r3, #2
  40e5d8:	2807      	cmp	r0, #7
  40e5da:	9211      	str	r2, [sp, #68]	; 0x44
  40e5dc:	9010      	str	r0, [sp, #64]	; 0x40
  40e5de:	e88a 000a 	stmia.w	sl, {r1, r3}
  40e5e2:	f340 81ea 	ble.w	40e9ba <_vfiprintf_r+0x742>
  40e5e6:	2a00      	cmp	r2, #0
  40e5e8:	f040 838c 	bne.w	40ed04 <_vfiprintf_r+0xa8c>
  40e5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e5ee:	2b80      	cmp	r3, #128	; 0x80
  40e5f0:	f04f 0001 	mov.w	r0, #1
  40e5f4:	4611      	mov	r1, r2
  40e5f6:	46ca      	mov	sl, r9
  40e5f8:	f040 81e7 	bne.w	40e9ca <_vfiprintf_r+0x752>
  40e5fc:	9b08      	ldr	r3, [sp, #32]
  40e5fe:	9d01      	ldr	r5, [sp, #4]
  40e600:	1b5e      	subs	r6, r3, r5
  40e602:	2e00      	cmp	r6, #0
  40e604:	f340 81e1 	ble.w	40e9ca <_vfiprintf_r+0x752>
  40e608:	2e10      	cmp	r6, #16
  40e60a:	4d9a      	ldr	r5, [pc, #616]	; (40e874 <_vfiprintf_r+0x5fc>)
  40e60c:	f340 8450 	ble.w	40eeb0 <_vfiprintf_r+0xc38>
  40e610:	46d4      	mov	ip, sl
  40e612:	2710      	movs	r7, #16
  40e614:	46a2      	mov	sl, r4
  40e616:	9c06      	ldr	r4, [sp, #24]
  40e618:	e007      	b.n	40e62a <_vfiprintf_r+0x3b2>
  40e61a:	f101 0e02 	add.w	lr, r1, #2
  40e61e:	f10c 0c08 	add.w	ip, ip, #8
  40e622:	4601      	mov	r1, r0
  40e624:	3e10      	subs	r6, #16
  40e626:	2e10      	cmp	r6, #16
  40e628:	dd11      	ble.n	40e64e <_vfiprintf_r+0x3d6>
  40e62a:	1c48      	adds	r0, r1, #1
  40e62c:	3210      	adds	r2, #16
  40e62e:	2807      	cmp	r0, #7
  40e630:	9211      	str	r2, [sp, #68]	; 0x44
  40e632:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40e636:	9010      	str	r0, [sp, #64]	; 0x40
  40e638:	ddef      	ble.n	40e61a <_vfiprintf_r+0x3a2>
  40e63a:	2a00      	cmp	r2, #0
  40e63c:	f040 829d 	bne.w	40eb7a <_vfiprintf_r+0x902>
  40e640:	3e10      	subs	r6, #16
  40e642:	2e10      	cmp	r6, #16
  40e644:	f04f 0e01 	mov.w	lr, #1
  40e648:	4611      	mov	r1, r2
  40e64a:	46cc      	mov	ip, r9
  40e64c:	dced      	bgt.n	40e62a <_vfiprintf_r+0x3b2>
  40e64e:	4654      	mov	r4, sl
  40e650:	46e2      	mov	sl, ip
  40e652:	4432      	add	r2, r6
  40e654:	f1be 0f07 	cmp.w	lr, #7
  40e658:	9211      	str	r2, [sp, #68]	; 0x44
  40e65a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40e65e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40e662:	f300 8369 	bgt.w	40ed38 <_vfiprintf_r+0xac0>
  40e666:	f10a 0a08 	add.w	sl, sl, #8
  40e66a:	f10e 0001 	add.w	r0, lr, #1
  40e66e:	4671      	mov	r1, lr
  40e670:	e1ab      	b.n	40e9ca <_vfiprintf_r+0x752>
  40e672:	9608      	str	r6, [sp, #32]
  40e674:	f013 0220 	ands.w	r2, r3, #32
  40e678:	f040 838c 	bne.w	40ed94 <_vfiprintf_r+0xb1c>
  40e67c:	f013 0110 	ands.w	r1, r3, #16
  40e680:	f040 831a 	bne.w	40ecb8 <_vfiprintf_r+0xa40>
  40e684:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40e688:	f000 8316 	beq.w	40ecb8 <_vfiprintf_r+0xa40>
  40e68c:	9807      	ldr	r0, [sp, #28]
  40e68e:	460a      	mov	r2, r1
  40e690:	4601      	mov	r1, r0
  40e692:	3104      	adds	r1, #4
  40e694:	8806      	ldrh	r6, [r0, #0]
  40e696:	9107      	str	r1, [sp, #28]
  40e698:	2700      	movs	r7, #0
  40e69a:	e720      	b.n	40e4de <_vfiprintf_r+0x266>
  40e69c:	9608      	str	r6, [sp, #32]
  40e69e:	f043 0310 	orr.w	r3, r3, #16
  40e6a2:	e7e7      	b.n	40e674 <_vfiprintf_r+0x3fc>
  40e6a4:	9608      	str	r6, [sp, #32]
  40e6a6:	f043 0310 	orr.w	r3, r3, #16
  40e6aa:	e708      	b.n	40e4be <_vfiprintf_r+0x246>
  40e6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e6b0:	f898 2000 	ldrb.w	r2, [r8]
  40e6b4:	e652      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e6b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40e6ba:	2600      	movs	r6, #0
  40e6bc:	f818 2b01 	ldrb.w	r2, [r8], #1
  40e6c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40e6c4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40e6c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40e6cc:	2909      	cmp	r1, #9
  40e6ce:	d9f5      	bls.n	40e6bc <_vfiprintf_r+0x444>
  40e6d0:	e646      	b.n	40e360 <_vfiprintf_r+0xe8>
  40e6d2:	9608      	str	r6, [sp, #32]
  40e6d4:	2800      	cmp	r0, #0
  40e6d6:	f040 8408 	bne.w	40eeea <_vfiprintf_r+0xc72>
  40e6da:	f043 0310 	orr.w	r3, r3, #16
  40e6de:	069e      	lsls	r6, r3, #26
  40e6e0:	f100 834c 	bmi.w	40ed7c <_vfiprintf_r+0xb04>
  40e6e4:	06dd      	lsls	r5, r3, #27
  40e6e6:	f100 82f3 	bmi.w	40ecd0 <_vfiprintf_r+0xa58>
  40e6ea:	0658      	lsls	r0, r3, #25
  40e6ec:	f140 82f0 	bpl.w	40ecd0 <_vfiprintf_r+0xa58>
  40e6f0:	9d07      	ldr	r5, [sp, #28]
  40e6f2:	f9b5 6000 	ldrsh.w	r6, [r5]
  40e6f6:	462a      	mov	r2, r5
  40e6f8:	17f7      	asrs	r7, r6, #31
  40e6fa:	3204      	adds	r2, #4
  40e6fc:	4630      	mov	r0, r6
  40e6fe:	4639      	mov	r1, r7
  40e700:	9207      	str	r2, [sp, #28]
  40e702:	2800      	cmp	r0, #0
  40e704:	f171 0200 	sbcs.w	r2, r1, #0
  40e708:	f2c0 835d 	blt.w	40edc6 <_vfiprintf_r+0xb4e>
  40e70c:	1c61      	adds	r1, r4, #1
  40e70e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e712:	f04f 0201 	mov.w	r2, #1
  40e716:	f47f aeea 	bne.w	40e4ee <_vfiprintf_r+0x276>
  40e71a:	ea56 0107 	orrs.w	r1, r6, r7
  40e71e:	f000 824d 	beq.w	40ebbc <_vfiprintf_r+0x944>
  40e722:	9302      	str	r3, [sp, #8]
  40e724:	2a01      	cmp	r2, #1
  40e726:	f000 828c 	beq.w	40ec42 <_vfiprintf_r+0x9ca>
  40e72a:	2a02      	cmp	r2, #2
  40e72c:	f040 825c 	bne.w	40ebe8 <_vfiprintf_r+0x970>
  40e730:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e732:	46cb      	mov	fp, r9
  40e734:	0933      	lsrs	r3, r6, #4
  40e736:	f006 010f 	and.w	r1, r6, #15
  40e73a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40e73e:	093a      	lsrs	r2, r7, #4
  40e740:	461e      	mov	r6, r3
  40e742:	4617      	mov	r7, r2
  40e744:	5c43      	ldrb	r3, [r0, r1]
  40e746:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40e74a:	ea56 0307 	orrs.w	r3, r6, r7
  40e74e:	d1f1      	bne.n	40e734 <_vfiprintf_r+0x4bc>
  40e750:	eba9 030b 	sub.w	r3, r9, fp
  40e754:	9305      	str	r3, [sp, #20]
  40e756:	e6e1      	b.n	40e51c <_vfiprintf_r+0x2a4>
  40e758:	2800      	cmp	r0, #0
  40e75a:	f040 83c0 	bne.w	40eede <_vfiprintf_r+0xc66>
  40e75e:	0699      	lsls	r1, r3, #26
  40e760:	f100 8367 	bmi.w	40ee32 <_vfiprintf_r+0xbba>
  40e764:	06da      	lsls	r2, r3, #27
  40e766:	f100 80f1 	bmi.w	40e94c <_vfiprintf_r+0x6d4>
  40e76a:	065b      	lsls	r3, r3, #25
  40e76c:	f140 80ee 	bpl.w	40e94c <_vfiprintf_r+0x6d4>
  40e770:	9a07      	ldr	r2, [sp, #28]
  40e772:	6813      	ldr	r3, [r2, #0]
  40e774:	3204      	adds	r2, #4
  40e776:	9207      	str	r2, [sp, #28]
  40e778:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40e77c:	801a      	strh	r2, [r3, #0]
  40e77e:	e5b8      	b.n	40e2f2 <_vfiprintf_r+0x7a>
  40e780:	9807      	ldr	r0, [sp, #28]
  40e782:	4a3d      	ldr	r2, [pc, #244]	; (40e878 <_vfiprintf_r+0x600>)
  40e784:	9608      	str	r6, [sp, #32]
  40e786:	920b      	str	r2, [sp, #44]	; 0x2c
  40e788:	6806      	ldr	r6, [r0, #0]
  40e78a:	2278      	movs	r2, #120	; 0x78
  40e78c:	2130      	movs	r1, #48	; 0x30
  40e78e:	3004      	adds	r0, #4
  40e790:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40e794:	f043 0302 	orr.w	r3, r3, #2
  40e798:	9007      	str	r0, [sp, #28]
  40e79a:	2700      	movs	r7, #0
  40e79c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40e7a0:	2202      	movs	r2, #2
  40e7a2:	e69c      	b.n	40e4de <_vfiprintf_r+0x266>
  40e7a4:	9608      	str	r6, [sp, #32]
  40e7a6:	2800      	cmp	r0, #0
  40e7a8:	d099      	beq.n	40e6de <_vfiprintf_r+0x466>
  40e7aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40e7ae:	e796      	b.n	40e6de <_vfiprintf_r+0x466>
  40e7b0:	f898 2000 	ldrb.w	r2, [r8]
  40e7b4:	2d00      	cmp	r5, #0
  40e7b6:	f47f add1 	bne.w	40e35c <_vfiprintf_r+0xe4>
  40e7ba:	2001      	movs	r0, #1
  40e7bc:	2520      	movs	r5, #32
  40e7be:	e5cd      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e7c0:	f043 0301 	orr.w	r3, r3, #1
  40e7c4:	f898 2000 	ldrb.w	r2, [r8]
  40e7c8:	e5c8      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e7ca:	9608      	str	r6, [sp, #32]
  40e7cc:	2800      	cmp	r0, #0
  40e7ce:	f040 8393 	bne.w	40eef8 <_vfiprintf_r+0xc80>
  40e7d2:	4929      	ldr	r1, [pc, #164]	; (40e878 <_vfiprintf_r+0x600>)
  40e7d4:	910b      	str	r1, [sp, #44]	; 0x2c
  40e7d6:	069f      	lsls	r7, r3, #26
  40e7d8:	f100 82e8 	bmi.w	40edac <_vfiprintf_r+0xb34>
  40e7dc:	9807      	ldr	r0, [sp, #28]
  40e7de:	06de      	lsls	r6, r3, #27
  40e7e0:	4601      	mov	r1, r0
  40e7e2:	f100 8270 	bmi.w	40ecc6 <_vfiprintf_r+0xa4e>
  40e7e6:	065d      	lsls	r5, r3, #25
  40e7e8:	f140 826d 	bpl.w	40ecc6 <_vfiprintf_r+0xa4e>
  40e7ec:	3104      	adds	r1, #4
  40e7ee:	8806      	ldrh	r6, [r0, #0]
  40e7f0:	9107      	str	r1, [sp, #28]
  40e7f2:	2700      	movs	r7, #0
  40e7f4:	07d8      	lsls	r0, r3, #31
  40e7f6:	f140 8222 	bpl.w	40ec3e <_vfiprintf_r+0x9c6>
  40e7fa:	ea56 0107 	orrs.w	r1, r6, r7
  40e7fe:	f000 821e 	beq.w	40ec3e <_vfiprintf_r+0x9c6>
  40e802:	2130      	movs	r1, #48	; 0x30
  40e804:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40e808:	f043 0302 	orr.w	r3, r3, #2
  40e80c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40e810:	2202      	movs	r2, #2
  40e812:	e664      	b.n	40e4de <_vfiprintf_r+0x266>
  40e814:	9608      	str	r6, [sp, #32]
  40e816:	2800      	cmp	r0, #0
  40e818:	f040 836b 	bne.w	40eef2 <_vfiprintf_r+0xc7a>
  40e81c:	4917      	ldr	r1, [pc, #92]	; (40e87c <_vfiprintf_r+0x604>)
  40e81e:	910b      	str	r1, [sp, #44]	; 0x2c
  40e820:	e7d9      	b.n	40e7d6 <_vfiprintf_r+0x55e>
  40e822:	9907      	ldr	r1, [sp, #28]
  40e824:	9608      	str	r6, [sp, #32]
  40e826:	680a      	ldr	r2, [r1, #0]
  40e828:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40e82c:	f04f 0000 	mov.w	r0, #0
  40e830:	460a      	mov	r2, r1
  40e832:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40e836:	3204      	adds	r2, #4
  40e838:	2001      	movs	r0, #1
  40e83a:	9001      	str	r0, [sp, #4]
  40e83c:	9207      	str	r2, [sp, #28]
  40e83e:	9005      	str	r0, [sp, #20]
  40e840:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40e844:	9302      	str	r3, [sp, #8]
  40e846:	2400      	movs	r4, #0
  40e848:	e670      	b.n	40e52c <_vfiprintf_r+0x2b4>
  40e84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e84e:	f898 2000 	ldrb.w	r2, [r8]
  40e852:	e583      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e854:	f898 2000 	ldrb.w	r2, [r8]
  40e858:	2a6c      	cmp	r2, #108	; 0x6c
  40e85a:	bf03      	ittte	eq
  40e85c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40e860:	f043 0320 	orreq.w	r3, r3, #32
  40e864:	f108 0801 	addeq.w	r8, r8, #1
  40e868:	f043 0310 	orrne.w	r3, r3, #16
  40e86c:	e576      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e86e:	bf00      	nop
  40e870:	004141e8 	.word	0x004141e8
  40e874:	004141f8 	.word	0x004141f8
  40e878:	004141a8 	.word	0x004141a8
  40e87c:	00414194 	.word	0x00414194
  40e880:	9907      	ldr	r1, [sp, #28]
  40e882:	680e      	ldr	r6, [r1, #0]
  40e884:	460a      	mov	r2, r1
  40e886:	2e00      	cmp	r6, #0
  40e888:	f102 0204 	add.w	r2, r2, #4
  40e88c:	f6ff ae0f 	blt.w	40e4ae <_vfiprintf_r+0x236>
  40e890:	9207      	str	r2, [sp, #28]
  40e892:	f898 2000 	ldrb.w	r2, [r8]
  40e896:	e561      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e898:	f898 2000 	ldrb.w	r2, [r8]
  40e89c:	2001      	movs	r0, #1
  40e89e:	252b      	movs	r5, #43	; 0x2b
  40e8a0:	e55c      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e8a2:	9907      	ldr	r1, [sp, #28]
  40e8a4:	9608      	str	r6, [sp, #32]
  40e8a6:	f8d1 b000 	ldr.w	fp, [r1]
  40e8aa:	f04f 0200 	mov.w	r2, #0
  40e8ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e8b2:	1d0e      	adds	r6, r1, #4
  40e8b4:	f1bb 0f00 	cmp.w	fp, #0
  40e8b8:	f000 82e5 	beq.w	40ee86 <_vfiprintf_r+0xc0e>
  40e8bc:	1c67      	adds	r7, r4, #1
  40e8be:	f000 82c4 	beq.w	40ee4a <_vfiprintf_r+0xbd2>
  40e8c2:	4622      	mov	r2, r4
  40e8c4:	2100      	movs	r1, #0
  40e8c6:	4658      	mov	r0, fp
  40e8c8:	9301      	str	r3, [sp, #4]
  40e8ca:	f002 fba9 	bl	411020 <memchr>
  40e8ce:	9b01      	ldr	r3, [sp, #4]
  40e8d0:	2800      	cmp	r0, #0
  40e8d2:	f000 82e5 	beq.w	40eea0 <_vfiprintf_r+0xc28>
  40e8d6:	eba0 020b 	sub.w	r2, r0, fp
  40e8da:	9205      	str	r2, [sp, #20]
  40e8dc:	9607      	str	r6, [sp, #28]
  40e8de:	9302      	str	r3, [sp, #8]
  40e8e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e8e4:	2400      	movs	r4, #0
  40e8e6:	e619      	b.n	40e51c <_vfiprintf_r+0x2a4>
  40e8e8:	f898 2000 	ldrb.w	r2, [r8]
  40e8ec:	2a2a      	cmp	r2, #42	; 0x2a
  40e8ee:	f108 0701 	add.w	r7, r8, #1
  40e8f2:	f000 82e9 	beq.w	40eec8 <_vfiprintf_r+0xc50>
  40e8f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40e8fa:	2909      	cmp	r1, #9
  40e8fc:	46b8      	mov	r8, r7
  40e8fe:	f04f 0400 	mov.w	r4, #0
  40e902:	f63f ad2d 	bhi.w	40e360 <_vfiprintf_r+0xe8>
  40e906:	f818 2b01 	ldrb.w	r2, [r8], #1
  40e90a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40e90e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40e912:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40e916:	2909      	cmp	r1, #9
  40e918:	d9f5      	bls.n	40e906 <_vfiprintf_r+0x68e>
  40e91a:	e521      	b.n	40e360 <_vfiprintf_r+0xe8>
  40e91c:	f043 0320 	orr.w	r3, r3, #32
  40e920:	f898 2000 	ldrb.w	r2, [r8]
  40e924:	e51a      	b.n	40e35c <_vfiprintf_r+0xe4>
  40e926:	9608      	str	r6, [sp, #32]
  40e928:	2800      	cmp	r0, #0
  40e92a:	f040 82db 	bne.w	40eee4 <_vfiprintf_r+0xc6c>
  40e92e:	2a00      	cmp	r2, #0
  40e930:	f000 80e7 	beq.w	40eb02 <_vfiprintf_r+0x88a>
  40e934:	2101      	movs	r1, #1
  40e936:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40e93a:	f04f 0200 	mov.w	r2, #0
  40e93e:	9101      	str	r1, [sp, #4]
  40e940:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e944:	9105      	str	r1, [sp, #20]
  40e946:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40e94a:	e77b      	b.n	40e844 <_vfiprintf_r+0x5cc>
  40e94c:	9a07      	ldr	r2, [sp, #28]
  40e94e:	6813      	ldr	r3, [r2, #0]
  40e950:	3204      	adds	r2, #4
  40e952:	9207      	str	r2, [sp, #28]
  40e954:	9a03      	ldr	r2, [sp, #12]
  40e956:	601a      	str	r2, [r3, #0]
  40e958:	e4cb      	b.n	40e2f2 <_vfiprintf_r+0x7a>
  40e95a:	aa0f      	add	r2, sp, #60	; 0x3c
  40e95c:	9904      	ldr	r1, [sp, #16]
  40e95e:	4620      	mov	r0, r4
  40e960:	f7ff fc4a 	bl	40e1f8 <__sprint_r.part.0>
  40e964:	2800      	cmp	r0, #0
  40e966:	f040 8139 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40e96a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e96c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e96e:	f101 0c01 	add.w	ip, r1, #1
  40e972:	46ce      	mov	lr, r9
  40e974:	e5ff      	b.n	40e576 <_vfiprintf_r+0x2fe>
  40e976:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e978:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e97a:	1c48      	adds	r0, r1, #1
  40e97c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e980:	2d00      	cmp	r5, #0
  40e982:	f43f ae22 	beq.w	40e5ca <_vfiprintf_r+0x352>
  40e986:	3201      	adds	r2, #1
  40e988:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40e98c:	2101      	movs	r1, #1
  40e98e:	2807      	cmp	r0, #7
  40e990:	9211      	str	r2, [sp, #68]	; 0x44
  40e992:	9010      	str	r0, [sp, #64]	; 0x40
  40e994:	f8ca 5000 	str.w	r5, [sl]
  40e998:	f8ca 1004 	str.w	r1, [sl, #4]
  40e99c:	f340 8108 	ble.w	40ebb0 <_vfiprintf_r+0x938>
  40e9a0:	2a00      	cmp	r2, #0
  40e9a2:	f040 81bc 	bne.w	40ed1e <_vfiprintf_r+0xaa6>
  40e9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e9a8:	2b00      	cmp	r3, #0
  40e9aa:	f43f ae1f 	beq.w	40e5ec <_vfiprintf_r+0x374>
  40e9ae:	ab0e      	add	r3, sp, #56	; 0x38
  40e9b0:	2202      	movs	r2, #2
  40e9b2:	4608      	mov	r0, r1
  40e9b4:	931c      	str	r3, [sp, #112]	; 0x70
  40e9b6:	921d      	str	r2, [sp, #116]	; 0x74
  40e9b8:	46ca      	mov	sl, r9
  40e9ba:	4601      	mov	r1, r0
  40e9bc:	f10a 0a08 	add.w	sl, sl, #8
  40e9c0:	3001      	adds	r0, #1
  40e9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e9c4:	2b80      	cmp	r3, #128	; 0x80
  40e9c6:	f43f ae19 	beq.w	40e5fc <_vfiprintf_r+0x384>
  40e9ca:	9b05      	ldr	r3, [sp, #20]
  40e9cc:	1ae4      	subs	r4, r4, r3
  40e9ce:	2c00      	cmp	r4, #0
  40e9d0:	dd2e      	ble.n	40ea30 <_vfiprintf_r+0x7b8>
  40e9d2:	2c10      	cmp	r4, #16
  40e9d4:	4db3      	ldr	r5, [pc, #716]	; (40eca4 <_vfiprintf_r+0xa2c>)
  40e9d6:	dd1e      	ble.n	40ea16 <_vfiprintf_r+0x79e>
  40e9d8:	46d6      	mov	lr, sl
  40e9da:	2610      	movs	r6, #16
  40e9dc:	9f06      	ldr	r7, [sp, #24]
  40e9de:	f8dd a010 	ldr.w	sl, [sp, #16]
  40e9e2:	e006      	b.n	40e9f2 <_vfiprintf_r+0x77a>
  40e9e4:	1c88      	adds	r0, r1, #2
  40e9e6:	f10e 0e08 	add.w	lr, lr, #8
  40e9ea:	4619      	mov	r1, r3
  40e9ec:	3c10      	subs	r4, #16
  40e9ee:	2c10      	cmp	r4, #16
  40e9f0:	dd10      	ble.n	40ea14 <_vfiprintf_r+0x79c>
  40e9f2:	1c4b      	adds	r3, r1, #1
  40e9f4:	3210      	adds	r2, #16
  40e9f6:	2b07      	cmp	r3, #7
  40e9f8:	9211      	str	r2, [sp, #68]	; 0x44
  40e9fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  40e9fe:	9310      	str	r3, [sp, #64]	; 0x40
  40ea00:	ddf0      	ble.n	40e9e4 <_vfiprintf_r+0x76c>
  40ea02:	2a00      	cmp	r2, #0
  40ea04:	d165      	bne.n	40ead2 <_vfiprintf_r+0x85a>
  40ea06:	3c10      	subs	r4, #16
  40ea08:	2c10      	cmp	r4, #16
  40ea0a:	f04f 0001 	mov.w	r0, #1
  40ea0e:	4611      	mov	r1, r2
  40ea10:	46ce      	mov	lr, r9
  40ea12:	dcee      	bgt.n	40e9f2 <_vfiprintf_r+0x77a>
  40ea14:	46f2      	mov	sl, lr
  40ea16:	4422      	add	r2, r4
  40ea18:	2807      	cmp	r0, #7
  40ea1a:	9211      	str	r2, [sp, #68]	; 0x44
  40ea1c:	f8ca 5000 	str.w	r5, [sl]
  40ea20:	f8ca 4004 	str.w	r4, [sl, #4]
  40ea24:	9010      	str	r0, [sp, #64]	; 0x40
  40ea26:	f300 8085 	bgt.w	40eb34 <_vfiprintf_r+0x8bc>
  40ea2a:	f10a 0a08 	add.w	sl, sl, #8
  40ea2e:	3001      	adds	r0, #1
  40ea30:	9905      	ldr	r1, [sp, #20]
  40ea32:	f8ca b000 	str.w	fp, [sl]
  40ea36:	440a      	add	r2, r1
  40ea38:	2807      	cmp	r0, #7
  40ea3a:	9211      	str	r2, [sp, #68]	; 0x44
  40ea3c:	f8ca 1004 	str.w	r1, [sl, #4]
  40ea40:	9010      	str	r0, [sp, #64]	; 0x40
  40ea42:	f340 8082 	ble.w	40eb4a <_vfiprintf_r+0x8d2>
  40ea46:	2a00      	cmp	r2, #0
  40ea48:	f040 8118 	bne.w	40ec7c <_vfiprintf_r+0xa04>
  40ea4c:	9b02      	ldr	r3, [sp, #8]
  40ea4e:	9210      	str	r2, [sp, #64]	; 0x40
  40ea50:	0758      	lsls	r0, r3, #29
  40ea52:	d535      	bpl.n	40eac0 <_vfiprintf_r+0x848>
  40ea54:	9b08      	ldr	r3, [sp, #32]
  40ea56:	9901      	ldr	r1, [sp, #4]
  40ea58:	1a5c      	subs	r4, r3, r1
  40ea5a:	2c00      	cmp	r4, #0
  40ea5c:	f340 80e7 	ble.w	40ec2e <_vfiprintf_r+0x9b6>
  40ea60:	46ca      	mov	sl, r9
  40ea62:	2c10      	cmp	r4, #16
  40ea64:	f340 8218 	ble.w	40ee98 <_vfiprintf_r+0xc20>
  40ea68:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ea6a:	4e8f      	ldr	r6, [pc, #572]	; (40eca8 <_vfiprintf_r+0xa30>)
  40ea6c:	9f06      	ldr	r7, [sp, #24]
  40ea6e:	f8dd b010 	ldr.w	fp, [sp, #16]
  40ea72:	2510      	movs	r5, #16
  40ea74:	e006      	b.n	40ea84 <_vfiprintf_r+0x80c>
  40ea76:	1c88      	adds	r0, r1, #2
  40ea78:	f10a 0a08 	add.w	sl, sl, #8
  40ea7c:	4619      	mov	r1, r3
  40ea7e:	3c10      	subs	r4, #16
  40ea80:	2c10      	cmp	r4, #16
  40ea82:	dd11      	ble.n	40eaa8 <_vfiprintf_r+0x830>
  40ea84:	1c4b      	adds	r3, r1, #1
  40ea86:	3210      	adds	r2, #16
  40ea88:	2b07      	cmp	r3, #7
  40ea8a:	9211      	str	r2, [sp, #68]	; 0x44
  40ea8c:	f8ca 6000 	str.w	r6, [sl]
  40ea90:	f8ca 5004 	str.w	r5, [sl, #4]
  40ea94:	9310      	str	r3, [sp, #64]	; 0x40
  40ea96:	ddee      	ble.n	40ea76 <_vfiprintf_r+0x7fe>
  40ea98:	bb42      	cbnz	r2, 40eaec <_vfiprintf_r+0x874>
  40ea9a:	3c10      	subs	r4, #16
  40ea9c:	2c10      	cmp	r4, #16
  40ea9e:	f04f 0001 	mov.w	r0, #1
  40eaa2:	4611      	mov	r1, r2
  40eaa4:	46ca      	mov	sl, r9
  40eaa6:	dced      	bgt.n	40ea84 <_vfiprintf_r+0x80c>
  40eaa8:	4422      	add	r2, r4
  40eaaa:	2807      	cmp	r0, #7
  40eaac:	9211      	str	r2, [sp, #68]	; 0x44
  40eaae:	f8ca 6000 	str.w	r6, [sl]
  40eab2:	f8ca 4004 	str.w	r4, [sl, #4]
  40eab6:	9010      	str	r0, [sp, #64]	; 0x40
  40eab8:	dd51      	ble.n	40eb5e <_vfiprintf_r+0x8e6>
  40eaba:	2a00      	cmp	r2, #0
  40eabc:	f040 819b 	bne.w	40edf6 <_vfiprintf_r+0xb7e>
  40eac0:	9b03      	ldr	r3, [sp, #12]
  40eac2:	9a08      	ldr	r2, [sp, #32]
  40eac4:	9901      	ldr	r1, [sp, #4]
  40eac6:	428a      	cmp	r2, r1
  40eac8:	bfac      	ite	ge
  40eaca:	189b      	addge	r3, r3, r2
  40eacc:	185b      	addlt	r3, r3, r1
  40eace:	9303      	str	r3, [sp, #12]
  40ead0:	e04e      	b.n	40eb70 <_vfiprintf_r+0x8f8>
  40ead2:	aa0f      	add	r2, sp, #60	; 0x3c
  40ead4:	4651      	mov	r1, sl
  40ead6:	4638      	mov	r0, r7
  40ead8:	f7ff fb8e 	bl	40e1f8 <__sprint_r.part.0>
  40eadc:	2800      	cmp	r0, #0
  40eade:	f040 813f 	bne.w	40ed60 <_vfiprintf_r+0xae8>
  40eae2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40eae4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40eae6:	1c48      	adds	r0, r1, #1
  40eae8:	46ce      	mov	lr, r9
  40eaea:	e77f      	b.n	40e9ec <_vfiprintf_r+0x774>
  40eaec:	aa0f      	add	r2, sp, #60	; 0x3c
  40eaee:	4659      	mov	r1, fp
  40eaf0:	4638      	mov	r0, r7
  40eaf2:	f7ff fb81 	bl	40e1f8 <__sprint_r.part.0>
  40eaf6:	b960      	cbnz	r0, 40eb12 <_vfiprintf_r+0x89a>
  40eaf8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40eafa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40eafc:	1c48      	adds	r0, r1, #1
  40eafe:	46ca      	mov	sl, r9
  40eb00:	e7bd      	b.n	40ea7e <_vfiprintf_r+0x806>
  40eb02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40eb04:	f8dd b010 	ldr.w	fp, [sp, #16]
  40eb08:	2b00      	cmp	r3, #0
  40eb0a:	f040 81d4 	bne.w	40eeb6 <_vfiprintf_r+0xc3e>
  40eb0e:	2300      	movs	r3, #0
  40eb10:	9310      	str	r3, [sp, #64]	; 0x40
  40eb12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40eb16:	f013 0f01 	tst.w	r3, #1
  40eb1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40eb1e:	d102      	bne.n	40eb26 <_vfiprintf_r+0x8ae>
  40eb20:	059a      	lsls	r2, r3, #22
  40eb22:	f140 80de 	bpl.w	40ece2 <_vfiprintf_r+0xa6a>
  40eb26:	065b      	lsls	r3, r3, #25
  40eb28:	f53f acb2 	bmi.w	40e490 <_vfiprintf_r+0x218>
  40eb2c:	9803      	ldr	r0, [sp, #12]
  40eb2e:	b02d      	add	sp, #180	; 0xb4
  40eb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb34:	2a00      	cmp	r2, #0
  40eb36:	f040 8106 	bne.w	40ed46 <_vfiprintf_r+0xace>
  40eb3a:	9a05      	ldr	r2, [sp, #20]
  40eb3c:	921d      	str	r2, [sp, #116]	; 0x74
  40eb3e:	2301      	movs	r3, #1
  40eb40:	9211      	str	r2, [sp, #68]	; 0x44
  40eb42:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40eb46:	9310      	str	r3, [sp, #64]	; 0x40
  40eb48:	46ca      	mov	sl, r9
  40eb4a:	f10a 0a08 	add.w	sl, sl, #8
  40eb4e:	9b02      	ldr	r3, [sp, #8]
  40eb50:	0759      	lsls	r1, r3, #29
  40eb52:	d504      	bpl.n	40eb5e <_vfiprintf_r+0x8e6>
  40eb54:	9b08      	ldr	r3, [sp, #32]
  40eb56:	9901      	ldr	r1, [sp, #4]
  40eb58:	1a5c      	subs	r4, r3, r1
  40eb5a:	2c00      	cmp	r4, #0
  40eb5c:	dc81      	bgt.n	40ea62 <_vfiprintf_r+0x7ea>
  40eb5e:	9b03      	ldr	r3, [sp, #12]
  40eb60:	9908      	ldr	r1, [sp, #32]
  40eb62:	9801      	ldr	r0, [sp, #4]
  40eb64:	4281      	cmp	r1, r0
  40eb66:	bfac      	ite	ge
  40eb68:	185b      	addge	r3, r3, r1
  40eb6a:	181b      	addlt	r3, r3, r0
  40eb6c:	9303      	str	r3, [sp, #12]
  40eb6e:	bb72      	cbnz	r2, 40ebce <_vfiprintf_r+0x956>
  40eb70:	2300      	movs	r3, #0
  40eb72:	9310      	str	r3, [sp, #64]	; 0x40
  40eb74:	46ca      	mov	sl, r9
  40eb76:	f7ff bbbc 	b.w	40e2f2 <_vfiprintf_r+0x7a>
  40eb7a:	aa0f      	add	r2, sp, #60	; 0x3c
  40eb7c:	9904      	ldr	r1, [sp, #16]
  40eb7e:	4620      	mov	r0, r4
  40eb80:	f7ff fb3a 	bl	40e1f8 <__sprint_r.part.0>
  40eb84:	bb50      	cbnz	r0, 40ebdc <_vfiprintf_r+0x964>
  40eb86:	9910      	ldr	r1, [sp, #64]	; 0x40
  40eb88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40eb8a:	f101 0e01 	add.w	lr, r1, #1
  40eb8e:	46cc      	mov	ip, r9
  40eb90:	e548      	b.n	40e624 <_vfiprintf_r+0x3ac>
  40eb92:	2a00      	cmp	r2, #0
  40eb94:	f040 8140 	bne.w	40ee18 <_vfiprintf_r+0xba0>
  40eb98:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40eb9c:	2900      	cmp	r1, #0
  40eb9e:	f000 811b 	beq.w	40edd8 <_vfiprintf_r+0xb60>
  40eba2:	2201      	movs	r2, #1
  40eba4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40eba8:	4610      	mov	r0, r2
  40ebaa:	921d      	str	r2, [sp, #116]	; 0x74
  40ebac:	911c      	str	r1, [sp, #112]	; 0x70
  40ebae:	46ca      	mov	sl, r9
  40ebb0:	4601      	mov	r1, r0
  40ebb2:	f10a 0a08 	add.w	sl, sl, #8
  40ebb6:	3001      	adds	r0, #1
  40ebb8:	e507      	b.n	40e5ca <_vfiprintf_r+0x352>
  40ebba:	9b02      	ldr	r3, [sp, #8]
  40ebbc:	2a01      	cmp	r2, #1
  40ebbe:	f000 8098 	beq.w	40ecf2 <_vfiprintf_r+0xa7a>
  40ebc2:	2a02      	cmp	r2, #2
  40ebc4:	d10d      	bne.n	40ebe2 <_vfiprintf_r+0x96a>
  40ebc6:	9302      	str	r3, [sp, #8]
  40ebc8:	2600      	movs	r6, #0
  40ebca:	2700      	movs	r7, #0
  40ebcc:	e5b0      	b.n	40e730 <_vfiprintf_r+0x4b8>
  40ebce:	aa0f      	add	r2, sp, #60	; 0x3c
  40ebd0:	9904      	ldr	r1, [sp, #16]
  40ebd2:	9806      	ldr	r0, [sp, #24]
  40ebd4:	f7ff fb10 	bl	40e1f8 <__sprint_r.part.0>
  40ebd8:	2800      	cmp	r0, #0
  40ebda:	d0c9      	beq.n	40eb70 <_vfiprintf_r+0x8f8>
  40ebdc:	f8dd b010 	ldr.w	fp, [sp, #16]
  40ebe0:	e797      	b.n	40eb12 <_vfiprintf_r+0x89a>
  40ebe2:	9302      	str	r3, [sp, #8]
  40ebe4:	2600      	movs	r6, #0
  40ebe6:	2700      	movs	r7, #0
  40ebe8:	4649      	mov	r1, r9
  40ebea:	e000      	b.n	40ebee <_vfiprintf_r+0x976>
  40ebec:	4659      	mov	r1, fp
  40ebee:	08f2      	lsrs	r2, r6, #3
  40ebf0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40ebf4:	08f8      	lsrs	r0, r7, #3
  40ebf6:	f006 0307 	and.w	r3, r6, #7
  40ebfa:	4607      	mov	r7, r0
  40ebfc:	4616      	mov	r6, r2
  40ebfe:	3330      	adds	r3, #48	; 0x30
  40ec00:	ea56 0207 	orrs.w	r2, r6, r7
  40ec04:	f801 3c01 	strb.w	r3, [r1, #-1]
  40ec08:	f101 3bff 	add.w	fp, r1, #4294967295
  40ec0c:	d1ee      	bne.n	40ebec <_vfiprintf_r+0x974>
  40ec0e:	9a02      	ldr	r2, [sp, #8]
  40ec10:	07d6      	lsls	r6, r2, #31
  40ec12:	f57f ad9d 	bpl.w	40e750 <_vfiprintf_r+0x4d8>
  40ec16:	2b30      	cmp	r3, #48	; 0x30
  40ec18:	f43f ad9a 	beq.w	40e750 <_vfiprintf_r+0x4d8>
  40ec1c:	3902      	subs	r1, #2
  40ec1e:	2330      	movs	r3, #48	; 0x30
  40ec20:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40ec24:	eba9 0301 	sub.w	r3, r9, r1
  40ec28:	9305      	str	r3, [sp, #20]
  40ec2a:	468b      	mov	fp, r1
  40ec2c:	e476      	b.n	40e51c <_vfiprintf_r+0x2a4>
  40ec2e:	9b03      	ldr	r3, [sp, #12]
  40ec30:	9a08      	ldr	r2, [sp, #32]
  40ec32:	428a      	cmp	r2, r1
  40ec34:	bfac      	ite	ge
  40ec36:	189b      	addge	r3, r3, r2
  40ec38:	185b      	addlt	r3, r3, r1
  40ec3a:	9303      	str	r3, [sp, #12]
  40ec3c:	e798      	b.n	40eb70 <_vfiprintf_r+0x8f8>
  40ec3e:	2202      	movs	r2, #2
  40ec40:	e44d      	b.n	40e4de <_vfiprintf_r+0x266>
  40ec42:	2f00      	cmp	r7, #0
  40ec44:	bf08      	it	eq
  40ec46:	2e0a      	cmpeq	r6, #10
  40ec48:	d352      	bcc.n	40ecf0 <_vfiprintf_r+0xa78>
  40ec4a:	46cb      	mov	fp, r9
  40ec4c:	4630      	mov	r0, r6
  40ec4e:	4639      	mov	r1, r7
  40ec50:	220a      	movs	r2, #10
  40ec52:	2300      	movs	r3, #0
  40ec54:	f003 fe42 	bl	4128dc <__aeabi_uldivmod>
  40ec58:	3230      	adds	r2, #48	; 0x30
  40ec5a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40ec5e:	4630      	mov	r0, r6
  40ec60:	4639      	mov	r1, r7
  40ec62:	2300      	movs	r3, #0
  40ec64:	220a      	movs	r2, #10
  40ec66:	f003 fe39 	bl	4128dc <__aeabi_uldivmod>
  40ec6a:	4606      	mov	r6, r0
  40ec6c:	460f      	mov	r7, r1
  40ec6e:	ea56 0307 	orrs.w	r3, r6, r7
  40ec72:	d1eb      	bne.n	40ec4c <_vfiprintf_r+0x9d4>
  40ec74:	e56c      	b.n	40e750 <_vfiprintf_r+0x4d8>
  40ec76:	9405      	str	r4, [sp, #20]
  40ec78:	46cb      	mov	fp, r9
  40ec7a:	e44f      	b.n	40e51c <_vfiprintf_r+0x2a4>
  40ec7c:	aa0f      	add	r2, sp, #60	; 0x3c
  40ec7e:	9904      	ldr	r1, [sp, #16]
  40ec80:	9806      	ldr	r0, [sp, #24]
  40ec82:	f7ff fab9 	bl	40e1f8 <__sprint_r.part.0>
  40ec86:	2800      	cmp	r0, #0
  40ec88:	d1a8      	bne.n	40ebdc <_vfiprintf_r+0x964>
  40ec8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ec8c:	46ca      	mov	sl, r9
  40ec8e:	e75e      	b.n	40eb4e <_vfiprintf_r+0x8d6>
  40ec90:	aa0f      	add	r2, sp, #60	; 0x3c
  40ec92:	9904      	ldr	r1, [sp, #16]
  40ec94:	9806      	ldr	r0, [sp, #24]
  40ec96:	f7ff faaf 	bl	40e1f8 <__sprint_r.part.0>
  40ec9a:	2800      	cmp	r0, #0
  40ec9c:	d19e      	bne.n	40ebdc <_vfiprintf_r+0x964>
  40ec9e:	46ca      	mov	sl, r9
  40eca0:	f7ff bbc0 	b.w	40e424 <_vfiprintf_r+0x1ac>
  40eca4:	004141f8 	.word	0x004141f8
  40eca8:	004141e8 	.word	0x004141e8
  40ecac:	3104      	adds	r1, #4
  40ecae:	6816      	ldr	r6, [r2, #0]
  40ecb0:	9107      	str	r1, [sp, #28]
  40ecb2:	2201      	movs	r2, #1
  40ecb4:	2700      	movs	r7, #0
  40ecb6:	e412      	b.n	40e4de <_vfiprintf_r+0x266>
  40ecb8:	9807      	ldr	r0, [sp, #28]
  40ecba:	4601      	mov	r1, r0
  40ecbc:	3104      	adds	r1, #4
  40ecbe:	6806      	ldr	r6, [r0, #0]
  40ecc0:	9107      	str	r1, [sp, #28]
  40ecc2:	2700      	movs	r7, #0
  40ecc4:	e40b      	b.n	40e4de <_vfiprintf_r+0x266>
  40ecc6:	680e      	ldr	r6, [r1, #0]
  40ecc8:	3104      	adds	r1, #4
  40ecca:	9107      	str	r1, [sp, #28]
  40eccc:	2700      	movs	r7, #0
  40ecce:	e591      	b.n	40e7f4 <_vfiprintf_r+0x57c>
  40ecd0:	9907      	ldr	r1, [sp, #28]
  40ecd2:	680e      	ldr	r6, [r1, #0]
  40ecd4:	460a      	mov	r2, r1
  40ecd6:	17f7      	asrs	r7, r6, #31
  40ecd8:	3204      	adds	r2, #4
  40ecda:	9207      	str	r2, [sp, #28]
  40ecdc:	4630      	mov	r0, r6
  40ecde:	4639      	mov	r1, r7
  40ece0:	e50f      	b.n	40e702 <_vfiprintf_r+0x48a>
  40ece2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40ece6:	f001 fe4d 	bl	410984 <__retarget_lock_release_recursive>
  40ecea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40ecee:	e71a      	b.n	40eb26 <_vfiprintf_r+0x8ae>
  40ecf0:	9b02      	ldr	r3, [sp, #8]
  40ecf2:	9302      	str	r3, [sp, #8]
  40ecf4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40ecf8:	3630      	adds	r6, #48	; 0x30
  40ecfa:	2301      	movs	r3, #1
  40ecfc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40ed00:	9305      	str	r3, [sp, #20]
  40ed02:	e40b      	b.n	40e51c <_vfiprintf_r+0x2a4>
  40ed04:	aa0f      	add	r2, sp, #60	; 0x3c
  40ed06:	9904      	ldr	r1, [sp, #16]
  40ed08:	9806      	ldr	r0, [sp, #24]
  40ed0a:	f7ff fa75 	bl	40e1f8 <__sprint_r.part.0>
  40ed0e:	2800      	cmp	r0, #0
  40ed10:	f47f af64 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40ed14:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ed16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ed18:	1c48      	adds	r0, r1, #1
  40ed1a:	46ca      	mov	sl, r9
  40ed1c:	e651      	b.n	40e9c2 <_vfiprintf_r+0x74a>
  40ed1e:	aa0f      	add	r2, sp, #60	; 0x3c
  40ed20:	9904      	ldr	r1, [sp, #16]
  40ed22:	9806      	ldr	r0, [sp, #24]
  40ed24:	f7ff fa68 	bl	40e1f8 <__sprint_r.part.0>
  40ed28:	2800      	cmp	r0, #0
  40ed2a:	f47f af57 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40ed2e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ed30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ed32:	1c48      	adds	r0, r1, #1
  40ed34:	46ca      	mov	sl, r9
  40ed36:	e448      	b.n	40e5ca <_vfiprintf_r+0x352>
  40ed38:	2a00      	cmp	r2, #0
  40ed3a:	f040 8091 	bne.w	40ee60 <_vfiprintf_r+0xbe8>
  40ed3e:	2001      	movs	r0, #1
  40ed40:	4611      	mov	r1, r2
  40ed42:	46ca      	mov	sl, r9
  40ed44:	e641      	b.n	40e9ca <_vfiprintf_r+0x752>
  40ed46:	aa0f      	add	r2, sp, #60	; 0x3c
  40ed48:	9904      	ldr	r1, [sp, #16]
  40ed4a:	9806      	ldr	r0, [sp, #24]
  40ed4c:	f7ff fa54 	bl	40e1f8 <__sprint_r.part.0>
  40ed50:	2800      	cmp	r0, #0
  40ed52:	f47f af43 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40ed56:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ed58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ed5a:	3001      	adds	r0, #1
  40ed5c:	46ca      	mov	sl, r9
  40ed5e:	e667      	b.n	40ea30 <_vfiprintf_r+0x7b8>
  40ed60:	46d3      	mov	fp, sl
  40ed62:	e6d6      	b.n	40eb12 <_vfiprintf_r+0x89a>
  40ed64:	9e07      	ldr	r6, [sp, #28]
  40ed66:	3607      	adds	r6, #7
  40ed68:	f026 0207 	bic.w	r2, r6, #7
  40ed6c:	f102 0108 	add.w	r1, r2, #8
  40ed70:	e9d2 6700 	ldrd	r6, r7, [r2]
  40ed74:	9107      	str	r1, [sp, #28]
  40ed76:	2201      	movs	r2, #1
  40ed78:	f7ff bbb1 	b.w	40e4de <_vfiprintf_r+0x266>
  40ed7c:	9e07      	ldr	r6, [sp, #28]
  40ed7e:	3607      	adds	r6, #7
  40ed80:	f026 0607 	bic.w	r6, r6, #7
  40ed84:	e9d6 0100 	ldrd	r0, r1, [r6]
  40ed88:	f106 0208 	add.w	r2, r6, #8
  40ed8c:	9207      	str	r2, [sp, #28]
  40ed8e:	4606      	mov	r6, r0
  40ed90:	460f      	mov	r7, r1
  40ed92:	e4b6      	b.n	40e702 <_vfiprintf_r+0x48a>
  40ed94:	9e07      	ldr	r6, [sp, #28]
  40ed96:	3607      	adds	r6, #7
  40ed98:	f026 0207 	bic.w	r2, r6, #7
  40ed9c:	f102 0108 	add.w	r1, r2, #8
  40eda0:	e9d2 6700 	ldrd	r6, r7, [r2]
  40eda4:	9107      	str	r1, [sp, #28]
  40eda6:	2200      	movs	r2, #0
  40eda8:	f7ff bb99 	b.w	40e4de <_vfiprintf_r+0x266>
  40edac:	9e07      	ldr	r6, [sp, #28]
  40edae:	3607      	adds	r6, #7
  40edb0:	f026 0107 	bic.w	r1, r6, #7
  40edb4:	f101 0008 	add.w	r0, r1, #8
  40edb8:	9007      	str	r0, [sp, #28]
  40edba:	e9d1 6700 	ldrd	r6, r7, [r1]
  40edbe:	e519      	b.n	40e7f4 <_vfiprintf_r+0x57c>
  40edc0:	46cb      	mov	fp, r9
  40edc2:	f7ff bbab 	b.w	40e51c <_vfiprintf_r+0x2a4>
  40edc6:	252d      	movs	r5, #45	; 0x2d
  40edc8:	4276      	negs	r6, r6
  40edca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40edce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40edd2:	2201      	movs	r2, #1
  40edd4:	f7ff bb88 	b.w	40e4e8 <_vfiprintf_r+0x270>
  40edd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40edda:	b9b3      	cbnz	r3, 40ee0a <_vfiprintf_r+0xb92>
  40eddc:	4611      	mov	r1, r2
  40edde:	2001      	movs	r0, #1
  40ede0:	46ca      	mov	sl, r9
  40ede2:	e5f2      	b.n	40e9ca <_vfiprintf_r+0x752>
  40ede4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40ede8:	f001 fdcc 	bl	410984 <__retarget_lock_release_recursive>
  40edec:	f04f 33ff 	mov.w	r3, #4294967295
  40edf0:	9303      	str	r3, [sp, #12]
  40edf2:	f7ff bb50 	b.w	40e496 <_vfiprintf_r+0x21e>
  40edf6:	aa0f      	add	r2, sp, #60	; 0x3c
  40edf8:	9904      	ldr	r1, [sp, #16]
  40edfa:	9806      	ldr	r0, [sp, #24]
  40edfc:	f7ff f9fc 	bl	40e1f8 <__sprint_r.part.0>
  40ee00:	2800      	cmp	r0, #0
  40ee02:	f47f aeeb 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40ee06:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee08:	e6a9      	b.n	40eb5e <_vfiprintf_r+0x8e6>
  40ee0a:	ab0e      	add	r3, sp, #56	; 0x38
  40ee0c:	2202      	movs	r2, #2
  40ee0e:	931c      	str	r3, [sp, #112]	; 0x70
  40ee10:	921d      	str	r2, [sp, #116]	; 0x74
  40ee12:	2001      	movs	r0, #1
  40ee14:	46ca      	mov	sl, r9
  40ee16:	e5d0      	b.n	40e9ba <_vfiprintf_r+0x742>
  40ee18:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee1a:	9904      	ldr	r1, [sp, #16]
  40ee1c:	9806      	ldr	r0, [sp, #24]
  40ee1e:	f7ff f9eb 	bl	40e1f8 <__sprint_r.part.0>
  40ee22:	2800      	cmp	r0, #0
  40ee24:	f47f aeda 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40ee28:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee2c:	1c48      	adds	r0, r1, #1
  40ee2e:	46ca      	mov	sl, r9
  40ee30:	e5a4      	b.n	40e97c <_vfiprintf_r+0x704>
  40ee32:	9a07      	ldr	r2, [sp, #28]
  40ee34:	9903      	ldr	r1, [sp, #12]
  40ee36:	6813      	ldr	r3, [r2, #0]
  40ee38:	17cd      	asrs	r5, r1, #31
  40ee3a:	4608      	mov	r0, r1
  40ee3c:	3204      	adds	r2, #4
  40ee3e:	4629      	mov	r1, r5
  40ee40:	9207      	str	r2, [sp, #28]
  40ee42:	e9c3 0100 	strd	r0, r1, [r3]
  40ee46:	f7ff ba54 	b.w	40e2f2 <_vfiprintf_r+0x7a>
  40ee4a:	4658      	mov	r0, fp
  40ee4c:	9607      	str	r6, [sp, #28]
  40ee4e:	9302      	str	r3, [sp, #8]
  40ee50:	f7fd ff36 	bl	40ccc0 <strlen>
  40ee54:	2400      	movs	r4, #0
  40ee56:	9005      	str	r0, [sp, #20]
  40ee58:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40ee5c:	f7ff bb5e 	b.w	40e51c <_vfiprintf_r+0x2a4>
  40ee60:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee62:	9904      	ldr	r1, [sp, #16]
  40ee64:	9806      	ldr	r0, [sp, #24]
  40ee66:	f7ff f9c7 	bl	40e1f8 <__sprint_r.part.0>
  40ee6a:	2800      	cmp	r0, #0
  40ee6c:	f47f aeb6 	bne.w	40ebdc <_vfiprintf_r+0x964>
  40ee70:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee74:	1c48      	adds	r0, r1, #1
  40ee76:	46ca      	mov	sl, r9
  40ee78:	e5a7      	b.n	40e9ca <_vfiprintf_r+0x752>
  40ee7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee7e:	4e20      	ldr	r6, [pc, #128]	; (40ef00 <_vfiprintf_r+0xc88>)
  40ee80:	3101      	adds	r1, #1
  40ee82:	f7ff bb90 	b.w	40e5a6 <_vfiprintf_r+0x32e>
  40ee86:	2c06      	cmp	r4, #6
  40ee88:	bf28      	it	cs
  40ee8a:	2406      	movcs	r4, #6
  40ee8c:	9405      	str	r4, [sp, #20]
  40ee8e:	9607      	str	r6, [sp, #28]
  40ee90:	9401      	str	r4, [sp, #4]
  40ee92:	f8df b070 	ldr.w	fp, [pc, #112]	; 40ef04 <_vfiprintf_r+0xc8c>
  40ee96:	e4d5      	b.n	40e844 <_vfiprintf_r+0x5cc>
  40ee98:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ee9a:	4e19      	ldr	r6, [pc, #100]	; (40ef00 <_vfiprintf_r+0xc88>)
  40ee9c:	3001      	adds	r0, #1
  40ee9e:	e603      	b.n	40eaa8 <_vfiprintf_r+0x830>
  40eea0:	9405      	str	r4, [sp, #20]
  40eea2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40eea6:	9607      	str	r6, [sp, #28]
  40eea8:	9302      	str	r3, [sp, #8]
  40eeaa:	4604      	mov	r4, r0
  40eeac:	f7ff bb36 	b.w	40e51c <_vfiprintf_r+0x2a4>
  40eeb0:	4686      	mov	lr, r0
  40eeb2:	f7ff bbce 	b.w	40e652 <_vfiprintf_r+0x3da>
  40eeb6:	9806      	ldr	r0, [sp, #24]
  40eeb8:	aa0f      	add	r2, sp, #60	; 0x3c
  40eeba:	4659      	mov	r1, fp
  40eebc:	f7ff f99c 	bl	40e1f8 <__sprint_r.part.0>
  40eec0:	2800      	cmp	r0, #0
  40eec2:	f43f ae24 	beq.w	40eb0e <_vfiprintf_r+0x896>
  40eec6:	e624      	b.n	40eb12 <_vfiprintf_r+0x89a>
  40eec8:	9907      	ldr	r1, [sp, #28]
  40eeca:	f898 2001 	ldrb.w	r2, [r8, #1]
  40eece:	680c      	ldr	r4, [r1, #0]
  40eed0:	3104      	adds	r1, #4
  40eed2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40eed6:	46b8      	mov	r8, r7
  40eed8:	9107      	str	r1, [sp, #28]
  40eeda:	f7ff ba3f 	b.w	40e35c <_vfiprintf_r+0xe4>
  40eede:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40eee2:	e43c      	b.n	40e75e <_vfiprintf_r+0x4e6>
  40eee4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40eee8:	e521      	b.n	40e92e <_vfiprintf_r+0x6b6>
  40eeea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40eeee:	f7ff bbf4 	b.w	40e6da <_vfiprintf_r+0x462>
  40eef2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40eef6:	e491      	b.n	40e81c <_vfiprintf_r+0x5a4>
  40eef8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40eefc:	e469      	b.n	40e7d2 <_vfiprintf_r+0x55a>
  40eefe:	bf00      	nop
  40ef00:	004141e8 	.word	0x004141e8
  40ef04:	004141bc 	.word	0x004141bc

0040ef08 <__sbprintf>:
  40ef08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ef0c:	460c      	mov	r4, r1
  40ef0e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40ef12:	8989      	ldrh	r1, [r1, #12]
  40ef14:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40ef16:	89e5      	ldrh	r5, [r4, #14]
  40ef18:	9619      	str	r6, [sp, #100]	; 0x64
  40ef1a:	f021 0102 	bic.w	r1, r1, #2
  40ef1e:	4606      	mov	r6, r0
  40ef20:	69e0      	ldr	r0, [r4, #28]
  40ef22:	f8ad 100c 	strh.w	r1, [sp, #12]
  40ef26:	4617      	mov	r7, r2
  40ef28:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40ef2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40ef2e:	f8ad 500e 	strh.w	r5, [sp, #14]
  40ef32:	4698      	mov	r8, r3
  40ef34:	ad1a      	add	r5, sp, #104	; 0x68
  40ef36:	2300      	movs	r3, #0
  40ef38:	9007      	str	r0, [sp, #28]
  40ef3a:	a816      	add	r0, sp, #88	; 0x58
  40ef3c:	9209      	str	r2, [sp, #36]	; 0x24
  40ef3e:	9306      	str	r3, [sp, #24]
  40ef40:	9500      	str	r5, [sp, #0]
  40ef42:	9504      	str	r5, [sp, #16]
  40ef44:	9102      	str	r1, [sp, #8]
  40ef46:	9105      	str	r1, [sp, #20]
  40ef48:	f001 fd16 	bl	410978 <__retarget_lock_init_recursive>
  40ef4c:	4643      	mov	r3, r8
  40ef4e:	463a      	mov	r2, r7
  40ef50:	4669      	mov	r1, sp
  40ef52:	4630      	mov	r0, r6
  40ef54:	f7ff f990 	bl	40e278 <_vfiprintf_r>
  40ef58:	1e05      	subs	r5, r0, #0
  40ef5a:	db07      	blt.n	40ef6c <__sbprintf+0x64>
  40ef5c:	4630      	mov	r0, r6
  40ef5e:	4669      	mov	r1, sp
  40ef60:	f001 f8e8 	bl	410134 <_fflush_r>
  40ef64:	2800      	cmp	r0, #0
  40ef66:	bf18      	it	ne
  40ef68:	f04f 35ff 	movne.w	r5, #4294967295
  40ef6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40ef70:	065b      	lsls	r3, r3, #25
  40ef72:	d503      	bpl.n	40ef7c <__sbprintf+0x74>
  40ef74:	89a3      	ldrh	r3, [r4, #12]
  40ef76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ef7a:	81a3      	strh	r3, [r4, #12]
  40ef7c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40ef7e:	f001 fcfd 	bl	41097c <__retarget_lock_close_recursive>
  40ef82:	4628      	mov	r0, r5
  40ef84:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40ef88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040ef8c <__swsetup_r>:
  40ef8c:	b538      	push	{r3, r4, r5, lr}
  40ef8e:	4b30      	ldr	r3, [pc, #192]	; (40f050 <__swsetup_r+0xc4>)
  40ef90:	681b      	ldr	r3, [r3, #0]
  40ef92:	4605      	mov	r5, r0
  40ef94:	460c      	mov	r4, r1
  40ef96:	b113      	cbz	r3, 40ef9e <__swsetup_r+0x12>
  40ef98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40ef9a:	2a00      	cmp	r2, #0
  40ef9c:	d038      	beq.n	40f010 <__swsetup_r+0x84>
  40ef9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40efa2:	b293      	uxth	r3, r2
  40efa4:	0718      	lsls	r0, r3, #28
  40efa6:	d50c      	bpl.n	40efc2 <__swsetup_r+0x36>
  40efa8:	6920      	ldr	r0, [r4, #16]
  40efaa:	b1a8      	cbz	r0, 40efd8 <__swsetup_r+0x4c>
  40efac:	f013 0201 	ands.w	r2, r3, #1
  40efb0:	d01e      	beq.n	40eff0 <__swsetup_r+0x64>
  40efb2:	6963      	ldr	r3, [r4, #20]
  40efb4:	2200      	movs	r2, #0
  40efb6:	425b      	negs	r3, r3
  40efb8:	61a3      	str	r3, [r4, #24]
  40efba:	60a2      	str	r2, [r4, #8]
  40efbc:	b1f0      	cbz	r0, 40effc <__swsetup_r+0x70>
  40efbe:	2000      	movs	r0, #0
  40efc0:	bd38      	pop	{r3, r4, r5, pc}
  40efc2:	06d9      	lsls	r1, r3, #27
  40efc4:	d53c      	bpl.n	40f040 <__swsetup_r+0xb4>
  40efc6:	0758      	lsls	r0, r3, #29
  40efc8:	d426      	bmi.n	40f018 <__swsetup_r+0x8c>
  40efca:	6920      	ldr	r0, [r4, #16]
  40efcc:	f042 0308 	orr.w	r3, r2, #8
  40efd0:	81a3      	strh	r3, [r4, #12]
  40efd2:	b29b      	uxth	r3, r3
  40efd4:	2800      	cmp	r0, #0
  40efd6:	d1e9      	bne.n	40efac <__swsetup_r+0x20>
  40efd8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40efdc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40efe0:	d0e4      	beq.n	40efac <__swsetup_r+0x20>
  40efe2:	4628      	mov	r0, r5
  40efe4:	4621      	mov	r1, r4
  40efe6:	f001 fcfd 	bl	4109e4 <__smakebuf_r>
  40efea:	89a3      	ldrh	r3, [r4, #12]
  40efec:	6920      	ldr	r0, [r4, #16]
  40efee:	e7dd      	b.n	40efac <__swsetup_r+0x20>
  40eff0:	0799      	lsls	r1, r3, #30
  40eff2:	bf58      	it	pl
  40eff4:	6962      	ldrpl	r2, [r4, #20]
  40eff6:	60a2      	str	r2, [r4, #8]
  40eff8:	2800      	cmp	r0, #0
  40effa:	d1e0      	bne.n	40efbe <__swsetup_r+0x32>
  40effc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f000:	061a      	lsls	r2, r3, #24
  40f002:	d5dd      	bpl.n	40efc0 <__swsetup_r+0x34>
  40f004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f008:	81a3      	strh	r3, [r4, #12]
  40f00a:	f04f 30ff 	mov.w	r0, #4294967295
  40f00e:	bd38      	pop	{r3, r4, r5, pc}
  40f010:	4618      	mov	r0, r3
  40f012:	f001 f8e7 	bl	4101e4 <__sinit>
  40f016:	e7c2      	b.n	40ef9e <__swsetup_r+0x12>
  40f018:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f01a:	b151      	cbz	r1, 40f032 <__swsetup_r+0xa6>
  40f01c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f020:	4299      	cmp	r1, r3
  40f022:	d004      	beq.n	40f02e <__swsetup_r+0xa2>
  40f024:	4628      	mov	r0, r5
  40f026:	f001 fa03 	bl	410430 <_free_r>
  40f02a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f02e:	2300      	movs	r3, #0
  40f030:	6323      	str	r3, [r4, #48]	; 0x30
  40f032:	2300      	movs	r3, #0
  40f034:	6920      	ldr	r0, [r4, #16]
  40f036:	6063      	str	r3, [r4, #4]
  40f038:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40f03c:	6020      	str	r0, [r4, #0]
  40f03e:	e7c5      	b.n	40efcc <__swsetup_r+0x40>
  40f040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40f044:	2309      	movs	r3, #9
  40f046:	602b      	str	r3, [r5, #0]
  40f048:	f04f 30ff 	mov.w	r0, #4294967295
  40f04c:	81a2      	strh	r2, [r4, #12]
  40f04e:	bd38      	pop	{r3, r4, r5, pc}
  40f050:	200000fc 	.word	0x200000fc

0040f054 <register_fini>:
  40f054:	4b02      	ldr	r3, [pc, #8]	; (40f060 <register_fini+0xc>)
  40f056:	b113      	cbz	r3, 40f05e <register_fini+0xa>
  40f058:	4802      	ldr	r0, [pc, #8]	; (40f064 <register_fini+0x10>)
  40f05a:	f000 b805 	b.w	40f068 <atexit>
  40f05e:	4770      	bx	lr
  40f060:	00000000 	.word	0x00000000
  40f064:	00410255 	.word	0x00410255

0040f068 <atexit>:
  40f068:	2300      	movs	r3, #0
  40f06a:	4601      	mov	r1, r0
  40f06c:	461a      	mov	r2, r3
  40f06e:	4618      	mov	r0, r3
  40f070:	f002 be4c 	b.w	411d0c <__register_exitproc>

0040f074 <quorem>:
  40f074:	6902      	ldr	r2, [r0, #16]
  40f076:	690b      	ldr	r3, [r1, #16]
  40f078:	4293      	cmp	r3, r2
  40f07a:	f300 808d 	bgt.w	40f198 <quorem+0x124>
  40f07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f082:	f103 38ff 	add.w	r8, r3, #4294967295
  40f086:	f101 0714 	add.w	r7, r1, #20
  40f08a:	f100 0b14 	add.w	fp, r0, #20
  40f08e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40f092:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40f096:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40f09a:	b083      	sub	sp, #12
  40f09c:	3201      	adds	r2, #1
  40f09e:	fbb3 f9f2 	udiv	r9, r3, r2
  40f0a2:	eb0b 0304 	add.w	r3, fp, r4
  40f0a6:	9400      	str	r4, [sp, #0]
  40f0a8:	eb07 0a04 	add.w	sl, r7, r4
  40f0ac:	9301      	str	r3, [sp, #4]
  40f0ae:	f1b9 0f00 	cmp.w	r9, #0
  40f0b2:	d039      	beq.n	40f128 <quorem+0xb4>
  40f0b4:	2500      	movs	r5, #0
  40f0b6:	462e      	mov	r6, r5
  40f0b8:	46bc      	mov	ip, r7
  40f0ba:	46de      	mov	lr, fp
  40f0bc:	f85c 4b04 	ldr.w	r4, [ip], #4
  40f0c0:	f8de 3000 	ldr.w	r3, [lr]
  40f0c4:	b2a2      	uxth	r2, r4
  40f0c6:	fb09 5502 	mla	r5, r9, r2, r5
  40f0ca:	0c22      	lsrs	r2, r4, #16
  40f0cc:	0c2c      	lsrs	r4, r5, #16
  40f0ce:	fb09 4202 	mla	r2, r9, r2, r4
  40f0d2:	b2ad      	uxth	r5, r5
  40f0d4:	1b75      	subs	r5, r6, r5
  40f0d6:	b296      	uxth	r6, r2
  40f0d8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40f0dc:	fa15 f383 	uxtah	r3, r5, r3
  40f0e0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40f0e4:	b29b      	uxth	r3, r3
  40f0e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40f0ea:	45e2      	cmp	sl, ip
  40f0ec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40f0f0:	f84e 3b04 	str.w	r3, [lr], #4
  40f0f4:	ea4f 4626 	mov.w	r6, r6, asr #16
  40f0f8:	d2e0      	bcs.n	40f0bc <quorem+0x48>
  40f0fa:	9b00      	ldr	r3, [sp, #0]
  40f0fc:	f85b 3003 	ldr.w	r3, [fp, r3]
  40f100:	b993      	cbnz	r3, 40f128 <quorem+0xb4>
  40f102:	9c01      	ldr	r4, [sp, #4]
  40f104:	1f23      	subs	r3, r4, #4
  40f106:	459b      	cmp	fp, r3
  40f108:	d20c      	bcs.n	40f124 <quorem+0xb0>
  40f10a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40f10e:	b94b      	cbnz	r3, 40f124 <quorem+0xb0>
  40f110:	f1a4 0308 	sub.w	r3, r4, #8
  40f114:	e002      	b.n	40f11c <quorem+0xa8>
  40f116:	681a      	ldr	r2, [r3, #0]
  40f118:	3b04      	subs	r3, #4
  40f11a:	b91a      	cbnz	r2, 40f124 <quorem+0xb0>
  40f11c:	459b      	cmp	fp, r3
  40f11e:	f108 38ff 	add.w	r8, r8, #4294967295
  40f122:	d3f8      	bcc.n	40f116 <quorem+0xa2>
  40f124:	f8c0 8010 	str.w	r8, [r0, #16]
  40f128:	4604      	mov	r4, r0
  40f12a:	f002 f9d3 	bl	4114d4 <__mcmp>
  40f12e:	2800      	cmp	r0, #0
  40f130:	db2e      	blt.n	40f190 <quorem+0x11c>
  40f132:	f109 0901 	add.w	r9, r9, #1
  40f136:	465d      	mov	r5, fp
  40f138:	2300      	movs	r3, #0
  40f13a:	f857 1b04 	ldr.w	r1, [r7], #4
  40f13e:	6828      	ldr	r0, [r5, #0]
  40f140:	b28a      	uxth	r2, r1
  40f142:	1a9a      	subs	r2, r3, r2
  40f144:	0c0b      	lsrs	r3, r1, #16
  40f146:	fa12 f280 	uxtah	r2, r2, r0
  40f14a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40f14e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40f152:	b292      	uxth	r2, r2
  40f154:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40f158:	45ba      	cmp	sl, r7
  40f15a:	f845 2b04 	str.w	r2, [r5], #4
  40f15e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40f162:	d2ea      	bcs.n	40f13a <quorem+0xc6>
  40f164:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40f168:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40f16c:	b982      	cbnz	r2, 40f190 <quorem+0x11c>
  40f16e:	1f1a      	subs	r2, r3, #4
  40f170:	4593      	cmp	fp, r2
  40f172:	d20b      	bcs.n	40f18c <quorem+0x118>
  40f174:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40f178:	b942      	cbnz	r2, 40f18c <quorem+0x118>
  40f17a:	3b08      	subs	r3, #8
  40f17c:	e002      	b.n	40f184 <quorem+0x110>
  40f17e:	681a      	ldr	r2, [r3, #0]
  40f180:	3b04      	subs	r3, #4
  40f182:	b91a      	cbnz	r2, 40f18c <quorem+0x118>
  40f184:	459b      	cmp	fp, r3
  40f186:	f108 38ff 	add.w	r8, r8, #4294967295
  40f18a:	d3f8      	bcc.n	40f17e <quorem+0x10a>
  40f18c:	f8c4 8010 	str.w	r8, [r4, #16]
  40f190:	4648      	mov	r0, r9
  40f192:	b003      	add	sp, #12
  40f194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f198:	2000      	movs	r0, #0
  40f19a:	4770      	bx	lr
  40f19c:	0000      	movs	r0, r0
	...

0040f1a0 <_dtoa_r>:
  40f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f1a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40f1a6:	b09b      	sub	sp, #108	; 0x6c
  40f1a8:	4604      	mov	r4, r0
  40f1aa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40f1ac:	4692      	mov	sl, r2
  40f1ae:	469b      	mov	fp, r3
  40f1b0:	b141      	cbz	r1, 40f1c4 <_dtoa_r+0x24>
  40f1b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40f1b4:	604a      	str	r2, [r1, #4]
  40f1b6:	2301      	movs	r3, #1
  40f1b8:	4093      	lsls	r3, r2
  40f1ba:	608b      	str	r3, [r1, #8]
  40f1bc:	f001 ffb2 	bl	411124 <_Bfree>
  40f1c0:	2300      	movs	r3, #0
  40f1c2:	6423      	str	r3, [r4, #64]	; 0x40
  40f1c4:	f1bb 0f00 	cmp.w	fp, #0
  40f1c8:	465d      	mov	r5, fp
  40f1ca:	db35      	blt.n	40f238 <_dtoa_r+0x98>
  40f1cc:	2300      	movs	r3, #0
  40f1ce:	6033      	str	r3, [r6, #0]
  40f1d0:	4b9d      	ldr	r3, [pc, #628]	; (40f448 <_dtoa_r+0x2a8>)
  40f1d2:	43ab      	bics	r3, r5
  40f1d4:	d015      	beq.n	40f202 <_dtoa_r+0x62>
  40f1d6:	4650      	mov	r0, sl
  40f1d8:	4659      	mov	r1, fp
  40f1da:	2200      	movs	r2, #0
  40f1dc:	2300      	movs	r3, #0
  40f1de:	f003 fb0d 	bl	4127fc <__aeabi_dcmpeq>
  40f1e2:	4680      	mov	r8, r0
  40f1e4:	2800      	cmp	r0, #0
  40f1e6:	d02d      	beq.n	40f244 <_dtoa_r+0xa4>
  40f1e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40f1ea:	2301      	movs	r3, #1
  40f1ec:	6013      	str	r3, [r2, #0]
  40f1ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f1f0:	2b00      	cmp	r3, #0
  40f1f2:	f000 80bd 	beq.w	40f370 <_dtoa_r+0x1d0>
  40f1f6:	4895      	ldr	r0, [pc, #596]	; (40f44c <_dtoa_r+0x2ac>)
  40f1f8:	6018      	str	r0, [r3, #0]
  40f1fa:	3801      	subs	r0, #1
  40f1fc:	b01b      	add	sp, #108	; 0x6c
  40f1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f202:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40f204:	f242 730f 	movw	r3, #9999	; 0x270f
  40f208:	6013      	str	r3, [r2, #0]
  40f20a:	f1ba 0f00 	cmp.w	sl, #0
  40f20e:	d10d      	bne.n	40f22c <_dtoa_r+0x8c>
  40f210:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40f214:	b955      	cbnz	r5, 40f22c <_dtoa_r+0x8c>
  40f216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f218:	488d      	ldr	r0, [pc, #564]	; (40f450 <_dtoa_r+0x2b0>)
  40f21a:	2b00      	cmp	r3, #0
  40f21c:	d0ee      	beq.n	40f1fc <_dtoa_r+0x5c>
  40f21e:	f100 0308 	add.w	r3, r0, #8
  40f222:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40f224:	6013      	str	r3, [r2, #0]
  40f226:	b01b      	add	sp, #108	; 0x6c
  40f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f22c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f22e:	4889      	ldr	r0, [pc, #548]	; (40f454 <_dtoa_r+0x2b4>)
  40f230:	2b00      	cmp	r3, #0
  40f232:	d0e3      	beq.n	40f1fc <_dtoa_r+0x5c>
  40f234:	1cc3      	adds	r3, r0, #3
  40f236:	e7f4      	b.n	40f222 <_dtoa_r+0x82>
  40f238:	2301      	movs	r3, #1
  40f23a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40f23e:	6033      	str	r3, [r6, #0]
  40f240:	46ab      	mov	fp, r5
  40f242:	e7c5      	b.n	40f1d0 <_dtoa_r+0x30>
  40f244:	aa18      	add	r2, sp, #96	; 0x60
  40f246:	ab19      	add	r3, sp, #100	; 0x64
  40f248:	9201      	str	r2, [sp, #4]
  40f24a:	9300      	str	r3, [sp, #0]
  40f24c:	4652      	mov	r2, sl
  40f24e:	465b      	mov	r3, fp
  40f250:	4620      	mov	r0, r4
  40f252:	f002 f9df 	bl	411614 <__d2b>
  40f256:	0d2b      	lsrs	r3, r5, #20
  40f258:	4681      	mov	r9, r0
  40f25a:	d071      	beq.n	40f340 <_dtoa_r+0x1a0>
  40f25c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40f260:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40f264:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40f266:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40f26a:	4650      	mov	r0, sl
  40f26c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40f270:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40f274:	2200      	movs	r2, #0
  40f276:	4b78      	ldr	r3, [pc, #480]	; (40f458 <_dtoa_r+0x2b8>)
  40f278:	f002 fea4 	bl	411fc4 <__aeabi_dsub>
  40f27c:	a36c      	add	r3, pc, #432	; (adr r3, 40f430 <_dtoa_r+0x290>)
  40f27e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f282:	f003 f853 	bl	41232c <__aeabi_dmul>
  40f286:	a36c      	add	r3, pc, #432	; (adr r3, 40f438 <_dtoa_r+0x298>)
  40f288:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f28c:	f002 fe9c 	bl	411fc8 <__adddf3>
  40f290:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40f294:	4630      	mov	r0, r6
  40f296:	f002 ffe3 	bl	412260 <__aeabi_i2d>
  40f29a:	a369      	add	r3, pc, #420	; (adr r3, 40f440 <_dtoa_r+0x2a0>)
  40f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f2a0:	f003 f844 	bl	41232c <__aeabi_dmul>
  40f2a4:	4602      	mov	r2, r0
  40f2a6:	460b      	mov	r3, r1
  40f2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40f2ac:	f002 fe8c 	bl	411fc8 <__adddf3>
  40f2b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40f2b4:	f003 faea 	bl	41288c <__aeabi_d2iz>
  40f2b8:	2200      	movs	r2, #0
  40f2ba:	9002      	str	r0, [sp, #8]
  40f2bc:	2300      	movs	r3, #0
  40f2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f2c2:	f003 faa5 	bl	412810 <__aeabi_dcmplt>
  40f2c6:	2800      	cmp	r0, #0
  40f2c8:	f040 8173 	bne.w	40f5b2 <_dtoa_r+0x412>
  40f2cc:	9d02      	ldr	r5, [sp, #8]
  40f2ce:	2d16      	cmp	r5, #22
  40f2d0:	f200 815d 	bhi.w	40f58e <_dtoa_r+0x3ee>
  40f2d4:	4b61      	ldr	r3, [pc, #388]	; (40f45c <_dtoa_r+0x2bc>)
  40f2d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40f2da:	e9d3 0100 	ldrd	r0, r1, [r3]
  40f2de:	4652      	mov	r2, sl
  40f2e0:	465b      	mov	r3, fp
  40f2e2:	f003 fab3 	bl	41284c <__aeabi_dcmpgt>
  40f2e6:	2800      	cmp	r0, #0
  40f2e8:	f000 81c5 	beq.w	40f676 <_dtoa_r+0x4d6>
  40f2ec:	1e6b      	subs	r3, r5, #1
  40f2ee:	9302      	str	r3, [sp, #8]
  40f2f0:	2300      	movs	r3, #0
  40f2f2:	930e      	str	r3, [sp, #56]	; 0x38
  40f2f4:	1bbf      	subs	r7, r7, r6
  40f2f6:	1e7b      	subs	r3, r7, #1
  40f2f8:	9306      	str	r3, [sp, #24]
  40f2fa:	f100 8154 	bmi.w	40f5a6 <_dtoa_r+0x406>
  40f2fe:	2300      	movs	r3, #0
  40f300:	9308      	str	r3, [sp, #32]
  40f302:	9b02      	ldr	r3, [sp, #8]
  40f304:	2b00      	cmp	r3, #0
  40f306:	f2c0 8145 	blt.w	40f594 <_dtoa_r+0x3f4>
  40f30a:	9a06      	ldr	r2, [sp, #24]
  40f30c:	930d      	str	r3, [sp, #52]	; 0x34
  40f30e:	4611      	mov	r1, r2
  40f310:	4419      	add	r1, r3
  40f312:	2300      	movs	r3, #0
  40f314:	9106      	str	r1, [sp, #24]
  40f316:	930c      	str	r3, [sp, #48]	; 0x30
  40f318:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f31a:	2b09      	cmp	r3, #9
  40f31c:	d82a      	bhi.n	40f374 <_dtoa_r+0x1d4>
  40f31e:	2b05      	cmp	r3, #5
  40f320:	f340 865b 	ble.w	40ffda <_dtoa_r+0xe3a>
  40f324:	3b04      	subs	r3, #4
  40f326:	9324      	str	r3, [sp, #144]	; 0x90
  40f328:	2500      	movs	r5, #0
  40f32a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f32c:	3b02      	subs	r3, #2
  40f32e:	2b03      	cmp	r3, #3
  40f330:	f200 8642 	bhi.w	40ffb8 <_dtoa_r+0xe18>
  40f334:	e8df f013 	tbh	[pc, r3, lsl #1]
  40f338:	02c903d4 	.word	0x02c903d4
  40f33c:	046103df 	.word	0x046103df
  40f340:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40f342:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40f344:	443e      	add	r6, r7
  40f346:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40f34a:	2b20      	cmp	r3, #32
  40f34c:	f340 818e 	ble.w	40f66c <_dtoa_r+0x4cc>
  40f350:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40f354:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40f358:	409d      	lsls	r5, r3
  40f35a:	fa2a f000 	lsr.w	r0, sl, r0
  40f35e:	4328      	orrs	r0, r5
  40f360:	f002 ff6e 	bl	412240 <__aeabi_ui2d>
  40f364:	2301      	movs	r3, #1
  40f366:	3e01      	subs	r6, #1
  40f368:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40f36c:	9314      	str	r3, [sp, #80]	; 0x50
  40f36e:	e781      	b.n	40f274 <_dtoa_r+0xd4>
  40f370:	483b      	ldr	r0, [pc, #236]	; (40f460 <_dtoa_r+0x2c0>)
  40f372:	e743      	b.n	40f1fc <_dtoa_r+0x5c>
  40f374:	2100      	movs	r1, #0
  40f376:	6461      	str	r1, [r4, #68]	; 0x44
  40f378:	4620      	mov	r0, r4
  40f37a:	9125      	str	r1, [sp, #148]	; 0x94
  40f37c:	f001 feac 	bl	4110d8 <_Balloc>
  40f380:	f04f 33ff 	mov.w	r3, #4294967295
  40f384:	930a      	str	r3, [sp, #40]	; 0x28
  40f386:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40f388:	930f      	str	r3, [sp, #60]	; 0x3c
  40f38a:	2301      	movs	r3, #1
  40f38c:	9004      	str	r0, [sp, #16]
  40f38e:	6420      	str	r0, [r4, #64]	; 0x40
  40f390:	9224      	str	r2, [sp, #144]	; 0x90
  40f392:	930b      	str	r3, [sp, #44]	; 0x2c
  40f394:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40f396:	2b00      	cmp	r3, #0
  40f398:	f2c0 80d9 	blt.w	40f54e <_dtoa_r+0x3ae>
  40f39c:	9a02      	ldr	r2, [sp, #8]
  40f39e:	2a0e      	cmp	r2, #14
  40f3a0:	f300 80d5 	bgt.w	40f54e <_dtoa_r+0x3ae>
  40f3a4:	4b2d      	ldr	r3, [pc, #180]	; (40f45c <_dtoa_r+0x2bc>)
  40f3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f3ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40f3b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40f3b4:	2b00      	cmp	r3, #0
  40f3b6:	f2c0 83ba 	blt.w	40fb2e <_dtoa_r+0x98e>
  40f3ba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40f3be:	4650      	mov	r0, sl
  40f3c0:	462a      	mov	r2, r5
  40f3c2:	4633      	mov	r3, r6
  40f3c4:	4659      	mov	r1, fp
  40f3c6:	f003 f8db 	bl	412580 <__aeabi_ddiv>
  40f3ca:	f003 fa5f 	bl	41288c <__aeabi_d2iz>
  40f3ce:	4680      	mov	r8, r0
  40f3d0:	f002 ff46 	bl	412260 <__aeabi_i2d>
  40f3d4:	462a      	mov	r2, r5
  40f3d6:	4633      	mov	r3, r6
  40f3d8:	f002 ffa8 	bl	41232c <__aeabi_dmul>
  40f3dc:	460b      	mov	r3, r1
  40f3de:	4602      	mov	r2, r0
  40f3e0:	4659      	mov	r1, fp
  40f3e2:	4650      	mov	r0, sl
  40f3e4:	f002 fdee 	bl	411fc4 <__aeabi_dsub>
  40f3e8:	9d04      	ldr	r5, [sp, #16]
  40f3ea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40f3ee:	702b      	strb	r3, [r5, #0]
  40f3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f3f2:	2b01      	cmp	r3, #1
  40f3f4:	4606      	mov	r6, r0
  40f3f6:	460f      	mov	r7, r1
  40f3f8:	f105 0501 	add.w	r5, r5, #1
  40f3fc:	d068      	beq.n	40f4d0 <_dtoa_r+0x330>
  40f3fe:	2200      	movs	r2, #0
  40f400:	4b18      	ldr	r3, [pc, #96]	; (40f464 <_dtoa_r+0x2c4>)
  40f402:	f002 ff93 	bl	41232c <__aeabi_dmul>
  40f406:	2200      	movs	r2, #0
  40f408:	2300      	movs	r3, #0
  40f40a:	4606      	mov	r6, r0
  40f40c:	460f      	mov	r7, r1
  40f40e:	f003 f9f5 	bl	4127fc <__aeabi_dcmpeq>
  40f412:	2800      	cmp	r0, #0
  40f414:	f040 8088 	bne.w	40f528 <_dtoa_r+0x388>
  40f418:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40f41c:	f04f 0a00 	mov.w	sl, #0
  40f420:	f8df b040 	ldr.w	fp, [pc, #64]	; 40f464 <_dtoa_r+0x2c4>
  40f424:	940c      	str	r4, [sp, #48]	; 0x30
  40f426:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40f42a:	e028      	b.n	40f47e <_dtoa_r+0x2de>
  40f42c:	f3af 8000 	nop.w
  40f430:	636f4361 	.word	0x636f4361
  40f434:	3fd287a7 	.word	0x3fd287a7
  40f438:	8b60c8b3 	.word	0x8b60c8b3
  40f43c:	3fc68a28 	.word	0x3fc68a28
  40f440:	509f79fb 	.word	0x509f79fb
  40f444:	3fd34413 	.word	0x3fd34413
  40f448:	7ff00000 	.word	0x7ff00000
  40f44c:	004141c5 	.word	0x004141c5
  40f450:	00414208 	.word	0x00414208
  40f454:	00414214 	.word	0x00414214
  40f458:	3ff80000 	.word	0x3ff80000
  40f45c:	00414250 	.word	0x00414250
  40f460:	004141c4 	.word	0x004141c4
  40f464:	40240000 	.word	0x40240000
  40f468:	f002 ff60 	bl	41232c <__aeabi_dmul>
  40f46c:	2200      	movs	r2, #0
  40f46e:	2300      	movs	r3, #0
  40f470:	4606      	mov	r6, r0
  40f472:	460f      	mov	r7, r1
  40f474:	f003 f9c2 	bl	4127fc <__aeabi_dcmpeq>
  40f478:	2800      	cmp	r0, #0
  40f47a:	f040 83c1 	bne.w	40fc00 <_dtoa_r+0xa60>
  40f47e:	4642      	mov	r2, r8
  40f480:	464b      	mov	r3, r9
  40f482:	4630      	mov	r0, r6
  40f484:	4639      	mov	r1, r7
  40f486:	f003 f87b 	bl	412580 <__aeabi_ddiv>
  40f48a:	f003 f9ff 	bl	41288c <__aeabi_d2iz>
  40f48e:	4604      	mov	r4, r0
  40f490:	f002 fee6 	bl	412260 <__aeabi_i2d>
  40f494:	4642      	mov	r2, r8
  40f496:	464b      	mov	r3, r9
  40f498:	f002 ff48 	bl	41232c <__aeabi_dmul>
  40f49c:	4602      	mov	r2, r0
  40f49e:	460b      	mov	r3, r1
  40f4a0:	4630      	mov	r0, r6
  40f4a2:	4639      	mov	r1, r7
  40f4a4:	f002 fd8e 	bl	411fc4 <__aeabi_dsub>
  40f4a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40f4ac:	9e04      	ldr	r6, [sp, #16]
  40f4ae:	f805 eb01 	strb.w	lr, [r5], #1
  40f4b2:	eba5 0e06 	sub.w	lr, r5, r6
  40f4b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40f4b8:	45b6      	cmp	lr, r6
  40f4ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40f4be:	4652      	mov	r2, sl
  40f4c0:	465b      	mov	r3, fp
  40f4c2:	d1d1      	bne.n	40f468 <_dtoa_r+0x2c8>
  40f4c4:	46a0      	mov	r8, r4
  40f4c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40f4ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40f4cc:	4606      	mov	r6, r0
  40f4ce:	460f      	mov	r7, r1
  40f4d0:	4632      	mov	r2, r6
  40f4d2:	463b      	mov	r3, r7
  40f4d4:	4630      	mov	r0, r6
  40f4d6:	4639      	mov	r1, r7
  40f4d8:	f002 fd76 	bl	411fc8 <__adddf3>
  40f4dc:	4606      	mov	r6, r0
  40f4de:	460f      	mov	r7, r1
  40f4e0:	4602      	mov	r2, r0
  40f4e2:	460b      	mov	r3, r1
  40f4e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f4e8:	f003 f992 	bl	412810 <__aeabi_dcmplt>
  40f4ec:	b948      	cbnz	r0, 40f502 <_dtoa_r+0x362>
  40f4ee:	4632      	mov	r2, r6
  40f4f0:	463b      	mov	r3, r7
  40f4f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f4f6:	f003 f981 	bl	4127fc <__aeabi_dcmpeq>
  40f4fa:	b1a8      	cbz	r0, 40f528 <_dtoa_r+0x388>
  40f4fc:	f018 0f01 	tst.w	r8, #1
  40f500:	d012      	beq.n	40f528 <_dtoa_r+0x388>
  40f502:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40f506:	9a04      	ldr	r2, [sp, #16]
  40f508:	1e6b      	subs	r3, r5, #1
  40f50a:	e004      	b.n	40f516 <_dtoa_r+0x376>
  40f50c:	429a      	cmp	r2, r3
  40f50e:	f000 8401 	beq.w	40fd14 <_dtoa_r+0xb74>
  40f512:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40f516:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40f51a:	f103 0501 	add.w	r5, r3, #1
  40f51e:	d0f5      	beq.n	40f50c <_dtoa_r+0x36c>
  40f520:	f108 0801 	add.w	r8, r8, #1
  40f524:	f883 8000 	strb.w	r8, [r3]
  40f528:	4649      	mov	r1, r9
  40f52a:	4620      	mov	r0, r4
  40f52c:	f001 fdfa 	bl	411124 <_Bfree>
  40f530:	2200      	movs	r2, #0
  40f532:	9b02      	ldr	r3, [sp, #8]
  40f534:	702a      	strb	r2, [r5, #0]
  40f536:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40f538:	3301      	adds	r3, #1
  40f53a:	6013      	str	r3, [r2, #0]
  40f53c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40f53e:	2b00      	cmp	r3, #0
  40f540:	f000 839e 	beq.w	40fc80 <_dtoa_r+0xae0>
  40f544:	9804      	ldr	r0, [sp, #16]
  40f546:	601d      	str	r5, [r3, #0]
  40f548:	b01b      	add	sp, #108	; 0x6c
  40f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40f550:	2a00      	cmp	r2, #0
  40f552:	d03e      	beq.n	40f5d2 <_dtoa_r+0x432>
  40f554:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40f556:	2a01      	cmp	r2, #1
  40f558:	f340 8311 	ble.w	40fb7e <_dtoa_r+0x9de>
  40f55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f55e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f560:	1e5f      	subs	r7, r3, #1
  40f562:	42ba      	cmp	r2, r7
  40f564:	f2c0 838f 	blt.w	40fc86 <_dtoa_r+0xae6>
  40f568:	1bd7      	subs	r7, r2, r7
  40f56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f56c:	2b00      	cmp	r3, #0
  40f56e:	f2c0 848b 	blt.w	40fe88 <_dtoa_r+0xce8>
  40f572:	9d08      	ldr	r5, [sp, #32]
  40f574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f576:	9a08      	ldr	r2, [sp, #32]
  40f578:	441a      	add	r2, r3
  40f57a:	9208      	str	r2, [sp, #32]
  40f57c:	9a06      	ldr	r2, [sp, #24]
  40f57e:	2101      	movs	r1, #1
  40f580:	441a      	add	r2, r3
  40f582:	4620      	mov	r0, r4
  40f584:	9206      	str	r2, [sp, #24]
  40f586:	f001 fe67 	bl	411258 <__i2b>
  40f58a:	4606      	mov	r6, r0
  40f58c:	e024      	b.n	40f5d8 <_dtoa_r+0x438>
  40f58e:	2301      	movs	r3, #1
  40f590:	930e      	str	r3, [sp, #56]	; 0x38
  40f592:	e6af      	b.n	40f2f4 <_dtoa_r+0x154>
  40f594:	9a08      	ldr	r2, [sp, #32]
  40f596:	9b02      	ldr	r3, [sp, #8]
  40f598:	1ad2      	subs	r2, r2, r3
  40f59a:	425b      	negs	r3, r3
  40f59c:	930c      	str	r3, [sp, #48]	; 0x30
  40f59e:	2300      	movs	r3, #0
  40f5a0:	9208      	str	r2, [sp, #32]
  40f5a2:	930d      	str	r3, [sp, #52]	; 0x34
  40f5a4:	e6b8      	b.n	40f318 <_dtoa_r+0x178>
  40f5a6:	f1c7 0301 	rsb	r3, r7, #1
  40f5aa:	9308      	str	r3, [sp, #32]
  40f5ac:	2300      	movs	r3, #0
  40f5ae:	9306      	str	r3, [sp, #24]
  40f5b0:	e6a7      	b.n	40f302 <_dtoa_r+0x162>
  40f5b2:	9d02      	ldr	r5, [sp, #8]
  40f5b4:	4628      	mov	r0, r5
  40f5b6:	f002 fe53 	bl	412260 <__aeabi_i2d>
  40f5ba:	4602      	mov	r2, r0
  40f5bc:	460b      	mov	r3, r1
  40f5be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40f5c2:	f003 f91b 	bl	4127fc <__aeabi_dcmpeq>
  40f5c6:	2800      	cmp	r0, #0
  40f5c8:	f47f ae80 	bne.w	40f2cc <_dtoa_r+0x12c>
  40f5cc:	1e6b      	subs	r3, r5, #1
  40f5ce:	9302      	str	r3, [sp, #8]
  40f5d0:	e67c      	b.n	40f2cc <_dtoa_r+0x12c>
  40f5d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40f5d4:	9d08      	ldr	r5, [sp, #32]
  40f5d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40f5d8:	2d00      	cmp	r5, #0
  40f5da:	dd0c      	ble.n	40f5f6 <_dtoa_r+0x456>
  40f5dc:	9906      	ldr	r1, [sp, #24]
  40f5de:	2900      	cmp	r1, #0
  40f5e0:	460b      	mov	r3, r1
  40f5e2:	dd08      	ble.n	40f5f6 <_dtoa_r+0x456>
  40f5e4:	42a9      	cmp	r1, r5
  40f5e6:	9a08      	ldr	r2, [sp, #32]
  40f5e8:	bfa8      	it	ge
  40f5ea:	462b      	movge	r3, r5
  40f5ec:	1ad2      	subs	r2, r2, r3
  40f5ee:	1aed      	subs	r5, r5, r3
  40f5f0:	1acb      	subs	r3, r1, r3
  40f5f2:	9208      	str	r2, [sp, #32]
  40f5f4:	9306      	str	r3, [sp, #24]
  40f5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f5f8:	b1d3      	cbz	r3, 40f630 <_dtoa_r+0x490>
  40f5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f5fc:	2b00      	cmp	r3, #0
  40f5fe:	f000 82b7 	beq.w	40fb70 <_dtoa_r+0x9d0>
  40f602:	2f00      	cmp	r7, #0
  40f604:	dd10      	ble.n	40f628 <_dtoa_r+0x488>
  40f606:	4631      	mov	r1, r6
  40f608:	463a      	mov	r2, r7
  40f60a:	4620      	mov	r0, r4
  40f60c:	f001 fec0 	bl	411390 <__pow5mult>
  40f610:	464a      	mov	r2, r9
  40f612:	4601      	mov	r1, r0
  40f614:	4606      	mov	r6, r0
  40f616:	4620      	mov	r0, r4
  40f618:	f001 fe28 	bl	41126c <__multiply>
  40f61c:	4649      	mov	r1, r9
  40f61e:	4680      	mov	r8, r0
  40f620:	4620      	mov	r0, r4
  40f622:	f001 fd7f 	bl	411124 <_Bfree>
  40f626:	46c1      	mov	r9, r8
  40f628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f62a:	1bda      	subs	r2, r3, r7
  40f62c:	f040 82a1 	bne.w	40fb72 <_dtoa_r+0x9d2>
  40f630:	2101      	movs	r1, #1
  40f632:	4620      	mov	r0, r4
  40f634:	f001 fe10 	bl	411258 <__i2b>
  40f638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f63a:	2b00      	cmp	r3, #0
  40f63c:	4680      	mov	r8, r0
  40f63e:	dd1c      	ble.n	40f67a <_dtoa_r+0x4da>
  40f640:	4601      	mov	r1, r0
  40f642:	461a      	mov	r2, r3
  40f644:	4620      	mov	r0, r4
  40f646:	f001 fea3 	bl	411390 <__pow5mult>
  40f64a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f64c:	2b01      	cmp	r3, #1
  40f64e:	4680      	mov	r8, r0
  40f650:	f340 8254 	ble.w	40fafc <_dtoa_r+0x95c>
  40f654:	2300      	movs	r3, #0
  40f656:	930c      	str	r3, [sp, #48]	; 0x30
  40f658:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40f65c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40f660:	6918      	ldr	r0, [r3, #16]
  40f662:	f001 fda9 	bl	4111b8 <__hi0bits>
  40f666:	f1c0 0020 	rsb	r0, r0, #32
  40f66a:	e010      	b.n	40f68e <_dtoa_r+0x4ee>
  40f66c:	f1c3 0520 	rsb	r5, r3, #32
  40f670:	fa0a f005 	lsl.w	r0, sl, r5
  40f674:	e674      	b.n	40f360 <_dtoa_r+0x1c0>
  40f676:	900e      	str	r0, [sp, #56]	; 0x38
  40f678:	e63c      	b.n	40f2f4 <_dtoa_r+0x154>
  40f67a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f67c:	2b01      	cmp	r3, #1
  40f67e:	f340 8287 	ble.w	40fb90 <_dtoa_r+0x9f0>
  40f682:	2300      	movs	r3, #0
  40f684:	930c      	str	r3, [sp, #48]	; 0x30
  40f686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f688:	2001      	movs	r0, #1
  40f68a:	2b00      	cmp	r3, #0
  40f68c:	d1e4      	bne.n	40f658 <_dtoa_r+0x4b8>
  40f68e:	9a06      	ldr	r2, [sp, #24]
  40f690:	4410      	add	r0, r2
  40f692:	f010 001f 	ands.w	r0, r0, #31
  40f696:	f000 80a1 	beq.w	40f7dc <_dtoa_r+0x63c>
  40f69a:	f1c0 0320 	rsb	r3, r0, #32
  40f69e:	2b04      	cmp	r3, #4
  40f6a0:	f340 849e 	ble.w	40ffe0 <_dtoa_r+0xe40>
  40f6a4:	9b08      	ldr	r3, [sp, #32]
  40f6a6:	f1c0 001c 	rsb	r0, r0, #28
  40f6aa:	4403      	add	r3, r0
  40f6ac:	9308      	str	r3, [sp, #32]
  40f6ae:	4613      	mov	r3, r2
  40f6b0:	4403      	add	r3, r0
  40f6b2:	4405      	add	r5, r0
  40f6b4:	9306      	str	r3, [sp, #24]
  40f6b6:	9b08      	ldr	r3, [sp, #32]
  40f6b8:	2b00      	cmp	r3, #0
  40f6ba:	dd05      	ble.n	40f6c8 <_dtoa_r+0x528>
  40f6bc:	4649      	mov	r1, r9
  40f6be:	461a      	mov	r2, r3
  40f6c0:	4620      	mov	r0, r4
  40f6c2:	f001 feb5 	bl	411430 <__lshift>
  40f6c6:	4681      	mov	r9, r0
  40f6c8:	9b06      	ldr	r3, [sp, #24]
  40f6ca:	2b00      	cmp	r3, #0
  40f6cc:	dd05      	ble.n	40f6da <_dtoa_r+0x53a>
  40f6ce:	4641      	mov	r1, r8
  40f6d0:	461a      	mov	r2, r3
  40f6d2:	4620      	mov	r0, r4
  40f6d4:	f001 feac 	bl	411430 <__lshift>
  40f6d8:	4680      	mov	r8, r0
  40f6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f6dc:	2b00      	cmp	r3, #0
  40f6de:	f040 8086 	bne.w	40f7ee <_dtoa_r+0x64e>
  40f6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f6e4:	2b00      	cmp	r3, #0
  40f6e6:	f340 8266 	ble.w	40fbb6 <_dtoa_r+0xa16>
  40f6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f6ec:	2b00      	cmp	r3, #0
  40f6ee:	f000 8098 	beq.w	40f822 <_dtoa_r+0x682>
  40f6f2:	2d00      	cmp	r5, #0
  40f6f4:	dd05      	ble.n	40f702 <_dtoa_r+0x562>
  40f6f6:	4631      	mov	r1, r6
  40f6f8:	462a      	mov	r2, r5
  40f6fa:	4620      	mov	r0, r4
  40f6fc:	f001 fe98 	bl	411430 <__lshift>
  40f700:	4606      	mov	r6, r0
  40f702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f704:	2b00      	cmp	r3, #0
  40f706:	f040 8337 	bne.w	40fd78 <_dtoa_r+0xbd8>
  40f70a:	9606      	str	r6, [sp, #24]
  40f70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f70e:	9a04      	ldr	r2, [sp, #16]
  40f710:	f8dd b018 	ldr.w	fp, [sp, #24]
  40f714:	3b01      	subs	r3, #1
  40f716:	18d3      	adds	r3, r2, r3
  40f718:	930b      	str	r3, [sp, #44]	; 0x2c
  40f71a:	f00a 0301 	and.w	r3, sl, #1
  40f71e:	930c      	str	r3, [sp, #48]	; 0x30
  40f720:	4617      	mov	r7, r2
  40f722:	46c2      	mov	sl, r8
  40f724:	4651      	mov	r1, sl
  40f726:	4648      	mov	r0, r9
  40f728:	f7ff fca4 	bl	40f074 <quorem>
  40f72c:	4631      	mov	r1, r6
  40f72e:	4605      	mov	r5, r0
  40f730:	4648      	mov	r0, r9
  40f732:	f001 fecf 	bl	4114d4 <__mcmp>
  40f736:	465a      	mov	r2, fp
  40f738:	900a      	str	r0, [sp, #40]	; 0x28
  40f73a:	4651      	mov	r1, sl
  40f73c:	4620      	mov	r0, r4
  40f73e:	f001 fee5 	bl	41150c <__mdiff>
  40f742:	68c2      	ldr	r2, [r0, #12]
  40f744:	4680      	mov	r8, r0
  40f746:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40f74a:	2a00      	cmp	r2, #0
  40f74c:	f040 822b 	bne.w	40fba6 <_dtoa_r+0xa06>
  40f750:	4601      	mov	r1, r0
  40f752:	4648      	mov	r0, r9
  40f754:	9308      	str	r3, [sp, #32]
  40f756:	f001 febd 	bl	4114d4 <__mcmp>
  40f75a:	4641      	mov	r1, r8
  40f75c:	9006      	str	r0, [sp, #24]
  40f75e:	4620      	mov	r0, r4
  40f760:	f001 fce0 	bl	411124 <_Bfree>
  40f764:	9a06      	ldr	r2, [sp, #24]
  40f766:	9b08      	ldr	r3, [sp, #32]
  40f768:	b932      	cbnz	r2, 40f778 <_dtoa_r+0x5d8>
  40f76a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40f76c:	b921      	cbnz	r1, 40f778 <_dtoa_r+0x5d8>
  40f76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f770:	2a00      	cmp	r2, #0
  40f772:	f000 83ef 	beq.w	40ff54 <_dtoa_r+0xdb4>
  40f776:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40f778:	990a      	ldr	r1, [sp, #40]	; 0x28
  40f77a:	2900      	cmp	r1, #0
  40f77c:	f2c0 829f 	blt.w	40fcbe <_dtoa_r+0xb1e>
  40f780:	d105      	bne.n	40f78e <_dtoa_r+0x5ee>
  40f782:	9924      	ldr	r1, [sp, #144]	; 0x90
  40f784:	b919      	cbnz	r1, 40f78e <_dtoa_r+0x5ee>
  40f786:	990c      	ldr	r1, [sp, #48]	; 0x30
  40f788:	2900      	cmp	r1, #0
  40f78a:	f000 8298 	beq.w	40fcbe <_dtoa_r+0xb1e>
  40f78e:	2a00      	cmp	r2, #0
  40f790:	f300 8306 	bgt.w	40fda0 <_dtoa_r+0xc00>
  40f794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40f796:	703b      	strb	r3, [r7, #0]
  40f798:	f107 0801 	add.w	r8, r7, #1
  40f79c:	4297      	cmp	r7, r2
  40f79e:	4645      	mov	r5, r8
  40f7a0:	f000 830c 	beq.w	40fdbc <_dtoa_r+0xc1c>
  40f7a4:	4649      	mov	r1, r9
  40f7a6:	2300      	movs	r3, #0
  40f7a8:	220a      	movs	r2, #10
  40f7aa:	4620      	mov	r0, r4
  40f7ac:	f001 fcc4 	bl	411138 <__multadd>
  40f7b0:	455e      	cmp	r6, fp
  40f7b2:	4681      	mov	r9, r0
  40f7b4:	4631      	mov	r1, r6
  40f7b6:	f04f 0300 	mov.w	r3, #0
  40f7ba:	f04f 020a 	mov.w	r2, #10
  40f7be:	4620      	mov	r0, r4
  40f7c0:	f000 81eb 	beq.w	40fb9a <_dtoa_r+0x9fa>
  40f7c4:	f001 fcb8 	bl	411138 <__multadd>
  40f7c8:	4659      	mov	r1, fp
  40f7ca:	4606      	mov	r6, r0
  40f7cc:	2300      	movs	r3, #0
  40f7ce:	220a      	movs	r2, #10
  40f7d0:	4620      	mov	r0, r4
  40f7d2:	f001 fcb1 	bl	411138 <__multadd>
  40f7d6:	4647      	mov	r7, r8
  40f7d8:	4683      	mov	fp, r0
  40f7da:	e7a3      	b.n	40f724 <_dtoa_r+0x584>
  40f7dc:	201c      	movs	r0, #28
  40f7de:	9b08      	ldr	r3, [sp, #32]
  40f7e0:	4403      	add	r3, r0
  40f7e2:	9308      	str	r3, [sp, #32]
  40f7e4:	9b06      	ldr	r3, [sp, #24]
  40f7e6:	4403      	add	r3, r0
  40f7e8:	4405      	add	r5, r0
  40f7ea:	9306      	str	r3, [sp, #24]
  40f7ec:	e763      	b.n	40f6b6 <_dtoa_r+0x516>
  40f7ee:	4641      	mov	r1, r8
  40f7f0:	4648      	mov	r0, r9
  40f7f2:	f001 fe6f 	bl	4114d4 <__mcmp>
  40f7f6:	2800      	cmp	r0, #0
  40f7f8:	f6bf af73 	bge.w	40f6e2 <_dtoa_r+0x542>
  40f7fc:	9f02      	ldr	r7, [sp, #8]
  40f7fe:	4649      	mov	r1, r9
  40f800:	2300      	movs	r3, #0
  40f802:	220a      	movs	r2, #10
  40f804:	4620      	mov	r0, r4
  40f806:	3f01      	subs	r7, #1
  40f808:	9702      	str	r7, [sp, #8]
  40f80a:	f001 fc95 	bl	411138 <__multadd>
  40f80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f810:	4681      	mov	r9, r0
  40f812:	2b00      	cmp	r3, #0
  40f814:	f040 83b6 	bne.w	40ff84 <_dtoa_r+0xde4>
  40f818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40f81a:	2b00      	cmp	r3, #0
  40f81c:	f340 83bf 	ble.w	40ff9e <_dtoa_r+0xdfe>
  40f820:	930a      	str	r3, [sp, #40]	; 0x28
  40f822:	f8dd b010 	ldr.w	fp, [sp, #16]
  40f826:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40f828:	465d      	mov	r5, fp
  40f82a:	e002      	b.n	40f832 <_dtoa_r+0x692>
  40f82c:	f001 fc84 	bl	411138 <__multadd>
  40f830:	4681      	mov	r9, r0
  40f832:	4641      	mov	r1, r8
  40f834:	4648      	mov	r0, r9
  40f836:	f7ff fc1d 	bl	40f074 <quorem>
  40f83a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40f83e:	f805 ab01 	strb.w	sl, [r5], #1
  40f842:	eba5 030b 	sub.w	r3, r5, fp
  40f846:	42bb      	cmp	r3, r7
  40f848:	f04f 020a 	mov.w	r2, #10
  40f84c:	f04f 0300 	mov.w	r3, #0
  40f850:	4649      	mov	r1, r9
  40f852:	4620      	mov	r0, r4
  40f854:	dbea      	blt.n	40f82c <_dtoa_r+0x68c>
  40f856:	9b04      	ldr	r3, [sp, #16]
  40f858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f85a:	2a01      	cmp	r2, #1
  40f85c:	bfac      	ite	ge
  40f85e:	189b      	addge	r3, r3, r2
  40f860:	3301      	addlt	r3, #1
  40f862:	461d      	mov	r5, r3
  40f864:	f04f 0b00 	mov.w	fp, #0
  40f868:	4649      	mov	r1, r9
  40f86a:	2201      	movs	r2, #1
  40f86c:	4620      	mov	r0, r4
  40f86e:	f001 fddf 	bl	411430 <__lshift>
  40f872:	4641      	mov	r1, r8
  40f874:	4681      	mov	r9, r0
  40f876:	f001 fe2d 	bl	4114d4 <__mcmp>
  40f87a:	2800      	cmp	r0, #0
  40f87c:	f340 823d 	ble.w	40fcfa <_dtoa_r+0xb5a>
  40f880:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40f884:	9904      	ldr	r1, [sp, #16]
  40f886:	1e6b      	subs	r3, r5, #1
  40f888:	e004      	b.n	40f894 <_dtoa_r+0x6f4>
  40f88a:	428b      	cmp	r3, r1
  40f88c:	f000 81ae 	beq.w	40fbec <_dtoa_r+0xa4c>
  40f890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40f894:	2a39      	cmp	r2, #57	; 0x39
  40f896:	f103 0501 	add.w	r5, r3, #1
  40f89a:	d0f6      	beq.n	40f88a <_dtoa_r+0x6ea>
  40f89c:	3201      	adds	r2, #1
  40f89e:	701a      	strb	r2, [r3, #0]
  40f8a0:	4641      	mov	r1, r8
  40f8a2:	4620      	mov	r0, r4
  40f8a4:	f001 fc3e 	bl	411124 <_Bfree>
  40f8a8:	2e00      	cmp	r6, #0
  40f8aa:	f43f ae3d 	beq.w	40f528 <_dtoa_r+0x388>
  40f8ae:	f1bb 0f00 	cmp.w	fp, #0
  40f8b2:	d005      	beq.n	40f8c0 <_dtoa_r+0x720>
  40f8b4:	45b3      	cmp	fp, r6
  40f8b6:	d003      	beq.n	40f8c0 <_dtoa_r+0x720>
  40f8b8:	4659      	mov	r1, fp
  40f8ba:	4620      	mov	r0, r4
  40f8bc:	f001 fc32 	bl	411124 <_Bfree>
  40f8c0:	4631      	mov	r1, r6
  40f8c2:	4620      	mov	r0, r4
  40f8c4:	f001 fc2e 	bl	411124 <_Bfree>
  40f8c8:	e62e      	b.n	40f528 <_dtoa_r+0x388>
  40f8ca:	2300      	movs	r3, #0
  40f8cc:	930b      	str	r3, [sp, #44]	; 0x2c
  40f8ce:	9b02      	ldr	r3, [sp, #8]
  40f8d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40f8d2:	4413      	add	r3, r2
  40f8d4:	930f      	str	r3, [sp, #60]	; 0x3c
  40f8d6:	3301      	adds	r3, #1
  40f8d8:	2b01      	cmp	r3, #1
  40f8da:	461f      	mov	r7, r3
  40f8dc:	461e      	mov	r6, r3
  40f8de:	930a      	str	r3, [sp, #40]	; 0x28
  40f8e0:	bfb8      	it	lt
  40f8e2:	2701      	movlt	r7, #1
  40f8e4:	2100      	movs	r1, #0
  40f8e6:	2f17      	cmp	r7, #23
  40f8e8:	6461      	str	r1, [r4, #68]	; 0x44
  40f8ea:	d90a      	bls.n	40f902 <_dtoa_r+0x762>
  40f8ec:	2201      	movs	r2, #1
  40f8ee:	2304      	movs	r3, #4
  40f8f0:	005b      	lsls	r3, r3, #1
  40f8f2:	f103 0014 	add.w	r0, r3, #20
  40f8f6:	4287      	cmp	r7, r0
  40f8f8:	4611      	mov	r1, r2
  40f8fa:	f102 0201 	add.w	r2, r2, #1
  40f8fe:	d2f7      	bcs.n	40f8f0 <_dtoa_r+0x750>
  40f900:	6461      	str	r1, [r4, #68]	; 0x44
  40f902:	4620      	mov	r0, r4
  40f904:	f001 fbe8 	bl	4110d8 <_Balloc>
  40f908:	2e0e      	cmp	r6, #14
  40f90a:	9004      	str	r0, [sp, #16]
  40f90c:	6420      	str	r0, [r4, #64]	; 0x40
  40f90e:	f63f ad41 	bhi.w	40f394 <_dtoa_r+0x1f4>
  40f912:	2d00      	cmp	r5, #0
  40f914:	f43f ad3e 	beq.w	40f394 <_dtoa_r+0x1f4>
  40f918:	9902      	ldr	r1, [sp, #8]
  40f91a:	2900      	cmp	r1, #0
  40f91c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40f920:	f340 8202 	ble.w	40fd28 <_dtoa_r+0xb88>
  40f924:	4bb8      	ldr	r3, [pc, #736]	; (40fc08 <_dtoa_r+0xa68>)
  40f926:	f001 020f 	and.w	r2, r1, #15
  40f92a:	110d      	asrs	r5, r1, #4
  40f92c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f930:	06e9      	lsls	r1, r5, #27
  40f932:	e9d3 6700 	ldrd	r6, r7, [r3]
  40f936:	f140 81ae 	bpl.w	40fc96 <_dtoa_r+0xaf6>
  40f93a:	4bb4      	ldr	r3, [pc, #720]	; (40fc0c <_dtoa_r+0xa6c>)
  40f93c:	4650      	mov	r0, sl
  40f93e:	4659      	mov	r1, fp
  40f940:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40f944:	f002 fe1c 	bl	412580 <__aeabi_ddiv>
  40f948:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40f94c:	f005 050f 	and.w	r5, r5, #15
  40f950:	f04f 0a03 	mov.w	sl, #3
  40f954:	b18d      	cbz	r5, 40f97a <_dtoa_r+0x7da>
  40f956:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40fc0c <_dtoa_r+0xa6c>
  40f95a:	07ea      	lsls	r2, r5, #31
  40f95c:	d509      	bpl.n	40f972 <_dtoa_r+0x7d2>
  40f95e:	4630      	mov	r0, r6
  40f960:	4639      	mov	r1, r7
  40f962:	e9d8 2300 	ldrd	r2, r3, [r8]
  40f966:	f002 fce1 	bl	41232c <__aeabi_dmul>
  40f96a:	f10a 0a01 	add.w	sl, sl, #1
  40f96e:	4606      	mov	r6, r0
  40f970:	460f      	mov	r7, r1
  40f972:	106d      	asrs	r5, r5, #1
  40f974:	f108 0808 	add.w	r8, r8, #8
  40f978:	d1ef      	bne.n	40f95a <_dtoa_r+0x7ba>
  40f97a:	463b      	mov	r3, r7
  40f97c:	4632      	mov	r2, r6
  40f97e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40f982:	f002 fdfd 	bl	412580 <__aeabi_ddiv>
  40f986:	4607      	mov	r7, r0
  40f988:	4688      	mov	r8, r1
  40f98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f98c:	b143      	cbz	r3, 40f9a0 <_dtoa_r+0x800>
  40f98e:	2200      	movs	r2, #0
  40f990:	4b9f      	ldr	r3, [pc, #636]	; (40fc10 <_dtoa_r+0xa70>)
  40f992:	4638      	mov	r0, r7
  40f994:	4641      	mov	r1, r8
  40f996:	f002 ff3b 	bl	412810 <__aeabi_dcmplt>
  40f99a:	2800      	cmp	r0, #0
  40f99c:	f040 8286 	bne.w	40feac <_dtoa_r+0xd0c>
  40f9a0:	4650      	mov	r0, sl
  40f9a2:	f002 fc5d 	bl	412260 <__aeabi_i2d>
  40f9a6:	463a      	mov	r2, r7
  40f9a8:	4643      	mov	r3, r8
  40f9aa:	f002 fcbf 	bl	41232c <__aeabi_dmul>
  40f9ae:	4b99      	ldr	r3, [pc, #612]	; (40fc14 <_dtoa_r+0xa74>)
  40f9b0:	2200      	movs	r2, #0
  40f9b2:	f002 fb09 	bl	411fc8 <__adddf3>
  40f9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f9b8:	4605      	mov	r5, r0
  40f9ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40f9be:	2b00      	cmp	r3, #0
  40f9c0:	f000 813e 	beq.w	40fc40 <_dtoa_r+0xaa0>
  40f9c4:	9b02      	ldr	r3, [sp, #8]
  40f9c6:	9315      	str	r3, [sp, #84]	; 0x54
  40f9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f9ca:	9312      	str	r3, [sp, #72]	; 0x48
  40f9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f9ce:	2b00      	cmp	r3, #0
  40f9d0:	f000 81fa 	beq.w	40fdc8 <_dtoa_r+0xc28>
  40f9d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40f9d6:	4b8c      	ldr	r3, [pc, #560]	; (40fc08 <_dtoa_r+0xa68>)
  40f9d8:	498f      	ldr	r1, [pc, #572]	; (40fc18 <_dtoa_r+0xa78>)
  40f9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f9de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40f9e2:	2000      	movs	r0, #0
  40f9e4:	f002 fdcc 	bl	412580 <__aeabi_ddiv>
  40f9e8:	462a      	mov	r2, r5
  40f9ea:	4633      	mov	r3, r6
  40f9ec:	f002 faea 	bl	411fc4 <__aeabi_dsub>
  40f9f0:	4682      	mov	sl, r0
  40f9f2:	468b      	mov	fp, r1
  40f9f4:	4638      	mov	r0, r7
  40f9f6:	4641      	mov	r1, r8
  40f9f8:	f002 ff48 	bl	41288c <__aeabi_d2iz>
  40f9fc:	4605      	mov	r5, r0
  40f9fe:	f002 fc2f 	bl	412260 <__aeabi_i2d>
  40fa02:	4602      	mov	r2, r0
  40fa04:	460b      	mov	r3, r1
  40fa06:	4638      	mov	r0, r7
  40fa08:	4641      	mov	r1, r8
  40fa0a:	f002 fadb 	bl	411fc4 <__aeabi_dsub>
  40fa0e:	3530      	adds	r5, #48	; 0x30
  40fa10:	fa5f f885 	uxtb.w	r8, r5
  40fa14:	9d04      	ldr	r5, [sp, #16]
  40fa16:	4606      	mov	r6, r0
  40fa18:	460f      	mov	r7, r1
  40fa1a:	f885 8000 	strb.w	r8, [r5]
  40fa1e:	4602      	mov	r2, r0
  40fa20:	460b      	mov	r3, r1
  40fa22:	4650      	mov	r0, sl
  40fa24:	4659      	mov	r1, fp
  40fa26:	3501      	adds	r5, #1
  40fa28:	f002 ff10 	bl	41284c <__aeabi_dcmpgt>
  40fa2c:	2800      	cmp	r0, #0
  40fa2e:	d154      	bne.n	40fada <_dtoa_r+0x93a>
  40fa30:	4632      	mov	r2, r6
  40fa32:	463b      	mov	r3, r7
  40fa34:	2000      	movs	r0, #0
  40fa36:	4976      	ldr	r1, [pc, #472]	; (40fc10 <_dtoa_r+0xa70>)
  40fa38:	f002 fac4 	bl	411fc4 <__aeabi_dsub>
  40fa3c:	4602      	mov	r2, r0
  40fa3e:	460b      	mov	r3, r1
  40fa40:	4650      	mov	r0, sl
  40fa42:	4659      	mov	r1, fp
  40fa44:	f002 ff02 	bl	41284c <__aeabi_dcmpgt>
  40fa48:	2800      	cmp	r0, #0
  40fa4a:	f040 8270 	bne.w	40ff2e <_dtoa_r+0xd8e>
  40fa4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40fa50:	2a01      	cmp	r2, #1
  40fa52:	f000 8111 	beq.w	40fc78 <_dtoa_r+0xad8>
  40fa56:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fa58:	9a04      	ldr	r2, [sp, #16]
  40fa5a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40fa5e:	4413      	add	r3, r2
  40fa60:	4699      	mov	r9, r3
  40fa62:	e00d      	b.n	40fa80 <_dtoa_r+0x8e0>
  40fa64:	2000      	movs	r0, #0
  40fa66:	496a      	ldr	r1, [pc, #424]	; (40fc10 <_dtoa_r+0xa70>)
  40fa68:	f002 faac 	bl	411fc4 <__aeabi_dsub>
  40fa6c:	4652      	mov	r2, sl
  40fa6e:	465b      	mov	r3, fp
  40fa70:	f002 fece 	bl	412810 <__aeabi_dcmplt>
  40fa74:	2800      	cmp	r0, #0
  40fa76:	f040 8258 	bne.w	40ff2a <_dtoa_r+0xd8a>
  40fa7a:	454d      	cmp	r5, r9
  40fa7c:	f000 80fa 	beq.w	40fc74 <_dtoa_r+0xad4>
  40fa80:	4650      	mov	r0, sl
  40fa82:	4659      	mov	r1, fp
  40fa84:	2200      	movs	r2, #0
  40fa86:	4b65      	ldr	r3, [pc, #404]	; (40fc1c <_dtoa_r+0xa7c>)
  40fa88:	f002 fc50 	bl	41232c <__aeabi_dmul>
  40fa8c:	2200      	movs	r2, #0
  40fa8e:	4b63      	ldr	r3, [pc, #396]	; (40fc1c <_dtoa_r+0xa7c>)
  40fa90:	4682      	mov	sl, r0
  40fa92:	468b      	mov	fp, r1
  40fa94:	4630      	mov	r0, r6
  40fa96:	4639      	mov	r1, r7
  40fa98:	f002 fc48 	bl	41232c <__aeabi_dmul>
  40fa9c:	460f      	mov	r7, r1
  40fa9e:	4606      	mov	r6, r0
  40faa0:	f002 fef4 	bl	41288c <__aeabi_d2iz>
  40faa4:	4680      	mov	r8, r0
  40faa6:	f002 fbdb 	bl	412260 <__aeabi_i2d>
  40faaa:	4602      	mov	r2, r0
  40faac:	460b      	mov	r3, r1
  40faae:	4630      	mov	r0, r6
  40fab0:	4639      	mov	r1, r7
  40fab2:	f002 fa87 	bl	411fc4 <__aeabi_dsub>
  40fab6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40faba:	fa5f f888 	uxtb.w	r8, r8
  40fabe:	4652      	mov	r2, sl
  40fac0:	465b      	mov	r3, fp
  40fac2:	f805 8b01 	strb.w	r8, [r5], #1
  40fac6:	4606      	mov	r6, r0
  40fac8:	460f      	mov	r7, r1
  40faca:	f002 fea1 	bl	412810 <__aeabi_dcmplt>
  40face:	4632      	mov	r2, r6
  40fad0:	463b      	mov	r3, r7
  40fad2:	2800      	cmp	r0, #0
  40fad4:	d0c6      	beq.n	40fa64 <_dtoa_r+0x8c4>
  40fad6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40fada:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40fadc:	9302      	str	r3, [sp, #8]
  40fade:	e523      	b.n	40f528 <_dtoa_r+0x388>
  40fae0:	2300      	movs	r3, #0
  40fae2:	930b      	str	r3, [sp, #44]	; 0x2c
  40fae4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40fae6:	2b00      	cmp	r3, #0
  40fae8:	f340 80dc 	ble.w	40fca4 <_dtoa_r+0xb04>
  40faec:	461f      	mov	r7, r3
  40faee:	461e      	mov	r6, r3
  40faf0:	930f      	str	r3, [sp, #60]	; 0x3c
  40faf2:	930a      	str	r3, [sp, #40]	; 0x28
  40faf4:	e6f6      	b.n	40f8e4 <_dtoa_r+0x744>
  40faf6:	2301      	movs	r3, #1
  40faf8:	930b      	str	r3, [sp, #44]	; 0x2c
  40fafa:	e7f3      	b.n	40fae4 <_dtoa_r+0x944>
  40fafc:	f1ba 0f00 	cmp.w	sl, #0
  40fb00:	f47f ada8 	bne.w	40f654 <_dtoa_r+0x4b4>
  40fb04:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40fb08:	2b00      	cmp	r3, #0
  40fb0a:	f47f adba 	bne.w	40f682 <_dtoa_r+0x4e2>
  40fb0e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40fb12:	0d3f      	lsrs	r7, r7, #20
  40fb14:	053f      	lsls	r7, r7, #20
  40fb16:	2f00      	cmp	r7, #0
  40fb18:	f000 820d 	beq.w	40ff36 <_dtoa_r+0xd96>
  40fb1c:	9b08      	ldr	r3, [sp, #32]
  40fb1e:	3301      	adds	r3, #1
  40fb20:	9308      	str	r3, [sp, #32]
  40fb22:	9b06      	ldr	r3, [sp, #24]
  40fb24:	3301      	adds	r3, #1
  40fb26:	9306      	str	r3, [sp, #24]
  40fb28:	2301      	movs	r3, #1
  40fb2a:	930c      	str	r3, [sp, #48]	; 0x30
  40fb2c:	e5ab      	b.n	40f686 <_dtoa_r+0x4e6>
  40fb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fb30:	2b00      	cmp	r3, #0
  40fb32:	f73f ac42 	bgt.w	40f3ba <_dtoa_r+0x21a>
  40fb36:	f040 8221 	bne.w	40ff7c <_dtoa_r+0xddc>
  40fb3a:	2200      	movs	r2, #0
  40fb3c:	4b38      	ldr	r3, [pc, #224]	; (40fc20 <_dtoa_r+0xa80>)
  40fb3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40fb42:	f002 fbf3 	bl	41232c <__aeabi_dmul>
  40fb46:	4652      	mov	r2, sl
  40fb48:	465b      	mov	r3, fp
  40fb4a:	f002 fe75 	bl	412838 <__aeabi_dcmpge>
  40fb4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40fb52:	4646      	mov	r6, r8
  40fb54:	2800      	cmp	r0, #0
  40fb56:	d041      	beq.n	40fbdc <_dtoa_r+0xa3c>
  40fb58:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40fb5a:	9d04      	ldr	r5, [sp, #16]
  40fb5c:	43db      	mvns	r3, r3
  40fb5e:	9302      	str	r3, [sp, #8]
  40fb60:	4641      	mov	r1, r8
  40fb62:	4620      	mov	r0, r4
  40fb64:	f001 fade 	bl	411124 <_Bfree>
  40fb68:	2e00      	cmp	r6, #0
  40fb6a:	f43f acdd 	beq.w	40f528 <_dtoa_r+0x388>
  40fb6e:	e6a7      	b.n	40f8c0 <_dtoa_r+0x720>
  40fb70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40fb72:	4649      	mov	r1, r9
  40fb74:	4620      	mov	r0, r4
  40fb76:	f001 fc0b 	bl	411390 <__pow5mult>
  40fb7a:	4681      	mov	r9, r0
  40fb7c:	e558      	b.n	40f630 <_dtoa_r+0x490>
  40fb7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40fb80:	2a00      	cmp	r2, #0
  40fb82:	f000 8187 	beq.w	40fe94 <_dtoa_r+0xcf4>
  40fb86:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40fb8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40fb8c:	9d08      	ldr	r5, [sp, #32]
  40fb8e:	e4f2      	b.n	40f576 <_dtoa_r+0x3d6>
  40fb90:	f1ba 0f00 	cmp.w	sl, #0
  40fb94:	f47f ad75 	bne.w	40f682 <_dtoa_r+0x4e2>
  40fb98:	e7b4      	b.n	40fb04 <_dtoa_r+0x964>
  40fb9a:	f001 facd 	bl	411138 <__multadd>
  40fb9e:	4647      	mov	r7, r8
  40fba0:	4606      	mov	r6, r0
  40fba2:	4683      	mov	fp, r0
  40fba4:	e5be      	b.n	40f724 <_dtoa_r+0x584>
  40fba6:	4601      	mov	r1, r0
  40fba8:	4620      	mov	r0, r4
  40fbaa:	9306      	str	r3, [sp, #24]
  40fbac:	f001 faba 	bl	411124 <_Bfree>
  40fbb0:	2201      	movs	r2, #1
  40fbb2:	9b06      	ldr	r3, [sp, #24]
  40fbb4:	e5e0      	b.n	40f778 <_dtoa_r+0x5d8>
  40fbb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40fbb8:	2b02      	cmp	r3, #2
  40fbba:	f77f ad96 	ble.w	40f6ea <_dtoa_r+0x54a>
  40fbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fbc0:	2b00      	cmp	r3, #0
  40fbc2:	d1c9      	bne.n	40fb58 <_dtoa_r+0x9b8>
  40fbc4:	4641      	mov	r1, r8
  40fbc6:	2205      	movs	r2, #5
  40fbc8:	4620      	mov	r0, r4
  40fbca:	f001 fab5 	bl	411138 <__multadd>
  40fbce:	4601      	mov	r1, r0
  40fbd0:	4680      	mov	r8, r0
  40fbd2:	4648      	mov	r0, r9
  40fbd4:	f001 fc7e 	bl	4114d4 <__mcmp>
  40fbd8:	2800      	cmp	r0, #0
  40fbda:	ddbd      	ble.n	40fb58 <_dtoa_r+0x9b8>
  40fbdc:	9a02      	ldr	r2, [sp, #8]
  40fbde:	9904      	ldr	r1, [sp, #16]
  40fbe0:	2331      	movs	r3, #49	; 0x31
  40fbe2:	3201      	adds	r2, #1
  40fbe4:	9202      	str	r2, [sp, #8]
  40fbe6:	700b      	strb	r3, [r1, #0]
  40fbe8:	1c4d      	adds	r5, r1, #1
  40fbea:	e7b9      	b.n	40fb60 <_dtoa_r+0x9c0>
  40fbec:	9a02      	ldr	r2, [sp, #8]
  40fbee:	3201      	adds	r2, #1
  40fbf0:	9202      	str	r2, [sp, #8]
  40fbf2:	9a04      	ldr	r2, [sp, #16]
  40fbf4:	2331      	movs	r3, #49	; 0x31
  40fbf6:	7013      	strb	r3, [r2, #0]
  40fbf8:	e652      	b.n	40f8a0 <_dtoa_r+0x700>
  40fbfa:	2301      	movs	r3, #1
  40fbfc:	930b      	str	r3, [sp, #44]	; 0x2c
  40fbfe:	e666      	b.n	40f8ce <_dtoa_r+0x72e>
  40fc00:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40fc04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40fc06:	e48f      	b.n	40f528 <_dtoa_r+0x388>
  40fc08:	00414250 	.word	0x00414250
  40fc0c:	00414228 	.word	0x00414228
  40fc10:	3ff00000 	.word	0x3ff00000
  40fc14:	401c0000 	.word	0x401c0000
  40fc18:	3fe00000 	.word	0x3fe00000
  40fc1c:	40240000 	.word	0x40240000
  40fc20:	40140000 	.word	0x40140000
  40fc24:	4650      	mov	r0, sl
  40fc26:	f002 fb1b 	bl	412260 <__aeabi_i2d>
  40fc2a:	463a      	mov	r2, r7
  40fc2c:	4643      	mov	r3, r8
  40fc2e:	f002 fb7d 	bl	41232c <__aeabi_dmul>
  40fc32:	2200      	movs	r2, #0
  40fc34:	4bc1      	ldr	r3, [pc, #772]	; (40ff3c <_dtoa_r+0xd9c>)
  40fc36:	f002 f9c7 	bl	411fc8 <__adddf3>
  40fc3a:	4605      	mov	r5, r0
  40fc3c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40fc40:	4641      	mov	r1, r8
  40fc42:	2200      	movs	r2, #0
  40fc44:	4bbe      	ldr	r3, [pc, #760]	; (40ff40 <_dtoa_r+0xda0>)
  40fc46:	4638      	mov	r0, r7
  40fc48:	f002 f9bc 	bl	411fc4 <__aeabi_dsub>
  40fc4c:	462a      	mov	r2, r5
  40fc4e:	4633      	mov	r3, r6
  40fc50:	4682      	mov	sl, r0
  40fc52:	468b      	mov	fp, r1
  40fc54:	f002 fdfa 	bl	41284c <__aeabi_dcmpgt>
  40fc58:	4680      	mov	r8, r0
  40fc5a:	2800      	cmp	r0, #0
  40fc5c:	f040 8110 	bne.w	40fe80 <_dtoa_r+0xce0>
  40fc60:	462a      	mov	r2, r5
  40fc62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40fc66:	4650      	mov	r0, sl
  40fc68:	4659      	mov	r1, fp
  40fc6a:	f002 fdd1 	bl	412810 <__aeabi_dcmplt>
  40fc6e:	b118      	cbz	r0, 40fc78 <_dtoa_r+0xad8>
  40fc70:	4646      	mov	r6, r8
  40fc72:	e771      	b.n	40fb58 <_dtoa_r+0x9b8>
  40fc74:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40fc78:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40fc7c:	f7ff bb8a 	b.w	40f394 <_dtoa_r+0x1f4>
  40fc80:	9804      	ldr	r0, [sp, #16]
  40fc82:	f7ff babb 	b.w	40f1fc <_dtoa_r+0x5c>
  40fc86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40fc88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40fc8a:	970c      	str	r7, [sp, #48]	; 0x30
  40fc8c:	1afb      	subs	r3, r7, r3
  40fc8e:	441a      	add	r2, r3
  40fc90:	920d      	str	r2, [sp, #52]	; 0x34
  40fc92:	2700      	movs	r7, #0
  40fc94:	e469      	b.n	40f56a <_dtoa_r+0x3ca>
  40fc96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40fc9a:	f04f 0a02 	mov.w	sl, #2
  40fc9e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40fca2:	e657      	b.n	40f954 <_dtoa_r+0x7b4>
  40fca4:	2100      	movs	r1, #0
  40fca6:	2301      	movs	r3, #1
  40fca8:	6461      	str	r1, [r4, #68]	; 0x44
  40fcaa:	4620      	mov	r0, r4
  40fcac:	9325      	str	r3, [sp, #148]	; 0x94
  40fcae:	f001 fa13 	bl	4110d8 <_Balloc>
  40fcb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40fcb4:	9004      	str	r0, [sp, #16]
  40fcb6:	6420      	str	r0, [r4, #64]	; 0x40
  40fcb8:	930a      	str	r3, [sp, #40]	; 0x28
  40fcba:	930f      	str	r3, [sp, #60]	; 0x3c
  40fcbc:	e629      	b.n	40f912 <_dtoa_r+0x772>
  40fcbe:	2a00      	cmp	r2, #0
  40fcc0:	46d0      	mov	r8, sl
  40fcc2:	f8cd b018 	str.w	fp, [sp, #24]
  40fcc6:	469a      	mov	sl, r3
  40fcc8:	dd11      	ble.n	40fcee <_dtoa_r+0xb4e>
  40fcca:	4649      	mov	r1, r9
  40fccc:	2201      	movs	r2, #1
  40fcce:	4620      	mov	r0, r4
  40fcd0:	f001 fbae 	bl	411430 <__lshift>
  40fcd4:	4641      	mov	r1, r8
  40fcd6:	4681      	mov	r9, r0
  40fcd8:	f001 fbfc 	bl	4114d4 <__mcmp>
  40fcdc:	2800      	cmp	r0, #0
  40fcde:	f340 8146 	ble.w	40ff6e <_dtoa_r+0xdce>
  40fce2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40fce6:	f000 8106 	beq.w	40fef6 <_dtoa_r+0xd56>
  40fcea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40fcee:	46b3      	mov	fp, r6
  40fcf0:	f887 a000 	strb.w	sl, [r7]
  40fcf4:	1c7d      	adds	r5, r7, #1
  40fcf6:	9e06      	ldr	r6, [sp, #24]
  40fcf8:	e5d2      	b.n	40f8a0 <_dtoa_r+0x700>
  40fcfa:	d104      	bne.n	40fd06 <_dtoa_r+0xb66>
  40fcfc:	f01a 0f01 	tst.w	sl, #1
  40fd00:	d001      	beq.n	40fd06 <_dtoa_r+0xb66>
  40fd02:	e5bd      	b.n	40f880 <_dtoa_r+0x6e0>
  40fd04:	4615      	mov	r5, r2
  40fd06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40fd0a:	2b30      	cmp	r3, #48	; 0x30
  40fd0c:	f105 32ff 	add.w	r2, r5, #4294967295
  40fd10:	d0f8      	beq.n	40fd04 <_dtoa_r+0xb64>
  40fd12:	e5c5      	b.n	40f8a0 <_dtoa_r+0x700>
  40fd14:	9904      	ldr	r1, [sp, #16]
  40fd16:	2230      	movs	r2, #48	; 0x30
  40fd18:	700a      	strb	r2, [r1, #0]
  40fd1a:	9a02      	ldr	r2, [sp, #8]
  40fd1c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40fd20:	3201      	adds	r2, #1
  40fd22:	9202      	str	r2, [sp, #8]
  40fd24:	f7ff bbfc 	b.w	40f520 <_dtoa_r+0x380>
  40fd28:	f000 80bb 	beq.w	40fea2 <_dtoa_r+0xd02>
  40fd2c:	9b02      	ldr	r3, [sp, #8]
  40fd2e:	425d      	negs	r5, r3
  40fd30:	4b84      	ldr	r3, [pc, #528]	; (40ff44 <_dtoa_r+0xda4>)
  40fd32:	f005 020f 	and.w	r2, r5, #15
  40fd36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40fd3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40fd42:	f002 faf3 	bl	41232c <__aeabi_dmul>
  40fd46:	112d      	asrs	r5, r5, #4
  40fd48:	4607      	mov	r7, r0
  40fd4a:	4688      	mov	r8, r1
  40fd4c:	f000 812c 	beq.w	40ffa8 <_dtoa_r+0xe08>
  40fd50:	4e7d      	ldr	r6, [pc, #500]	; (40ff48 <_dtoa_r+0xda8>)
  40fd52:	f04f 0a02 	mov.w	sl, #2
  40fd56:	07eb      	lsls	r3, r5, #31
  40fd58:	d509      	bpl.n	40fd6e <_dtoa_r+0xbce>
  40fd5a:	4638      	mov	r0, r7
  40fd5c:	4641      	mov	r1, r8
  40fd5e:	e9d6 2300 	ldrd	r2, r3, [r6]
  40fd62:	f002 fae3 	bl	41232c <__aeabi_dmul>
  40fd66:	f10a 0a01 	add.w	sl, sl, #1
  40fd6a:	4607      	mov	r7, r0
  40fd6c:	4688      	mov	r8, r1
  40fd6e:	106d      	asrs	r5, r5, #1
  40fd70:	f106 0608 	add.w	r6, r6, #8
  40fd74:	d1ef      	bne.n	40fd56 <_dtoa_r+0xbb6>
  40fd76:	e608      	b.n	40f98a <_dtoa_r+0x7ea>
  40fd78:	6871      	ldr	r1, [r6, #4]
  40fd7a:	4620      	mov	r0, r4
  40fd7c:	f001 f9ac 	bl	4110d8 <_Balloc>
  40fd80:	6933      	ldr	r3, [r6, #16]
  40fd82:	3302      	adds	r3, #2
  40fd84:	009a      	lsls	r2, r3, #2
  40fd86:	4605      	mov	r5, r0
  40fd88:	f106 010c 	add.w	r1, r6, #12
  40fd8c:	300c      	adds	r0, #12
  40fd8e:	f7fc fb23 	bl	40c3d8 <memcpy>
  40fd92:	4629      	mov	r1, r5
  40fd94:	2201      	movs	r2, #1
  40fd96:	4620      	mov	r0, r4
  40fd98:	f001 fb4a 	bl	411430 <__lshift>
  40fd9c:	9006      	str	r0, [sp, #24]
  40fd9e:	e4b5      	b.n	40f70c <_dtoa_r+0x56c>
  40fda0:	2b39      	cmp	r3, #57	; 0x39
  40fda2:	f8cd b018 	str.w	fp, [sp, #24]
  40fda6:	46d0      	mov	r8, sl
  40fda8:	f000 80a5 	beq.w	40fef6 <_dtoa_r+0xd56>
  40fdac:	f103 0a01 	add.w	sl, r3, #1
  40fdb0:	46b3      	mov	fp, r6
  40fdb2:	f887 a000 	strb.w	sl, [r7]
  40fdb6:	1c7d      	adds	r5, r7, #1
  40fdb8:	9e06      	ldr	r6, [sp, #24]
  40fdba:	e571      	b.n	40f8a0 <_dtoa_r+0x700>
  40fdbc:	465a      	mov	r2, fp
  40fdbe:	46d0      	mov	r8, sl
  40fdc0:	46b3      	mov	fp, r6
  40fdc2:	469a      	mov	sl, r3
  40fdc4:	4616      	mov	r6, r2
  40fdc6:	e54f      	b.n	40f868 <_dtoa_r+0x6c8>
  40fdc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fdca:	495e      	ldr	r1, [pc, #376]	; (40ff44 <_dtoa_r+0xda4>)
  40fdcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40fdd0:	462a      	mov	r2, r5
  40fdd2:	4633      	mov	r3, r6
  40fdd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40fdd8:	f002 faa8 	bl	41232c <__aeabi_dmul>
  40fddc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40fde0:	4638      	mov	r0, r7
  40fde2:	4641      	mov	r1, r8
  40fde4:	f002 fd52 	bl	41288c <__aeabi_d2iz>
  40fde8:	4605      	mov	r5, r0
  40fdea:	f002 fa39 	bl	412260 <__aeabi_i2d>
  40fdee:	460b      	mov	r3, r1
  40fdf0:	4602      	mov	r2, r0
  40fdf2:	4641      	mov	r1, r8
  40fdf4:	4638      	mov	r0, r7
  40fdf6:	f002 f8e5 	bl	411fc4 <__aeabi_dsub>
  40fdfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fdfc:	460f      	mov	r7, r1
  40fdfe:	9904      	ldr	r1, [sp, #16]
  40fe00:	3530      	adds	r5, #48	; 0x30
  40fe02:	2b01      	cmp	r3, #1
  40fe04:	700d      	strb	r5, [r1, #0]
  40fe06:	4606      	mov	r6, r0
  40fe08:	f101 0501 	add.w	r5, r1, #1
  40fe0c:	d026      	beq.n	40fe5c <_dtoa_r+0xcbc>
  40fe0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fe10:	9a04      	ldr	r2, [sp, #16]
  40fe12:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40ff50 <_dtoa_r+0xdb0>
  40fe16:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40fe1a:	4413      	add	r3, r2
  40fe1c:	f04f 0a00 	mov.w	sl, #0
  40fe20:	4699      	mov	r9, r3
  40fe22:	4652      	mov	r2, sl
  40fe24:	465b      	mov	r3, fp
  40fe26:	4630      	mov	r0, r6
  40fe28:	4639      	mov	r1, r7
  40fe2a:	f002 fa7f 	bl	41232c <__aeabi_dmul>
  40fe2e:	460f      	mov	r7, r1
  40fe30:	4606      	mov	r6, r0
  40fe32:	f002 fd2b 	bl	41288c <__aeabi_d2iz>
  40fe36:	4680      	mov	r8, r0
  40fe38:	f002 fa12 	bl	412260 <__aeabi_i2d>
  40fe3c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40fe40:	4602      	mov	r2, r0
  40fe42:	460b      	mov	r3, r1
  40fe44:	4630      	mov	r0, r6
  40fe46:	4639      	mov	r1, r7
  40fe48:	f002 f8bc 	bl	411fc4 <__aeabi_dsub>
  40fe4c:	f805 8b01 	strb.w	r8, [r5], #1
  40fe50:	454d      	cmp	r5, r9
  40fe52:	4606      	mov	r6, r0
  40fe54:	460f      	mov	r7, r1
  40fe56:	d1e4      	bne.n	40fe22 <_dtoa_r+0xc82>
  40fe58:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40fe5c:	4b3b      	ldr	r3, [pc, #236]	; (40ff4c <_dtoa_r+0xdac>)
  40fe5e:	2200      	movs	r2, #0
  40fe60:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40fe64:	f002 f8b0 	bl	411fc8 <__adddf3>
  40fe68:	4632      	mov	r2, r6
  40fe6a:	463b      	mov	r3, r7
  40fe6c:	f002 fcd0 	bl	412810 <__aeabi_dcmplt>
  40fe70:	2800      	cmp	r0, #0
  40fe72:	d046      	beq.n	40ff02 <_dtoa_r+0xd62>
  40fe74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40fe76:	9302      	str	r3, [sp, #8]
  40fe78:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40fe7c:	f7ff bb43 	b.w	40f506 <_dtoa_r+0x366>
  40fe80:	f04f 0800 	mov.w	r8, #0
  40fe84:	4646      	mov	r6, r8
  40fe86:	e6a9      	b.n	40fbdc <_dtoa_r+0xa3c>
  40fe88:	9b08      	ldr	r3, [sp, #32]
  40fe8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fe8c:	1a9d      	subs	r5, r3, r2
  40fe8e:	2300      	movs	r3, #0
  40fe90:	f7ff bb71 	b.w	40f576 <_dtoa_r+0x3d6>
  40fe94:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40fe96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40fe98:	9d08      	ldr	r5, [sp, #32]
  40fe9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40fe9e:	f7ff bb6a 	b.w	40f576 <_dtoa_r+0x3d6>
  40fea2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40fea6:	f04f 0a02 	mov.w	sl, #2
  40feaa:	e56e      	b.n	40f98a <_dtoa_r+0x7ea>
  40feac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40feae:	2b00      	cmp	r3, #0
  40feb0:	f43f aeb8 	beq.w	40fc24 <_dtoa_r+0xa84>
  40feb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40feb6:	2b00      	cmp	r3, #0
  40feb8:	f77f aede 	ble.w	40fc78 <_dtoa_r+0xad8>
  40febc:	2200      	movs	r2, #0
  40febe:	4b24      	ldr	r3, [pc, #144]	; (40ff50 <_dtoa_r+0xdb0>)
  40fec0:	4638      	mov	r0, r7
  40fec2:	4641      	mov	r1, r8
  40fec4:	f002 fa32 	bl	41232c <__aeabi_dmul>
  40fec8:	4607      	mov	r7, r0
  40feca:	4688      	mov	r8, r1
  40fecc:	f10a 0001 	add.w	r0, sl, #1
  40fed0:	f002 f9c6 	bl	412260 <__aeabi_i2d>
  40fed4:	463a      	mov	r2, r7
  40fed6:	4643      	mov	r3, r8
  40fed8:	f002 fa28 	bl	41232c <__aeabi_dmul>
  40fedc:	2200      	movs	r2, #0
  40fede:	4b17      	ldr	r3, [pc, #92]	; (40ff3c <_dtoa_r+0xd9c>)
  40fee0:	f002 f872 	bl	411fc8 <__adddf3>
  40fee4:	9a02      	ldr	r2, [sp, #8]
  40fee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fee8:	9312      	str	r3, [sp, #72]	; 0x48
  40feea:	3a01      	subs	r2, #1
  40feec:	4605      	mov	r5, r0
  40feee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40fef2:	9215      	str	r2, [sp, #84]	; 0x54
  40fef4:	e56a      	b.n	40f9cc <_dtoa_r+0x82c>
  40fef6:	2239      	movs	r2, #57	; 0x39
  40fef8:	46b3      	mov	fp, r6
  40fefa:	703a      	strb	r2, [r7, #0]
  40fefc:	9e06      	ldr	r6, [sp, #24]
  40fefe:	1c7d      	adds	r5, r7, #1
  40ff00:	e4c0      	b.n	40f884 <_dtoa_r+0x6e4>
  40ff02:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40ff06:	2000      	movs	r0, #0
  40ff08:	4910      	ldr	r1, [pc, #64]	; (40ff4c <_dtoa_r+0xdac>)
  40ff0a:	f002 f85b 	bl	411fc4 <__aeabi_dsub>
  40ff0e:	4632      	mov	r2, r6
  40ff10:	463b      	mov	r3, r7
  40ff12:	f002 fc9b 	bl	41284c <__aeabi_dcmpgt>
  40ff16:	b908      	cbnz	r0, 40ff1c <_dtoa_r+0xd7c>
  40ff18:	e6ae      	b.n	40fc78 <_dtoa_r+0xad8>
  40ff1a:	4615      	mov	r5, r2
  40ff1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ff20:	2b30      	cmp	r3, #48	; 0x30
  40ff22:	f105 32ff 	add.w	r2, r5, #4294967295
  40ff26:	d0f8      	beq.n	40ff1a <_dtoa_r+0xd7a>
  40ff28:	e5d7      	b.n	40fada <_dtoa_r+0x93a>
  40ff2a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40ff2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ff30:	9302      	str	r3, [sp, #8]
  40ff32:	f7ff bae8 	b.w	40f506 <_dtoa_r+0x366>
  40ff36:	970c      	str	r7, [sp, #48]	; 0x30
  40ff38:	f7ff bba5 	b.w	40f686 <_dtoa_r+0x4e6>
  40ff3c:	401c0000 	.word	0x401c0000
  40ff40:	40140000 	.word	0x40140000
  40ff44:	00414250 	.word	0x00414250
  40ff48:	00414228 	.word	0x00414228
  40ff4c:	3fe00000 	.word	0x3fe00000
  40ff50:	40240000 	.word	0x40240000
  40ff54:	2b39      	cmp	r3, #57	; 0x39
  40ff56:	f8cd b018 	str.w	fp, [sp, #24]
  40ff5a:	46d0      	mov	r8, sl
  40ff5c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40ff60:	469a      	mov	sl, r3
  40ff62:	d0c8      	beq.n	40fef6 <_dtoa_r+0xd56>
  40ff64:	f1bb 0f00 	cmp.w	fp, #0
  40ff68:	f73f aebf 	bgt.w	40fcea <_dtoa_r+0xb4a>
  40ff6c:	e6bf      	b.n	40fcee <_dtoa_r+0xb4e>
  40ff6e:	f47f aebe 	bne.w	40fcee <_dtoa_r+0xb4e>
  40ff72:	f01a 0f01 	tst.w	sl, #1
  40ff76:	f43f aeba 	beq.w	40fcee <_dtoa_r+0xb4e>
  40ff7a:	e6b2      	b.n	40fce2 <_dtoa_r+0xb42>
  40ff7c:	f04f 0800 	mov.w	r8, #0
  40ff80:	4646      	mov	r6, r8
  40ff82:	e5e9      	b.n	40fb58 <_dtoa_r+0x9b8>
  40ff84:	4631      	mov	r1, r6
  40ff86:	2300      	movs	r3, #0
  40ff88:	220a      	movs	r2, #10
  40ff8a:	4620      	mov	r0, r4
  40ff8c:	f001 f8d4 	bl	411138 <__multadd>
  40ff90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ff92:	2b00      	cmp	r3, #0
  40ff94:	4606      	mov	r6, r0
  40ff96:	dd0a      	ble.n	40ffae <_dtoa_r+0xe0e>
  40ff98:	930a      	str	r3, [sp, #40]	; 0x28
  40ff9a:	f7ff bbaa 	b.w	40f6f2 <_dtoa_r+0x552>
  40ff9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ffa0:	2b02      	cmp	r3, #2
  40ffa2:	dc23      	bgt.n	40ffec <_dtoa_r+0xe4c>
  40ffa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ffa6:	e43b      	b.n	40f820 <_dtoa_r+0x680>
  40ffa8:	f04f 0a02 	mov.w	sl, #2
  40ffac:	e4ed      	b.n	40f98a <_dtoa_r+0x7ea>
  40ffae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ffb0:	2b02      	cmp	r3, #2
  40ffb2:	dc1b      	bgt.n	40ffec <_dtoa_r+0xe4c>
  40ffb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ffb6:	e7ef      	b.n	40ff98 <_dtoa_r+0xdf8>
  40ffb8:	2500      	movs	r5, #0
  40ffba:	6465      	str	r5, [r4, #68]	; 0x44
  40ffbc:	4629      	mov	r1, r5
  40ffbe:	4620      	mov	r0, r4
  40ffc0:	f001 f88a 	bl	4110d8 <_Balloc>
  40ffc4:	f04f 33ff 	mov.w	r3, #4294967295
  40ffc8:	930a      	str	r3, [sp, #40]	; 0x28
  40ffca:	930f      	str	r3, [sp, #60]	; 0x3c
  40ffcc:	2301      	movs	r3, #1
  40ffce:	9004      	str	r0, [sp, #16]
  40ffd0:	9525      	str	r5, [sp, #148]	; 0x94
  40ffd2:	6420      	str	r0, [r4, #64]	; 0x40
  40ffd4:	930b      	str	r3, [sp, #44]	; 0x2c
  40ffd6:	f7ff b9dd 	b.w	40f394 <_dtoa_r+0x1f4>
  40ffda:	2501      	movs	r5, #1
  40ffdc:	f7ff b9a5 	b.w	40f32a <_dtoa_r+0x18a>
  40ffe0:	f43f ab69 	beq.w	40f6b6 <_dtoa_r+0x516>
  40ffe4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40ffe8:	f7ff bbf9 	b.w	40f7de <_dtoa_r+0x63e>
  40ffec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ffee:	930a      	str	r3, [sp, #40]	; 0x28
  40fff0:	e5e5      	b.n	40fbbe <_dtoa_r+0xa1e>
  40fff2:	bf00      	nop

0040fff4 <__sflush_r>:
  40fff4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40fff8:	b29a      	uxth	r2, r3
  40fffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fffe:	460d      	mov	r5, r1
  410000:	0711      	lsls	r1, r2, #28
  410002:	4680      	mov	r8, r0
  410004:	d43a      	bmi.n	41007c <__sflush_r+0x88>
  410006:	686a      	ldr	r2, [r5, #4]
  410008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41000c:	2a00      	cmp	r2, #0
  41000e:	81ab      	strh	r3, [r5, #12]
  410010:	dd6f      	ble.n	4100f2 <__sflush_r+0xfe>
  410012:	6aac      	ldr	r4, [r5, #40]	; 0x28
  410014:	2c00      	cmp	r4, #0
  410016:	d049      	beq.n	4100ac <__sflush_r+0xb8>
  410018:	2200      	movs	r2, #0
  41001a:	b29b      	uxth	r3, r3
  41001c:	f8d8 6000 	ldr.w	r6, [r8]
  410020:	f8c8 2000 	str.w	r2, [r8]
  410024:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  410028:	d067      	beq.n	4100fa <__sflush_r+0x106>
  41002a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  41002c:	075f      	lsls	r7, r3, #29
  41002e:	d505      	bpl.n	41003c <__sflush_r+0x48>
  410030:	6869      	ldr	r1, [r5, #4]
  410032:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  410034:	1a52      	subs	r2, r2, r1
  410036:	b10b      	cbz	r3, 41003c <__sflush_r+0x48>
  410038:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  41003a:	1ad2      	subs	r2, r2, r3
  41003c:	2300      	movs	r3, #0
  41003e:	69e9      	ldr	r1, [r5, #28]
  410040:	4640      	mov	r0, r8
  410042:	47a0      	blx	r4
  410044:	1c44      	adds	r4, r0, #1
  410046:	d03c      	beq.n	4100c2 <__sflush_r+0xce>
  410048:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  41004c:	692a      	ldr	r2, [r5, #16]
  41004e:	602a      	str	r2, [r5, #0]
  410050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  410054:	2200      	movs	r2, #0
  410056:	81ab      	strh	r3, [r5, #12]
  410058:	04db      	lsls	r3, r3, #19
  41005a:	606a      	str	r2, [r5, #4]
  41005c:	d447      	bmi.n	4100ee <__sflush_r+0xfa>
  41005e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  410060:	f8c8 6000 	str.w	r6, [r8]
  410064:	b311      	cbz	r1, 4100ac <__sflush_r+0xb8>
  410066:	f105 0340 	add.w	r3, r5, #64	; 0x40
  41006a:	4299      	cmp	r1, r3
  41006c:	d002      	beq.n	410074 <__sflush_r+0x80>
  41006e:	4640      	mov	r0, r8
  410070:	f000 f9de 	bl	410430 <_free_r>
  410074:	2000      	movs	r0, #0
  410076:	6328      	str	r0, [r5, #48]	; 0x30
  410078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41007c:	692e      	ldr	r6, [r5, #16]
  41007e:	b1ae      	cbz	r6, 4100ac <__sflush_r+0xb8>
  410080:	682c      	ldr	r4, [r5, #0]
  410082:	602e      	str	r6, [r5, #0]
  410084:	0791      	lsls	r1, r2, #30
  410086:	bf0c      	ite	eq
  410088:	696b      	ldreq	r3, [r5, #20]
  41008a:	2300      	movne	r3, #0
  41008c:	1ba4      	subs	r4, r4, r6
  41008e:	60ab      	str	r3, [r5, #8]
  410090:	e00a      	b.n	4100a8 <__sflush_r+0xb4>
  410092:	4623      	mov	r3, r4
  410094:	4632      	mov	r2, r6
  410096:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  410098:	69e9      	ldr	r1, [r5, #28]
  41009a:	4640      	mov	r0, r8
  41009c:	47b8      	blx	r7
  41009e:	2800      	cmp	r0, #0
  4100a0:	eba4 0400 	sub.w	r4, r4, r0
  4100a4:	4406      	add	r6, r0
  4100a6:	dd04      	ble.n	4100b2 <__sflush_r+0xbe>
  4100a8:	2c00      	cmp	r4, #0
  4100aa:	dcf2      	bgt.n	410092 <__sflush_r+0x9e>
  4100ac:	2000      	movs	r0, #0
  4100ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4100b2:	89ab      	ldrh	r3, [r5, #12]
  4100b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4100b8:	81ab      	strh	r3, [r5, #12]
  4100ba:	f04f 30ff 	mov.w	r0, #4294967295
  4100be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4100c2:	f8d8 4000 	ldr.w	r4, [r8]
  4100c6:	2c1d      	cmp	r4, #29
  4100c8:	d8f3      	bhi.n	4100b2 <__sflush_r+0xbe>
  4100ca:	4b19      	ldr	r3, [pc, #100]	; (410130 <__sflush_r+0x13c>)
  4100cc:	40e3      	lsrs	r3, r4
  4100ce:	43db      	mvns	r3, r3
  4100d0:	f013 0301 	ands.w	r3, r3, #1
  4100d4:	d1ed      	bne.n	4100b2 <__sflush_r+0xbe>
  4100d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4100da:	606b      	str	r3, [r5, #4]
  4100dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4100e0:	6929      	ldr	r1, [r5, #16]
  4100e2:	81ab      	strh	r3, [r5, #12]
  4100e4:	04da      	lsls	r2, r3, #19
  4100e6:	6029      	str	r1, [r5, #0]
  4100e8:	d5b9      	bpl.n	41005e <__sflush_r+0x6a>
  4100ea:	2c00      	cmp	r4, #0
  4100ec:	d1b7      	bne.n	41005e <__sflush_r+0x6a>
  4100ee:	6528      	str	r0, [r5, #80]	; 0x50
  4100f0:	e7b5      	b.n	41005e <__sflush_r+0x6a>
  4100f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4100f4:	2a00      	cmp	r2, #0
  4100f6:	dc8c      	bgt.n	410012 <__sflush_r+0x1e>
  4100f8:	e7d8      	b.n	4100ac <__sflush_r+0xb8>
  4100fa:	2301      	movs	r3, #1
  4100fc:	69e9      	ldr	r1, [r5, #28]
  4100fe:	4640      	mov	r0, r8
  410100:	47a0      	blx	r4
  410102:	1c43      	adds	r3, r0, #1
  410104:	4602      	mov	r2, r0
  410106:	d002      	beq.n	41010e <__sflush_r+0x11a>
  410108:	89ab      	ldrh	r3, [r5, #12]
  41010a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  41010c:	e78e      	b.n	41002c <__sflush_r+0x38>
  41010e:	f8d8 3000 	ldr.w	r3, [r8]
  410112:	2b00      	cmp	r3, #0
  410114:	d0f8      	beq.n	410108 <__sflush_r+0x114>
  410116:	2b1d      	cmp	r3, #29
  410118:	d001      	beq.n	41011e <__sflush_r+0x12a>
  41011a:	2b16      	cmp	r3, #22
  41011c:	d102      	bne.n	410124 <__sflush_r+0x130>
  41011e:	f8c8 6000 	str.w	r6, [r8]
  410122:	e7c3      	b.n	4100ac <__sflush_r+0xb8>
  410124:	89ab      	ldrh	r3, [r5, #12]
  410126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41012a:	81ab      	strh	r3, [r5, #12]
  41012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410130:	20400001 	.word	0x20400001

00410134 <_fflush_r>:
  410134:	b538      	push	{r3, r4, r5, lr}
  410136:	460d      	mov	r5, r1
  410138:	4604      	mov	r4, r0
  41013a:	b108      	cbz	r0, 410140 <_fflush_r+0xc>
  41013c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41013e:	b1bb      	cbz	r3, 410170 <_fflush_r+0x3c>
  410140:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  410144:	b188      	cbz	r0, 41016a <_fflush_r+0x36>
  410146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  410148:	07db      	lsls	r3, r3, #31
  41014a:	d401      	bmi.n	410150 <_fflush_r+0x1c>
  41014c:	0581      	lsls	r1, r0, #22
  41014e:	d517      	bpl.n	410180 <_fflush_r+0x4c>
  410150:	4620      	mov	r0, r4
  410152:	4629      	mov	r1, r5
  410154:	f7ff ff4e 	bl	40fff4 <__sflush_r>
  410158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  41015a:	07da      	lsls	r2, r3, #31
  41015c:	4604      	mov	r4, r0
  41015e:	d402      	bmi.n	410166 <_fflush_r+0x32>
  410160:	89ab      	ldrh	r3, [r5, #12]
  410162:	059b      	lsls	r3, r3, #22
  410164:	d507      	bpl.n	410176 <_fflush_r+0x42>
  410166:	4620      	mov	r0, r4
  410168:	bd38      	pop	{r3, r4, r5, pc}
  41016a:	4604      	mov	r4, r0
  41016c:	4620      	mov	r0, r4
  41016e:	bd38      	pop	{r3, r4, r5, pc}
  410170:	f000 f838 	bl	4101e4 <__sinit>
  410174:	e7e4      	b.n	410140 <_fflush_r+0xc>
  410176:	6da8      	ldr	r0, [r5, #88]	; 0x58
  410178:	f000 fc04 	bl	410984 <__retarget_lock_release_recursive>
  41017c:	4620      	mov	r0, r4
  41017e:	bd38      	pop	{r3, r4, r5, pc}
  410180:	6da8      	ldr	r0, [r5, #88]	; 0x58
  410182:	f000 fbfd 	bl	410980 <__retarget_lock_acquire_recursive>
  410186:	e7e3      	b.n	410150 <_fflush_r+0x1c>

00410188 <_cleanup_r>:
  410188:	4901      	ldr	r1, [pc, #4]	; (410190 <_cleanup_r+0x8>)
  41018a:	f000 bbaf 	b.w	4108ec <_fwalk_reent>
  41018e:	bf00      	nop
  410190:	00411e55 	.word	0x00411e55

00410194 <std.isra.0>:
  410194:	b510      	push	{r4, lr}
  410196:	2300      	movs	r3, #0
  410198:	4604      	mov	r4, r0
  41019a:	8181      	strh	r1, [r0, #12]
  41019c:	81c2      	strh	r2, [r0, #14]
  41019e:	6003      	str	r3, [r0, #0]
  4101a0:	6043      	str	r3, [r0, #4]
  4101a2:	6083      	str	r3, [r0, #8]
  4101a4:	6643      	str	r3, [r0, #100]	; 0x64
  4101a6:	6103      	str	r3, [r0, #16]
  4101a8:	6143      	str	r3, [r0, #20]
  4101aa:	6183      	str	r3, [r0, #24]
  4101ac:	4619      	mov	r1, r3
  4101ae:	2208      	movs	r2, #8
  4101b0:	305c      	adds	r0, #92	; 0x5c
  4101b2:	f7fc fa0f 	bl	40c5d4 <memset>
  4101b6:	4807      	ldr	r0, [pc, #28]	; (4101d4 <std.isra.0+0x40>)
  4101b8:	4907      	ldr	r1, [pc, #28]	; (4101d8 <std.isra.0+0x44>)
  4101ba:	4a08      	ldr	r2, [pc, #32]	; (4101dc <std.isra.0+0x48>)
  4101bc:	4b08      	ldr	r3, [pc, #32]	; (4101e0 <std.isra.0+0x4c>)
  4101be:	6220      	str	r0, [r4, #32]
  4101c0:	61e4      	str	r4, [r4, #28]
  4101c2:	6261      	str	r1, [r4, #36]	; 0x24
  4101c4:	62a2      	str	r2, [r4, #40]	; 0x28
  4101c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4101c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4101cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4101d0:	f000 bbd2 	b.w	410978 <__retarget_lock_init_recursive>
  4101d4:	00411a3d 	.word	0x00411a3d
  4101d8:	00411a61 	.word	0x00411a61
  4101dc:	00411a9d 	.word	0x00411a9d
  4101e0:	00411abd 	.word	0x00411abd

004101e4 <__sinit>:
  4101e4:	b510      	push	{r4, lr}
  4101e6:	4604      	mov	r4, r0
  4101e8:	4812      	ldr	r0, [pc, #72]	; (410234 <__sinit+0x50>)
  4101ea:	f000 fbc9 	bl	410980 <__retarget_lock_acquire_recursive>
  4101ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4101f0:	b9d2      	cbnz	r2, 410228 <__sinit+0x44>
  4101f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4101f6:	4810      	ldr	r0, [pc, #64]	; (410238 <__sinit+0x54>)
  4101f8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4101fc:	2103      	movs	r1, #3
  4101fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  410202:	63e0      	str	r0, [r4, #60]	; 0x3c
  410204:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  410208:	6860      	ldr	r0, [r4, #4]
  41020a:	2104      	movs	r1, #4
  41020c:	f7ff ffc2 	bl	410194 <std.isra.0>
  410210:	2201      	movs	r2, #1
  410212:	2109      	movs	r1, #9
  410214:	68a0      	ldr	r0, [r4, #8]
  410216:	f7ff ffbd 	bl	410194 <std.isra.0>
  41021a:	2202      	movs	r2, #2
  41021c:	2112      	movs	r1, #18
  41021e:	68e0      	ldr	r0, [r4, #12]
  410220:	f7ff ffb8 	bl	410194 <std.isra.0>
  410224:	2301      	movs	r3, #1
  410226:	63a3      	str	r3, [r4, #56]	; 0x38
  410228:	4802      	ldr	r0, [pc, #8]	; (410234 <__sinit+0x50>)
  41022a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41022e:	f000 bba9 	b.w	410984 <__retarget_lock_release_recursive>
  410232:	bf00      	nop
  410234:	200134b0 	.word	0x200134b0
  410238:	00410189 	.word	0x00410189

0041023c <__sfp_lock_acquire>:
  41023c:	4801      	ldr	r0, [pc, #4]	; (410244 <__sfp_lock_acquire+0x8>)
  41023e:	f000 bb9f 	b.w	410980 <__retarget_lock_acquire_recursive>
  410242:	bf00      	nop
  410244:	200134c4 	.word	0x200134c4

00410248 <__sfp_lock_release>:
  410248:	4801      	ldr	r0, [pc, #4]	; (410250 <__sfp_lock_release+0x8>)
  41024a:	f000 bb9b 	b.w	410984 <__retarget_lock_release_recursive>
  41024e:	bf00      	nop
  410250:	200134c4 	.word	0x200134c4

00410254 <__libc_fini_array>:
  410254:	b538      	push	{r3, r4, r5, lr}
  410256:	4c0a      	ldr	r4, [pc, #40]	; (410280 <__libc_fini_array+0x2c>)
  410258:	4d0a      	ldr	r5, [pc, #40]	; (410284 <__libc_fini_array+0x30>)
  41025a:	1b64      	subs	r4, r4, r5
  41025c:	10a4      	asrs	r4, r4, #2
  41025e:	d00a      	beq.n	410276 <__libc_fini_array+0x22>
  410260:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  410264:	3b01      	subs	r3, #1
  410266:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  41026a:	3c01      	subs	r4, #1
  41026c:	f855 3904 	ldr.w	r3, [r5], #-4
  410270:	4798      	blx	r3
  410272:	2c00      	cmp	r4, #0
  410274:	d1f9      	bne.n	41026a <__libc_fini_array+0x16>
  410276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  41027a:	f004 b8df 	b.w	41443c <_fini>
  41027e:	bf00      	nop
  410280:	0041444c 	.word	0x0041444c
  410284:	00414448 	.word	0x00414448

00410288 <__fputwc>:
  410288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41028c:	b082      	sub	sp, #8
  41028e:	4680      	mov	r8, r0
  410290:	4689      	mov	r9, r1
  410292:	4614      	mov	r4, r2
  410294:	f000 fb54 	bl	410940 <__locale_mb_cur_max>
  410298:	2801      	cmp	r0, #1
  41029a:	d036      	beq.n	41030a <__fputwc+0x82>
  41029c:	464a      	mov	r2, r9
  41029e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4102a2:	a901      	add	r1, sp, #4
  4102a4:	4640      	mov	r0, r8
  4102a6:	f001 fce3 	bl	411c70 <_wcrtomb_r>
  4102aa:	1c42      	adds	r2, r0, #1
  4102ac:	4606      	mov	r6, r0
  4102ae:	d025      	beq.n	4102fc <__fputwc+0x74>
  4102b0:	b3a8      	cbz	r0, 41031e <__fputwc+0x96>
  4102b2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4102b6:	2500      	movs	r5, #0
  4102b8:	f10d 0a04 	add.w	sl, sp, #4
  4102bc:	e009      	b.n	4102d2 <__fputwc+0x4a>
  4102be:	6823      	ldr	r3, [r4, #0]
  4102c0:	1c5a      	adds	r2, r3, #1
  4102c2:	6022      	str	r2, [r4, #0]
  4102c4:	f883 e000 	strb.w	lr, [r3]
  4102c8:	3501      	adds	r5, #1
  4102ca:	42b5      	cmp	r5, r6
  4102cc:	d227      	bcs.n	41031e <__fputwc+0x96>
  4102ce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4102d2:	68a3      	ldr	r3, [r4, #8]
  4102d4:	3b01      	subs	r3, #1
  4102d6:	2b00      	cmp	r3, #0
  4102d8:	60a3      	str	r3, [r4, #8]
  4102da:	daf0      	bge.n	4102be <__fputwc+0x36>
  4102dc:	69a7      	ldr	r7, [r4, #24]
  4102de:	42bb      	cmp	r3, r7
  4102e0:	4671      	mov	r1, lr
  4102e2:	4622      	mov	r2, r4
  4102e4:	4640      	mov	r0, r8
  4102e6:	db02      	blt.n	4102ee <__fputwc+0x66>
  4102e8:	f1be 0f0a 	cmp.w	lr, #10
  4102ec:	d1e7      	bne.n	4102be <__fputwc+0x36>
  4102ee:	f001 fc67 	bl	411bc0 <__swbuf_r>
  4102f2:	1c43      	adds	r3, r0, #1
  4102f4:	d1e8      	bne.n	4102c8 <__fputwc+0x40>
  4102f6:	b002      	add	sp, #8
  4102f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4102fc:	89a3      	ldrh	r3, [r4, #12]
  4102fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410302:	81a3      	strh	r3, [r4, #12]
  410304:	b002      	add	sp, #8
  410306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41030a:	f109 33ff 	add.w	r3, r9, #4294967295
  41030e:	2bfe      	cmp	r3, #254	; 0xfe
  410310:	d8c4      	bhi.n	41029c <__fputwc+0x14>
  410312:	fa5f fe89 	uxtb.w	lr, r9
  410316:	4606      	mov	r6, r0
  410318:	f88d e004 	strb.w	lr, [sp, #4]
  41031c:	e7cb      	b.n	4102b6 <__fputwc+0x2e>
  41031e:	4648      	mov	r0, r9
  410320:	b002      	add	sp, #8
  410322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410326:	bf00      	nop

00410328 <_fputwc_r>:
  410328:	b530      	push	{r4, r5, lr}
  41032a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  41032c:	f013 0f01 	tst.w	r3, #1
  410330:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  410334:	4614      	mov	r4, r2
  410336:	b083      	sub	sp, #12
  410338:	4605      	mov	r5, r0
  41033a:	b29a      	uxth	r2, r3
  41033c:	d101      	bne.n	410342 <_fputwc_r+0x1a>
  41033e:	0590      	lsls	r0, r2, #22
  410340:	d51c      	bpl.n	41037c <_fputwc_r+0x54>
  410342:	0490      	lsls	r0, r2, #18
  410344:	d406      	bmi.n	410354 <_fputwc_r+0x2c>
  410346:	6e62      	ldr	r2, [r4, #100]	; 0x64
  410348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  41034c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  410350:	81a3      	strh	r3, [r4, #12]
  410352:	6662      	str	r2, [r4, #100]	; 0x64
  410354:	4628      	mov	r0, r5
  410356:	4622      	mov	r2, r4
  410358:	f7ff ff96 	bl	410288 <__fputwc>
  41035c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41035e:	07da      	lsls	r2, r3, #31
  410360:	4605      	mov	r5, r0
  410362:	d402      	bmi.n	41036a <_fputwc_r+0x42>
  410364:	89a3      	ldrh	r3, [r4, #12]
  410366:	059b      	lsls	r3, r3, #22
  410368:	d502      	bpl.n	410370 <_fputwc_r+0x48>
  41036a:	4628      	mov	r0, r5
  41036c:	b003      	add	sp, #12
  41036e:	bd30      	pop	{r4, r5, pc}
  410370:	6da0      	ldr	r0, [r4, #88]	; 0x58
  410372:	f000 fb07 	bl	410984 <__retarget_lock_release_recursive>
  410376:	4628      	mov	r0, r5
  410378:	b003      	add	sp, #12
  41037a:	bd30      	pop	{r4, r5, pc}
  41037c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41037e:	9101      	str	r1, [sp, #4]
  410380:	f000 fafe 	bl	410980 <__retarget_lock_acquire_recursive>
  410384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410388:	9901      	ldr	r1, [sp, #4]
  41038a:	b29a      	uxth	r2, r3
  41038c:	e7d9      	b.n	410342 <_fputwc_r+0x1a>
  41038e:	bf00      	nop

00410390 <_malloc_trim_r>:
  410390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410392:	4f24      	ldr	r7, [pc, #144]	; (410424 <_malloc_trim_r+0x94>)
  410394:	460c      	mov	r4, r1
  410396:	4606      	mov	r6, r0
  410398:	f000 fe92 	bl	4110c0 <__malloc_lock>
  41039c:	68bb      	ldr	r3, [r7, #8]
  41039e:	685d      	ldr	r5, [r3, #4]
  4103a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4103a4:	310f      	adds	r1, #15
  4103a6:	f025 0503 	bic.w	r5, r5, #3
  4103aa:	4429      	add	r1, r5
  4103ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4103b0:	f021 010f 	bic.w	r1, r1, #15
  4103b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4103b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4103bc:	db07      	blt.n	4103ce <_malloc_trim_r+0x3e>
  4103be:	2100      	movs	r1, #0
  4103c0:	4630      	mov	r0, r6
  4103c2:	f001 fb29 	bl	411a18 <_sbrk_r>
  4103c6:	68bb      	ldr	r3, [r7, #8]
  4103c8:	442b      	add	r3, r5
  4103ca:	4298      	cmp	r0, r3
  4103cc:	d004      	beq.n	4103d8 <_malloc_trim_r+0x48>
  4103ce:	4630      	mov	r0, r6
  4103d0:	f000 fe7c 	bl	4110cc <__malloc_unlock>
  4103d4:	2000      	movs	r0, #0
  4103d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4103d8:	4261      	negs	r1, r4
  4103da:	4630      	mov	r0, r6
  4103dc:	f001 fb1c 	bl	411a18 <_sbrk_r>
  4103e0:	3001      	adds	r0, #1
  4103e2:	d00d      	beq.n	410400 <_malloc_trim_r+0x70>
  4103e4:	4b10      	ldr	r3, [pc, #64]	; (410428 <_malloc_trim_r+0x98>)
  4103e6:	68ba      	ldr	r2, [r7, #8]
  4103e8:	6819      	ldr	r1, [r3, #0]
  4103ea:	1b2d      	subs	r5, r5, r4
  4103ec:	f045 0501 	orr.w	r5, r5, #1
  4103f0:	4630      	mov	r0, r6
  4103f2:	1b09      	subs	r1, r1, r4
  4103f4:	6055      	str	r5, [r2, #4]
  4103f6:	6019      	str	r1, [r3, #0]
  4103f8:	f000 fe68 	bl	4110cc <__malloc_unlock>
  4103fc:	2001      	movs	r0, #1
  4103fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  410400:	2100      	movs	r1, #0
  410402:	4630      	mov	r0, r6
  410404:	f001 fb08 	bl	411a18 <_sbrk_r>
  410408:	68ba      	ldr	r2, [r7, #8]
  41040a:	1a83      	subs	r3, r0, r2
  41040c:	2b0f      	cmp	r3, #15
  41040e:	ddde      	ble.n	4103ce <_malloc_trim_r+0x3e>
  410410:	4c06      	ldr	r4, [pc, #24]	; (41042c <_malloc_trim_r+0x9c>)
  410412:	4905      	ldr	r1, [pc, #20]	; (410428 <_malloc_trim_r+0x98>)
  410414:	6824      	ldr	r4, [r4, #0]
  410416:	f043 0301 	orr.w	r3, r3, #1
  41041a:	1b00      	subs	r0, r0, r4
  41041c:	6053      	str	r3, [r2, #4]
  41041e:	6008      	str	r0, [r1, #0]
  410420:	e7d5      	b.n	4103ce <_malloc_trim_r+0x3e>
  410422:	bf00      	nop
  410424:	20000698 	.word	0x20000698
  410428:	20013408 	.word	0x20013408
  41042c:	20000aa0 	.word	0x20000aa0

00410430 <_free_r>:
  410430:	2900      	cmp	r1, #0
  410432:	d044      	beq.n	4104be <_free_r+0x8e>
  410434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410438:	460d      	mov	r5, r1
  41043a:	4680      	mov	r8, r0
  41043c:	f000 fe40 	bl	4110c0 <__malloc_lock>
  410440:	f855 7c04 	ldr.w	r7, [r5, #-4]
  410444:	4969      	ldr	r1, [pc, #420]	; (4105ec <_free_r+0x1bc>)
  410446:	f027 0301 	bic.w	r3, r7, #1
  41044a:	f1a5 0408 	sub.w	r4, r5, #8
  41044e:	18e2      	adds	r2, r4, r3
  410450:	688e      	ldr	r6, [r1, #8]
  410452:	6850      	ldr	r0, [r2, #4]
  410454:	42b2      	cmp	r2, r6
  410456:	f020 0003 	bic.w	r0, r0, #3
  41045a:	d05e      	beq.n	41051a <_free_r+0xea>
  41045c:	07fe      	lsls	r6, r7, #31
  41045e:	6050      	str	r0, [r2, #4]
  410460:	d40b      	bmi.n	41047a <_free_r+0x4a>
  410462:	f855 7c08 	ldr.w	r7, [r5, #-8]
  410466:	1be4      	subs	r4, r4, r7
  410468:	f101 0e08 	add.w	lr, r1, #8
  41046c:	68a5      	ldr	r5, [r4, #8]
  41046e:	4575      	cmp	r5, lr
  410470:	443b      	add	r3, r7
  410472:	d06d      	beq.n	410550 <_free_r+0x120>
  410474:	68e7      	ldr	r7, [r4, #12]
  410476:	60ef      	str	r7, [r5, #12]
  410478:	60bd      	str	r5, [r7, #8]
  41047a:	1815      	adds	r5, r2, r0
  41047c:	686d      	ldr	r5, [r5, #4]
  41047e:	07ed      	lsls	r5, r5, #31
  410480:	d53e      	bpl.n	410500 <_free_r+0xd0>
  410482:	f043 0201 	orr.w	r2, r3, #1
  410486:	6062      	str	r2, [r4, #4]
  410488:	50e3      	str	r3, [r4, r3]
  41048a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41048e:	d217      	bcs.n	4104c0 <_free_r+0x90>
  410490:	08db      	lsrs	r3, r3, #3
  410492:	1c58      	adds	r0, r3, #1
  410494:	109a      	asrs	r2, r3, #2
  410496:	684d      	ldr	r5, [r1, #4]
  410498:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  41049c:	60a7      	str	r7, [r4, #8]
  41049e:	2301      	movs	r3, #1
  4104a0:	4093      	lsls	r3, r2
  4104a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4104a6:	432b      	orrs	r3, r5
  4104a8:	3a08      	subs	r2, #8
  4104aa:	60e2      	str	r2, [r4, #12]
  4104ac:	604b      	str	r3, [r1, #4]
  4104ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4104b2:	60fc      	str	r4, [r7, #12]
  4104b4:	4640      	mov	r0, r8
  4104b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4104ba:	f000 be07 	b.w	4110cc <__malloc_unlock>
  4104be:	4770      	bx	lr
  4104c0:	0a5a      	lsrs	r2, r3, #9
  4104c2:	2a04      	cmp	r2, #4
  4104c4:	d852      	bhi.n	41056c <_free_r+0x13c>
  4104c6:	099a      	lsrs	r2, r3, #6
  4104c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4104cc:	00ff      	lsls	r7, r7, #3
  4104ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4104d2:	19c8      	adds	r0, r1, r7
  4104d4:	59ca      	ldr	r2, [r1, r7]
  4104d6:	3808      	subs	r0, #8
  4104d8:	4290      	cmp	r0, r2
  4104da:	d04f      	beq.n	41057c <_free_r+0x14c>
  4104dc:	6851      	ldr	r1, [r2, #4]
  4104de:	f021 0103 	bic.w	r1, r1, #3
  4104e2:	428b      	cmp	r3, r1
  4104e4:	d232      	bcs.n	41054c <_free_r+0x11c>
  4104e6:	6892      	ldr	r2, [r2, #8]
  4104e8:	4290      	cmp	r0, r2
  4104ea:	d1f7      	bne.n	4104dc <_free_r+0xac>
  4104ec:	68c3      	ldr	r3, [r0, #12]
  4104ee:	60a0      	str	r0, [r4, #8]
  4104f0:	60e3      	str	r3, [r4, #12]
  4104f2:	609c      	str	r4, [r3, #8]
  4104f4:	60c4      	str	r4, [r0, #12]
  4104f6:	4640      	mov	r0, r8
  4104f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4104fc:	f000 bde6 	b.w	4110cc <__malloc_unlock>
  410500:	6895      	ldr	r5, [r2, #8]
  410502:	4f3b      	ldr	r7, [pc, #236]	; (4105f0 <_free_r+0x1c0>)
  410504:	42bd      	cmp	r5, r7
  410506:	4403      	add	r3, r0
  410508:	d040      	beq.n	41058c <_free_r+0x15c>
  41050a:	68d0      	ldr	r0, [r2, #12]
  41050c:	60e8      	str	r0, [r5, #12]
  41050e:	f043 0201 	orr.w	r2, r3, #1
  410512:	6085      	str	r5, [r0, #8]
  410514:	6062      	str	r2, [r4, #4]
  410516:	50e3      	str	r3, [r4, r3]
  410518:	e7b7      	b.n	41048a <_free_r+0x5a>
  41051a:	07ff      	lsls	r7, r7, #31
  41051c:	4403      	add	r3, r0
  41051e:	d407      	bmi.n	410530 <_free_r+0x100>
  410520:	f855 2c08 	ldr.w	r2, [r5, #-8]
  410524:	1aa4      	subs	r4, r4, r2
  410526:	4413      	add	r3, r2
  410528:	68a0      	ldr	r0, [r4, #8]
  41052a:	68e2      	ldr	r2, [r4, #12]
  41052c:	60c2      	str	r2, [r0, #12]
  41052e:	6090      	str	r0, [r2, #8]
  410530:	4a30      	ldr	r2, [pc, #192]	; (4105f4 <_free_r+0x1c4>)
  410532:	6812      	ldr	r2, [r2, #0]
  410534:	f043 0001 	orr.w	r0, r3, #1
  410538:	4293      	cmp	r3, r2
  41053a:	6060      	str	r0, [r4, #4]
  41053c:	608c      	str	r4, [r1, #8]
  41053e:	d3b9      	bcc.n	4104b4 <_free_r+0x84>
  410540:	4b2d      	ldr	r3, [pc, #180]	; (4105f8 <_free_r+0x1c8>)
  410542:	4640      	mov	r0, r8
  410544:	6819      	ldr	r1, [r3, #0]
  410546:	f7ff ff23 	bl	410390 <_malloc_trim_r>
  41054a:	e7b3      	b.n	4104b4 <_free_r+0x84>
  41054c:	4610      	mov	r0, r2
  41054e:	e7cd      	b.n	4104ec <_free_r+0xbc>
  410550:	1811      	adds	r1, r2, r0
  410552:	6849      	ldr	r1, [r1, #4]
  410554:	07c9      	lsls	r1, r1, #31
  410556:	d444      	bmi.n	4105e2 <_free_r+0x1b2>
  410558:	6891      	ldr	r1, [r2, #8]
  41055a:	68d2      	ldr	r2, [r2, #12]
  41055c:	60ca      	str	r2, [r1, #12]
  41055e:	4403      	add	r3, r0
  410560:	f043 0001 	orr.w	r0, r3, #1
  410564:	6091      	str	r1, [r2, #8]
  410566:	6060      	str	r0, [r4, #4]
  410568:	50e3      	str	r3, [r4, r3]
  41056a:	e7a3      	b.n	4104b4 <_free_r+0x84>
  41056c:	2a14      	cmp	r2, #20
  41056e:	d816      	bhi.n	41059e <_free_r+0x16e>
  410570:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  410574:	00ff      	lsls	r7, r7, #3
  410576:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  41057a:	e7aa      	b.n	4104d2 <_free_r+0xa2>
  41057c:	10aa      	asrs	r2, r5, #2
  41057e:	2301      	movs	r3, #1
  410580:	684d      	ldr	r5, [r1, #4]
  410582:	4093      	lsls	r3, r2
  410584:	432b      	orrs	r3, r5
  410586:	604b      	str	r3, [r1, #4]
  410588:	4603      	mov	r3, r0
  41058a:	e7b0      	b.n	4104ee <_free_r+0xbe>
  41058c:	f043 0201 	orr.w	r2, r3, #1
  410590:	614c      	str	r4, [r1, #20]
  410592:	610c      	str	r4, [r1, #16]
  410594:	60e5      	str	r5, [r4, #12]
  410596:	60a5      	str	r5, [r4, #8]
  410598:	6062      	str	r2, [r4, #4]
  41059a:	50e3      	str	r3, [r4, r3]
  41059c:	e78a      	b.n	4104b4 <_free_r+0x84>
  41059e:	2a54      	cmp	r2, #84	; 0x54
  4105a0:	d806      	bhi.n	4105b0 <_free_r+0x180>
  4105a2:	0b1a      	lsrs	r2, r3, #12
  4105a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4105a8:	00ff      	lsls	r7, r7, #3
  4105aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4105ae:	e790      	b.n	4104d2 <_free_r+0xa2>
  4105b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4105b4:	d806      	bhi.n	4105c4 <_free_r+0x194>
  4105b6:	0bda      	lsrs	r2, r3, #15
  4105b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4105bc:	00ff      	lsls	r7, r7, #3
  4105be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4105c2:	e786      	b.n	4104d2 <_free_r+0xa2>
  4105c4:	f240 5054 	movw	r0, #1364	; 0x554
  4105c8:	4282      	cmp	r2, r0
  4105ca:	d806      	bhi.n	4105da <_free_r+0x1aa>
  4105cc:	0c9a      	lsrs	r2, r3, #18
  4105ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4105d2:	00ff      	lsls	r7, r7, #3
  4105d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4105d8:	e77b      	b.n	4104d2 <_free_r+0xa2>
  4105da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4105de:	257e      	movs	r5, #126	; 0x7e
  4105e0:	e777      	b.n	4104d2 <_free_r+0xa2>
  4105e2:	f043 0101 	orr.w	r1, r3, #1
  4105e6:	6061      	str	r1, [r4, #4]
  4105e8:	6013      	str	r3, [r2, #0]
  4105ea:	e763      	b.n	4104b4 <_free_r+0x84>
  4105ec:	20000698 	.word	0x20000698
  4105f0:	200006a0 	.word	0x200006a0
  4105f4:	20000aa4 	.word	0x20000aa4
  4105f8:	20013438 	.word	0x20013438

004105fc <__sfvwrite_r>:
  4105fc:	6893      	ldr	r3, [r2, #8]
  4105fe:	2b00      	cmp	r3, #0
  410600:	d073      	beq.n	4106ea <__sfvwrite_r+0xee>
  410602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410606:	898b      	ldrh	r3, [r1, #12]
  410608:	b083      	sub	sp, #12
  41060a:	460c      	mov	r4, r1
  41060c:	0719      	lsls	r1, r3, #28
  41060e:	9000      	str	r0, [sp, #0]
  410610:	4616      	mov	r6, r2
  410612:	d526      	bpl.n	410662 <__sfvwrite_r+0x66>
  410614:	6922      	ldr	r2, [r4, #16]
  410616:	b322      	cbz	r2, 410662 <__sfvwrite_r+0x66>
  410618:	f013 0002 	ands.w	r0, r3, #2
  41061c:	6835      	ldr	r5, [r6, #0]
  41061e:	d02c      	beq.n	41067a <__sfvwrite_r+0x7e>
  410620:	f04f 0900 	mov.w	r9, #0
  410624:	4fb0      	ldr	r7, [pc, #704]	; (4108e8 <__sfvwrite_r+0x2ec>)
  410626:	46c8      	mov	r8, r9
  410628:	46b2      	mov	sl, r6
  41062a:	45b8      	cmp	r8, r7
  41062c:	4643      	mov	r3, r8
  41062e:	464a      	mov	r2, r9
  410630:	bf28      	it	cs
  410632:	463b      	movcs	r3, r7
  410634:	9800      	ldr	r0, [sp, #0]
  410636:	f1b8 0f00 	cmp.w	r8, #0
  41063a:	d050      	beq.n	4106de <__sfvwrite_r+0xe2>
  41063c:	69e1      	ldr	r1, [r4, #28]
  41063e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  410640:	47b0      	blx	r6
  410642:	2800      	cmp	r0, #0
  410644:	dd58      	ble.n	4106f8 <__sfvwrite_r+0xfc>
  410646:	f8da 3008 	ldr.w	r3, [sl, #8]
  41064a:	1a1b      	subs	r3, r3, r0
  41064c:	4481      	add	r9, r0
  41064e:	eba8 0800 	sub.w	r8, r8, r0
  410652:	f8ca 3008 	str.w	r3, [sl, #8]
  410656:	2b00      	cmp	r3, #0
  410658:	d1e7      	bne.n	41062a <__sfvwrite_r+0x2e>
  41065a:	2000      	movs	r0, #0
  41065c:	b003      	add	sp, #12
  41065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410662:	4621      	mov	r1, r4
  410664:	9800      	ldr	r0, [sp, #0]
  410666:	f7fe fc91 	bl	40ef8c <__swsetup_r>
  41066a:	2800      	cmp	r0, #0
  41066c:	f040 8133 	bne.w	4108d6 <__sfvwrite_r+0x2da>
  410670:	89a3      	ldrh	r3, [r4, #12]
  410672:	6835      	ldr	r5, [r6, #0]
  410674:	f013 0002 	ands.w	r0, r3, #2
  410678:	d1d2      	bne.n	410620 <__sfvwrite_r+0x24>
  41067a:	f013 0901 	ands.w	r9, r3, #1
  41067e:	d145      	bne.n	41070c <__sfvwrite_r+0x110>
  410680:	464f      	mov	r7, r9
  410682:	9601      	str	r6, [sp, #4]
  410684:	b337      	cbz	r7, 4106d4 <__sfvwrite_r+0xd8>
  410686:	059a      	lsls	r2, r3, #22
  410688:	f8d4 8008 	ldr.w	r8, [r4, #8]
  41068c:	f140 8083 	bpl.w	410796 <__sfvwrite_r+0x19a>
  410690:	4547      	cmp	r7, r8
  410692:	46c3      	mov	fp, r8
  410694:	f0c0 80ab 	bcc.w	4107ee <__sfvwrite_r+0x1f2>
  410698:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41069c:	f040 80ac 	bne.w	4107f8 <__sfvwrite_r+0x1fc>
  4106a0:	6820      	ldr	r0, [r4, #0]
  4106a2:	46ba      	mov	sl, r7
  4106a4:	465a      	mov	r2, fp
  4106a6:	4649      	mov	r1, r9
  4106a8:	f7fb ff30 	bl	40c50c <memmove>
  4106ac:	68a2      	ldr	r2, [r4, #8]
  4106ae:	6823      	ldr	r3, [r4, #0]
  4106b0:	eba2 0208 	sub.w	r2, r2, r8
  4106b4:	445b      	add	r3, fp
  4106b6:	60a2      	str	r2, [r4, #8]
  4106b8:	6023      	str	r3, [r4, #0]
  4106ba:	9a01      	ldr	r2, [sp, #4]
  4106bc:	6893      	ldr	r3, [r2, #8]
  4106be:	eba3 030a 	sub.w	r3, r3, sl
  4106c2:	44d1      	add	r9, sl
  4106c4:	eba7 070a 	sub.w	r7, r7, sl
  4106c8:	6093      	str	r3, [r2, #8]
  4106ca:	2b00      	cmp	r3, #0
  4106cc:	d0c5      	beq.n	41065a <__sfvwrite_r+0x5e>
  4106ce:	89a3      	ldrh	r3, [r4, #12]
  4106d0:	2f00      	cmp	r7, #0
  4106d2:	d1d8      	bne.n	410686 <__sfvwrite_r+0x8a>
  4106d4:	f8d5 9000 	ldr.w	r9, [r5]
  4106d8:	686f      	ldr	r7, [r5, #4]
  4106da:	3508      	adds	r5, #8
  4106dc:	e7d2      	b.n	410684 <__sfvwrite_r+0x88>
  4106de:	f8d5 9000 	ldr.w	r9, [r5]
  4106e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4106e6:	3508      	adds	r5, #8
  4106e8:	e79f      	b.n	41062a <__sfvwrite_r+0x2e>
  4106ea:	2000      	movs	r0, #0
  4106ec:	4770      	bx	lr
  4106ee:	4621      	mov	r1, r4
  4106f0:	9800      	ldr	r0, [sp, #0]
  4106f2:	f7ff fd1f 	bl	410134 <_fflush_r>
  4106f6:	b370      	cbz	r0, 410756 <__sfvwrite_r+0x15a>
  4106f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4106fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410700:	f04f 30ff 	mov.w	r0, #4294967295
  410704:	81a3      	strh	r3, [r4, #12]
  410706:	b003      	add	sp, #12
  410708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41070c:	4681      	mov	r9, r0
  41070e:	4633      	mov	r3, r6
  410710:	464e      	mov	r6, r9
  410712:	46a8      	mov	r8, r5
  410714:	469a      	mov	sl, r3
  410716:	464d      	mov	r5, r9
  410718:	b34e      	cbz	r6, 41076e <__sfvwrite_r+0x172>
  41071a:	b380      	cbz	r0, 41077e <__sfvwrite_r+0x182>
  41071c:	6820      	ldr	r0, [r4, #0]
  41071e:	6923      	ldr	r3, [r4, #16]
  410720:	6962      	ldr	r2, [r4, #20]
  410722:	45b1      	cmp	r9, r6
  410724:	46cb      	mov	fp, r9
  410726:	bf28      	it	cs
  410728:	46b3      	movcs	fp, r6
  41072a:	4298      	cmp	r0, r3
  41072c:	465f      	mov	r7, fp
  41072e:	d904      	bls.n	41073a <__sfvwrite_r+0x13e>
  410730:	68a3      	ldr	r3, [r4, #8]
  410732:	4413      	add	r3, r2
  410734:	459b      	cmp	fp, r3
  410736:	f300 80a6 	bgt.w	410886 <__sfvwrite_r+0x28a>
  41073a:	4593      	cmp	fp, r2
  41073c:	db4b      	blt.n	4107d6 <__sfvwrite_r+0x1da>
  41073e:	4613      	mov	r3, r2
  410740:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410742:	69e1      	ldr	r1, [r4, #28]
  410744:	9800      	ldr	r0, [sp, #0]
  410746:	462a      	mov	r2, r5
  410748:	47b8      	blx	r7
  41074a:	1e07      	subs	r7, r0, #0
  41074c:	ddd4      	ble.n	4106f8 <__sfvwrite_r+0xfc>
  41074e:	ebb9 0907 	subs.w	r9, r9, r7
  410752:	d0cc      	beq.n	4106ee <__sfvwrite_r+0xf2>
  410754:	2001      	movs	r0, #1
  410756:	f8da 3008 	ldr.w	r3, [sl, #8]
  41075a:	1bdb      	subs	r3, r3, r7
  41075c:	443d      	add	r5, r7
  41075e:	1bf6      	subs	r6, r6, r7
  410760:	f8ca 3008 	str.w	r3, [sl, #8]
  410764:	2b00      	cmp	r3, #0
  410766:	f43f af78 	beq.w	41065a <__sfvwrite_r+0x5e>
  41076a:	2e00      	cmp	r6, #0
  41076c:	d1d5      	bne.n	41071a <__sfvwrite_r+0x11e>
  41076e:	f108 0308 	add.w	r3, r8, #8
  410772:	e913 0060 	ldmdb	r3, {r5, r6}
  410776:	4698      	mov	r8, r3
  410778:	3308      	adds	r3, #8
  41077a:	2e00      	cmp	r6, #0
  41077c:	d0f9      	beq.n	410772 <__sfvwrite_r+0x176>
  41077e:	4632      	mov	r2, r6
  410780:	210a      	movs	r1, #10
  410782:	4628      	mov	r0, r5
  410784:	f000 fc4c 	bl	411020 <memchr>
  410788:	2800      	cmp	r0, #0
  41078a:	f000 80a1 	beq.w	4108d0 <__sfvwrite_r+0x2d4>
  41078e:	3001      	adds	r0, #1
  410790:	eba0 0905 	sub.w	r9, r0, r5
  410794:	e7c2      	b.n	41071c <__sfvwrite_r+0x120>
  410796:	6820      	ldr	r0, [r4, #0]
  410798:	6923      	ldr	r3, [r4, #16]
  41079a:	4298      	cmp	r0, r3
  41079c:	d802      	bhi.n	4107a4 <__sfvwrite_r+0x1a8>
  41079e:	6963      	ldr	r3, [r4, #20]
  4107a0:	429f      	cmp	r7, r3
  4107a2:	d25d      	bcs.n	410860 <__sfvwrite_r+0x264>
  4107a4:	45b8      	cmp	r8, r7
  4107a6:	bf28      	it	cs
  4107a8:	46b8      	movcs	r8, r7
  4107aa:	4642      	mov	r2, r8
  4107ac:	4649      	mov	r1, r9
  4107ae:	f7fb fead 	bl	40c50c <memmove>
  4107b2:	68a3      	ldr	r3, [r4, #8]
  4107b4:	6822      	ldr	r2, [r4, #0]
  4107b6:	eba3 0308 	sub.w	r3, r3, r8
  4107ba:	4442      	add	r2, r8
  4107bc:	60a3      	str	r3, [r4, #8]
  4107be:	6022      	str	r2, [r4, #0]
  4107c0:	b10b      	cbz	r3, 4107c6 <__sfvwrite_r+0x1ca>
  4107c2:	46c2      	mov	sl, r8
  4107c4:	e779      	b.n	4106ba <__sfvwrite_r+0xbe>
  4107c6:	4621      	mov	r1, r4
  4107c8:	9800      	ldr	r0, [sp, #0]
  4107ca:	f7ff fcb3 	bl	410134 <_fflush_r>
  4107ce:	2800      	cmp	r0, #0
  4107d0:	d192      	bne.n	4106f8 <__sfvwrite_r+0xfc>
  4107d2:	46c2      	mov	sl, r8
  4107d4:	e771      	b.n	4106ba <__sfvwrite_r+0xbe>
  4107d6:	465a      	mov	r2, fp
  4107d8:	4629      	mov	r1, r5
  4107da:	f7fb fe97 	bl	40c50c <memmove>
  4107de:	68a2      	ldr	r2, [r4, #8]
  4107e0:	6823      	ldr	r3, [r4, #0]
  4107e2:	eba2 020b 	sub.w	r2, r2, fp
  4107e6:	445b      	add	r3, fp
  4107e8:	60a2      	str	r2, [r4, #8]
  4107ea:	6023      	str	r3, [r4, #0]
  4107ec:	e7af      	b.n	41074e <__sfvwrite_r+0x152>
  4107ee:	6820      	ldr	r0, [r4, #0]
  4107f0:	46b8      	mov	r8, r7
  4107f2:	46ba      	mov	sl, r7
  4107f4:	46bb      	mov	fp, r7
  4107f6:	e755      	b.n	4106a4 <__sfvwrite_r+0xa8>
  4107f8:	6962      	ldr	r2, [r4, #20]
  4107fa:	6820      	ldr	r0, [r4, #0]
  4107fc:	6921      	ldr	r1, [r4, #16]
  4107fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  410802:	eba0 0a01 	sub.w	sl, r0, r1
  410806:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  41080a:	f10a 0001 	add.w	r0, sl, #1
  41080e:	ea4f 0868 	mov.w	r8, r8, asr #1
  410812:	4438      	add	r0, r7
  410814:	4540      	cmp	r0, r8
  410816:	4642      	mov	r2, r8
  410818:	bf84      	itt	hi
  41081a:	4680      	movhi	r8, r0
  41081c:	4642      	movhi	r2, r8
  41081e:	055b      	lsls	r3, r3, #21
  410820:	d544      	bpl.n	4108ac <__sfvwrite_r+0x2b0>
  410822:	4611      	mov	r1, r2
  410824:	9800      	ldr	r0, [sp, #0]
  410826:	f000 f92f 	bl	410a88 <_malloc_r>
  41082a:	4683      	mov	fp, r0
  41082c:	2800      	cmp	r0, #0
  41082e:	d055      	beq.n	4108dc <__sfvwrite_r+0x2e0>
  410830:	4652      	mov	r2, sl
  410832:	6921      	ldr	r1, [r4, #16]
  410834:	f7fb fdd0 	bl	40c3d8 <memcpy>
  410838:	89a3      	ldrh	r3, [r4, #12]
  41083a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  41083e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  410842:	81a3      	strh	r3, [r4, #12]
  410844:	eb0b 000a 	add.w	r0, fp, sl
  410848:	eba8 030a 	sub.w	r3, r8, sl
  41084c:	f8c4 b010 	str.w	fp, [r4, #16]
  410850:	f8c4 8014 	str.w	r8, [r4, #20]
  410854:	6020      	str	r0, [r4, #0]
  410856:	60a3      	str	r3, [r4, #8]
  410858:	46b8      	mov	r8, r7
  41085a:	46ba      	mov	sl, r7
  41085c:	46bb      	mov	fp, r7
  41085e:	e721      	b.n	4106a4 <__sfvwrite_r+0xa8>
  410860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  410864:	42b9      	cmp	r1, r7
  410866:	bf28      	it	cs
  410868:	4639      	movcs	r1, r7
  41086a:	464a      	mov	r2, r9
  41086c:	fb91 f1f3 	sdiv	r1, r1, r3
  410870:	9800      	ldr	r0, [sp, #0]
  410872:	6a66      	ldr	r6, [r4, #36]	; 0x24
  410874:	fb03 f301 	mul.w	r3, r3, r1
  410878:	69e1      	ldr	r1, [r4, #28]
  41087a:	47b0      	blx	r6
  41087c:	f1b0 0a00 	subs.w	sl, r0, #0
  410880:	f73f af1b 	bgt.w	4106ba <__sfvwrite_r+0xbe>
  410884:	e738      	b.n	4106f8 <__sfvwrite_r+0xfc>
  410886:	461a      	mov	r2, r3
  410888:	4629      	mov	r1, r5
  41088a:	9301      	str	r3, [sp, #4]
  41088c:	f7fb fe3e 	bl	40c50c <memmove>
  410890:	6822      	ldr	r2, [r4, #0]
  410892:	9b01      	ldr	r3, [sp, #4]
  410894:	9800      	ldr	r0, [sp, #0]
  410896:	441a      	add	r2, r3
  410898:	6022      	str	r2, [r4, #0]
  41089a:	4621      	mov	r1, r4
  41089c:	f7ff fc4a 	bl	410134 <_fflush_r>
  4108a0:	9b01      	ldr	r3, [sp, #4]
  4108a2:	2800      	cmp	r0, #0
  4108a4:	f47f af28 	bne.w	4106f8 <__sfvwrite_r+0xfc>
  4108a8:	461f      	mov	r7, r3
  4108aa:	e750      	b.n	41074e <__sfvwrite_r+0x152>
  4108ac:	9800      	ldr	r0, [sp, #0]
  4108ae:	f000 ff0d 	bl	4116cc <_realloc_r>
  4108b2:	4683      	mov	fp, r0
  4108b4:	2800      	cmp	r0, #0
  4108b6:	d1c5      	bne.n	410844 <__sfvwrite_r+0x248>
  4108b8:	9d00      	ldr	r5, [sp, #0]
  4108ba:	6921      	ldr	r1, [r4, #16]
  4108bc:	4628      	mov	r0, r5
  4108be:	f7ff fdb7 	bl	410430 <_free_r>
  4108c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4108c6:	220c      	movs	r2, #12
  4108c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4108cc:	602a      	str	r2, [r5, #0]
  4108ce:	e715      	b.n	4106fc <__sfvwrite_r+0x100>
  4108d0:	f106 0901 	add.w	r9, r6, #1
  4108d4:	e722      	b.n	41071c <__sfvwrite_r+0x120>
  4108d6:	f04f 30ff 	mov.w	r0, #4294967295
  4108da:	e6bf      	b.n	41065c <__sfvwrite_r+0x60>
  4108dc:	9a00      	ldr	r2, [sp, #0]
  4108de:	230c      	movs	r3, #12
  4108e0:	6013      	str	r3, [r2, #0]
  4108e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4108e6:	e709      	b.n	4106fc <__sfvwrite_r+0x100>
  4108e8:	7ffffc00 	.word	0x7ffffc00

004108ec <_fwalk_reent>:
  4108ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4108f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4108f4:	d01f      	beq.n	410936 <_fwalk_reent+0x4a>
  4108f6:	4688      	mov	r8, r1
  4108f8:	4606      	mov	r6, r0
  4108fa:	f04f 0900 	mov.w	r9, #0
  4108fe:	687d      	ldr	r5, [r7, #4]
  410900:	68bc      	ldr	r4, [r7, #8]
  410902:	3d01      	subs	r5, #1
  410904:	d411      	bmi.n	41092a <_fwalk_reent+0x3e>
  410906:	89a3      	ldrh	r3, [r4, #12]
  410908:	2b01      	cmp	r3, #1
  41090a:	f105 35ff 	add.w	r5, r5, #4294967295
  41090e:	d908      	bls.n	410922 <_fwalk_reent+0x36>
  410910:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  410914:	3301      	adds	r3, #1
  410916:	4621      	mov	r1, r4
  410918:	4630      	mov	r0, r6
  41091a:	d002      	beq.n	410922 <_fwalk_reent+0x36>
  41091c:	47c0      	blx	r8
  41091e:	ea49 0900 	orr.w	r9, r9, r0
  410922:	1c6b      	adds	r3, r5, #1
  410924:	f104 0468 	add.w	r4, r4, #104	; 0x68
  410928:	d1ed      	bne.n	410906 <_fwalk_reent+0x1a>
  41092a:	683f      	ldr	r7, [r7, #0]
  41092c:	2f00      	cmp	r7, #0
  41092e:	d1e6      	bne.n	4108fe <_fwalk_reent+0x12>
  410930:	4648      	mov	r0, r9
  410932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410936:	46b9      	mov	r9, r7
  410938:	4648      	mov	r0, r9
  41093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41093e:	bf00      	nop

00410940 <__locale_mb_cur_max>:
  410940:	4b04      	ldr	r3, [pc, #16]	; (410954 <__locale_mb_cur_max+0x14>)
  410942:	4a05      	ldr	r2, [pc, #20]	; (410958 <__locale_mb_cur_max+0x18>)
  410944:	681b      	ldr	r3, [r3, #0]
  410946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  410948:	2b00      	cmp	r3, #0
  41094a:	bf08      	it	eq
  41094c:	4613      	moveq	r3, r2
  41094e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  410952:	4770      	bx	lr
  410954:	200000fc 	.word	0x200000fc
  410958:	2000052c 	.word	0x2000052c

0041095c <_localeconv_r>:
  41095c:	4a04      	ldr	r2, [pc, #16]	; (410970 <_localeconv_r+0x14>)
  41095e:	4b05      	ldr	r3, [pc, #20]	; (410974 <_localeconv_r+0x18>)
  410960:	6812      	ldr	r2, [r2, #0]
  410962:	6b50      	ldr	r0, [r2, #52]	; 0x34
  410964:	2800      	cmp	r0, #0
  410966:	bf08      	it	eq
  410968:	4618      	moveq	r0, r3
  41096a:	30f0      	adds	r0, #240	; 0xf0
  41096c:	4770      	bx	lr
  41096e:	bf00      	nop
  410970:	200000fc 	.word	0x200000fc
  410974:	2000052c 	.word	0x2000052c

00410978 <__retarget_lock_init_recursive>:
  410978:	4770      	bx	lr
  41097a:	bf00      	nop

0041097c <__retarget_lock_close_recursive>:
  41097c:	4770      	bx	lr
  41097e:	bf00      	nop

00410980 <__retarget_lock_acquire_recursive>:
  410980:	4770      	bx	lr
  410982:	bf00      	nop

00410984 <__retarget_lock_release_recursive>:
  410984:	4770      	bx	lr
  410986:	bf00      	nop

00410988 <__swhatbuf_r>:
  410988:	b570      	push	{r4, r5, r6, lr}
  41098a:	460c      	mov	r4, r1
  41098c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410990:	2900      	cmp	r1, #0
  410992:	b090      	sub	sp, #64	; 0x40
  410994:	4615      	mov	r5, r2
  410996:	461e      	mov	r6, r3
  410998:	db14      	blt.n	4109c4 <__swhatbuf_r+0x3c>
  41099a:	aa01      	add	r2, sp, #4
  41099c:	f001 fabc 	bl	411f18 <_fstat_r>
  4109a0:	2800      	cmp	r0, #0
  4109a2:	db0f      	blt.n	4109c4 <__swhatbuf_r+0x3c>
  4109a4:	9a02      	ldr	r2, [sp, #8]
  4109a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4109aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4109ae:	fab2 f282 	clz	r2, r2
  4109b2:	0952      	lsrs	r2, r2, #5
  4109b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4109b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4109bc:	6032      	str	r2, [r6, #0]
  4109be:	602b      	str	r3, [r5, #0]
  4109c0:	b010      	add	sp, #64	; 0x40
  4109c2:	bd70      	pop	{r4, r5, r6, pc}
  4109c4:	89a2      	ldrh	r2, [r4, #12]
  4109c6:	2300      	movs	r3, #0
  4109c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4109cc:	6033      	str	r3, [r6, #0]
  4109ce:	d004      	beq.n	4109da <__swhatbuf_r+0x52>
  4109d0:	2240      	movs	r2, #64	; 0x40
  4109d2:	4618      	mov	r0, r3
  4109d4:	602a      	str	r2, [r5, #0]
  4109d6:	b010      	add	sp, #64	; 0x40
  4109d8:	bd70      	pop	{r4, r5, r6, pc}
  4109da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4109de:	602b      	str	r3, [r5, #0]
  4109e0:	b010      	add	sp, #64	; 0x40
  4109e2:	bd70      	pop	{r4, r5, r6, pc}

004109e4 <__smakebuf_r>:
  4109e4:	898a      	ldrh	r2, [r1, #12]
  4109e6:	0792      	lsls	r2, r2, #30
  4109e8:	460b      	mov	r3, r1
  4109ea:	d506      	bpl.n	4109fa <__smakebuf_r+0x16>
  4109ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4109f0:	2101      	movs	r1, #1
  4109f2:	601a      	str	r2, [r3, #0]
  4109f4:	611a      	str	r2, [r3, #16]
  4109f6:	6159      	str	r1, [r3, #20]
  4109f8:	4770      	bx	lr
  4109fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4109fc:	b083      	sub	sp, #12
  4109fe:	ab01      	add	r3, sp, #4
  410a00:	466a      	mov	r2, sp
  410a02:	460c      	mov	r4, r1
  410a04:	4606      	mov	r6, r0
  410a06:	f7ff ffbf 	bl	410988 <__swhatbuf_r>
  410a0a:	9900      	ldr	r1, [sp, #0]
  410a0c:	4605      	mov	r5, r0
  410a0e:	4630      	mov	r0, r6
  410a10:	f000 f83a 	bl	410a88 <_malloc_r>
  410a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410a18:	b1d8      	cbz	r0, 410a52 <__smakebuf_r+0x6e>
  410a1a:	9a01      	ldr	r2, [sp, #4]
  410a1c:	4f15      	ldr	r7, [pc, #84]	; (410a74 <__smakebuf_r+0x90>)
  410a1e:	9900      	ldr	r1, [sp, #0]
  410a20:	63f7      	str	r7, [r6, #60]	; 0x3c
  410a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  410a26:	81a3      	strh	r3, [r4, #12]
  410a28:	6020      	str	r0, [r4, #0]
  410a2a:	6120      	str	r0, [r4, #16]
  410a2c:	6161      	str	r1, [r4, #20]
  410a2e:	b91a      	cbnz	r2, 410a38 <__smakebuf_r+0x54>
  410a30:	432b      	orrs	r3, r5
  410a32:	81a3      	strh	r3, [r4, #12]
  410a34:	b003      	add	sp, #12
  410a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410a38:	4630      	mov	r0, r6
  410a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  410a3e:	f001 fa7f 	bl	411f40 <_isatty_r>
  410a42:	b1a0      	cbz	r0, 410a6e <__smakebuf_r+0x8a>
  410a44:	89a3      	ldrh	r3, [r4, #12]
  410a46:	f023 0303 	bic.w	r3, r3, #3
  410a4a:	f043 0301 	orr.w	r3, r3, #1
  410a4e:	b21b      	sxth	r3, r3
  410a50:	e7ee      	b.n	410a30 <__smakebuf_r+0x4c>
  410a52:	059a      	lsls	r2, r3, #22
  410a54:	d4ee      	bmi.n	410a34 <__smakebuf_r+0x50>
  410a56:	f023 0303 	bic.w	r3, r3, #3
  410a5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  410a5e:	f043 0302 	orr.w	r3, r3, #2
  410a62:	2101      	movs	r1, #1
  410a64:	81a3      	strh	r3, [r4, #12]
  410a66:	6022      	str	r2, [r4, #0]
  410a68:	6122      	str	r2, [r4, #16]
  410a6a:	6161      	str	r1, [r4, #20]
  410a6c:	e7e2      	b.n	410a34 <__smakebuf_r+0x50>
  410a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410a72:	e7dd      	b.n	410a30 <__smakebuf_r+0x4c>
  410a74:	00410189 	.word	0x00410189

00410a78 <malloc>:
  410a78:	4b02      	ldr	r3, [pc, #8]	; (410a84 <malloc+0xc>)
  410a7a:	4601      	mov	r1, r0
  410a7c:	6818      	ldr	r0, [r3, #0]
  410a7e:	f000 b803 	b.w	410a88 <_malloc_r>
  410a82:	bf00      	nop
  410a84:	200000fc 	.word	0x200000fc

00410a88 <_malloc_r>:
  410a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410a8c:	f101 060b 	add.w	r6, r1, #11
  410a90:	2e16      	cmp	r6, #22
  410a92:	b083      	sub	sp, #12
  410a94:	4605      	mov	r5, r0
  410a96:	f240 809e 	bls.w	410bd6 <_malloc_r+0x14e>
  410a9a:	f036 0607 	bics.w	r6, r6, #7
  410a9e:	f100 80bd 	bmi.w	410c1c <_malloc_r+0x194>
  410aa2:	42b1      	cmp	r1, r6
  410aa4:	f200 80ba 	bhi.w	410c1c <_malloc_r+0x194>
  410aa8:	f000 fb0a 	bl	4110c0 <__malloc_lock>
  410aac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  410ab0:	f0c0 8293 	bcc.w	410fda <_malloc_r+0x552>
  410ab4:	0a73      	lsrs	r3, r6, #9
  410ab6:	f000 80b8 	beq.w	410c2a <_malloc_r+0x1a2>
  410aba:	2b04      	cmp	r3, #4
  410abc:	f200 8179 	bhi.w	410db2 <_malloc_r+0x32a>
  410ac0:	09b3      	lsrs	r3, r6, #6
  410ac2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  410ac6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  410aca:	00c3      	lsls	r3, r0, #3
  410acc:	4fbf      	ldr	r7, [pc, #764]	; (410dcc <_malloc_r+0x344>)
  410ace:	443b      	add	r3, r7
  410ad0:	f1a3 0108 	sub.w	r1, r3, #8
  410ad4:	685c      	ldr	r4, [r3, #4]
  410ad6:	42a1      	cmp	r1, r4
  410ad8:	d106      	bne.n	410ae8 <_malloc_r+0x60>
  410ada:	e00c      	b.n	410af6 <_malloc_r+0x6e>
  410adc:	2a00      	cmp	r2, #0
  410ade:	f280 80aa 	bge.w	410c36 <_malloc_r+0x1ae>
  410ae2:	68e4      	ldr	r4, [r4, #12]
  410ae4:	42a1      	cmp	r1, r4
  410ae6:	d006      	beq.n	410af6 <_malloc_r+0x6e>
  410ae8:	6863      	ldr	r3, [r4, #4]
  410aea:	f023 0303 	bic.w	r3, r3, #3
  410aee:	1b9a      	subs	r2, r3, r6
  410af0:	2a0f      	cmp	r2, #15
  410af2:	ddf3      	ble.n	410adc <_malloc_r+0x54>
  410af4:	4670      	mov	r0, lr
  410af6:	693c      	ldr	r4, [r7, #16]
  410af8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 410de0 <_malloc_r+0x358>
  410afc:	4574      	cmp	r4, lr
  410afe:	f000 81ab 	beq.w	410e58 <_malloc_r+0x3d0>
  410b02:	6863      	ldr	r3, [r4, #4]
  410b04:	f023 0303 	bic.w	r3, r3, #3
  410b08:	1b9a      	subs	r2, r3, r6
  410b0a:	2a0f      	cmp	r2, #15
  410b0c:	f300 8190 	bgt.w	410e30 <_malloc_r+0x3a8>
  410b10:	2a00      	cmp	r2, #0
  410b12:	f8c7 e014 	str.w	lr, [r7, #20]
  410b16:	f8c7 e010 	str.w	lr, [r7, #16]
  410b1a:	f280 809d 	bge.w	410c58 <_malloc_r+0x1d0>
  410b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  410b22:	f080 8161 	bcs.w	410de8 <_malloc_r+0x360>
  410b26:	08db      	lsrs	r3, r3, #3
  410b28:	f103 0c01 	add.w	ip, r3, #1
  410b2c:	1099      	asrs	r1, r3, #2
  410b2e:	687a      	ldr	r2, [r7, #4]
  410b30:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  410b34:	f8c4 8008 	str.w	r8, [r4, #8]
  410b38:	2301      	movs	r3, #1
  410b3a:	408b      	lsls	r3, r1
  410b3c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  410b40:	4313      	orrs	r3, r2
  410b42:	3908      	subs	r1, #8
  410b44:	60e1      	str	r1, [r4, #12]
  410b46:	607b      	str	r3, [r7, #4]
  410b48:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  410b4c:	f8c8 400c 	str.w	r4, [r8, #12]
  410b50:	1082      	asrs	r2, r0, #2
  410b52:	2401      	movs	r4, #1
  410b54:	4094      	lsls	r4, r2
  410b56:	429c      	cmp	r4, r3
  410b58:	f200 808b 	bhi.w	410c72 <_malloc_r+0x1ea>
  410b5c:	421c      	tst	r4, r3
  410b5e:	d106      	bne.n	410b6e <_malloc_r+0xe6>
  410b60:	f020 0003 	bic.w	r0, r0, #3
  410b64:	0064      	lsls	r4, r4, #1
  410b66:	421c      	tst	r4, r3
  410b68:	f100 0004 	add.w	r0, r0, #4
  410b6c:	d0fa      	beq.n	410b64 <_malloc_r+0xdc>
  410b6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  410b72:	46cc      	mov	ip, r9
  410b74:	4680      	mov	r8, r0
  410b76:	f8dc 300c 	ldr.w	r3, [ip, #12]
  410b7a:	459c      	cmp	ip, r3
  410b7c:	d107      	bne.n	410b8e <_malloc_r+0x106>
  410b7e:	e16d      	b.n	410e5c <_malloc_r+0x3d4>
  410b80:	2a00      	cmp	r2, #0
  410b82:	f280 817b 	bge.w	410e7c <_malloc_r+0x3f4>
  410b86:	68db      	ldr	r3, [r3, #12]
  410b88:	459c      	cmp	ip, r3
  410b8a:	f000 8167 	beq.w	410e5c <_malloc_r+0x3d4>
  410b8e:	6859      	ldr	r1, [r3, #4]
  410b90:	f021 0103 	bic.w	r1, r1, #3
  410b94:	1b8a      	subs	r2, r1, r6
  410b96:	2a0f      	cmp	r2, #15
  410b98:	ddf2      	ble.n	410b80 <_malloc_r+0xf8>
  410b9a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  410b9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  410ba2:	9300      	str	r3, [sp, #0]
  410ba4:	199c      	adds	r4, r3, r6
  410ba6:	4628      	mov	r0, r5
  410ba8:	f046 0601 	orr.w	r6, r6, #1
  410bac:	f042 0501 	orr.w	r5, r2, #1
  410bb0:	605e      	str	r6, [r3, #4]
  410bb2:	f8c8 c00c 	str.w	ip, [r8, #12]
  410bb6:	f8cc 8008 	str.w	r8, [ip, #8]
  410bba:	617c      	str	r4, [r7, #20]
  410bbc:	613c      	str	r4, [r7, #16]
  410bbe:	f8c4 e00c 	str.w	lr, [r4, #12]
  410bc2:	f8c4 e008 	str.w	lr, [r4, #8]
  410bc6:	6065      	str	r5, [r4, #4]
  410bc8:	505a      	str	r2, [r3, r1]
  410bca:	f000 fa7f 	bl	4110cc <__malloc_unlock>
  410bce:	9b00      	ldr	r3, [sp, #0]
  410bd0:	f103 0408 	add.w	r4, r3, #8
  410bd4:	e01e      	b.n	410c14 <_malloc_r+0x18c>
  410bd6:	2910      	cmp	r1, #16
  410bd8:	d820      	bhi.n	410c1c <_malloc_r+0x194>
  410bda:	f000 fa71 	bl	4110c0 <__malloc_lock>
  410bde:	2610      	movs	r6, #16
  410be0:	2318      	movs	r3, #24
  410be2:	2002      	movs	r0, #2
  410be4:	4f79      	ldr	r7, [pc, #484]	; (410dcc <_malloc_r+0x344>)
  410be6:	443b      	add	r3, r7
  410be8:	f1a3 0208 	sub.w	r2, r3, #8
  410bec:	685c      	ldr	r4, [r3, #4]
  410bee:	4294      	cmp	r4, r2
  410bf0:	f000 813d 	beq.w	410e6e <_malloc_r+0x3e6>
  410bf4:	6863      	ldr	r3, [r4, #4]
  410bf6:	68e1      	ldr	r1, [r4, #12]
  410bf8:	68a6      	ldr	r6, [r4, #8]
  410bfa:	f023 0303 	bic.w	r3, r3, #3
  410bfe:	4423      	add	r3, r4
  410c00:	4628      	mov	r0, r5
  410c02:	685a      	ldr	r2, [r3, #4]
  410c04:	60f1      	str	r1, [r6, #12]
  410c06:	f042 0201 	orr.w	r2, r2, #1
  410c0a:	608e      	str	r6, [r1, #8]
  410c0c:	605a      	str	r2, [r3, #4]
  410c0e:	f000 fa5d 	bl	4110cc <__malloc_unlock>
  410c12:	3408      	adds	r4, #8
  410c14:	4620      	mov	r0, r4
  410c16:	b003      	add	sp, #12
  410c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c1c:	2400      	movs	r4, #0
  410c1e:	230c      	movs	r3, #12
  410c20:	4620      	mov	r0, r4
  410c22:	602b      	str	r3, [r5, #0]
  410c24:	b003      	add	sp, #12
  410c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c2a:	2040      	movs	r0, #64	; 0x40
  410c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
  410c30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  410c34:	e74a      	b.n	410acc <_malloc_r+0x44>
  410c36:	4423      	add	r3, r4
  410c38:	68e1      	ldr	r1, [r4, #12]
  410c3a:	685a      	ldr	r2, [r3, #4]
  410c3c:	68a6      	ldr	r6, [r4, #8]
  410c3e:	f042 0201 	orr.w	r2, r2, #1
  410c42:	60f1      	str	r1, [r6, #12]
  410c44:	4628      	mov	r0, r5
  410c46:	608e      	str	r6, [r1, #8]
  410c48:	605a      	str	r2, [r3, #4]
  410c4a:	f000 fa3f 	bl	4110cc <__malloc_unlock>
  410c4e:	3408      	adds	r4, #8
  410c50:	4620      	mov	r0, r4
  410c52:	b003      	add	sp, #12
  410c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c58:	4423      	add	r3, r4
  410c5a:	4628      	mov	r0, r5
  410c5c:	685a      	ldr	r2, [r3, #4]
  410c5e:	f042 0201 	orr.w	r2, r2, #1
  410c62:	605a      	str	r2, [r3, #4]
  410c64:	f000 fa32 	bl	4110cc <__malloc_unlock>
  410c68:	3408      	adds	r4, #8
  410c6a:	4620      	mov	r0, r4
  410c6c:	b003      	add	sp, #12
  410c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c72:	68bc      	ldr	r4, [r7, #8]
  410c74:	6863      	ldr	r3, [r4, #4]
  410c76:	f023 0803 	bic.w	r8, r3, #3
  410c7a:	45b0      	cmp	r8, r6
  410c7c:	d304      	bcc.n	410c88 <_malloc_r+0x200>
  410c7e:	eba8 0306 	sub.w	r3, r8, r6
  410c82:	2b0f      	cmp	r3, #15
  410c84:	f300 8085 	bgt.w	410d92 <_malloc_r+0x30a>
  410c88:	f8df 9158 	ldr.w	r9, [pc, #344]	; 410de4 <_malloc_r+0x35c>
  410c8c:	4b50      	ldr	r3, [pc, #320]	; (410dd0 <_malloc_r+0x348>)
  410c8e:	f8d9 2000 	ldr.w	r2, [r9]
  410c92:	681b      	ldr	r3, [r3, #0]
  410c94:	3201      	adds	r2, #1
  410c96:	4433      	add	r3, r6
  410c98:	eb04 0a08 	add.w	sl, r4, r8
  410c9c:	f000 8155 	beq.w	410f4a <_malloc_r+0x4c2>
  410ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  410ca4:	330f      	adds	r3, #15
  410ca6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  410caa:	f02b 0b0f 	bic.w	fp, fp, #15
  410cae:	4659      	mov	r1, fp
  410cb0:	4628      	mov	r0, r5
  410cb2:	f000 feb1 	bl	411a18 <_sbrk_r>
  410cb6:	1c41      	adds	r1, r0, #1
  410cb8:	4602      	mov	r2, r0
  410cba:	f000 80fc 	beq.w	410eb6 <_malloc_r+0x42e>
  410cbe:	4582      	cmp	sl, r0
  410cc0:	f200 80f7 	bhi.w	410eb2 <_malloc_r+0x42a>
  410cc4:	4b43      	ldr	r3, [pc, #268]	; (410dd4 <_malloc_r+0x34c>)
  410cc6:	6819      	ldr	r1, [r3, #0]
  410cc8:	4459      	add	r1, fp
  410cca:	6019      	str	r1, [r3, #0]
  410ccc:	f000 814d 	beq.w	410f6a <_malloc_r+0x4e2>
  410cd0:	f8d9 0000 	ldr.w	r0, [r9]
  410cd4:	3001      	adds	r0, #1
  410cd6:	bf1b      	ittet	ne
  410cd8:	eba2 0a0a 	subne.w	sl, r2, sl
  410cdc:	4451      	addne	r1, sl
  410cde:	f8c9 2000 	streq.w	r2, [r9]
  410ce2:	6019      	strne	r1, [r3, #0]
  410ce4:	f012 0107 	ands.w	r1, r2, #7
  410ce8:	f000 8115 	beq.w	410f16 <_malloc_r+0x48e>
  410cec:	f1c1 0008 	rsb	r0, r1, #8
  410cf0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  410cf4:	4402      	add	r2, r0
  410cf6:	3108      	adds	r1, #8
  410cf8:	eb02 090b 	add.w	r9, r2, fp
  410cfc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  410d00:	eba1 0909 	sub.w	r9, r1, r9
  410d04:	4649      	mov	r1, r9
  410d06:	4628      	mov	r0, r5
  410d08:	9301      	str	r3, [sp, #4]
  410d0a:	9200      	str	r2, [sp, #0]
  410d0c:	f000 fe84 	bl	411a18 <_sbrk_r>
  410d10:	1c43      	adds	r3, r0, #1
  410d12:	e89d 000c 	ldmia.w	sp, {r2, r3}
  410d16:	f000 8143 	beq.w	410fa0 <_malloc_r+0x518>
  410d1a:	1a80      	subs	r0, r0, r2
  410d1c:	4448      	add	r0, r9
  410d1e:	f040 0001 	orr.w	r0, r0, #1
  410d22:	6819      	ldr	r1, [r3, #0]
  410d24:	60ba      	str	r2, [r7, #8]
  410d26:	4449      	add	r1, r9
  410d28:	42bc      	cmp	r4, r7
  410d2a:	6050      	str	r0, [r2, #4]
  410d2c:	6019      	str	r1, [r3, #0]
  410d2e:	d017      	beq.n	410d60 <_malloc_r+0x2d8>
  410d30:	f1b8 0f0f 	cmp.w	r8, #15
  410d34:	f240 80fb 	bls.w	410f2e <_malloc_r+0x4a6>
  410d38:	6860      	ldr	r0, [r4, #4]
  410d3a:	f1a8 020c 	sub.w	r2, r8, #12
  410d3e:	f022 0207 	bic.w	r2, r2, #7
  410d42:	eb04 0e02 	add.w	lr, r4, r2
  410d46:	f000 0001 	and.w	r0, r0, #1
  410d4a:	f04f 0c05 	mov.w	ip, #5
  410d4e:	4310      	orrs	r0, r2
  410d50:	2a0f      	cmp	r2, #15
  410d52:	6060      	str	r0, [r4, #4]
  410d54:	f8ce c004 	str.w	ip, [lr, #4]
  410d58:	f8ce c008 	str.w	ip, [lr, #8]
  410d5c:	f200 8117 	bhi.w	410f8e <_malloc_r+0x506>
  410d60:	4b1d      	ldr	r3, [pc, #116]	; (410dd8 <_malloc_r+0x350>)
  410d62:	68bc      	ldr	r4, [r7, #8]
  410d64:	681a      	ldr	r2, [r3, #0]
  410d66:	4291      	cmp	r1, r2
  410d68:	bf88      	it	hi
  410d6a:	6019      	strhi	r1, [r3, #0]
  410d6c:	4b1b      	ldr	r3, [pc, #108]	; (410ddc <_malloc_r+0x354>)
  410d6e:	681a      	ldr	r2, [r3, #0]
  410d70:	4291      	cmp	r1, r2
  410d72:	6862      	ldr	r2, [r4, #4]
  410d74:	bf88      	it	hi
  410d76:	6019      	strhi	r1, [r3, #0]
  410d78:	f022 0203 	bic.w	r2, r2, #3
  410d7c:	4296      	cmp	r6, r2
  410d7e:	eba2 0306 	sub.w	r3, r2, r6
  410d82:	d801      	bhi.n	410d88 <_malloc_r+0x300>
  410d84:	2b0f      	cmp	r3, #15
  410d86:	dc04      	bgt.n	410d92 <_malloc_r+0x30a>
  410d88:	4628      	mov	r0, r5
  410d8a:	f000 f99f 	bl	4110cc <__malloc_unlock>
  410d8e:	2400      	movs	r4, #0
  410d90:	e740      	b.n	410c14 <_malloc_r+0x18c>
  410d92:	19a2      	adds	r2, r4, r6
  410d94:	f043 0301 	orr.w	r3, r3, #1
  410d98:	f046 0601 	orr.w	r6, r6, #1
  410d9c:	6066      	str	r6, [r4, #4]
  410d9e:	4628      	mov	r0, r5
  410da0:	60ba      	str	r2, [r7, #8]
  410da2:	6053      	str	r3, [r2, #4]
  410da4:	f000 f992 	bl	4110cc <__malloc_unlock>
  410da8:	3408      	adds	r4, #8
  410daa:	4620      	mov	r0, r4
  410dac:	b003      	add	sp, #12
  410dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410db2:	2b14      	cmp	r3, #20
  410db4:	d971      	bls.n	410e9a <_malloc_r+0x412>
  410db6:	2b54      	cmp	r3, #84	; 0x54
  410db8:	f200 80a3 	bhi.w	410f02 <_malloc_r+0x47a>
  410dbc:	0b33      	lsrs	r3, r6, #12
  410dbe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  410dc2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  410dc6:	00c3      	lsls	r3, r0, #3
  410dc8:	e680      	b.n	410acc <_malloc_r+0x44>
  410dca:	bf00      	nop
  410dcc:	20000698 	.word	0x20000698
  410dd0:	20013438 	.word	0x20013438
  410dd4:	20013408 	.word	0x20013408
  410dd8:	20013430 	.word	0x20013430
  410ddc:	20013434 	.word	0x20013434
  410de0:	200006a0 	.word	0x200006a0
  410de4:	20000aa0 	.word	0x20000aa0
  410de8:	0a5a      	lsrs	r2, r3, #9
  410dea:	2a04      	cmp	r2, #4
  410dec:	d95b      	bls.n	410ea6 <_malloc_r+0x41e>
  410dee:	2a14      	cmp	r2, #20
  410df0:	f200 80ae 	bhi.w	410f50 <_malloc_r+0x4c8>
  410df4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  410df8:	00c9      	lsls	r1, r1, #3
  410dfa:	325b      	adds	r2, #91	; 0x5b
  410dfc:	eb07 0c01 	add.w	ip, r7, r1
  410e00:	5879      	ldr	r1, [r7, r1]
  410e02:	f1ac 0c08 	sub.w	ip, ip, #8
  410e06:	458c      	cmp	ip, r1
  410e08:	f000 8088 	beq.w	410f1c <_malloc_r+0x494>
  410e0c:	684a      	ldr	r2, [r1, #4]
  410e0e:	f022 0203 	bic.w	r2, r2, #3
  410e12:	4293      	cmp	r3, r2
  410e14:	d273      	bcs.n	410efe <_malloc_r+0x476>
  410e16:	6889      	ldr	r1, [r1, #8]
  410e18:	458c      	cmp	ip, r1
  410e1a:	d1f7      	bne.n	410e0c <_malloc_r+0x384>
  410e1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  410e20:	687b      	ldr	r3, [r7, #4]
  410e22:	60e2      	str	r2, [r4, #12]
  410e24:	f8c4 c008 	str.w	ip, [r4, #8]
  410e28:	6094      	str	r4, [r2, #8]
  410e2a:	f8cc 400c 	str.w	r4, [ip, #12]
  410e2e:	e68f      	b.n	410b50 <_malloc_r+0xc8>
  410e30:	19a1      	adds	r1, r4, r6
  410e32:	f046 0c01 	orr.w	ip, r6, #1
  410e36:	f042 0601 	orr.w	r6, r2, #1
  410e3a:	f8c4 c004 	str.w	ip, [r4, #4]
  410e3e:	4628      	mov	r0, r5
  410e40:	6179      	str	r1, [r7, #20]
  410e42:	6139      	str	r1, [r7, #16]
  410e44:	f8c1 e00c 	str.w	lr, [r1, #12]
  410e48:	f8c1 e008 	str.w	lr, [r1, #8]
  410e4c:	604e      	str	r6, [r1, #4]
  410e4e:	50e2      	str	r2, [r4, r3]
  410e50:	f000 f93c 	bl	4110cc <__malloc_unlock>
  410e54:	3408      	adds	r4, #8
  410e56:	e6dd      	b.n	410c14 <_malloc_r+0x18c>
  410e58:	687b      	ldr	r3, [r7, #4]
  410e5a:	e679      	b.n	410b50 <_malloc_r+0xc8>
  410e5c:	f108 0801 	add.w	r8, r8, #1
  410e60:	f018 0f03 	tst.w	r8, #3
  410e64:	f10c 0c08 	add.w	ip, ip, #8
  410e68:	f47f ae85 	bne.w	410b76 <_malloc_r+0xee>
  410e6c:	e02d      	b.n	410eca <_malloc_r+0x442>
  410e6e:	68dc      	ldr	r4, [r3, #12]
  410e70:	42a3      	cmp	r3, r4
  410e72:	bf08      	it	eq
  410e74:	3002      	addeq	r0, #2
  410e76:	f43f ae3e 	beq.w	410af6 <_malloc_r+0x6e>
  410e7a:	e6bb      	b.n	410bf4 <_malloc_r+0x16c>
  410e7c:	4419      	add	r1, r3
  410e7e:	461c      	mov	r4, r3
  410e80:	684a      	ldr	r2, [r1, #4]
  410e82:	68db      	ldr	r3, [r3, #12]
  410e84:	f854 6f08 	ldr.w	r6, [r4, #8]!
  410e88:	f042 0201 	orr.w	r2, r2, #1
  410e8c:	604a      	str	r2, [r1, #4]
  410e8e:	4628      	mov	r0, r5
  410e90:	60f3      	str	r3, [r6, #12]
  410e92:	609e      	str	r6, [r3, #8]
  410e94:	f000 f91a 	bl	4110cc <__malloc_unlock>
  410e98:	e6bc      	b.n	410c14 <_malloc_r+0x18c>
  410e9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  410e9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  410ea2:	00c3      	lsls	r3, r0, #3
  410ea4:	e612      	b.n	410acc <_malloc_r+0x44>
  410ea6:	099a      	lsrs	r2, r3, #6
  410ea8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  410eac:	00c9      	lsls	r1, r1, #3
  410eae:	3238      	adds	r2, #56	; 0x38
  410eb0:	e7a4      	b.n	410dfc <_malloc_r+0x374>
  410eb2:	42bc      	cmp	r4, r7
  410eb4:	d054      	beq.n	410f60 <_malloc_r+0x4d8>
  410eb6:	68bc      	ldr	r4, [r7, #8]
  410eb8:	6862      	ldr	r2, [r4, #4]
  410eba:	f022 0203 	bic.w	r2, r2, #3
  410ebe:	e75d      	b.n	410d7c <_malloc_r+0x2f4>
  410ec0:	f859 3908 	ldr.w	r3, [r9], #-8
  410ec4:	4599      	cmp	r9, r3
  410ec6:	f040 8086 	bne.w	410fd6 <_malloc_r+0x54e>
  410eca:	f010 0f03 	tst.w	r0, #3
  410ece:	f100 30ff 	add.w	r0, r0, #4294967295
  410ed2:	d1f5      	bne.n	410ec0 <_malloc_r+0x438>
  410ed4:	687b      	ldr	r3, [r7, #4]
  410ed6:	ea23 0304 	bic.w	r3, r3, r4
  410eda:	607b      	str	r3, [r7, #4]
  410edc:	0064      	lsls	r4, r4, #1
  410ede:	429c      	cmp	r4, r3
  410ee0:	f63f aec7 	bhi.w	410c72 <_malloc_r+0x1ea>
  410ee4:	2c00      	cmp	r4, #0
  410ee6:	f43f aec4 	beq.w	410c72 <_malloc_r+0x1ea>
  410eea:	421c      	tst	r4, r3
  410eec:	4640      	mov	r0, r8
  410eee:	f47f ae3e 	bne.w	410b6e <_malloc_r+0xe6>
  410ef2:	0064      	lsls	r4, r4, #1
  410ef4:	421c      	tst	r4, r3
  410ef6:	f100 0004 	add.w	r0, r0, #4
  410efa:	d0fa      	beq.n	410ef2 <_malloc_r+0x46a>
  410efc:	e637      	b.n	410b6e <_malloc_r+0xe6>
  410efe:	468c      	mov	ip, r1
  410f00:	e78c      	b.n	410e1c <_malloc_r+0x394>
  410f02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  410f06:	d815      	bhi.n	410f34 <_malloc_r+0x4ac>
  410f08:	0bf3      	lsrs	r3, r6, #15
  410f0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  410f0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  410f12:	00c3      	lsls	r3, r0, #3
  410f14:	e5da      	b.n	410acc <_malloc_r+0x44>
  410f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  410f1a:	e6ed      	b.n	410cf8 <_malloc_r+0x270>
  410f1c:	687b      	ldr	r3, [r7, #4]
  410f1e:	1092      	asrs	r2, r2, #2
  410f20:	2101      	movs	r1, #1
  410f22:	fa01 f202 	lsl.w	r2, r1, r2
  410f26:	4313      	orrs	r3, r2
  410f28:	607b      	str	r3, [r7, #4]
  410f2a:	4662      	mov	r2, ip
  410f2c:	e779      	b.n	410e22 <_malloc_r+0x39a>
  410f2e:	2301      	movs	r3, #1
  410f30:	6053      	str	r3, [r2, #4]
  410f32:	e729      	b.n	410d88 <_malloc_r+0x300>
  410f34:	f240 5254 	movw	r2, #1364	; 0x554
  410f38:	4293      	cmp	r3, r2
  410f3a:	d822      	bhi.n	410f82 <_malloc_r+0x4fa>
  410f3c:	0cb3      	lsrs	r3, r6, #18
  410f3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  410f42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  410f46:	00c3      	lsls	r3, r0, #3
  410f48:	e5c0      	b.n	410acc <_malloc_r+0x44>
  410f4a:	f103 0b10 	add.w	fp, r3, #16
  410f4e:	e6ae      	b.n	410cae <_malloc_r+0x226>
  410f50:	2a54      	cmp	r2, #84	; 0x54
  410f52:	d829      	bhi.n	410fa8 <_malloc_r+0x520>
  410f54:	0b1a      	lsrs	r2, r3, #12
  410f56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  410f5a:	00c9      	lsls	r1, r1, #3
  410f5c:	326e      	adds	r2, #110	; 0x6e
  410f5e:	e74d      	b.n	410dfc <_malloc_r+0x374>
  410f60:	4b20      	ldr	r3, [pc, #128]	; (410fe4 <_malloc_r+0x55c>)
  410f62:	6819      	ldr	r1, [r3, #0]
  410f64:	4459      	add	r1, fp
  410f66:	6019      	str	r1, [r3, #0]
  410f68:	e6b2      	b.n	410cd0 <_malloc_r+0x248>
  410f6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  410f6e:	2800      	cmp	r0, #0
  410f70:	f47f aeae 	bne.w	410cd0 <_malloc_r+0x248>
  410f74:	eb08 030b 	add.w	r3, r8, fp
  410f78:	68ba      	ldr	r2, [r7, #8]
  410f7a:	f043 0301 	orr.w	r3, r3, #1
  410f7e:	6053      	str	r3, [r2, #4]
  410f80:	e6ee      	b.n	410d60 <_malloc_r+0x2d8>
  410f82:	207f      	movs	r0, #127	; 0x7f
  410f84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  410f88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  410f8c:	e59e      	b.n	410acc <_malloc_r+0x44>
  410f8e:	f104 0108 	add.w	r1, r4, #8
  410f92:	4628      	mov	r0, r5
  410f94:	9300      	str	r3, [sp, #0]
  410f96:	f7ff fa4b 	bl	410430 <_free_r>
  410f9a:	9b00      	ldr	r3, [sp, #0]
  410f9c:	6819      	ldr	r1, [r3, #0]
  410f9e:	e6df      	b.n	410d60 <_malloc_r+0x2d8>
  410fa0:	2001      	movs	r0, #1
  410fa2:	f04f 0900 	mov.w	r9, #0
  410fa6:	e6bc      	b.n	410d22 <_malloc_r+0x29a>
  410fa8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  410fac:	d805      	bhi.n	410fba <_malloc_r+0x532>
  410fae:	0bda      	lsrs	r2, r3, #15
  410fb0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  410fb4:	00c9      	lsls	r1, r1, #3
  410fb6:	3277      	adds	r2, #119	; 0x77
  410fb8:	e720      	b.n	410dfc <_malloc_r+0x374>
  410fba:	f240 5154 	movw	r1, #1364	; 0x554
  410fbe:	428a      	cmp	r2, r1
  410fc0:	d805      	bhi.n	410fce <_malloc_r+0x546>
  410fc2:	0c9a      	lsrs	r2, r3, #18
  410fc4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  410fc8:	00c9      	lsls	r1, r1, #3
  410fca:	327c      	adds	r2, #124	; 0x7c
  410fcc:	e716      	b.n	410dfc <_malloc_r+0x374>
  410fce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  410fd2:	227e      	movs	r2, #126	; 0x7e
  410fd4:	e712      	b.n	410dfc <_malloc_r+0x374>
  410fd6:	687b      	ldr	r3, [r7, #4]
  410fd8:	e780      	b.n	410edc <_malloc_r+0x454>
  410fda:	08f0      	lsrs	r0, r6, #3
  410fdc:	f106 0308 	add.w	r3, r6, #8
  410fe0:	e600      	b.n	410be4 <_malloc_r+0x15c>
  410fe2:	bf00      	nop
  410fe4:	20013408 	.word	0x20013408

00410fe8 <__ascii_mbtowc>:
  410fe8:	b082      	sub	sp, #8
  410fea:	b149      	cbz	r1, 411000 <__ascii_mbtowc+0x18>
  410fec:	b15a      	cbz	r2, 411006 <__ascii_mbtowc+0x1e>
  410fee:	b16b      	cbz	r3, 41100c <__ascii_mbtowc+0x24>
  410ff0:	7813      	ldrb	r3, [r2, #0]
  410ff2:	600b      	str	r3, [r1, #0]
  410ff4:	7812      	ldrb	r2, [r2, #0]
  410ff6:	1c10      	adds	r0, r2, #0
  410ff8:	bf18      	it	ne
  410ffa:	2001      	movne	r0, #1
  410ffc:	b002      	add	sp, #8
  410ffe:	4770      	bx	lr
  411000:	a901      	add	r1, sp, #4
  411002:	2a00      	cmp	r2, #0
  411004:	d1f3      	bne.n	410fee <__ascii_mbtowc+0x6>
  411006:	4610      	mov	r0, r2
  411008:	b002      	add	sp, #8
  41100a:	4770      	bx	lr
  41100c:	f06f 0001 	mvn.w	r0, #1
  411010:	e7f4      	b.n	410ffc <__ascii_mbtowc+0x14>
  411012:	bf00      	nop
	...

00411020 <memchr>:
  411020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  411024:	2a10      	cmp	r2, #16
  411026:	db2b      	blt.n	411080 <memchr+0x60>
  411028:	f010 0f07 	tst.w	r0, #7
  41102c:	d008      	beq.n	411040 <memchr+0x20>
  41102e:	f810 3b01 	ldrb.w	r3, [r0], #1
  411032:	3a01      	subs	r2, #1
  411034:	428b      	cmp	r3, r1
  411036:	d02d      	beq.n	411094 <memchr+0x74>
  411038:	f010 0f07 	tst.w	r0, #7
  41103c:	b342      	cbz	r2, 411090 <memchr+0x70>
  41103e:	d1f6      	bne.n	41102e <memchr+0xe>
  411040:	b4f0      	push	{r4, r5, r6, r7}
  411042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  411046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41104a:	f022 0407 	bic.w	r4, r2, #7
  41104e:	f07f 0700 	mvns.w	r7, #0
  411052:	2300      	movs	r3, #0
  411054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  411058:	3c08      	subs	r4, #8
  41105a:	ea85 0501 	eor.w	r5, r5, r1
  41105e:	ea86 0601 	eor.w	r6, r6, r1
  411062:	fa85 f547 	uadd8	r5, r5, r7
  411066:	faa3 f587 	sel	r5, r3, r7
  41106a:	fa86 f647 	uadd8	r6, r6, r7
  41106e:	faa5 f687 	sel	r6, r5, r7
  411072:	b98e      	cbnz	r6, 411098 <memchr+0x78>
  411074:	d1ee      	bne.n	411054 <memchr+0x34>
  411076:	bcf0      	pop	{r4, r5, r6, r7}
  411078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41107c:	f002 0207 	and.w	r2, r2, #7
  411080:	b132      	cbz	r2, 411090 <memchr+0x70>
  411082:	f810 3b01 	ldrb.w	r3, [r0], #1
  411086:	3a01      	subs	r2, #1
  411088:	ea83 0301 	eor.w	r3, r3, r1
  41108c:	b113      	cbz	r3, 411094 <memchr+0x74>
  41108e:	d1f8      	bne.n	411082 <memchr+0x62>
  411090:	2000      	movs	r0, #0
  411092:	4770      	bx	lr
  411094:	3801      	subs	r0, #1
  411096:	4770      	bx	lr
  411098:	2d00      	cmp	r5, #0
  41109a:	bf06      	itte	eq
  41109c:	4635      	moveq	r5, r6
  41109e:	3803      	subeq	r0, #3
  4110a0:	3807      	subne	r0, #7
  4110a2:	f015 0f01 	tst.w	r5, #1
  4110a6:	d107      	bne.n	4110b8 <memchr+0x98>
  4110a8:	3001      	adds	r0, #1
  4110aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4110ae:	bf02      	ittt	eq
  4110b0:	3001      	addeq	r0, #1
  4110b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4110b6:	3001      	addeq	r0, #1
  4110b8:	bcf0      	pop	{r4, r5, r6, r7}
  4110ba:	3801      	subs	r0, #1
  4110bc:	4770      	bx	lr
  4110be:	bf00      	nop

004110c0 <__malloc_lock>:
  4110c0:	4801      	ldr	r0, [pc, #4]	; (4110c8 <__malloc_lock+0x8>)
  4110c2:	f7ff bc5d 	b.w	410980 <__retarget_lock_acquire_recursive>
  4110c6:	bf00      	nop
  4110c8:	200134b4 	.word	0x200134b4

004110cc <__malloc_unlock>:
  4110cc:	4801      	ldr	r0, [pc, #4]	; (4110d4 <__malloc_unlock+0x8>)
  4110ce:	f7ff bc59 	b.w	410984 <__retarget_lock_release_recursive>
  4110d2:	bf00      	nop
  4110d4:	200134b4 	.word	0x200134b4

004110d8 <_Balloc>:
  4110d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4110da:	b570      	push	{r4, r5, r6, lr}
  4110dc:	4605      	mov	r5, r0
  4110de:	460c      	mov	r4, r1
  4110e0:	b14b      	cbz	r3, 4110f6 <_Balloc+0x1e>
  4110e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4110e6:	b180      	cbz	r0, 41110a <_Balloc+0x32>
  4110e8:	6802      	ldr	r2, [r0, #0]
  4110ea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4110ee:	2300      	movs	r3, #0
  4110f0:	6103      	str	r3, [r0, #16]
  4110f2:	60c3      	str	r3, [r0, #12]
  4110f4:	bd70      	pop	{r4, r5, r6, pc}
  4110f6:	2221      	movs	r2, #33	; 0x21
  4110f8:	2104      	movs	r1, #4
  4110fa:	f000 fe69 	bl	411dd0 <_calloc_r>
  4110fe:	64e8      	str	r0, [r5, #76]	; 0x4c
  411100:	4603      	mov	r3, r0
  411102:	2800      	cmp	r0, #0
  411104:	d1ed      	bne.n	4110e2 <_Balloc+0xa>
  411106:	2000      	movs	r0, #0
  411108:	bd70      	pop	{r4, r5, r6, pc}
  41110a:	2101      	movs	r1, #1
  41110c:	fa01 f604 	lsl.w	r6, r1, r4
  411110:	1d72      	adds	r2, r6, #5
  411112:	4628      	mov	r0, r5
  411114:	0092      	lsls	r2, r2, #2
  411116:	f000 fe5b 	bl	411dd0 <_calloc_r>
  41111a:	2800      	cmp	r0, #0
  41111c:	d0f3      	beq.n	411106 <_Balloc+0x2e>
  41111e:	6044      	str	r4, [r0, #4]
  411120:	6086      	str	r6, [r0, #8]
  411122:	e7e4      	b.n	4110ee <_Balloc+0x16>

00411124 <_Bfree>:
  411124:	b131      	cbz	r1, 411134 <_Bfree+0x10>
  411126:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  411128:	684a      	ldr	r2, [r1, #4]
  41112a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  41112e:	6008      	str	r0, [r1, #0]
  411130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  411134:	4770      	bx	lr
  411136:	bf00      	nop

00411138 <__multadd>:
  411138:	b5f0      	push	{r4, r5, r6, r7, lr}
  41113a:	690c      	ldr	r4, [r1, #16]
  41113c:	b083      	sub	sp, #12
  41113e:	460d      	mov	r5, r1
  411140:	4606      	mov	r6, r0
  411142:	f101 0e14 	add.w	lr, r1, #20
  411146:	2700      	movs	r7, #0
  411148:	f8de 0000 	ldr.w	r0, [lr]
  41114c:	b281      	uxth	r1, r0
  41114e:	fb02 3301 	mla	r3, r2, r1, r3
  411152:	0c01      	lsrs	r1, r0, #16
  411154:	0c18      	lsrs	r0, r3, #16
  411156:	fb02 0101 	mla	r1, r2, r1, r0
  41115a:	b29b      	uxth	r3, r3
  41115c:	3701      	adds	r7, #1
  41115e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  411162:	42bc      	cmp	r4, r7
  411164:	f84e 3b04 	str.w	r3, [lr], #4
  411168:	ea4f 4311 	mov.w	r3, r1, lsr #16
  41116c:	dcec      	bgt.n	411148 <__multadd+0x10>
  41116e:	b13b      	cbz	r3, 411180 <__multadd+0x48>
  411170:	68aa      	ldr	r2, [r5, #8]
  411172:	4294      	cmp	r4, r2
  411174:	da07      	bge.n	411186 <__multadd+0x4e>
  411176:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  41117a:	3401      	adds	r4, #1
  41117c:	6153      	str	r3, [r2, #20]
  41117e:	612c      	str	r4, [r5, #16]
  411180:	4628      	mov	r0, r5
  411182:	b003      	add	sp, #12
  411184:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411186:	6869      	ldr	r1, [r5, #4]
  411188:	9301      	str	r3, [sp, #4]
  41118a:	3101      	adds	r1, #1
  41118c:	4630      	mov	r0, r6
  41118e:	f7ff ffa3 	bl	4110d8 <_Balloc>
  411192:	692a      	ldr	r2, [r5, #16]
  411194:	3202      	adds	r2, #2
  411196:	f105 010c 	add.w	r1, r5, #12
  41119a:	4607      	mov	r7, r0
  41119c:	0092      	lsls	r2, r2, #2
  41119e:	300c      	adds	r0, #12
  4111a0:	f7fb f91a 	bl	40c3d8 <memcpy>
  4111a4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4111a6:	6869      	ldr	r1, [r5, #4]
  4111a8:	9b01      	ldr	r3, [sp, #4]
  4111aa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4111ae:	6028      	str	r0, [r5, #0]
  4111b0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4111b4:	463d      	mov	r5, r7
  4111b6:	e7de      	b.n	411176 <__multadd+0x3e>

004111b8 <__hi0bits>:
  4111b8:	0c02      	lsrs	r2, r0, #16
  4111ba:	0412      	lsls	r2, r2, #16
  4111bc:	4603      	mov	r3, r0
  4111be:	b9b2      	cbnz	r2, 4111ee <__hi0bits+0x36>
  4111c0:	0403      	lsls	r3, r0, #16
  4111c2:	2010      	movs	r0, #16
  4111c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4111c8:	bf04      	itt	eq
  4111ca:	021b      	lsleq	r3, r3, #8
  4111cc:	3008      	addeq	r0, #8
  4111ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4111d2:	bf04      	itt	eq
  4111d4:	011b      	lsleq	r3, r3, #4
  4111d6:	3004      	addeq	r0, #4
  4111d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4111dc:	bf04      	itt	eq
  4111de:	009b      	lsleq	r3, r3, #2
  4111e0:	3002      	addeq	r0, #2
  4111e2:	2b00      	cmp	r3, #0
  4111e4:	db02      	blt.n	4111ec <__hi0bits+0x34>
  4111e6:	005b      	lsls	r3, r3, #1
  4111e8:	d403      	bmi.n	4111f2 <__hi0bits+0x3a>
  4111ea:	2020      	movs	r0, #32
  4111ec:	4770      	bx	lr
  4111ee:	2000      	movs	r0, #0
  4111f0:	e7e8      	b.n	4111c4 <__hi0bits+0xc>
  4111f2:	3001      	adds	r0, #1
  4111f4:	4770      	bx	lr
  4111f6:	bf00      	nop

004111f8 <__lo0bits>:
  4111f8:	6803      	ldr	r3, [r0, #0]
  4111fa:	f013 0207 	ands.w	r2, r3, #7
  4111fe:	4601      	mov	r1, r0
  411200:	d007      	beq.n	411212 <__lo0bits+0x1a>
  411202:	07da      	lsls	r2, r3, #31
  411204:	d421      	bmi.n	41124a <__lo0bits+0x52>
  411206:	0798      	lsls	r0, r3, #30
  411208:	d421      	bmi.n	41124e <__lo0bits+0x56>
  41120a:	089b      	lsrs	r3, r3, #2
  41120c:	600b      	str	r3, [r1, #0]
  41120e:	2002      	movs	r0, #2
  411210:	4770      	bx	lr
  411212:	b298      	uxth	r0, r3
  411214:	b198      	cbz	r0, 41123e <__lo0bits+0x46>
  411216:	4610      	mov	r0, r2
  411218:	f013 0fff 	tst.w	r3, #255	; 0xff
  41121c:	bf04      	itt	eq
  41121e:	0a1b      	lsreq	r3, r3, #8
  411220:	3008      	addeq	r0, #8
  411222:	071a      	lsls	r2, r3, #28
  411224:	bf04      	itt	eq
  411226:	091b      	lsreq	r3, r3, #4
  411228:	3004      	addeq	r0, #4
  41122a:	079a      	lsls	r2, r3, #30
  41122c:	bf04      	itt	eq
  41122e:	089b      	lsreq	r3, r3, #2
  411230:	3002      	addeq	r0, #2
  411232:	07da      	lsls	r2, r3, #31
  411234:	d407      	bmi.n	411246 <__lo0bits+0x4e>
  411236:	085b      	lsrs	r3, r3, #1
  411238:	d104      	bne.n	411244 <__lo0bits+0x4c>
  41123a:	2020      	movs	r0, #32
  41123c:	4770      	bx	lr
  41123e:	0c1b      	lsrs	r3, r3, #16
  411240:	2010      	movs	r0, #16
  411242:	e7e9      	b.n	411218 <__lo0bits+0x20>
  411244:	3001      	adds	r0, #1
  411246:	600b      	str	r3, [r1, #0]
  411248:	4770      	bx	lr
  41124a:	2000      	movs	r0, #0
  41124c:	4770      	bx	lr
  41124e:	085b      	lsrs	r3, r3, #1
  411250:	600b      	str	r3, [r1, #0]
  411252:	2001      	movs	r0, #1
  411254:	4770      	bx	lr
  411256:	bf00      	nop

00411258 <__i2b>:
  411258:	b510      	push	{r4, lr}
  41125a:	460c      	mov	r4, r1
  41125c:	2101      	movs	r1, #1
  41125e:	f7ff ff3b 	bl	4110d8 <_Balloc>
  411262:	2201      	movs	r2, #1
  411264:	6144      	str	r4, [r0, #20]
  411266:	6102      	str	r2, [r0, #16]
  411268:	bd10      	pop	{r4, pc}
  41126a:	bf00      	nop

0041126c <__multiply>:
  41126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411270:	690c      	ldr	r4, [r1, #16]
  411272:	6915      	ldr	r5, [r2, #16]
  411274:	42ac      	cmp	r4, r5
  411276:	b083      	sub	sp, #12
  411278:	468b      	mov	fp, r1
  41127a:	4616      	mov	r6, r2
  41127c:	da04      	bge.n	411288 <__multiply+0x1c>
  41127e:	4622      	mov	r2, r4
  411280:	46b3      	mov	fp, r6
  411282:	462c      	mov	r4, r5
  411284:	460e      	mov	r6, r1
  411286:	4615      	mov	r5, r2
  411288:	f8db 3008 	ldr.w	r3, [fp, #8]
  41128c:	f8db 1004 	ldr.w	r1, [fp, #4]
  411290:	eb04 0805 	add.w	r8, r4, r5
  411294:	4598      	cmp	r8, r3
  411296:	bfc8      	it	gt
  411298:	3101      	addgt	r1, #1
  41129a:	f7ff ff1d 	bl	4110d8 <_Balloc>
  41129e:	f100 0914 	add.w	r9, r0, #20
  4112a2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4112a6:	45d1      	cmp	r9, sl
  4112a8:	9000      	str	r0, [sp, #0]
  4112aa:	d205      	bcs.n	4112b8 <__multiply+0x4c>
  4112ac:	464b      	mov	r3, r9
  4112ae:	2100      	movs	r1, #0
  4112b0:	f843 1b04 	str.w	r1, [r3], #4
  4112b4:	459a      	cmp	sl, r3
  4112b6:	d8fb      	bhi.n	4112b0 <__multiply+0x44>
  4112b8:	f106 0c14 	add.w	ip, r6, #20
  4112bc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4112c0:	f10b 0b14 	add.w	fp, fp, #20
  4112c4:	459c      	cmp	ip, r3
  4112c6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4112ca:	d24c      	bcs.n	411366 <__multiply+0xfa>
  4112cc:	f8cd a004 	str.w	sl, [sp, #4]
  4112d0:	469a      	mov	sl, r3
  4112d2:	f8dc 5000 	ldr.w	r5, [ip]
  4112d6:	b2af      	uxth	r7, r5
  4112d8:	b1ef      	cbz	r7, 411316 <__multiply+0xaa>
  4112da:	2100      	movs	r1, #0
  4112dc:	464d      	mov	r5, r9
  4112de:	465e      	mov	r6, fp
  4112e0:	460c      	mov	r4, r1
  4112e2:	f856 2b04 	ldr.w	r2, [r6], #4
  4112e6:	6828      	ldr	r0, [r5, #0]
  4112e8:	b293      	uxth	r3, r2
  4112ea:	b281      	uxth	r1, r0
  4112ec:	fb07 1303 	mla	r3, r7, r3, r1
  4112f0:	0c12      	lsrs	r2, r2, #16
  4112f2:	0c01      	lsrs	r1, r0, #16
  4112f4:	4423      	add	r3, r4
  4112f6:	fb07 1102 	mla	r1, r7, r2, r1
  4112fa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4112fe:	b29b      	uxth	r3, r3
  411300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  411304:	45b6      	cmp	lr, r6
  411306:	f845 3b04 	str.w	r3, [r5], #4
  41130a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  41130e:	d8e8      	bhi.n	4112e2 <__multiply+0x76>
  411310:	602c      	str	r4, [r5, #0]
  411312:	f8dc 5000 	ldr.w	r5, [ip]
  411316:	0c2d      	lsrs	r5, r5, #16
  411318:	d01d      	beq.n	411356 <__multiply+0xea>
  41131a:	f8d9 3000 	ldr.w	r3, [r9]
  41131e:	4648      	mov	r0, r9
  411320:	461c      	mov	r4, r3
  411322:	4659      	mov	r1, fp
  411324:	2200      	movs	r2, #0
  411326:	880e      	ldrh	r6, [r1, #0]
  411328:	0c24      	lsrs	r4, r4, #16
  41132a:	fb05 4406 	mla	r4, r5, r6, r4
  41132e:	4422      	add	r2, r4
  411330:	b29b      	uxth	r3, r3
  411332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  411336:	f840 3b04 	str.w	r3, [r0], #4
  41133a:	f851 3b04 	ldr.w	r3, [r1], #4
  41133e:	6804      	ldr	r4, [r0, #0]
  411340:	0c1b      	lsrs	r3, r3, #16
  411342:	b2a6      	uxth	r6, r4
  411344:	fb05 6303 	mla	r3, r5, r3, r6
  411348:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  41134c:	458e      	cmp	lr, r1
  41134e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  411352:	d8e8      	bhi.n	411326 <__multiply+0xba>
  411354:	6003      	str	r3, [r0, #0]
  411356:	f10c 0c04 	add.w	ip, ip, #4
  41135a:	45e2      	cmp	sl, ip
  41135c:	f109 0904 	add.w	r9, r9, #4
  411360:	d8b7      	bhi.n	4112d2 <__multiply+0x66>
  411362:	f8dd a004 	ldr.w	sl, [sp, #4]
  411366:	f1b8 0f00 	cmp.w	r8, #0
  41136a:	dd0b      	ble.n	411384 <__multiply+0x118>
  41136c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  411370:	f1aa 0a04 	sub.w	sl, sl, #4
  411374:	b11b      	cbz	r3, 41137e <__multiply+0x112>
  411376:	e005      	b.n	411384 <__multiply+0x118>
  411378:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  41137c:	b913      	cbnz	r3, 411384 <__multiply+0x118>
  41137e:	f1b8 0801 	subs.w	r8, r8, #1
  411382:	d1f9      	bne.n	411378 <__multiply+0x10c>
  411384:	9800      	ldr	r0, [sp, #0]
  411386:	f8c0 8010 	str.w	r8, [r0, #16]
  41138a:	b003      	add	sp, #12
  41138c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411390 <__pow5mult>:
  411390:	f012 0303 	ands.w	r3, r2, #3
  411394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411398:	4614      	mov	r4, r2
  41139a:	4607      	mov	r7, r0
  41139c:	d12e      	bne.n	4113fc <__pow5mult+0x6c>
  41139e:	460d      	mov	r5, r1
  4113a0:	10a4      	asrs	r4, r4, #2
  4113a2:	d01c      	beq.n	4113de <__pow5mult+0x4e>
  4113a4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4113a6:	b396      	cbz	r6, 41140e <__pow5mult+0x7e>
  4113a8:	07e3      	lsls	r3, r4, #31
  4113aa:	f04f 0800 	mov.w	r8, #0
  4113ae:	d406      	bmi.n	4113be <__pow5mult+0x2e>
  4113b0:	1064      	asrs	r4, r4, #1
  4113b2:	d014      	beq.n	4113de <__pow5mult+0x4e>
  4113b4:	6830      	ldr	r0, [r6, #0]
  4113b6:	b1a8      	cbz	r0, 4113e4 <__pow5mult+0x54>
  4113b8:	4606      	mov	r6, r0
  4113ba:	07e3      	lsls	r3, r4, #31
  4113bc:	d5f8      	bpl.n	4113b0 <__pow5mult+0x20>
  4113be:	4632      	mov	r2, r6
  4113c0:	4629      	mov	r1, r5
  4113c2:	4638      	mov	r0, r7
  4113c4:	f7ff ff52 	bl	41126c <__multiply>
  4113c8:	b1b5      	cbz	r5, 4113f8 <__pow5mult+0x68>
  4113ca:	686a      	ldr	r2, [r5, #4]
  4113cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4113ce:	1064      	asrs	r4, r4, #1
  4113d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4113d4:	6029      	str	r1, [r5, #0]
  4113d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4113da:	4605      	mov	r5, r0
  4113dc:	d1ea      	bne.n	4113b4 <__pow5mult+0x24>
  4113de:	4628      	mov	r0, r5
  4113e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4113e4:	4632      	mov	r2, r6
  4113e6:	4631      	mov	r1, r6
  4113e8:	4638      	mov	r0, r7
  4113ea:	f7ff ff3f 	bl	41126c <__multiply>
  4113ee:	6030      	str	r0, [r6, #0]
  4113f0:	f8c0 8000 	str.w	r8, [r0]
  4113f4:	4606      	mov	r6, r0
  4113f6:	e7e0      	b.n	4113ba <__pow5mult+0x2a>
  4113f8:	4605      	mov	r5, r0
  4113fa:	e7d9      	b.n	4113b0 <__pow5mult+0x20>
  4113fc:	1e5a      	subs	r2, r3, #1
  4113fe:	4d0b      	ldr	r5, [pc, #44]	; (41142c <__pow5mult+0x9c>)
  411400:	2300      	movs	r3, #0
  411402:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  411406:	f7ff fe97 	bl	411138 <__multadd>
  41140a:	4605      	mov	r5, r0
  41140c:	e7c8      	b.n	4113a0 <__pow5mult+0x10>
  41140e:	2101      	movs	r1, #1
  411410:	4638      	mov	r0, r7
  411412:	f7ff fe61 	bl	4110d8 <_Balloc>
  411416:	f240 2171 	movw	r1, #625	; 0x271
  41141a:	2201      	movs	r2, #1
  41141c:	2300      	movs	r3, #0
  41141e:	6141      	str	r1, [r0, #20]
  411420:	6102      	str	r2, [r0, #16]
  411422:	4606      	mov	r6, r0
  411424:	64b8      	str	r0, [r7, #72]	; 0x48
  411426:	6003      	str	r3, [r0, #0]
  411428:	e7be      	b.n	4113a8 <__pow5mult+0x18>
  41142a:	bf00      	nop
  41142c:	00414318 	.word	0x00414318

00411430 <__lshift>:
  411430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411434:	4691      	mov	r9, r2
  411436:	690a      	ldr	r2, [r1, #16]
  411438:	688b      	ldr	r3, [r1, #8]
  41143a:	ea4f 1469 	mov.w	r4, r9, asr #5
  41143e:	eb04 0802 	add.w	r8, r4, r2
  411442:	f108 0501 	add.w	r5, r8, #1
  411446:	429d      	cmp	r5, r3
  411448:	460e      	mov	r6, r1
  41144a:	4607      	mov	r7, r0
  41144c:	6849      	ldr	r1, [r1, #4]
  41144e:	dd04      	ble.n	41145a <__lshift+0x2a>
  411450:	005b      	lsls	r3, r3, #1
  411452:	429d      	cmp	r5, r3
  411454:	f101 0101 	add.w	r1, r1, #1
  411458:	dcfa      	bgt.n	411450 <__lshift+0x20>
  41145a:	4638      	mov	r0, r7
  41145c:	f7ff fe3c 	bl	4110d8 <_Balloc>
  411460:	2c00      	cmp	r4, #0
  411462:	f100 0314 	add.w	r3, r0, #20
  411466:	dd06      	ble.n	411476 <__lshift+0x46>
  411468:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  41146c:	2100      	movs	r1, #0
  41146e:	f843 1b04 	str.w	r1, [r3], #4
  411472:	429a      	cmp	r2, r3
  411474:	d1fb      	bne.n	41146e <__lshift+0x3e>
  411476:	6934      	ldr	r4, [r6, #16]
  411478:	f106 0114 	add.w	r1, r6, #20
  41147c:	f019 091f 	ands.w	r9, r9, #31
  411480:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  411484:	d01d      	beq.n	4114c2 <__lshift+0x92>
  411486:	f1c9 0c20 	rsb	ip, r9, #32
  41148a:	2200      	movs	r2, #0
  41148c:	680c      	ldr	r4, [r1, #0]
  41148e:	fa04 f409 	lsl.w	r4, r4, r9
  411492:	4314      	orrs	r4, r2
  411494:	f843 4b04 	str.w	r4, [r3], #4
  411498:	f851 2b04 	ldr.w	r2, [r1], #4
  41149c:	458e      	cmp	lr, r1
  41149e:	fa22 f20c 	lsr.w	r2, r2, ip
  4114a2:	d8f3      	bhi.n	41148c <__lshift+0x5c>
  4114a4:	601a      	str	r2, [r3, #0]
  4114a6:	b10a      	cbz	r2, 4114ac <__lshift+0x7c>
  4114a8:	f108 0502 	add.w	r5, r8, #2
  4114ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4114ae:	6872      	ldr	r2, [r6, #4]
  4114b0:	3d01      	subs	r5, #1
  4114b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4114b6:	6105      	str	r5, [r0, #16]
  4114b8:	6031      	str	r1, [r6, #0]
  4114ba:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4114be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4114c2:	3b04      	subs	r3, #4
  4114c4:	f851 2b04 	ldr.w	r2, [r1], #4
  4114c8:	f843 2f04 	str.w	r2, [r3, #4]!
  4114cc:	458e      	cmp	lr, r1
  4114ce:	d8f9      	bhi.n	4114c4 <__lshift+0x94>
  4114d0:	e7ec      	b.n	4114ac <__lshift+0x7c>
  4114d2:	bf00      	nop

004114d4 <__mcmp>:
  4114d4:	b430      	push	{r4, r5}
  4114d6:	690b      	ldr	r3, [r1, #16]
  4114d8:	4605      	mov	r5, r0
  4114da:	6900      	ldr	r0, [r0, #16]
  4114dc:	1ac0      	subs	r0, r0, r3
  4114de:	d10f      	bne.n	411500 <__mcmp+0x2c>
  4114e0:	009b      	lsls	r3, r3, #2
  4114e2:	3514      	adds	r5, #20
  4114e4:	3114      	adds	r1, #20
  4114e6:	4419      	add	r1, r3
  4114e8:	442b      	add	r3, r5
  4114ea:	e001      	b.n	4114f0 <__mcmp+0x1c>
  4114ec:	429d      	cmp	r5, r3
  4114ee:	d207      	bcs.n	411500 <__mcmp+0x2c>
  4114f0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4114f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4114f8:	4294      	cmp	r4, r2
  4114fa:	d0f7      	beq.n	4114ec <__mcmp+0x18>
  4114fc:	d302      	bcc.n	411504 <__mcmp+0x30>
  4114fe:	2001      	movs	r0, #1
  411500:	bc30      	pop	{r4, r5}
  411502:	4770      	bx	lr
  411504:	f04f 30ff 	mov.w	r0, #4294967295
  411508:	e7fa      	b.n	411500 <__mcmp+0x2c>
  41150a:	bf00      	nop

0041150c <__mdiff>:
  41150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411510:	690f      	ldr	r7, [r1, #16]
  411512:	460e      	mov	r6, r1
  411514:	6911      	ldr	r1, [r2, #16]
  411516:	1a7f      	subs	r7, r7, r1
  411518:	2f00      	cmp	r7, #0
  41151a:	4690      	mov	r8, r2
  41151c:	d117      	bne.n	41154e <__mdiff+0x42>
  41151e:	0089      	lsls	r1, r1, #2
  411520:	f106 0514 	add.w	r5, r6, #20
  411524:	f102 0e14 	add.w	lr, r2, #20
  411528:	186b      	adds	r3, r5, r1
  41152a:	4471      	add	r1, lr
  41152c:	e001      	b.n	411532 <__mdiff+0x26>
  41152e:	429d      	cmp	r5, r3
  411530:	d25c      	bcs.n	4115ec <__mdiff+0xe0>
  411532:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  411536:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  41153a:	42a2      	cmp	r2, r4
  41153c:	d0f7      	beq.n	41152e <__mdiff+0x22>
  41153e:	d25e      	bcs.n	4115fe <__mdiff+0xf2>
  411540:	4633      	mov	r3, r6
  411542:	462c      	mov	r4, r5
  411544:	4646      	mov	r6, r8
  411546:	4675      	mov	r5, lr
  411548:	4698      	mov	r8, r3
  41154a:	2701      	movs	r7, #1
  41154c:	e005      	b.n	41155a <__mdiff+0x4e>
  41154e:	db58      	blt.n	411602 <__mdiff+0xf6>
  411550:	f106 0514 	add.w	r5, r6, #20
  411554:	f108 0414 	add.w	r4, r8, #20
  411558:	2700      	movs	r7, #0
  41155a:	6871      	ldr	r1, [r6, #4]
  41155c:	f7ff fdbc 	bl	4110d8 <_Balloc>
  411560:	f8d8 3010 	ldr.w	r3, [r8, #16]
  411564:	6936      	ldr	r6, [r6, #16]
  411566:	60c7      	str	r7, [r0, #12]
  411568:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  41156c:	46a6      	mov	lr, r4
  41156e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  411572:	f100 0414 	add.w	r4, r0, #20
  411576:	2300      	movs	r3, #0
  411578:	f85e 1b04 	ldr.w	r1, [lr], #4
  41157c:	f855 8b04 	ldr.w	r8, [r5], #4
  411580:	b28a      	uxth	r2, r1
  411582:	fa13 f388 	uxtah	r3, r3, r8
  411586:	0c09      	lsrs	r1, r1, #16
  411588:	1a9a      	subs	r2, r3, r2
  41158a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  41158e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  411592:	b292      	uxth	r2, r2
  411594:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  411598:	45f4      	cmp	ip, lr
  41159a:	f844 2b04 	str.w	r2, [r4], #4
  41159e:	ea4f 4323 	mov.w	r3, r3, asr #16
  4115a2:	d8e9      	bhi.n	411578 <__mdiff+0x6c>
  4115a4:	42af      	cmp	r7, r5
  4115a6:	d917      	bls.n	4115d8 <__mdiff+0xcc>
  4115a8:	46a4      	mov	ip, r4
  4115aa:	46ae      	mov	lr, r5
  4115ac:	f85e 2b04 	ldr.w	r2, [lr], #4
  4115b0:	fa13 f382 	uxtah	r3, r3, r2
  4115b4:	1419      	asrs	r1, r3, #16
  4115b6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4115ba:	b29b      	uxth	r3, r3
  4115bc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4115c0:	4577      	cmp	r7, lr
  4115c2:	f84c 2b04 	str.w	r2, [ip], #4
  4115c6:	ea4f 4321 	mov.w	r3, r1, asr #16
  4115ca:	d8ef      	bhi.n	4115ac <__mdiff+0xa0>
  4115cc:	43ed      	mvns	r5, r5
  4115ce:	442f      	add	r7, r5
  4115d0:	f027 0703 	bic.w	r7, r7, #3
  4115d4:	3704      	adds	r7, #4
  4115d6:	443c      	add	r4, r7
  4115d8:	3c04      	subs	r4, #4
  4115da:	b922      	cbnz	r2, 4115e6 <__mdiff+0xda>
  4115dc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4115e0:	3e01      	subs	r6, #1
  4115e2:	2b00      	cmp	r3, #0
  4115e4:	d0fa      	beq.n	4115dc <__mdiff+0xd0>
  4115e6:	6106      	str	r6, [r0, #16]
  4115e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4115ec:	2100      	movs	r1, #0
  4115ee:	f7ff fd73 	bl	4110d8 <_Balloc>
  4115f2:	2201      	movs	r2, #1
  4115f4:	2300      	movs	r3, #0
  4115f6:	6102      	str	r2, [r0, #16]
  4115f8:	6143      	str	r3, [r0, #20]
  4115fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4115fe:	4674      	mov	r4, lr
  411600:	e7ab      	b.n	41155a <__mdiff+0x4e>
  411602:	4633      	mov	r3, r6
  411604:	f106 0414 	add.w	r4, r6, #20
  411608:	f102 0514 	add.w	r5, r2, #20
  41160c:	4616      	mov	r6, r2
  41160e:	2701      	movs	r7, #1
  411610:	4698      	mov	r8, r3
  411612:	e7a2      	b.n	41155a <__mdiff+0x4e>

00411614 <__d2b>:
  411614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411618:	b082      	sub	sp, #8
  41161a:	2101      	movs	r1, #1
  41161c:	461c      	mov	r4, r3
  41161e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  411622:	4615      	mov	r5, r2
  411624:	9e08      	ldr	r6, [sp, #32]
  411626:	f7ff fd57 	bl	4110d8 <_Balloc>
  41162a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  41162e:	4680      	mov	r8, r0
  411630:	b10f      	cbz	r7, 411636 <__d2b+0x22>
  411632:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  411636:	9401      	str	r4, [sp, #4]
  411638:	b31d      	cbz	r5, 411682 <__d2b+0x6e>
  41163a:	a802      	add	r0, sp, #8
  41163c:	f840 5d08 	str.w	r5, [r0, #-8]!
  411640:	f7ff fdda 	bl	4111f8 <__lo0bits>
  411644:	2800      	cmp	r0, #0
  411646:	d134      	bne.n	4116b2 <__d2b+0x9e>
  411648:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41164c:	f8c8 2014 	str.w	r2, [r8, #20]
  411650:	2b00      	cmp	r3, #0
  411652:	bf0c      	ite	eq
  411654:	2101      	moveq	r1, #1
  411656:	2102      	movne	r1, #2
  411658:	f8c8 3018 	str.w	r3, [r8, #24]
  41165c:	f8c8 1010 	str.w	r1, [r8, #16]
  411660:	b9df      	cbnz	r7, 41169a <__d2b+0x86>
  411662:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  411666:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  41166a:	6030      	str	r0, [r6, #0]
  41166c:	6918      	ldr	r0, [r3, #16]
  41166e:	f7ff fda3 	bl	4111b8 <__hi0bits>
  411672:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411674:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  411678:	6018      	str	r0, [r3, #0]
  41167a:	4640      	mov	r0, r8
  41167c:	b002      	add	sp, #8
  41167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411682:	a801      	add	r0, sp, #4
  411684:	f7ff fdb8 	bl	4111f8 <__lo0bits>
  411688:	9b01      	ldr	r3, [sp, #4]
  41168a:	f8c8 3014 	str.w	r3, [r8, #20]
  41168e:	2101      	movs	r1, #1
  411690:	3020      	adds	r0, #32
  411692:	f8c8 1010 	str.w	r1, [r8, #16]
  411696:	2f00      	cmp	r7, #0
  411698:	d0e3      	beq.n	411662 <__d2b+0x4e>
  41169a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41169c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4116a0:	4407      	add	r7, r0
  4116a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4116a6:	6037      	str	r7, [r6, #0]
  4116a8:	6018      	str	r0, [r3, #0]
  4116aa:	4640      	mov	r0, r8
  4116ac:	b002      	add	sp, #8
  4116ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4116b2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4116b6:	f1c0 0220 	rsb	r2, r0, #32
  4116ba:	fa03 f202 	lsl.w	r2, r3, r2
  4116be:	430a      	orrs	r2, r1
  4116c0:	40c3      	lsrs	r3, r0
  4116c2:	9301      	str	r3, [sp, #4]
  4116c4:	f8c8 2014 	str.w	r2, [r8, #20]
  4116c8:	e7c2      	b.n	411650 <__d2b+0x3c>
  4116ca:	bf00      	nop

004116cc <_realloc_r>:
  4116cc:	2900      	cmp	r1, #0
  4116ce:	f000 8095 	beq.w	4117fc <_realloc_r+0x130>
  4116d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4116d6:	460d      	mov	r5, r1
  4116d8:	4616      	mov	r6, r2
  4116da:	b083      	sub	sp, #12
  4116dc:	4680      	mov	r8, r0
  4116de:	f106 070b 	add.w	r7, r6, #11
  4116e2:	f7ff fced 	bl	4110c0 <__malloc_lock>
  4116e6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4116ea:	2f16      	cmp	r7, #22
  4116ec:	f02e 0403 	bic.w	r4, lr, #3
  4116f0:	f1a5 0908 	sub.w	r9, r5, #8
  4116f4:	d83c      	bhi.n	411770 <_realloc_r+0xa4>
  4116f6:	2210      	movs	r2, #16
  4116f8:	4617      	mov	r7, r2
  4116fa:	42be      	cmp	r6, r7
  4116fc:	d83d      	bhi.n	41177a <_realloc_r+0xae>
  4116fe:	4294      	cmp	r4, r2
  411700:	da43      	bge.n	41178a <_realloc_r+0xbe>
  411702:	4bc4      	ldr	r3, [pc, #784]	; (411a14 <_realloc_r+0x348>)
  411704:	6899      	ldr	r1, [r3, #8]
  411706:	eb09 0004 	add.w	r0, r9, r4
  41170a:	4288      	cmp	r0, r1
  41170c:	f000 80b4 	beq.w	411878 <_realloc_r+0x1ac>
  411710:	6843      	ldr	r3, [r0, #4]
  411712:	f023 0101 	bic.w	r1, r3, #1
  411716:	4401      	add	r1, r0
  411718:	6849      	ldr	r1, [r1, #4]
  41171a:	07c9      	lsls	r1, r1, #31
  41171c:	d54c      	bpl.n	4117b8 <_realloc_r+0xec>
  41171e:	f01e 0f01 	tst.w	lr, #1
  411722:	f000 809b 	beq.w	41185c <_realloc_r+0x190>
  411726:	4631      	mov	r1, r6
  411728:	4640      	mov	r0, r8
  41172a:	f7ff f9ad 	bl	410a88 <_malloc_r>
  41172e:	4606      	mov	r6, r0
  411730:	2800      	cmp	r0, #0
  411732:	d03a      	beq.n	4117aa <_realloc_r+0xde>
  411734:	f855 3c04 	ldr.w	r3, [r5, #-4]
  411738:	f023 0301 	bic.w	r3, r3, #1
  41173c:	444b      	add	r3, r9
  41173e:	f1a0 0208 	sub.w	r2, r0, #8
  411742:	429a      	cmp	r2, r3
  411744:	f000 8121 	beq.w	41198a <_realloc_r+0x2be>
  411748:	1f22      	subs	r2, r4, #4
  41174a:	2a24      	cmp	r2, #36	; 0x24
  41174c:	f200 8107 	bhi.w	41195e <_realloc_r+0x292>
  411750:	2a13      	cmp	r2, #19
  411752:	f200 80db 	bhi.w	41190c <_realloc_r+0x240>
  411756:	4603      	mov	r3, r0
  411758:	462a      	mov	r2, r5
  41175a:	6811      	ldr	r1, [r2, #0]
  41175c:	6019      	str	r1, [r3, #0]
  41175e:	6851      	ldr	r1, [r2, #4]
  411760:	6059      	str	r1, [r3, #4]
  411762:	6892      	ldr	r2, [r2, #8]
  411764:	609a      	str	r2, [r3, #8]
  411766:	4629      	mov	r1, r5
  411768:	4640      	mov	r0, r8
  41176a:	f7fe fe61 	bl	410430 <_free_r>
  41176e:	e01c      	b.n	4117aa <_realloc_r+0xde>
  411770:	f027 0707 	bic.w	r7, r7, #7
  411774:	2f00      	cmp	r7, #0
  411776:	463a      	mov	r2, r7
  411778:	dabf      	bge.n	4116fa <_realloc_r+0x2e>
  41177a:	2600      	movs	r6, #0
  41177c:	230c      	movs	r3, #12
  41177e:	4630      	mov	r0, r6
  411780:	f8c8 3000 	str.w	r3, [r8]
  411784:	b003      	add	sp, #12
  411786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41178a:	462e      	mov	r6, r5
  41178c:	1be3      	subs	r3, r4, r7
  41178e:	2b0f      	cmp	r3, #15
  411790:	d81e      	bhi.n	4117d0 <_realloc_r+0x104>
  411792:	f8d9 3004 	ldr.w	r3, [r9, #4]
  411796:	f003 0301 	and.w	r3, r3, #1
  41179a:	4323      	orrs	r3, r4
  41179c:	444c      	add	r4, r9
  41179e:	f8c9 3004 	str.w	r3, [r9, #4]
  4117a2:	6863      	ldr	r3, [r4, #4]
  4117a4:	f043 0301 	orr.w	r3, r3, #1
  4117a8:	6063      	str	r3, [r4, #4]
  4117aa:	4640      	mov	r0, r8
  4117ac:	f7ff fc8e 	bl	4110cc <__malloc_unlock>
  4117b0:	4630      	mov	r0, r6
  4117b2:	b003      	add	sp, #12
  4117b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4117b8:	f023 0303 	bic.w	r3, r3, #3
  4117bc:	18e1      	adds	r1, r4, r3
  4117be:	4291      	cmp	r1, r2
  4117c0:	db1f      	blt.n	411802 <_realloc_r+0x136>
  4117c2:	68c3      	ldr	r3, [r0, #12]
  4117c4:	6882      	ldr	r2, [r0, #8]
  4117c6:	462e      	mov	r6, r5
  4117c8:	60d3      	str	r3, [r2, #12]
  4117ca:	460c      	mov	r4, r1
  4117cc:	609a      	str	r2, [r3, #8]
  4117ce:	e7dd      	b.n	41178c <_realloc_r+0xc0>
  4117d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4117d4:	eb09 0107 	add.w	r1, r9, r7
  4117d8:	f002 0201 	and.w	r2, r2, #1
  4117dc:	444c      	add	r4, r9
  4117de:	f043 0301 	orr.w	r3, r3, #1
  4117e2:	4317      	orrs	r7, r2
  4117e4:	f8c9 7004 	str.w	r7, [r9, #4]
  4117e8:	604b      	str	r3, [r1, #4]
  4117ea:	6863      	ldr	r3, [r4, #4]
  4117ec:	f043 0301 	orr.w	r3, r3, #1
  4117f0:	3108      	adds	r1, #8
  4117f2:	6063      	str	r3, [r4, #4]
  4117f4:	4640      	mov	r0, r8
  4117f6:	f7fe fe1b 	bl	410430 <_free_r>
  4117fa:	e7d6      	b.n	4117aa <_realloc_r+0xde>
  4117fc:	4611      	mov	r1, r2
  4117fe:	f7ff b943 	b.w	410a88 <_malloc_r>
  411802:	f01e 0f01 	tst.w	lr, #1
  411806:	d18e      	bne.n	411726 <_realloc_r+0x5a>
  411808:	f855 1c08 	ldr.w	r1, [r5, #-8]
  41180c:	eba9 0a01 	sub.w	sl, r9, r1
  411810:	f8da 1004 	ldr.w	r1, [sl, #4]
  411814:	f021 0103 	bic.w	r1, r1, #3
  411818:	440b      	add	r3, r1
  41181a:	4423      	add	r3, r4
  41181c:	4293      	cmp	r3, r2
  41181e:	db25      	blt.n	41186c <_realloc_r+0x1a0>
  411820:	68c2      	ldr	r2, [r0, #12]
  411822:	6881      	ldr	r1, [r0, #8]
  411824:	4656      	mov	r6, sl
  411826:	60ca      	str	r2, [r1, #12]
  411828:	6091      	str	r1, [r2, #8]
  41182a:	f8da 100c 	ldr.w	r1, [sl, #12]
  41182e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  411832:	1f22      	subs	r2, r4, #4
  411834:	2a24      	cmp	r2, #36	; 0x24
  411836:	60c1      	str	r1, [r0, #12]
  411838:	6088      	str	r0, [r1, #8]
  41183a:	f200 8094 	bhi.w	411966 <_realloc_r+0x29a>
  41183e:	2a13      	cmp	r2, #19
  411840:	d96f      	bls.n	411922 <_realloc_r+0x256>
  411842:	6829      	ldr	r1, [r5, #0]
  411844:	f8ca 1008 	str.w	r1, [sl, #8]
  411848:	6869      	ldr	r1, [r5, #4]
  41184a:	f8ca 100c 	str.w	r1, [sl, #12]
  41184e:	2a1b      	cmp	r2, #27
  411850:	f200 80a2 	bhi.w	411998 <_realloc_r+0x2cc>
  411854:	3508      	adds	r5, #8
  411856:	f10a 0210 	add.w	r2, sl, #16
  41185a:	e063      	b.n	411924 <_realloc_r+0x258>
  41185c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  411860:	eba9 0a03 	sub.w	sl, r9, r3
  411864:	f8da 1004 	ldr.w	r1, [sl, #4]
  411868:	f021 0103 	bic.w	r1, r1, #3
  41186c:	1863      	adds	r3, r4, r1
  41186e:	4293      	cmp	r3, r2
  411870:	f6ff af59 	blt.w	411726 <_realloc_r+0x5a>
  411874:	4656      	mov	r6, sl
  411876:	e7d8      	b.n	41182a <_realloc_r+0x15e>
  411878:	6841      	ldr	r1, [r0, #4]
  41187a:	f021 0b03 	bic.w	fp, r1, #3
  41187e:	44a3      	add	fp, r4
  411880:	f107 0010 	add.w	r0, r7, #16
  411884:	4583      	cmp	fp, r0
  411886:	da56      	bge.n	411936 <_realloc_r+0x26a>
  411888:	f01e 0f01 	tst.w	lr, #1
  41188c:	f47f af4b 	bne.w	411726 <_realloc_r+0x5a>
  411890:	f855 1c08 	ldr.w	r1, [r5, #-8]
  411894:	eba9 0a01 	sub.w	sl, r9, r1
  411898:	f8da 1004 	ldr.w	r1, [sl, #4]
  41189c:	f021 0103 	bic.w	r1, r1, #3
  4118a0:	448b      	add	fp, r1
  4118a2:	4558      	cmp	r0, fp
  4118a4:	dce2      	bgt.n	41186c <_realloc_r+0x1a0>
  4118a6:	4656      	mov	r6, sl
  4118a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4118ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4118b0:	1f22      	subs	r2, r4, #4
  4118b2:	2a24      	cmp	r2, #36	; 0x24
  4118b4:	60c1      	str	r1, [r0, #12]
  4118b6:	6088      	str	r0, [r1, #8]
  4118b8:	f200 808f 	bhi.w	4119da <_realloc_r+0x30e>
  4118bc:	2a13      	cmp	r2, #19
  4118be:	f240 808a 	bls.w	4119d6 <_realloc_r+0x30a>
  4118c2:	6829      	ldr	r1, [r5, #0]
  4118c4:	f8ca 1008 	str.w	r1, [sl, #8]
  4118c8:	6869      	ldr	r1, [r5, #4]
  4118ca:	f8ca 100c 	str.w	r1, [sl, #12]
  4118ce:	2a1b      	cmp	r2, #27
  4118d0:	f200 808a 	bhi.w	4119e8 <_realloc_r+0x31c>
  4118d4:	3508      	adds	r5, #8
  4118d6:	f10a 0210 	add.w	r2, sl, #16
  4118da:	6829      	ldr	r1, [r5, #0]
  4118dc:	6011      	str	r1, [r2, #0]
  4118de:	6869      	ldr	r1, [r5, #4]
  4118e0:	6051      	str	r1, [r2, #4]
  4118e2:	68a9      	ldr	r1, [r5, #8]
  4118e4:	6091      	str	r1, [r2, #8]
  4118e6:	eb0a 0107 	add.w	r1, sl, r7
  4118ea:	ebab 0207 	sub.w	r2, fp, r7
  4118ee:	f042 0201 	orr.w	r2, r2, #1
  4118f2:	6099      	str	r1, [r3, #8]
  4118f4:	604a      	str	r2, [r1, #4]
  4118f6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4118fa:	f003 0301 	and.w	r3, r3, #1
  4118fe:	431f      	orrs	r7, r3
  411900:	4640      	mov	r0, r8
  411902:	f8ca 7004 	str.w	r7, [sl, #4]
  411906:	f7ff fbe1 	bl	4110cc <__malloc_unlock>
  41190a:	e751      	b.n	4117b0 <_realloc_r+0xe4>
  41190c:	682b      	ldr	r3, [r5, #0]
  41190e:	6003      	str	r3, [r0, #0]
  411910:	686b      	ldr	r3, [r5, #4]
  411912:	6043      	str	r3, [r0, #4]
  411914:	2a1b      	cmp	r2, #27
  411916:	d82d      	bhi.n	411974 <_realloc_r+0x2a8>
  411918:	f100 0308 	add.w	r3, r0, #8
  41191c:	f105 0208 	add.w	r2, r5, #8
  411920:	e71b      	b.n	41175a <_realloc_r+0x8e>
  411922:	4632      	mov	r2, r6
  411924:	6829      	ldr	r1, [r5, #0]
  411926:	6011      	str	r1, [r2, #0]
  411928:	6869      	ldr	r1, [r5, #4]
  41192a:	6051      	str	r1, [r2, #4]
  41192c:	68a9      	ldr	r1, [r5, #8]
  41192e:	6091      	str	r1, [r2, #8]
  411930:	461c      	mov	r4, r3
  411932:	46d1      	mov	r9, sl
  411934:	e72a      	b.n	41178c <_realloc_r+0xc0>
  411936:	eb09 0107 	add.w	r1, r9, r7
  41193a:	ebab 0b07 	sub.w	fp, fp, r7
  41193e:	f04b 0201 	orr.w	r2, fp, #1
  411942:	6099      	str	r1, [r3, #8]
  411944:	604a      	str	r2, [r1, #4]
  411946:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41194a:	f003 0301 	and.w	r3, r3, #1
  41194e:	431f      	orrs	r7, r3
  411950:	4640      	mov	r0, r8
  411952:	f845 7c04 	str.w	r7, [r5, #-4]
  411956:	f7ff fbb9 	bl	4110cc <__malloc_unlock>
  41195a:	462e      	mov	r6, r5
  41195c:	e728      	b.n	4117b0 <_realloc_r+0xe4>
  41195e:	4629      	mov	r1, r5
  411960:	f7fa fdd4 	bl	40c50c <memmove>
  411964:	e6ff      	b.n	411766 <_realloc_r+0x9a>
  411966:	4629      	mov	r1, r5
  411968:	4630      	mov	r0, r6
  41196a:	461c      	mov	r4, r3
  41196c:	46d1      	mov	r9, sl
  41196e:	f7fa fdcd 	bl	40c50c <memmove>
  411972:	e70b      	b.n	41178c <_realloc_r+0xc0>
  411974:	68ab      	ldr	r3, [r5, #8]
  411976:	6083      	str	r3, [r0, #8]
  411978:	68eb      	ldr	r3, [r5, #12]
  41197a:	60c3      	str	r3, [r0, #12]
  41197c:	2a24      	cmp	r2, #36	; 0x24
  41197e:	d017      	beq.n	4119b0 <_realloc_r+0x2e4>
  411980:	f100 0310 	add.w	r3, r0, #16
  411984:	f105 0210 	add.w	r2, r5, #16
  411988:	e6e7      	b.n	41175a <_realloc_r+0x8e>
  41198a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41198e:	f023 0303 	bic.w	r3, r3, #3
  411992:	441c      	add	r4, r3
  411994:	462e      	mov	r6, r5
  411996:	e6f9      	b.n	41178c <_realloc_r+0xc0>
  411998:	68a9      	ldr	r1, [r5, #8]
  41199a:	f8ca 1010 	str.w	r1, [sl, #16]
  41199e:	68e9      	ldr	r1, [r5, #12]
  4119a0:	f8ca 1014 	str.w	r1, [sl, #20]
  4119a4:	2a24      	cmp	r2, #36	; 0x24
  4119a6:	d00c      	beq.n	4119c2 <_realloc_r+0x2f6>
  4119a8:	3510      	adds	r5, #16
  4119aa:	f10a 0218 	add.w	r2, sl, #24
  4119ae:	e7b9      	b.n	411924 <_realloc_r+0x258>
  4119b0:	692b      	ldr	r3, [r5, #16]
  4119b2:	6103      	str	r3, [r0, #16]
  4119b4:	696b      	ldr	r3, [r5, #20]
  4119b6:	6143      	str	r3, [r0, #20]
  4119b8:	f105 0218 	add.w	r2, r5, #24
  4119bc:	f100 0318 	add.w	r3, r0, #24
  4119c0:	e6cb      	b.n	41175a <_realloc_r+0x8e>
  4119c2:	692a      	ldr	r2, [r5, #16]
  4119c4:	f8ca 2018 	str.w	r2, [sl, #24]
  4119c8:	696a      	ldr	r2, [r5, #20]
  4119ca:	f8ca 201c 	str.w	r2, [sl, #28]
  4119ce:	3518      	adds	r5, #24
  4119d0:	f10a 0220 	add.w	r2, sl, #32
  4119d4:	e7a6      	b.n	411924 <_realloc_r+0x258>
  4119d6:	4632      	mov	r2, r6
  4119d8:	e77f      	b.n	4118da <_realloc_r+0x20e>
  4119da:	4629      	mov	r1, r5
  4119dc:	4630      	mov	r0, r6
  4119de:	9301      	str	r3, [sp, #4]
  4119e0:	f7fa fd94 	bl	40c50c <memmove>
  4119e4:	9b01      	ldr	r3, [sp, #4]
  4119e6:	e77e      	b.n	4118e6 <_realloc_r+0x21a>
  4119e8:	68a9      	ldr	r1, [r5, #8]
  4119ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4119ee:	68e9      	ldr	r1, [r5, #12]
  4119f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4119f4:	2a24      	cmp	r2, #36	; 0x24
  4119f6:	d003      	beq.n	411a00 <_realloc_r+0x334>
  4119f8:	3510      	adds	r5, #16
  4119fa:	f10a 0218 	add.w	r2, sl, #24
  4119fe:	e76c      	b.n	4118da <_realloc_r+0x20e>
  411a00:	692a      	ldr	r2, [r5, #16]
  411a02:	f8ca 2018 	str.w	r2, [sl, #24]
  411a06:	696a      	ldr	r2, [r5, #20]
  411a08:	f8ca 201c 	str.w	r2, [sl, #28]
  411a0c:	3518      	adds	r5, #24
  411a0e:	f10a 0220 	add.w	r2, sl, #32
  411a12:	e762      	b.n	4118da <_realloc_r+0x20e>
  411a14:	20000698 	.word	0x20000698

00411a18 <_sbrk_r>:
  411a18:	b538      	push	{r3, r4, r5, lr}
  411a1a:	4c07      	ldr	r4, [pc, #28]	; (411a38 <_sbrk_r+0x20>)
  411a1c:	2300      	movs	r3, #0
  411a1e:	4605      	mov	r5, r0
  411a20:	4608      	mov	r0, r1
  411a22:	6023      	str	r3, [r4, #0]
  411a24:	f7f2 fac8 	bl	403fb8 <_sbrk>
  411a28:	1c43      	adds	r3, r0, #1
  411a2a:	d000      	beq.n	411a2e <_sbrk_r+0x16>
  411a2c:	bd38      	pop	{r3, r4, r5, pc}
  411a2e:	6823      	ldr	r3, [r4, #0]
  411a30:	2b00      	cmp	r3, #0
  411a32:	d0fb      	beq.n	411a2c <_sbrk_r+0x14>
  411a34:	602b      	str	r3, [r5, #0]
  411a36:	bd38      	pop	{r3, r4, r5, pc}
  411a38:	200134c8 	.word	0x200134c8

00411a3c <__sread>:
  411a3c:	b510      	push	{r4, lr}
  411a3e:	460c      	mov	r4, r1
  411a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411a44:	f000 faa4 	bl	411f90 <_read_r>
  411a48:	2800      	cmp	r0, #0
  411a4a:	db03      	blt.n	411a54 <__sread+0x18>
  411a4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  411a4e:	4403      	add	r3, r0
  411a50:	6523      	str	r3, [r4, #80]	; 0x50
  411a52:	bd10      	pop	{r4, pc}
  411a54:	89a3      	ldrh	r3, [r4, #12]
  411a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  411a5a:	81a3      	strh	r3, [r4, #12]
  411a5c:	bd10      	pop	{r4, pc}
  411a5e:	bf00      	nop

00411a60 <__swrite>:
  411a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411a64:	4616      	mov	r6, r2
  411a66:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  411a6a:	461f      	mov	r7, r3
  411a6c:	05d3      	lsls	r3, r2, #23
  411a6e:	460c      	mov	r4, r1
  411a70:	4605      	mov	r5, r0
  411a72:	d507      	bpl.n	411a84 <__swrite+0x24>
  411a74:	2200      	movs	r2, #0
  411a76:	2302      	movs	r3, #2
  411a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411a7c:	f000 fa72 	bl	411f64 <_lseek_r>
  411a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  411a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  411a88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  411a8c:	81a2      	strh	r2, [r4, #12]
  411a8e:	463b      	mov	r3, r7
  411a90:	4632      	mov	r2, r6
  411a92:	4628      	mov	r0, r5
  411a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  411a98:	f000 b922 	b.w	411ce0 <_write_r>

00411a9c <__sseek>:
  411a9c:	b510      	push	{r4, lr}
  411a9e:	460c      	mov	r4, r1
  411aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411aa4:	f000 fa5e 	bl	411f64 <_lseek_r>
  411aa8:	89a3      	ldrh	r3, [r4, #12]
  411aaa:	1c42      	adds	r2, r0, #1
  411aac:	bf0e      	itee	eq
  411aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  411ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  411ab6:	6520      	strne	r0, [r4, #80]	; 0x50
  411ab8:	81a3      	strh	r3, [r4, #12]
  411aba:	bd10      	pop	{r4, pc}

00411abc <__sclose>:
  411abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411ac0:	f000 b9b6 	b.w	411e30 <_close_r>

00411ac4 <__ssprint_r>:
  411ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ac8:	6893      	ldr	r3, [r2, #8]
  411aca:	b083      	sub	sp, #12
  411acc:	4690      	mov	r8, r2
  411ace:	2b00      	cmp	r3, #0
  411ad0:	d070      	beq.n	411bb4 <__ssprint_r+0xf0>
  411ad2:	4682      	mov	sl, r0
  411ad4:	460c      	mov	r4, r1
  411ad6:	6817      	ldr	r7, [r2, #0]
  411ad8:	688d      	ldr	r5, [r1, #8]
  411ada:	6808      	ldr	r0, [r1, #0]
  411adc:	e042      	b.n	411b64 <__ssprint_r+0xa0>
  411ade:	89a3      	ldrh	r3, [r4, #12]
  411ae0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  411ae4:	d02e      	beq.n	411b44 <__ssprint_r+0x80>
  411ae6:	6965      	ldr	r5, [r4, #20]
  411ae8:	6921      	ldr	r1, [r4, #16]
  411aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  411aee:	eba0 0b01 	sub.w	fp, r0, r1
  411af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  411af6:	f10b 0001 	add.w	r0, fp, #1
  411afa:	106d      	asrs	r5, r5, #1
  411afc:	4430      	add	r0, r6
  411afe:	42a8      	cmp	r0, r5
  411b00:	462a      	mov	r2, r5
  411b02:	bf84      	itt	hi
  411b04:	4605      	movhi	r5, r0
  411b06:	462a      	movhi	r2, r5
  411b08:	055b      	lsls	r3, r3, #21
  411b0a:	d538      	bpl.n	411b7e <__ssprint_r+0xba>
  411b0c:	4611      	mov	r1, r2
  411b0e:	4650      	mov	r0, sl
  411b10:	f7fe ffba 	bl	410a88 <_malloc_r>
  411b14:	2800      	cmp	r0, #0
  411b16:	d03c      	beq.n	411b92 <__ssprint_r+0xce>
  411b18:	465a      	mov	r2, fp
  411b1a:	6921      	ldr	r1, [r4, #16]
  411b1c:	9001      	str	r0, [sp, #4]
  411b1e:	f7fa fc5b 	bl	40c3d8 <memcpy>
  411b22:	89a2      	ldrh	r2, [r4, #12]
  411b24:	9b01      	ldr	r3, [sp, #4]
  411b26:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  411b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  411b2e:	81a2      	strh	r2, [r4, #12]
  411b30:	eba5 020b 	sub.w	r2, r5, fp
  411b34:	eb03 000b 	add.w	r0, r3, fp
  411b38:	6165      	str	r5, [r4, #20]
  411b3a:	6123      	str	r3, [r4, #16]
  411b3c:	6020      	str	r0, [r4, #0]
  411b3e:	60a2      	str	r2, [r4, #8]
  411b40:	4635      	mov	r5, r6
  411b42:	46b3      	mov	fp, r6
  411b44:	465a      	mov	r2, fp
  411b46:	4649      	mov	r1, r9
  411b48:	f7fa fce0 	bl	40c50c <memmove>
  411b4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  411b50:	68a2      	ldr	r2, [r4, #8]
  411b52:	6820      	ldr	r0, [r4, #0]
  411b54:	1b55      	subs	r5, r2, r5
  411b56:	4458      	add	r0, fp
  411b58:	1b9e      	subs	r6, r3, r6
  411b5a:	60a5      	str	r5, [r4, #8]
  411b5c:	6020      	str	r0, [r4, #0]
  411b5e:	f8c8 6008 	str.w	r6, [r8, #8]
  411b62:	b33e      	cbz	r6, 411bb4 <__ssprint_r+0xf0>
  411b64:	687e      	ldr	r6, [r7, #4]
  411b66:	463b      	mov	r3, r7
  411b68:	3708      	adds	r7, #8
  411b6a:	2e00      	cmp	r6, #0
  411b6c:	d0fa      	beq.n	411b64 <__ssprint_r+0xa0>
  411b6e:	42ae      	cmp	r6, r5
  411b70:	f8d3 9000 	ldr.w	r9, [r3]
  411b74:	46ab      	mov	fp, r5
  411b76:	d2b2      	bcs.n	411ade <__ssprint_r+0x1a>
  411b78:	4635      	mov	r5, r6
  411b7a:	46b3      	mov	fp, r6
  411b7c:	e7e2      	b.n	411b44 <__ssprint_r+0x80>
  411b7e:	4650      	mov	r0, sl
  411b80:	f7ff fda4 	bl	4116cc <_realloc_r>
  411b84:	4603      	mov	r3, r0
  411b86:	2800      	cmp	r0, #0
  411b88:	d1d2      	bne.n	411b30 <__ssprint_r+0x6c>
  411b8a:	6921      	ldr	r1, [r4, #16]
  411b8c:	4650      	mov	r0, sl
  411b8e:	f7fe fc4f 	bl	410430 <_free_r>
  411b92:	230c      	movs	r3, #12
  411b94:	f8ca 3000 	str.w	r3, [sl]
  411b98:	89a3      	ldrh	r3, [r4, #12]
  411b9a:	2200      	movs	r2, #0
  411b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411ba0:	f04f 30ff 	mov.w	r0, #4294967295
  411ba4:	81a3      	strh	r3, [r4, #12]
  411ba6:	f8c8 2008 	str.w	r2, [r8, #8]
  411baa:	f8c8 2004 	str.w	r2, [r8, #4]
  411bae:	b003      	add	sp, #12
  411bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411bb4:	2000      	movs	r0, #0
  411bb6:	f8c8 0004 	str.w	r0, [r8, #4]
  411bba:	b003      	add	sp, #12
  411bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411bc0 <__swbuf_r>:
  411bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411bc2:	460d      	mov	r5, r1
  411bc4:	4614      	mov	r4, r2
  411bc6:	4606      	mov	r6, r0
  411bc8:	b110      	cbz	r0, 411bd0 <__swbuf_r+0x10>
  411bca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411bcc:	2b00      	cmp	r3, #0
  411bce:	d04b      	beq.n	411c68 <__swbuf_r+0xa8>
  411bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  411bd4:	69a3      	ldr	r3, [r4, #24]
  411bd6:	60a3      	str	r3, [r4, #8]
  411bd8:	b291      	uxth	r1, r2
  411bda:	0708      	lsls	r0, r1, #28
  411bdc:	d539      	bpl.n	411c52 <__swbuf_r+0x92>
  411bde:	6923      	ldr	r3, [r4, #16]
  411be0:	2b00      	cmp	r3, #0
  411be2:	d036      	beq.n	411c52 <__swbuf_r+0x92>
  411be4:	b2ed      	uxtb	r5, r5
  411be6:	0489      	lsls	r1, r1, #18
  411be8:	462f      	mov	r7, r5
  411bea:	d515      	bpl.n	411c18 <__swbuf_r+0x58>
  411bec:	6822      	ldr	r2, [r4, #0]
  411bee:	6961      	ldr	r1, [r4, #20]
  411bf0:	1ad3      	subs	r3, r2, r3
  411bf2:	428b      	cmp	r3, r1
  411bf4:	da1c      	bge.n	411c30 <__swbuf_r+0x70>
  411bf6:	3301      	adds	r3, #1
  411bf8:	68a1      	ldr	r1, [r4, #8]
  411bfa:	1c50      	adds	r0, r2, #1
  411bfc:	3901      	subs	r1, #1
  411bfe:	60a1      	str	r1, [r4, #8]
  411c00:	6020      	str	r0, [r4, #0]
  411c02:	7015      	strb	r5, [r2, #0]
  411c04:	6962      	ldr	r2, [r4, #20]
  411c06:	429a      	cmp	r2, r3
  411c08:	d01a      	beq.n	411c40 <__swbuf_r+0x80>
  411c0a:	89a3      	ldrh	r3, [r4, #12]
  411c0c:	07db      	lsls	r3, r3, #31
  411c0e:	d501      	bpl.n	411c14 <__swbuf_r+0x54>
  411c10:	2d0a      	cmp	r5, #10
  411c12:	d015      	beq.n	411c40 <__swbuf_r+0x80>
  411c14:	4638      	mov	r0, r7
  411c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411c18:	6e61      	ldr	r1, [r4, #100]	; 0x64
  411c1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  411c1e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  411c22:	81a2      	strh	r2, [r4, #12]
  411c24:	6822      	ldr	r2, [r4, #0]
  411c26:	6661      	str	r1, [r4, #100]	; 0x64
  411c28:	6961      	ldr	r1, [r4, #20]
  411c2a:	1ad3      	subs	r3, r2, r3
  411c2c:	428b      	cmp	r3, r1
  411c2e:	dbe2      	blt.n	411bf6 <__swbuf_r+0x36>
  411c30:	4621      	mov	r1, r4
  411c32:	4630      	mov	r0, r6
  411c34:	f7fe fa7e 	bl	410134 <_fflush_r>
  411c38:	b940      	cbnz	r0, 411c4c <__swbuf_r+0x8c>
  411c3a:	6822      	ldr	r2, [r4, #0]
  411c3c:	2301      	movs	r3, #1
  411c3e:	e7db      	b.n	411bf8 <__swbuf_r+0x38>
  411c40:	4621      	mov	r1, r4
  411c42:	4630      	mov	r0, r6
  411c44:	f7fe fa76 	bl	410134 <_fflush_r>
  411c48:	2800      	cmp	r0, #0
  411c4a:	d0e3      	beq.n	411c14 <__swbuf_r+0x54>
  411c4c:	f04f 37ff 	mov.w	r7, #4294967295
  411c50:	e7e0      	b.n	411c14 <__swbuf_r+0x54>
  411c52:	4621      	mov	r1, r4
  411c54:	4630      	mov	r0, r6
  411c56:	f7fd f999 	bl	40ef8c <__swsetup_r>
  411c5a:	2800      	cmp	r0, #0
  411c5c:	d1f6      	bne.n	411c4c <__swbuf_r+0x8c>
  411c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  411c62:	6923      	ldr	r3, [r4, #16]
  411c64:	b291      	uxth	r1, r2
  411c66:	e7bd      	b.n	411be4 <__swbuf_r+0x24>
  411c68:	f7fe fabc 	bl	4101e4 <__sinit>
  411c6c:	e7b0      	b.n	411bd0 <__swbuf_r+0x10>
  411c6e:	bf00      	nop

00411c70 <_wcrtomb_r>:
  411c70:	b5f0      	push	{r4, r5, r6, r7, lr}
  411c72:	4606      	mov	r6, r0
  411c74:	b085      	sub	sp, #20
  411c76:	461f      	mov	r7, r3
  411c78:	b189      	cbz	r1, 411c9e <_wcrtomb_r+0x2e>
  411c7a:	4c10      	ldr	r4, [pc, #64]	; (411cbc <_wcrtomb_r+0x4c>)
  411c7c:	4d10      	ldr	r5, [pc, #64]	; (411cc0 <_wcrtomb_r+0x50>)
  411c7e:	6824      	ldr	r4, [r4, #0]
  411c80:	6b64      	ldr	r4, [r4, #52]	; 0x34
  411c82:	2c00      	cmp	r4, #0
  411c84:	bf08      	it	eq
  411c86:	462c      	moveq	r4, r5
  411c88:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  411c8c:	47a0      	blx	r4
  411c8e:	1c43      	adds	r3, r0, #1
  411c90:	d103      	bne.n	411c9a <_wcrtomb_r+0x2a>
  411c92:	2200      	movs	r2, #0
  411c94:	238a      	movs	r3, #138	; 0x8a
  411c96:	603a      	str	r2, [r7, #0]
  411c98:	6033      	str	r3, [r6, #0]
  411c9a:	b005      	add	sp, #20
  411c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411c9e:	460c      	mov	r4, r1
  411ca0:	4906      	ldr	r1, [pc, #24]	; (411cbc <_wcrtomb_r+0x4c>)
  411ca2:	4a07      	ldr	r2, [pc, #28]	; (411cc0 <_wcrtomb_r+0x50>)
  411ca4:	6809      	ldr	r1, [r1, #0]
  411ca6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  411ca8:	2900      	cmp	r1, #0
  411caa:	bf08      	it	eq
  411cac:	4611      	moveq	r1, r2
  411cae:	4622      	mov	r2, r4
  411cb0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  411cb4:	a901      	add	r1, sp, #4
  411cb6:	47a0      	blx	r4
  411cb8:	e7e9      	b.n	411c8e <_wcrtomb_r+0x1e>
  411cba:	bf00      	nop
  411cbc:	200000fc 	.word	0x200000fc
  411cc0:	2000052c 	.word	0x2000052c

00411cc4 <__ascii_wctomb>:
  411cc4:	b121      	cbz	r1, 411cd0 <__ascii_wctomb+0xc>
  411cc6:	2aff      	cmp	r2, #255	; 0xff
  411cc8:	d804      	bhi.n	411cd4 <__ascii_wctomb+0x10>
  411cca:	700a      	strb	r2, [r1, #0]
  411ccc:	2001      	movs	r0, #1
  411cce:	4770      	bx	lr
  411cd0:	4608      	mov	r0, r1
  411cd2:	4770      	bx	lr
  411cd4:	238a      	movs	r3, #138	; 0x8a
  411cd6:	6003      	str	r3, [r0, #0]
  411cd8:	f04f 30ff 	mov.w	r0, #4294967295
  411cdc:	4770      	bx	lr
  411cde:	bf00      	nop

00411ce0 <_write_r>:
  411ce0:	b570      	push	{r4, r5, r6, lr}
  411ce2:	460d      	mov	r5, r1
  411ce4:	4c08      	ldr	r4, [pc, #32]	; (411d08 <_write_r+0x28>)
  411ce6:	4611      	mov	r1, r2
  411ce8:	4606      	mov	r6, r0
  411cea:	461a      	mov	r2, r3
  411cec:	4628      	mov	r0, r5
  411cee:	2300      	movs	r3, #0
  411cf0:	6023      	str	r3, [r4, #0]
  411cf2:	f7ef fc63 	bl	4015bc <_write>
  411cf6:	1c43      	adds	r3, r0, #1
  411cf8:	d000      	beq.n	411cfc <_write_r+0x1c>
  411cfa:	bd70      	pop	{r4, r5, r6, pc}
  411cfc:	6823      	ldr	r3, [r4, #0]
  411cfe:	2b00      	cmp	r3, #0
  411d00:	d0fb      	beq.n	411cfa <_write_r+0x1a>
  411d02:	6033      	str	r3, [r6, #0]
  411d04:	bd70      	pop	{r4, r5, r6, pc}
  411d06:	bf00      	nop
  411d08:	200134c8 	.word	0x200134c8

00411d0c <__register_exitproc>:
  411d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411d10:	4d2c      	ldr	r5, [pc, #176]	; (411dc4 <__register_exitproc+0xb8>)
  411d12:	4606      	mov	r6, r0
  411d14:	6828      	ldr	r0, [r5, #0]
  411d16:	4698      	mov	r8, r3
  411d18:	460f      	mov	r7, r1
  411d1a:	4691      	mov	r9, r2
  411d1c:	f7fe fe30 	bl	410980 <__retarget_lock_acquire_recursive>
  411d20:	4b29      	ldr	r3, [pc, #164]	; (411dc8 <__register_exitproc+0xbc>)
  411d22:	681c      	ldr	r4, [r3, #0]
  411d24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  411d28:	2b00      	cmp	r3, #0
  411d2a:	d03e      	beq.n	411daa <__register_exitproc+0x9e>
  411d2c:	685a      	ldr	r2, [r3, #4]
  411d2e:	2a1f      	cmp	r2, #31
  411d30:	dc1c      	bgt.n	411d6c <__register_exitproc+0x60>
  411d32:	f102 0e01 	add.w	lr, r2, #1
  411d36:	b176      	cbz	r6, 411d56 <__register_exitproc+0x4a>
  411d38:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  411d3c:	2401      	movs	r4, #1
  411d3e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  411d42:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  411d46:	4094      	lsls	r4, r2
  411d48:	4320      	orrs	r0, r4
  411d4a:	2e02      	cmp	r6, #2
  411d4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  411d50:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  411d54:	d023      	beq.n	411d9e <__register_exitproc+0x92>
  411d56:	3202      	adds	r2, #2
  411d58:	f8c3 e004 	str.w	lr, [r3, #4]
  411d5c:	6828      	ldr	r0, [r5, #0]
  411d5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  411d62:	f7fe fe0f 	bl	410984 <__retarget_lock_release_recursive>
  411d66:	2000      	movs	r0, #0
  411d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  411d6c:	4b17      	ldr	r3, [pc, #92]	; (411dcc <__register_exitproc+0xc0>)
  411d6e:	b30b      	cbz	r3, 411db4 <__register_exitproc+0xa8>
  411d70:	f44f 70c8 	mov.w	r0, #400	; 0x190
  411d74:	f7fe fe80 	bl	410a78 <malloc>
  411d78:	4603      	mov	r3, r0
  411d7a:	b1d8      	cbz	r0, 411db4 <__register_exitproc+0xa8>
  411d7c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  411d80:	6002      	str	r2, [r0, #0]
  411d82:	2100      	movs	r1, #0
  411d84:	6041      	str	r1, [r0, #4]
  411d86:	460a      	mov	r2, r1
  411d88:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  411d8c:	f04f 0e01 	mov.w	lr, #1
  411d90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  411d94:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  411d98:	2e00      	cmp	r6, #0
  411d9a:	d0dc      	beq.n	411d56 <__register_exitproc+0x4a>
  411d9c:	e7cc      	b.n	411d38 <__register_exitproc+0x2c>
  411d9e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  411da2:	430c      	orrs	r4, r1
  411da4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  411da8:	e7d5      	b.n	411d56 <__register_exitproc+0x4a>
  411daa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  411dae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  411db2:	e7bb      	b.n	411d2c <__register_exitproc+0x20>
  411db4:	6828      	ldr	r0, [r5, #0]
  411db6:	f7fe fde5 	bl	410984 <__retarget_lock_release_recursive>
  411dba:	f04f 30ff 	mov.w	r0, #4294967295
  411dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  411dc2:	bf00      	nop
  411dc4:	20000528 	.word	0x20000528
  411dc8:	00414180 	.word	0x00414180
  411dcc:	00410a79 	.word	0x00410a79

00411dd0 <_calloc_r>:
  411dd0:	b510      	push	{r4, lr}
  411dd2:	fb02 f101 	mul.w	r1, r2, r1
  411dd6:	f7fe fe57 	bl	410a88 <_malloc_r>
  411dda:	4604      	mov	r4, r0
  411ddc:	b1d8      	cbz	r0, 411e16 <_calloc_r+0x46>
  411dde:	f850 2c04 	ldr.w	r2, [r0, #-4]
  411de2:	f022 0203 	bic.w	r2, r2, #3
  411de6:	3a04      	subs	r2, #4
  411de8:	2a24      	cmp	r2, #36	; 0x24
  411dea:	d818      	bhi.n	411e1e <_calloc_r+0x4e>
  411dec:	2a13      	cmp	r2, #19
  411dee:	d914      	bls.n	411e1a <_calloc_r+0x4a>
  411df0:	2300      	movs	r3, #0
  411df2:	2a1b      	cmp	r2, #27
  411df4:	6003      	str	r3, [r0, #0]
  411df6:	6043      	str	r3, [r0, #4]
  411df8:	d916      	bls.n	411e28 <_calloc_r+0x58>
  411dfa:	2a24      	cmp	r2, #36	; 0x24
  411dfc:	6083      	str	r3, [r0, #8]
  411dfe:	60c3      	str	r3, [r0, #12]
  411e00:	bf11      	iteee	ne
  411e02:	f100 0210 	addne.w	r2, r0, #16
  411e06:	6103      	streq	r3, [r0, #16]
  411e08:	6143      	streq	r3, [r0, #20]
  411e0a:	f100 0218 	addeq.w	r2, r0, #24
  411e0e:	2300      	movs	r3, #0
  411e10:	6013      	str	r3, [r2, #0]
  411e12:	6053      	str	r3, [r2, #4]
  411e14:	6093      	str	r3, [r2, #8]
  411e16:	4620      	mov	r0, r4
  411e18:	bd10      	pop	{r4, pc}
  411e1a:	4602      	mov	r2, r0
  411e1c:	e7f7      	b.n	411e0e <_calloc_r+0x3e>
  411e1e:	2100      	movs	r1, #0
  411e20:	f7fa fbd8 	bl	40c5d4 <memset>
  411e24:	4620      	mov	r0, r4
  411e26:	bd10      	pop	{r4, pc}
  411e28:	f100 0208 	add.w	r2, r0, #8
  411e2c:	e7ef      	b.n	411e0e <_calloc_r+0x3e>
  411e2e:	bf00      	nop

00411e30 <_close_r>:
  411e30:	b538      	push	{r3, r4, r5, lr}
  411e32:	4c07      	ldr	r4, [pc, #28]	; (411e50 <_close_r+0x20>)
  411e34:	2300      	movs	r3, #0
  411e36:	4605      	mov	r5, r0
  411e38:	4608      	mov	r0, r1
  411e3a:	6023      	str	r3, [r4, #0]
  411e3c:	f7f2 f8d8 	bl	403ff0 <_close>
  411e40:	1c43      	adds	r3, r0, #1
  411e42:	d000      	beq.n	411e46 <_close_r+0x16>
  411e44:	bd38      	pop	{r3, r4, r5, pc}
  411e46:	6823      	ldr	r3, [r4, #0]
  411e48:	2b00      	cmp	r3, #0
  411e4a:	d0fb      	beq.n	411e44 <_close_r+0x14>
  411e4c:	602b      	str	r3, [r5, #0]
  411e4e:	bd38      	pop	{r3, r4, r5, pc}
  411e50:	200134c8 	.word	0x200134c8

00411e54 <_fclose_r>:
  411e54:	b570      	push	{r4, r5, r6, lr}
  411e56:	b159      	cbz	r1, 411e70 <_fclose_r+0x1c>
  411e58:	4605      	mov	r5, r0
  411e5a:	460c      	mov	r4, r1
  411e5c:	b110      	cbz	r0, 411e64 <_fclose_r+0x10>
  411e5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411e60:	2b00      	cmp	r3, #0
  411e62:	d03c      	beq.n	411ede <_fclose_r+0x8a>
  411e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
  411e66:	07d8      	lsls	r0, r3, #31
  411e68:	d505      	bpl.n	411e76 <_fclose_r+0x22>
  411e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  411e6e:	b92b      	cbnz	r3, 411e7c <_fclose_r+0x28>
  411e70:	2600      	movs	r6, #0
  411e72:	4630      	mov	r0, r6
  411e74:	bd70      	pop	{r4, r5, r6, pc}
  411e76:	89a3      	ldrh	r3, [r4, #12]
  411e78:	0599      	lsls	r1, r3, #22
  411e7a:	d53c      	bpl.n	411ef6 <_fclose_r+0xa2>
  411e7c:	4621      	mov	r1, r4
  411e7e:	4628      	mov	r0, r5
  411e80:	f7fe f8b8 	bl	40fff4 <__sflush_r>
  411e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  411e86:	4606      	mov	r6, r0
  411e88:	b133      	cbz	r3, 411e98 <_fclose_r+0x44>
  411e8a:	69e1      	ldr	r1, [r4, #28]
  411e8c:	4628      	mov	r0, r5
  411e8e:	4798      	blx	r3
  411e90:	2800      	cmp	r0, #0
  411e92:	bfb8      	it	lt
  411e94:	f04f 36ff 	movlt.w	r6, #4294967295
  411e98:	89a3      	ldrh	r3, [r4, #12]
  411e9a:	061a      	lsls	r2, r3, #24
  411e9c:	d422      	bmi.n	411ee4 <_fclose_r+0x90>
  411e9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  411ea0:	b141      	cbz	r1, 411eb4 <_fclose_r+0x60>
  411ea2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  411ea6:	4299      	cmp	r1, r3
  411ea8:	d002      	beq.n	411eb0 <_fclose_r+0x5c>
  411eaa:	4628      	mov	r0, r5
  411eac:	f7fe fac0 	bl	410430 <_free_r>
  411eb0:	2300      	movs	r3, #0
  411eb2:	6323      	str	r3, [r4, #48]	; 0x30
  411eb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  411eb6:	b121      	cbz	r1, 411ec2 <_fclose_r+0x6e>
  411eb8:	4628      	mov	r0, r5
  411eba:	f7fe fab9 	bl	410430 <_free_r>
  411ebe:	2300      	movs	r3, #0
  411ec0:	6463      	str	r3, [r4, #68]	; 0x44
  411ec2:	f7fe f9bb 	bl	41023c <__sfp_lock_acquire>
  411ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  411ec8:	2200      	movs	r2, #0
  411eca:	07db      	lsls	r3, r3, #31
  411ecc:	81a2      	strh	r2, [r4, #12]
  411ece:	d50e      	bpl.n	411eee <_fclose_r+0x9a>
  411ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  411ed2:	f7fe fd53 	bl	41097c <__retarget_lock_close_recursive>
  411ed6:	f7fe f9b7 	bl	410248 <__sfp_lock_release>
  411eda:	4630      	mov	r0, r6
  411edc:	bd70      	pop	{r4, r5, r6, pc}
  411ede:	f7fe f981 	bl	4101e4 <__sinit>
  411ee2:	e7bf      	b.n	411e64 <_fclose_r+0x10>
  411ee4:	6921      	ldr	r1, [r4, #16]
  411ee6:	4628      	mov	r0, r5
  411ee8:	f7fe faa2 	bl	410430 <_free_r>
  411eec:	e7d7      	b.n	411e9e <_fclose_r+0x4a>
  411eee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  411ef0:	f7fe fd48 	bl	410984 <__retarget_lock_release_recursive>
  411ef4:	e7ec      	b.n	411ed0 <_fclose_r+0x7c>
  411ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  411ef8:	f7fe fd42 	bl	410980 <__retarget_lock_acquire_recursive>
  411efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  411f00:	2b00      	cmp	r3, #0
  411f02:	d1bb      	bne.n	411e7c <_fclose_r+0x28>
  411f04:	6e66      	ldr	r6, [r4, #100]	; 0x64
  411f06:	f016 0601 	ands.w	r6, r6, #1
  411f0a:	d1b1      	bne.n	411e70 <_fclose_r+0x1c>
  411f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  411f0e:	f7fe fd39 	bl	410984 <__retarget_lock_release_recursive>
  411f12:	4630      	mov	r0, r6
  411f14:	bd70      	pop	{r4, r5, r6, pc}
  411f16:	bf00      	nop

00411f18 <_fstat_r>:
  411f18:	b538      	push	{r3, r4, r5, lr}
  411f1a:	460b      	mov	r3, r1
  411f1c:	4c07      	ldr	r4, [pc, #28]	; (411f3c <_fstat_r+0x24>)
  411f1e:	4605      	mov	r5, r0
  411f20:	4611      	mov	r1, r2
  411f22:	4618      	mov	r0, r3
  411f24:	2300      	movs	r3, #0
  411f26:	6023      	str	r3, [r4, #0]
  411f28:	f7f2 f865 	bl	403ff6 <_fstat>
  411f2c:	1c43      	adds	r3, r0, #1
  411f2e:	d000      	beq.n	411f32 <_fstat_r+0x1a>
  411f30:	bd38      	pop	{r3, r4, r5, pc}
  411f32:	6823      	ldr	r3, [r4, #0]
  411f34:	2b00      	cmp	r3, #0
  411f36:	d0fb      	beq.n	411f30 <_fstat_r+0x18>
  411f38:	602b      	str	r3, [r5, #0]
  411f3a:	bd38      	pop	{r3, r4, r5, pc}
  411f3c:	200134c8 	.word	0x200134c8

00411f40 <_isatty_r>:
  411f40:	b538      	push	{r3, r4, r5, lr}
  411f42:	4c07      	ldr	r4, [pc, #28]	; (411f60 <_isatty_r+0x20>)
  411f44:	2300      	movs	r3, #0
  411f46:	4605      	mov	r5, r0
  411f48:	4608      	mov	r0, r1
  411f4a:	6023      	str	r3, [r4, #0]
  411f4c:	f7f2 f858 	bl	404000 <_isatty>
  411f50:	1c43      	adds	r3, r0, #1
  411f52:	d000      	beq.n	411f56 <_isatty_r+0x16>
  411f54:	bd38      	pop	{r3, r4, r5, pc}
  411f56:	6823      	ldr	r3, [r4, #0]
  411f58:	2b00      	cmp	r3, #0
  411f5a:	d0fb      	beq.n	411f54 <_isatty_r+0x14>
  411f5c:	602b      	str	r3, [r5, #0]
  411f5e:	bd38      	pop	{r3, r4, r5, pc}
  411f60:	200134c8 	.word	0x200134c8

00411f64 <_lseek_r>:
  411f64:	b570      	push	{r4, r5, r6, lr}
  411f66:	460d      	mov	r5, r1
  411f68:	4c08      	ldr	r4, [pc, #32]	; (411f8c <_lseek_r+0x28>)
  411f6a:	4611      	mov	r1, r2
  411f6c:	4606      	mov	r6, r0
  411f6e:	461a      	mov	r2, r3
  411f70:	4628      	mov	r0, r5
  411f72:	2300      	movs	r3, #0
  411f74:	6023      	str	r3, [r4, #0]
  411f76:	f7f2 f845 	bl	404004 <_lseek>
  411f7a:	1c43      	adds	r3, r0, #1
  411f7c:	d000      	beq.n	411f80 <_lseek_r+0x1c>
  411f7e:	bd70      	pop	{r4, r5, r6, pc}
  411f80:	6823      	ldr	r3, [r4, #0]
  411f82:	2b00      	cmp	r3, #0
  411f84:	d0fb      	beq.n	411f7e <_lseek_r+0x1a>
  411f86:	6033      	str	r3, [r6, #0]
  411f88:	bd70      	pop	{r4, r5, r6, pc}
  411f8a:	bf00      	nop
  411f8c:	200134c8 	.word	0x200134c8

00411f90 <_read_r>:
  411f90:	b570      	push	{r4, r5, r6, lr}
  411f92:	460d      	mov	r5, r1
  411f94:	4c08      	ldr	r4, [pc, #32]	; (411fb8 <_read_r+0x28>)
  411f96:	4611      	mov	r1, r2
  411f98:	4606      	mov	r6, r0
  411f9a:	461a      	mov	r2, r3
  411f9c:	4628      	mov	r0, r5
  411f9e:	2300      	movs	r3, #0
  411fa0:	6023      	str	r3, [r4, #0]
  411fa2:	f7ef faed 	bl	401580 <_read>
  411fa6:	1c43      	adds	r3, r0, #1
  411fa8:	d000      	beq.n	411fac <_read_r+0x1c>
  411faa:	bd70      	pop	{r4, r5, r6, pc}
  411fac:	6823      	ldr	r3, [r4, #0]
  411fae:	2b00      	cmp	r3, #0
  411fb0:	d0fb      	beq.n	411faa <_read_r+0x1a>
  411fb2:	6033      	str	r3, [r6, #0]
  411fb4:	bd70      	pop	{r4, r5, r6, pc}
  411fb6:	bf00      	nop
  411fb8:	200134c8 	.word	0x200134c8

00411fbc <__aeabi_drsub>:
  411fbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  411fc0:	e002      	b.n	411fc8 <__adddf3>
  411fc2:	bf00      	nop

00411fc4 <__aeabi_dsub>:
  411fc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00411fc8 <__adddf3>:
  411fc8:	b530      	push	{r4, r5, lr}
  411fca:	ea4f 0441 	mov.w	r4, r1, lsl #1
  411fce:	ea4f 0543 	mov.w	r5, r3, lsl #1
  411fd2:	ea94 0f05 	teq	r4, r5
  411fd6:	bf08      	it	eq
  411fd8:	ea90 0f02 	teqeq	r0, r2
  411fdc:	bf1f      	itttt	ne
  411fde:	ea54 0c00 	orrsne.w	ip, r4, r0
  411fe2:	ea55 0c02 	orrsne.w	ip, r5, r2
  411fe6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  411fea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  411fee:	f000 80e2 	beq.w	4121b6 <__adddf3+0x1ee>
  411ff2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  411ff6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  411ffa:	bfb8      	it	lt
  411ffc:	426d      	neglt	r5, r5
  411ffe:	dd0c      	ble.n	41201a <__adddf3+0x52>
  412000:	442c      	add	r4, r5
  412002:	ea80 0202 	eor.w	r2, r0, r2
  412006:	ea81 0303 	eor.w	r3, r1, r3
  41200a:	ea82 0000 	eor.w	r0, r2, r0
  41200e:	ea83 0101 	eor.w	r1, r3, r1
  412012:	ea80 0202 	eor.w	r2, r0, r2
  412016:	ea81 0303 	eor.w	r3, r1, r3
  41201a:	2d36      	cmp	r5, #54	; 0x36
  41201c:	bf88      	it	hi
  41201e:	bd30      	pophi	{r4, r5, pc}
  412020:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  412024:	ea4f 3101 	mov.w	r1, r1, lsl #12
  412028:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  41202c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  412030:	d002      	beq.n	412038 <__adddf3+0x70>
  412032:	4240      	negs	r0, r0
  412034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  412038:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  41203c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  412040:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  412044:	d002      	beq.n	41204c <__adddf3+0x84>
  412046:	4252      	negs	r2, r2
  412048:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41204c:	ea94 0f05 	teq	r4, r5
  412050:	f000 80a7 	beq.w	4121a2 <__adddf3+0x1da>
  412054:	f1a4 0401 	sub.w	r4, r4, #1
  412058:	f1d5 0e20 	rsbs	lr, r5, #32
  41205c:	db0d      	blt.n	41207a <__adddf3+0xb2>
  41205e:	fa02 fc0e 	lsl.w	ip, r2, lr
  412062:	fa22 f205 	lsr.w	r2, r2, r5
  412066:	1880      	adds	r0, r0, r2
  412068:	f141 0100 	adc.w	r1, r1, #0
  41206c:	fa03 f20e 	lsl.w	r2, r3, lr
  412070:	1880      	adds	r0, r0, r2
  412072:	fa43 f305 	asr.w	r3, r3, r5
  412076:	4159      	adcs	r1, r3
  412078:	e00e      	b.n	412098 <__adddf3+0xd0>
  41207a:	f1a5 0520 	sub.w	r5, r5, #32
  41207e:	f10e 0e20 	add.w	lr, lr, #32
  412082:	2a01      	cmp	r2, #1
  412084:	fa03 fc0e 	lsl.w	ip, r3, lr
  412088:	bf28      	it	cs
  41208a:	f04c 0c02 	orrcs.w	ip, ip, #2
  41208e:	fa43 f305 	asr.w	r3, r3, r5
  412092:	18c0      	adds	r0, r0, r3
  412094:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  412098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41209c:	d507      	bpl.n	4120ae <__adddf3+0xe6>
  41209e:	f04f 0e00 	mov.w	lr, #0
  4120a2:	f1dc 0c00 	rsbs	ip, ip, #0
  4120a6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4120aa:	eb6e 0101 	sbc.w	r1, lr, r1
  4120ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4120b2:	d31b      	bcc.n	4120ec <__adddf3+0x124>
  4120b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4120b8:	d30c      	bcc.n	4120d4 <__adddf3+0x10c>
  4120ba:	0849      	lsrs	r1, r1, #1
  4120bc:	ea5f 0030 	movs.w	r0, r0, rrx
  4120c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4120c4:	f104 0401 	add.w	r4, r4, #1
  4120c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4120cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4120d0:	f080 809a 	bcs.w	412208 <__adddf3+0x240>
  4120d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4120d8:	bf08      	it	eq
  4120da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4120de:	f150 0000 	adcs.w	r0, r0, #0
  4120e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4120e6:	ea41 0105 	orr.w	r1, r1, r5
  4120ea:	bd30      	pop	{r4, r5, pc}
  4120ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4120f0:	4140      	adcs	r0, r0
  4120f2:	eb41 0101 	adc.w	r1, r1, r1
  4120f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4120fa:	f1a4 0401 	sub.w	r4, r4, #1
  4120fe:	d1e9      	bne.n	4120d4 <__adddf3+0x10c>
  412100:	f091 0f00 	teq	r1, #0
  412104:	bf04      	itt	eq
  412106:	4601      	moveq	r1, r0
  412108:	2000      	moveq	r0, #0
  41210a:	fab1 f381 	clz	r3, r1
  41210e:	bf08      	it	eq
  412110:	3320      	addeq	r3, #32
  412112:	f1a3 030b 	sub.w	r3, r3, #11
  412116:	f1b3 0220 	subs.w	r2, r3, #32
  41211a:	da0c      	bge.n	412136 <__adddf3+0x16e>
  41211c:	320c      	adds	r2, #12
  41211e:	dd08      	ble.n	412132 <__adddf3+0x16a>
  412120:	f102 0c14 	add.w	ip, r2, #20
  412124:	f1c2 020c 	rsb	r2, r2, #12
  412128:	fa01 f00c 	lsl.w	r0, r1, ip
  41212c:	fa21 f102 	lsr.w	r1, r1, r2
  412130:	e00c      	b.n	41214c <__adddf3+0x184>
  412132:	f102 0214 	add.w	r2, r2, #20
  412136:	bfd8      	it	le
  412138:	f1c2 0c20 	rsble	ip, r2, #32
  41213c:	fa01 f102 	lsl.w	r1, r1, r2
  412140:	fa20 fc0c 	lsr.w	ip, r0, ip
  412144:	bfdc      	itt	le
  412146:	ea41 010c 	orrle.w	r1, r1, ip
  41214a:	4090      	lslle	r0, r2
  41214c:	1ae4      	subs	r4, r4, r3
  41214e:	bfa2      	ittt	ge
  412150:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  412154:	4329      	orrge	r1, r5
  412156:	bd30      	popge	{r4, r5, pc}
  412158:	ea6f 0404 	mvn.w	r4, r4
  41215c:	3c1f      	subs	r4, #31
  41215e:	da1c      	bge.n	41219a <__adddf3+0x1d2>
  412160:	340c      	adds	r4, #12
  412162:	dc0e      	bgt.n	412182 <__adddf3+0x1ba>
  412164:	f104 0414 	add.w	r4, r4, #20
  412168:	f1c4 0220 	rsb	r2, r4, #32
  41216c:	fa20 f004 	lsr.w	r0, r0, r4
  412170:	fa01 f302 	lsl.w	r3, r1, r2
  412174:	ea40 0003 	orr.w	r0, r0, r3
  412178:	fa21 f304 	lsr.w	r3, r1, r4
  41217c:	ea45 0103 	orr.w	r1, r5, r3
  412180:	bd30      	pop	{r4, r5, pc}
  412182:	f1c4 040c 	rsb	r4, r4, #12
  412186:	f1c4 0220 	rsb	r2, r4, #32
  41218a:	fa20 f002 	lsr.w	r0, r0, r2
  41218e:	fa01 f304 	lsl.w	r3, r1, r4
  412192:	ea40 0003 	orr.w	r0, r0, r3
  412196:	4629      	mov	r1, r5
  412198:	bd30      	pop	{r4, r5, pc}
  41219a:	fa21 f004 	lsr.w	r0, r1, r4
  41219e:	4629      	mov	r1, r5
  4121a0:	bd30      	pop	{r4, r5, pc}
  4121a2:	f094 0f00 	teq	r4, #0
  4121a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4121aa:	bf06      	itte	eq
  4121ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4121b0:	3401      	addeq	r4, #1
  4121b2:	3d01      	subne	r5, #1
  4121b4:	e74e      	b.n	412054 <__adddf3+0x8c>
  4121b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4121ba:	bf18      	it	ne
  4121bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4121c0:	d029      	beq.n	412216 <__adddf3+0x24e>
  4121c2:	ea94 0f05 	teq	r4, r5
  4121c6:	bf08      	it	eq
  4121c8:	ea90 0f02 	teqeq	r0, r2
  4121cc:	d005      	beq.n	4121da <__adddf3+0x212>
  4121ce:	ea54 0c00 	orrs.w	ip, r4, r0
  4121d2:	bf04      	itt	eq
  4121d4:	4619      	moveq	r1, r3
  4121d6:	4610      	moveq	r0, r2
  4121d8:	bd30      	pop	{r4, r5, pc}
  4121da:	ea91 0f03 	teq	r1, r3
  4121de:	bf1e      	ittt	ne
  4121e0:	2100      	movne	r1, #0
  4121e2:	2000      	movne	r0, #0
  4121e4:	bd30      	popne	{r4, r5, pc}
  4121e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4121ea:	d105      	bne.n	4121f8 <__adddf3+0x230>
  4121ec:	0040      	lsls	r0, r0, #1
  4121ee:	4149      	adcs	r1, r1
  4121f0:	bf28      	it	cs
  4121f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4121f6:	bd30      	pop	{r4, r5, pc}
  4121f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4121fc:	bf3c      	itt	cc
  4121fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  412202:	bd30      	popcc	{r4, r5, pc}
  412204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412208:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  41220c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  412210:	f04f 0000 	mov.w	r0, #0
  412214:	bd30      	pop	{r4, r5, pc}
  412216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41221a:	bf1a      	itte	ne
  41221c:	4619      	movne	r1, r3
  41221e:	4610      	movne	r0, r2
  412220:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  412224:	bf1c      	itt	ne
  412226:	460b      	movne	r3, r1
  412228:	4602      	movne	r2, r0
  41222a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41222e:	bf06      	itte	eq
  412230:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  412234:	ea91 0f03 	teqeq	r1, r3
  412238:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  41223c:	bd30      	pop	{r4, r5, pc}
  41223e:	bf00      	nop

00412240 <__aeabi_ui2d>:
  412240:	f090 0f00 	teq	r0, #0
  412244:	bf04      	itt	eq
  412246:	2100      	moveq	r1, #0
  412248:	4770      	bxeq	lr
  41224a:	b530      	push	{r4, r5, lr}
  41224c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412250:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412254:	f04f 0500 	mov.w	r5, #0
  412258:	f04f 0100 	mov.w	r1, #0
  41225c:	e750      	b.n	412100 <__adddf3+0x138>
  41225e:	bf00      	nop

00412260 <__aeabi_i2d>:
  412260:	f090 0f00 	teq	r0, #0
  412264:	bf04      	itt	eq
  412266:	2100      	moveq	r1, #0
  412268:	4770      	bxeq	lr
  41226a:	b530      	push	{r4, r5, lr}
  41226c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412270:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412274:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  412278:	bf48      	it	mi
  41227a:	4240      	negmi	r0, r0
  41227c:	f04f 0100 	mov.w	r1, #0
  412280:	e73e      	b.n	412100 <__adddf3+0x138>
  412282:	bf00      	nop

00412284 <__aeabi_f2d>:
  412284:	0042      	lsls	r2, r0, #1
  412286:	ea4f 01e2 	mov.w	r1, r2, asr #3
  41228a:	ea4f 0131 	mov.w	r1, r1, rrx
  41228e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  412292:	bf1f      	itttt	ne
  412294:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  412298:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41229c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4122a0:	4770      	bxne	lr
  4122a2:	f092 0f00 	teq	r2, #0
  4122a6:	bf14      	ite	ne
  4122a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4122ac:	4770      	bxeq	lr
  4122ae:	b530      	push	{r4, r5, lr}
  4122b0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4122b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4122b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4122bc:	e720      	b.n	412100 <__adddf3+0x138>
  4122be:	bf00      	nop

004122c0 <__aeabi_ul2d>:
  4122c0:	ea50 0201 	orrs.w	r2, r0, r1
  4122c4:	bf08      	it	eq
  4122c6:	4770      	bxeq	lr
  4122c8:	b530      	push	{r4, r5, lr}
  4122ca:	f04f 0500 	mov.w	r5, #0
  4122ce:	e00a      	b.n	4122e6 <__aeabi_l2d+0x16>

004122d0 <__aeabi_l2d>:
  4122d0:	ea50 0201 	orrs.w	r2, r0, r1
  4122d4:	bf08      	it	eq
  4122d6:	4770      	bxeq	lr
  4122d8:	b530      	push	{r4, r5, lr}
  4122da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4122de:	d502      	bpl.n	4122e6 <__aeabi_l2d+0x16>
  4122e0:	4240      	negs	r0, r0
  4122e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4122e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4122ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4122ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4122f2:	f43f aedc 	beq.w	4120ae <__adddf3+0xe6>
  4122f6:	f04f 0203 	mov.w	r2, #3
  4122fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4122fe:	bf18      	it	ne
  412300:	3203      	addne	r2, #3
  412302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  412306:	bf18      	it	ne
  412308:	3203      	addne	r2, #3
  41230a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  41230e:	f1c2 0320 	rsb	r3, r2, #32
  412312:	fa00 fc03 	lsl.w	ip, r0, r3
  412316:	fa20 f002 	lsr.w	r0, r0, r2
  41231a:	fa01 fe03 	lsl.w	lr, r1, r3
  41231e:	ea40 000e 	orr.w	r0, r0, lr
  412322:	fa21 f102 	lsr.w	r1, r1, r2
  412326:	4414      	add	r4, r2
  412328:	e6c1      	b.n	4120ae <__adddf3+0xe6>
  41232a:	bf00      	nop

0041232c <__aeabi_dmul>:
  41232c:	b570      	push	{r4, r5, r6, lr}
  41232e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  412332:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  412336:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41233a:	bf1d      	ittte	ne
  41233c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  412340:	ea94 0f0c 	teqne	r4, ip
  412344:	ea95 0f0c 	teqne	r5, ip
  412348:	f000 f8de 	bleq	412508 <__aeabi_dmul+0x1dc>
  41234c:	442c      	add	r4, r5
  41234e:	ea81 0603 	eor.w	r6, r1, r3
  412352:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  412356:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  41235a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  41235e:	bf18      	it	ne
  412360:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  412364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  41236c:	d038      	beq.n	4123e0 <__aeabi_dmul+0xb4>
  41236e:	fba0 ce02 	umull	ip, lr, r0, r2
  412372:	f04f 0500 	mov.w	r5, #0
  412376:	fbe1 e502 	umlal	lr, r5, r1, r2
  41237a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41237e:	fbe0 e503 	umlal	lr, r5, r0, r3
  412382:	f04f 0600 	mov.w	r6, #0
  412386:	fbe1 5603 	umlal	r5, r6, r1, r3
  41238a:	f09c 0f00 	teq	ip, #0
  41238e:	bf18      	it	ne
  412390:	f04e 0e01 	orrne.w	lr, lr, #1
  412394:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  412398:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  41239c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4123a0:	d204      	bcs.n	4123ac <__aeabi_dmul+0x80>
  4123a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4123a6:	416d      	adcs	r5, r5
  4123a8:	eb46 0606 	adc.w	r6, r6, r6
  4123ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4123b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4123b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4123b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4123bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4123c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4123c4:	bf88      	it	hi
  4123c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4123ca:	d81e      	bhi.n	41240a <__aeabi_dmul+0xde>
  4123cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4123d0:	bf08      	it	eq
  4123d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4123d6:	f150 0000 	adcs.w	r0, r0, #0
  4123da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4123de:	bd70      	pop	{r4, r5, r6, pc}
  4123e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4123e4:	ea46 0101 	orr.w	r1, r6, r1
  4123e8:	ea40 0002 	orr.w	r0, r0, r2
  4123ec:	ea81 0103 	eor.w	r1, r1, r3
  4123f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4123f4:	bfc2      	ittt	gt
  4123f6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4123fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4123fe:	bd70      	popgt	{r4, r5, r6, pc}
  412400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412404:	f04f 0e00 	mov.w	lr, #0
  412408:	3c01      	subs	r4, #1
  41240a:	f300 80ab 	bgt.w	412564 <__aeabi_dmul+0x238>
  41240e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  412412:	bfde      	ittt	le
  412414:	2000      	movle	r0, #0
  412416:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  41241a:	bd70      	pople	{r4, r5, r6, pc}
  41241c:	f1c4 0400 	rsb	r4, r4, #0
  412420:	3c20      	subs	r4, #32
  412422:	da35      	bge.n	412490 <__aeabi_dmul+0x164>
  412424:	340c      	adds	r4, #12
  412426:	dc1b      	bgt.n	412460 <__aeabi_dmul+0x134>
  412428:	f104 0414 	add.w	r4, r4, #20
  41242c:	f1c4 0520 	rsb	r5, r4, #32
  412430:	fa00 f305 	lsl.w	r3, r0, r5
  412434:	fa20 f004 	lsr.w	r0, r0, r4
  412438:	fa01 f205 	lsl.w	r2, r1, r5
  41243c:	ea40 0002 	orr.w	r0, r0, r2
  412440:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  412444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  412448:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41244c:	fa21 f604 	lsr.w	r6, r1, r4
  412450:	eb42 0106 	adc.w	r1, r2, r6
  412454:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  412458:	bf08      	it	eq
  41245a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41245e:	bd70      	pop	{r4, r5, r6, pc}
  412460:	f1c4 040c 	rsb	r4, r4, #12
  412464:	f1c4 0520 	rsb	r5, r4, #32
  412468:	fa00 f304 	lsl.w	r3, r0, r4
  41246c:	fa20 f005 	lsr.w	r0, r0, r5
  412470:	fa01 f204 	lsl.w	r2, r1, r4
  412474:	ea40 0002 	orr.w	r0, r0, r2
  412478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41247c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  412480:	f141 0100 	adc.w	r1, r1, #0
  412484:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  412488:	bf08      	it	eq
  41248a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41248e:	bd70      	pop	{r4, r5, r6, pc}
  412490:	f1c4 0520 	rsb	r5, r4, #32
  412494:	fa00 f205 	lsl.w	r2, r0, r5
  412498:	ea4e 0e02 	orr.w	lr, lr, r2
  41249c:	fa20 f304 	lsr.w	r3, r0, r4
  4124a0:	fa01 f205 	lsl.w	r2, r1, r5
  4124a4:	ea43 0302 	orr.w	r3, r3, r2
  4124a8:	fa21 f004 	lsr.w	r0, r1, r4
  4124ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4124b0:	fa21 f204 	lsr.w	r2, r1, r4
  4124b4:	ea20 0002 	bic.w	r0, r0, r2
  4124b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4124bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4124c0:	bf08      	it	eq
  4124c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4124c6:	bd70      	pop	{r4, r5, r6, pc}
  4124c8:	f094 0f00 	teq	r4, #0
  4124cc:	d10f      	bne.n	4124ee <__aeabi_dmul+0x1c2>
  4124ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4124d2:	0040      	lsls	r0, r0, #1
  4124d4:	eb41 0101 	adc.w	r1, r1, r1
  4124d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4124dc:	bf08      	it	eq
  4124de:	3c01      	subeq	r4, #1
  4124e0:	d0f7      	beq.n	4124d2 <__aeabi_dmul+0x1a6>
  4124e2:	ea41 0106 	orr.w	r1, r1, r6
  4124e6:	f095 0f00 	teq	r5, #0
  4124ea:	bf18      	it	ne
  4124ec:	4770      	bxne	lr
  4124ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4124f2:	0052      	lsls	r2, r2, #1
  4124f4:	eb43 0303 	adc.w	r3, r3, r3
  4124f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4124fc:	bf08      	it	eq
  4124fe:	3d01      	subeq	r5, #1
  412500:	d0f7      	beq.n	4124f2 <__aeabi_dmul+0x1c6>
  412502:	ea43 0306 	orr.w	r3, r3, r6
  412506:	4770      	bx	lr
  412508:	ea94 0f0c 	teq	r4, ip
  41250c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  412510:	bf18      	it	ne
  412512:	ea95 0f0c 	teqne	r5, ip
  412516:	d00c      	beq.n	412532 <__aeabi_dmul+0x206>
  412518:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41251c:	bf18      	it	ne
  41251e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  412522:	d1d1      	bne.n	4124c8 <__aeabi_dmul+0x19c>
  412524:	ea81 0103 	eor.w	r1, r1, r3
  412528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41252c:	f04f 0000 	mov.w	r0, #0
  412530:	bd70      	pop	{r4, r5, r6, pc}
  412532:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  412536:	bf06      	itte	eq
  412538:	4610      	moveq	r0, r2
  41253a:	4619      	moveq	r1, r3
  41253c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  412540:	d019      	beq.n	412576 <__aeabi_dmul+0x24a>
  412542:	ea94 0f0c 	teq	r4, ip
  412546:	d102      	bne.n	41254e <__aeabi_dmul+0x222>
  412548:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  41254c:	d113      	bne.n	412576 <__aeabi_dmul+0x24a>
  41254e:	ea95 0f0c 	teq	r5, ip
  412552:	d105      	bne.n	412560 <__aeabi_dmul+0x234>
  412554:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  412558:	bf1c      	itt	ne
  41255a:	4610      	movne	r0, r2
  41255c:	4619      	movne	r1, r3
  41255e:	d10a      	bne.n	412576 <__aeabi_dmul+0x24a>
  412560:	ea81 0103 	eor.w	r1, r1, r3
  412564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  412568:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41256c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  412570:	f04f 0000 	mov.w	r0, #0
  412574:	bd70      	pop	{r4, r5, r6, pc}
  412576:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41257a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  41257e:	bd70      	pop	{r4, r5, r6, pc}

00412580 <__aeabi_ddiv>:
  412580:	b570      	push	{r4, r5, r6, lr}
  412582:	f04f 0cff 	mov.w	ip, #255	; 0xff
  412586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41258a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41258e:	bf1d      	ittte	ne
  412590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  412594:	ea94 0f0c 	teqne	r4, ip
  412598:	ea95 0f0c 	teqne	r5, ip
  41259c:	f000 f8a7 	bleq	4126ee <__aeabi_ddiv+0x16e>
  4125a0:	eba4 0405 	sub.w	r4, r4, r5
  4125a4:	ea81 0e03 	eor.w	lr, r1, r3
  4125a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4125ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4125b0:	f000 8088 	beq.w	4126c4 <__aeabi_ddiv+0x144>
  4125b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4125b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4125bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4125c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4125c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4125c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4125cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4125d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4125d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4125d8:	429d      	cmp	r5, r3
  4125da:	bf08      	it	eq
  4125dc:	4296      	cmpeq	r6, r2
  4125de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4125e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4125e6:	d202      	bcs.n	4125ee <__aeabi_ddiv+0x6e>
  4125e8:	085b      	lsrs	r3, r3, #1
  4125ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4125ee:	1ab6      	subs	r6, r6, r2
  4125f0:	eb65 0503 	sbc.w	r5, r5, r3
  4125f4:	085b      	lsrs	r3, r3, #1
  4125f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4125fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4125fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  412602:	ebb6 0e02 	subs.w	lr, r6, r2
  412606:	eb75 0e03 	sbcs.w	lr, r5, r3
  41260a:	bf22      	ittt	cs
  41260c:	1ab6      	subcs	r6, r6, r2
  41260e:	4675      	movcs	r5, lr
  412610:	ea40 000c 	orrcs.w	r0, r0, ip
  412614:	085b      	lsrs	r3, r3, #1
  412616:	ea4f 0232 	mov.w	r2, r2, rrx
  41261a:	ebb6 0e02 	subs.w	lr, r6, r2
  41261e:	eb75 0e03 	sbcs.w	lr, r5, r3
  412622:	bf22      	ittt	cs
  412624:	1ab6      	subcs	r6, r6, r2
  412626:	4675      	movcs	r5, lr
  412628:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  41262c:	085b      	lsrs	r3, r3, #1
  41262e:	ea4f 0232 	mov.w	r2, r2, rrx
  412632:	ebb6 0e02 	subs.w	lr, r6, r2
  412636:	eb75 0e03 	sbcs.w	lr, r5, r3
  41263a:	bf22      	ittt	cs
  41263c:	1ab6      	subcs	r6, r6, r2
  41263e:	4675      	movcs	r5, lr
  412640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  412644:	085b      	lsrs	r3, r3, #1
  412646:	ea4f 0232 	mov.w	r2, r2, rrx
  41264a:	ebb6 0e02 	subs.w	lr, r6, r2
  41264e:	eb75 0e03 	sbcs.w	lr, r5, r3
  412652:	bf22      	ittt	cs
  412654:	1ab6      	subcs	r6, r6, r2
  412656:	4675      	movcs	r5, lr
  412658:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  41265c:	ea55 0e06 	orrs.w	lr, r5, r6
  412660:	d018      	beq.n	412694 <__aeabi_ddiv+0x114>
  412662:	ea4f 1505 	mov.w	r5, r5, lsl #4
  412666:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  41266a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41266e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  412672:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  412676:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  41267a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41267e:	d1c0      	bne.n	412602 <__aeabi_ddiv+0x82>
  412680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  412684:	d10b      	bne.n	41269e <__aeabi_ddiv+0x11e>
  412686:	ea41 0100 	orr.w	r1, r1, r0
  41268a:	f04f 0000 	mov.w	r0, #0
  41268e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  412692:	e7b6      	b.n	412602 <__aeabi_ddiv+0x82>
  412694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  412698:	bf04      	itt	eq
  41269a:	4301      	orreq	r1, r0
  41269c:	2000      	moveq	r0, #0
  41269e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4126a2:	bf88      	it	hi
  4126a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4126a8:	f63f aeaf 	bhi.w	41240a <__aeabi_dmul+0xde>
  4126ac:	ebb5 0c03 	subs.w	ip, r5, r3
  4126b0:	bf04      	itt	eq
  4126b2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4126b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4126ba:	f150 0000 	adcs.w	r0, r0, #0
  4126be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4126c2:	bd70      	pop	{r4, r5, r6, pc}
  4126c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4126c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4126cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4126d0:	bfc2      	ittt	gt
  4126d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4126d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4126da:	bd70      	popgt	{r4, r5, r6, pc}
  4126dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4126e0:	f04f 0e00 	mov.w	lr, #0
  4126e4:	3c01      	subs	r4, #1
  4126e6:	e690      	b.n	41240a <__aeabi_dmul+0xde>
  4126e8:	ea45 0e06 	orr.w	lr, r5, r6
  4126ec:	e68d      	b.n	41240a <__aeabi_dmul+0xde>
  4126ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4126f2:	ea94 0f0c 	teq	r4, ip
  4126f6:	bf08      	it	eq
  4126f8:	ea95 0f0c 	teqeq	r5, ip
  4126fc:	f43f af3b 	beq.w	412576 <__aeabi_dmul+0x24a>
  412700:	ea94 0f0c 	teq	r4, ip
  412704:	d10a      	bne.n	41271c <__aeabi_ddiv+0x19c>
  412706:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41270a:	f47f af34 	bne.w	412576 <__aeabi_dmul+0x24a>
  41270e:	ea95 0f0c 	teq	r5, ip
  412712:	f47f af25 	bne.w	412560 <__aeabi_dmul+0x234>
  412716:	4610      	mov	r0, r2
  412718:	4619      	mov	r1, r3
  41271a:	e72c      	b.n	412576 <__aeabi_dmul+0x24a>
  41271c:	ea95 0f0c 	teq	r5, ip
  412720:	d106      	bne.n	412730 <__aeabi_ddiv+0x1b0>
  412722:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  412726:	f43f aefd 	beq.w	412524 <__aeabi_dmul+0x1f8>
  41272a:	4610      	mov	r0, r2
  41272c:	4619      	mov	r1, r3
  41272e:	e722      	b.n	412576 <__aeabi_dmul+0x24a>
  412730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  412734:	bf18      	it	ne
  412736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41273a:	f47f aec5 	bne.w	4124c8 <__aeabi_dmul+0x19c>
  41273e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  412742:	f47f af0d 	bne.w	412560 <__aeabi_dmul+0x234>
  412746:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41274a:	f47f aeeb 	bne.w	412524 <__aeabi_dmul+0x1f8>
  41274e:	e712      	b.n	412576 <__aeabi_dmul+0x24a>

00412750 <__gedf2>:
  412750:	f04f 3cff 	mov.w	ip, #4294967295
  412754:	e006      	b.n	412764 <__cmpdf2+0x4>
  412756:	bf00      	nop

00412758 <__ledf2>:
  412758:	f04f 0c01 	mov.w	ip, #1
  41275c:	e002      	b.n	412764 <__cmpdf2+0x4>
  41275e:	bf00      	nop

00412760 <__cmpdf2>:
  412760:	f04f 0c01 	mov.w	ip, #1
  412764:	f84d cd04 	str.w	ip, [sp, #-4]!
  412768:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  41276c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  412770:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  412774:	bf18      	it	ne
  412776:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  41277a:	d01b      	beq.n	4127b4 <__cmpdf2+0x54>
  41277c:	b001      	add	sp, #4
  41277e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  412782:	bf0c      	ite	eq
  412784:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  412788:	ea91 0f03 	teqne	r1, r3
  41278c:	bf02      	ittt	eq
  41278e:	ea90 0f02 	teqeq	r0, r2
  412792:	2000      	moveq	r0, #0
  412794:	4770      	bxeq	lr
  412796:	f110 0f00 	cmn.w	r0, #0
  41279a:	ea91 0f03 	teq	r1, r3
  41279e:	bf58      	it	pl
  4127a0:	4299      	cmppl	r1, r3
  4127a2:	bf08      	it	eq
  4127a4:	4290      	cmpeq	r0, r2
  4127a6:	bf2c      	ite	cs
  4127a8:	17d8      	asrcs	r0, r3, #31
  4127aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4127ae:	f040 0001 	orr.w	r0, r0, #1
  4127b2:	4770      	bx	lr
  4127b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4127b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4127bc:	d102      	bne.n	4127c4 <__cmpdf2+0x64>
  4127be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4127c2:	d107      	bne.n	4127d4 <__cmpdf2+0x74>
  4127c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4127c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4127cc:	d1d6      	bne.n	41277c <__cmpdf2+0x1c>
  4127ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4127d2:	d0d3      	beq.n	41277c <__cmpdf2+0x1c>
  4127d4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4127d8:	4770      	bx	lr
  4127da:	bf00      	nop

004127dc <__aeabi_cdrcmple>:
  4127dc:	4684      	mov	ip, r0
  4127de:	4610      	mov	r0, r2
  4127e0:	4662      	mov	r2, ip
  4127e2:	468c      	mov	ip, r1
  4127e4:	4619      	mov	r1, r3
  4127e6:	4663      	mov	r3, ip
  4127e8:	e000      	b.n	4127ec <__aeabi_cdcmpeq>
  4127ea:	bf00      	nop

004127ec <__aeabi_cdcmpeq>:
  4127ec:	b501      	push	{r0, lr}
  4127ee:	f7ff ffb7 	bl	412760 <__cmpdf2>
  4127f2:	2800      	cmp	r0, #0
  4127f4:	bf48      	it	mi
  4127f6:	f110 0f00 	cmnmi.w	r0, #0
  4127fa:	bd01      	pop	{r0, pc}

004127fc <__aeabi_dcmpeq>:
  4127fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  412800:	f7ff fff4 	bl	4127ec <__aeabi_cdcmpeq>
  412804:	bf0c      	ite	eq
  412806:	2001      	moveq	r0, #1
  412808:	2000      	movne	r0, #0
  41280a:	f85d fb08 	ldr.w	pc, [sp], #8
  41280e:	bf00      	nop

00412810 <__aeabi_dcmplt>:
  412810:	f84d ed08 	str.w	lr, [sp, #-8]!
  412814:	f7ff ffea 	bl	4127ec <__aeabi_cdcmpeq>
  412818:	bf34      	ite	cc
  41281a:	2001      	movcc	r0, #1
  41281c:	2000      	movcs	r0, #0
  41281e:	f85d fb08 	ldr.w	pc, [sp], #8
  412822:	bf00      	nop

00412824 <__aeabi_dcmple>:
  412824:	f84d ed08 	str.w	lr, [sp, #-8]!
  412828:	f7ff ffe0 	bl	4127ec <__aeabi_cdcmpeq>
  41282c:	bf94      	ite	ls
  41282e:	2001      	movls	r0, #1
  412830:	2000      	movhi	r0, #0
  412832:	f85d fb08 	ldr.w	pc, [sp], #8
  412836:	bf00      	nop

00412838 <__aeabi_dcmpge>:
  412838:	f84d ed08 	str.w	lr, [sp, #-8]!
  41283c:	f7ff ffce 	bl	4127dc <__aeabi_cdrcmple>
  412840:	bf94      	ite	ls
  412842:	2001      	movls	r0, #1
  412844:	2000      	movhi	r0, #0
  412846:	f85d fb08 	ldr.w	pc, [sp], #8
  41284a:	bf00      	nop

0041284c <__aeabi_dcmpgt>:
  41284c:	f84d ed08 	str.w	lr, [sp, #-8]!
  412850:	f7ff ffc4 	bl	4127dc <__aeabi_cdrcmple>
  412854:	bf34      	ite	cc
  412856:	2001      	movcc	r0, #1
  412858:	2000      	movcs	r0, #0
  41285a:	f85d fb08 	ldr.w	pc, [sp], #8
  41285e:	bf00      	nop

00412860 <__aeabi_dcmpun>:
  412860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  412864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  412868:	d102      	bne.n	412870 <__aeabi_dcmpun+0x10>
  41286a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  41286e:	d10a      	bne.n	412886 <__aeabi_dcmpun+0x26>
  412870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  412874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  412878:	d102      	bne.n	412880 <__aeabi_dcmpun+0x20>
  41287a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  41287e:	d102      	bne.n	412886 <__aeabi_dcmpun+0x26>
  412880:	f04f 0000 	mov.w	r0, #0
  412884:	4770      	bx	lr
  412886:	f04f 0001 	mov.w	r0, #1
  41288a:	4770      	bx	lr

0041288c <__aeabi_d2iz>:
  41288c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  412890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  412894:	d215      	bcs.n	4128c2 <__aeabi_d2iz+0x36>
  412896:	d511      	bpl.n	4128bc <__aeabi_d2iz+0x30>
  412898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41289c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4128a0:	d912      	bls.n	4128c8 <__aeabi_d2iz+0x3c>
  4128a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4128a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4128aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4128ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4128b2:	fa23 f002 	lsr.w	r0, r3, r2
  4128b6:	bf18      	it	ne
  4128b8:	4240      	negne	r0, r0
  4128ba:	4770      	bx	lr
  4128bc:	f04f 0000 	mov.w	r0, #0
  4128c0:	4770      	bx	lr
  4128c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4128c6:	d105      	bne.n	4128d4 <__aeabi_d2iz+0x48>
  4128c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4128cc:	bf08      	it	eq
  4128ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4128d2:	4770      	bx	lr
  4128d4:	f04f 0000 	mov.w	r0, #0
  4128d8:	4770      	bx	lr
  4128da:	bf00      	nop

004128dc <__aeabi_uldivmod>:
  4128dc:	b953      	cbnz	r3, 4128f4 <__aeabi_uldivmod+0x18>
  4128de:	b94a      	cbnz	r2, 4128f4 <__aeabi_uldivmod+0x18>
  4128e0:	2900      	cmp	r1, #0
  4128e2:	bf08      	it	eq
  4128e4:	2800      	cmpeq	r0, #0
  4128e6:	bf1c      	itt	ne
  4128e8:	f04f 31ff 	movne.w	r1, #4294967295
  4128ec:	f04f 30ff 	movne.w	r0, #4294967295
  4128f0:	f000 b97a 	b.w	412be8 <__aeabi_idiv0>
  4128f4:	f1ad 0c08 	sub.w	ip, sp, #8
  4128f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4128fc:	f000 f806 	bl	41290c <__udivmoddi4>
  412900:	f8dd e004 	ldr.w	lr, [sp, #4]
  412904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  412908:	b004      	add	sp, #16
  41290a:	4770      	bx	lr

0041290c <__udivmoddi4>:
  41290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412910:	468c      	mov	ip, r1
  412912:	460d      	mov	r5, r1
  412914:	4604      	mov	r4, r0
  412916:	9e08      	ldr	r6, [sp, #32]
  412918:	2b00      	cmp	r3, #0
  41291a:	d151      	bne.n	4129c0 <__udivmoddi4+0xb4>
  41291c:	428a      	cmp	r2, r1
  41291e:	4617      	mov	r7, r2
  412920:	d96d      	bls.n	4129fe <__udivmoddi4+0xf2>
  412922:	fab2 fe82 	clz	lr, r2
  412926:	f1be 0f00 	cmp.w	lr, #0
  41292a:	d00b      	beq.n	412944 <__udivmoddi4+0x38>
  41292c:	f1ce 0c20 	rsb	ip, lr, #32
  412930:	fa01 f50e 	lsl.w	r5, r1, lr
  412934:	fa20 fc0c 	lsr.w	ip, r0, ip
  412938:	fa02 f70e 	lsl.w	r7, r2, lr
  41293c:	ea4c 0c05 	orr.w	ip, ip, r5
  412940:	fa00 f40e 	lsl.w	r4, r0, lr
  412944:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  412948:	0c25      	lsrs	r5, r4, #16
  41294a:	fbbc f8fa 	udiv	r8, ip, sl
  41294e:	fa1f f987 	uxth.w	r9, r7
  412952:	fb0a cc18 	mls	ip, sl, r8, ip
  412956:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  41295a:	fb08 f309 	mul.w	r3, r8, r9
  41295e:	42ab      	cmp	r3, r5
  412960:	d90a      	bls.n	412978 <__udivmoddi4+0x6c>
  412962:	19ed      	adds	r5, r5, r7
  412964:	f108 32ff 	add.w	r2, r8, #4294967295
  412968:	f080 8123 	bcs.w	412bb2 <__udivmoddi4+0x2a6>
  41296c:	42ab      	cmp	r3, r5
  41296e:	f240 8120 	bls.w	412bb2 <__udivmoddi4+0x2a6>
  412972:	f1a8 0802 	sub.w	r8, r8, #2
  412976:	443d      	add	r5, r7
  412978:	1aed      	subs	r5, r5, r3
  41297a:	b2a4      	uxth	r4, r4
  41297c:	fbb5 f0fa 	udiv	r0, r5, sl
  412980:	fb0a 5510 	mls	r5, sl, r0, r5
  412984:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  412988:	fb00 f909 	mul.w	r9, r0, r9
  41298c:	45a1      	cmp	r9, r4
  41298e:	d909      	bls.n	4129a4 <__udivmoddi4+0x98>
  412990:	19e4      	adds	r4, r4, r7
  412992:	f100 33ff 	add.w	r3, r0, #4294967295
  412996:	f080 810a 	bcs.w	412bae <__udivmoddi4+0x2a2>
  41299a:	45a1      	cmp	r9, r4
  41299c:	f240 8107 	bls.w	412bae <__udivmoddi4+0x2a2>
  4129a0:	3802      	subs	r0, #2
  4129a2:	443c      	add	r4, r7
  4129a4:	eba4 0409 	sub.w	r4, r4, r9
  4129a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4129ac:	2100      	movs	r1, #0
  4129ae:	2e00      	cmp	r6, #0
  4129b0:	d061      	beq.n	412a76 <__udivmoddi4+0x16a>
  4129b2:	fa24 f40e 	lsr.w	r4, r4, lr
  4129b6:	2300      	movs	r3, #0
  4129b8:	6034      	str	r4, [r6, #0]
  4129ba:	6073      	str	r3, [r6, #4]
  4129bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4129c0:	428b      	cmp	r3, r1
  4129c2:	d907      	bls.n	4129d4 <__udivmoddi4+0xc8>
  4129c4:	2e00      	cmp	r6, #0
  4129c6:	d054      	beq.n	412a72 <__udivmoddi4+0x166>
  4129c8:	2100      	movs	r1, #0
  4129ca:	e886 0021 	stmia.w	r6, {r0, r5}
  4129ce:	4608      	mov	r0, r1
  4129d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4129d4:	fab3 f183 	clz	r1, r3
  4129d8:	2900      	cmp	r1, #0
  4129da:	f040 808e 	bne.w	412afa <__udivmoddi4+0x1ee>
  4129de:	42ab      	cmp	r3, r5
  4129e0:	d302      	bcc.n	4129e8 <__udivmoddi4+0xdc>
  4129e2:	4282      	cmp	r2, r0
  4129e4:	f200 80fa 	bhi.w	412bdc <__udivmoddi4+0x2d0>
  4129e8:	1a84      	subs	r4, r0, r2
  4129ea:	eb65 0503 	sbc.w	r5, r5, r3
  4129ee:	2001      	movs	r0, #1
  4129f0:	46ac      	mov	ip, r5
  4129f2:	2e00      	cmp	r6, #0
  4129f4:	d03f      	beq.n	412a76 <__udivmoddi4+0x16a>
  4129f6:	e886 1010 	stmia.w	r6, {r4, ip}
  4129fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4129fe:	b912      	cbnz	r2, 412a06 <__udivmoddi4+0xfa>
  412a00:	2701      	movs	r7, #1
  412a02:	fbb7 f7f2 	udiv	r7, r7, r2
  412a06:	fab7 fe87 	clz	lr, r7
  412a0a:	f1be 0f00 	cmp.w	lr, #0
  412a0e:	d134      	bne.n	412a7a <__udivmoddi4+0x16e>
  412a10:	1beb      	subs	r3, r5, r7
  412a12:	0c3a      	lsrs	r2, r7, #16
  412a14:	fa1f fc87 	uxth.w	ip, r7
  412a18:	2101      	movs	r1, #1
  412a1a:	fbb3 f8f2 	udiv	r8, r3, r2
  412a1e:	0c25      	lsrs	r5, r4, #16
  412a20:	fb02 3318 	mls	r3, r2, r8, r3
  412a24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  412a28:	fb0c f308 	mul.w	r3, ip, r8
  412a2c:	42ab      	cmp	r3, r5
  412a2e:	d907      	bls.n	412a40 <__udivmoddi4+0x134>
  412a30:	19ed      	adds	r5, r5, r7
  412a32:	f108 30ff 	add.w	r0, r8, #4294967295
  412a36:	d202      	bcs.n	412a3e <__udivmoddi4+0x132>
  412a38:	42ab      	cmp	r3, r5
  412a3a:	f200 80d1 	bhi.w	412be0 <__udivmoddi4+0x2d4>
  412a3e:	4680      	mov	r8, r0
  412a40:	1aed      	subs	r5, r5, r3
  412a42:	b2a3      	uxth	r3, r4
  412a44:	fbb5 f0f2 	udiv	r0, r5, r2
  412a48:	fb02 5510 	mls	r5, r2, r0, r5
  412a4c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  412a50:	fb0c fc00 	mul.w	ip, ip, r0
  412a54:	45a4      	cmp	ip, r4
  412a56:	d907      	bls.n	412a68 <__udivmoddi4+0x15c>
  412a58:	19e4      	adds	r4, r4, r7
  412a5a:	f100 33ff 	add.w	r3, r0, #4294967295
  412a5e:	d202      	bcs.n	412a66 <__udivmoddi4+0x15a>
  412a60:	45a4      	cmp	ip, r4
  412a62:	f200 80b8 	bhi.w	412bd6 <__udivmoddi4+0x2ca>
  412a66:	4618      	mov	r0, r3
  412a68:	eba4 040c 	sub.w	r4, r4, ip
  412a6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  412a70:	e79d      	b.n	4129ae <__udivmoddi4+0xa2>
  412a72:	4631      	mov	r1, r6
  412a74:	4630      	mov	r0, r6
  412a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412a7a:	f1ce 0420 	rsb	r4, lr, #32
  412a7e:	fa05 f30e 	lsl.w	r3, r5, lr
  412a82:	fa07 f70e 	lsl.w	r7, r7, lr
  412a86:	fa20 f804 	lsr.w	r8, r0, r4
  412a8a:	0c3a      	lsrs	r2, r7, #16
  412a8c:	fa25 f404 	lsr.w	r4, r5, r4
  412a90:	ea48 0803 	orr.w	r8, r8, r3
  412a94:	fbb4 f1f2 	udiv	r1, r4, r2
  412a98:	ea4f 4518 	mov.w	r5, r8, lsr #16
  412a9c:	fb02 4411 	mls	r4, r2, r1, r4
  412aa0:	fa1f fc87 	uxth.w	ip, r7
  412aa4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  412aa8:	fb01 f30c 	mul.w	r3, r1, ip
  412aac:	42ab      	cmp	r3, r5
  412aae:	fa00 f40e 	lsl.w	r4, r0, lr
  412ab2:	d909      	bls.n	412ac8 <__udivmoddi4+0x1bc>
  412ab4:	19ed      	adds	r5, r5, r7
  412ab6:	f101 30ff 	add.w	r0, r1, #4294967295
  412aba:	f080 808a 	bcs.w	412bd2 <__udivmoddi4+0x2c6>
  412abe:	42ab      	cmp	r3, r5
  412ac0:	f240 8087 	bls.w	412bd2 <__udivmoddi4+0x2c6>
  412ac4:	3902      	subs	r1, #2
  412ac6:	443d      	add	r5, r7
  412ac8:	1aeb      	subs	r3, r5, r3
  412aca:	fa1f f588 	uxth.w	r5, r8
  412ace:	fbb3 f0f2 	udiv	r0, r3, r2
  412ad2:	fb02 3310 	mls	r3, r2, r0, r3
  412ad6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  412ada:	fb00 f30c 	mul.w	r3, r0, ip
  412ade:	42ab      	cmp	r3, r5
  412ae0:	d907      	bls.n	412af2 <__udivmoddi4+0x1e6>
  412ae2:	19ed      	adds	r5, r5, r7
  412ae4:	f100 38ff 	add.w	r8, r0, #4294967295
  412ae8:	d26f      	bcs.n	412bca <__udivmoddi4+0x2be>
  412aea:	42ab      	cmp	r3, r5
  412aec:	d96d      	bls.n	412bca <__udivmoddi4+0x2be>
  412aee:	3802      	subs	r0, #2
  412af0:	443d      	add	r5, r7
  412af2:	1aeb      	subs	r3, r5, r3
  412af4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  412af8:	e78f      	b.n	412a1a <__udivmoddi4+0x10e>
  412afa:	f1c1 0720 	rsb	r7, r1, #32
  412afe:	fa22 f807 	lsr.w	r8, r2, r7
  412b02:	408b      	lsls	r3, r1
  412b04:	fa05 f401 	lsl.w	r4, r5, r1
  412b08:	ea48 0303 	orr.w	r3, r8, r3
  412b0c:	fa20 fe07 	lsr.w	lr, r0, r7
  412b10:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  412b14:	40fd      	lsrs	r5, r7
  412b16:	ea4e 0e04 	orr.w	lr, lr, r4
  412b1a:	fbb5 f9fc 	udiv	r9, r5, ip
  412b1e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  412b22:	fb0c 5519 	mls	r5, ip, r9, r5
  412b26:	fa1f f883 	uxth.w	r8, r3
  412b2a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  412b2e:	fb09 f408 	mul.w	r4, r9, r8
  412b32:	42ac      	cmp	r4, r5
  412b34:	fa02 f201 	lsl.w	r2, r2, r1
  412b38:	fa00 fa01 	lsl.w	sl, r0, r1
  412b3c:	d908      	bls.n	412b50 <__udivmoddi4+0x244>
  412b3e:	18ed      	adds	r5, r5, r3
  412b40:	f109 30ff 	add.w	r0, r9, #4294967295
  412b44:	d243      	bcs.n	412bce <__udivmoddi4+0x2c2>
  412b46:	42ac      	cmp	r4, r5
  412b48:	d941      	bls.n	412bce <__udivmoddi4+0x2c2>
  412b4a:	f1a9 0902 	sub.w	r9, r9, #2
  412b4e:	441d      	add	r5, r3
  412b50:	1b2d      	subs	r5, r5, r4
  412b52:	fa1f fe8e 	uxth.w	lr, lr
  412b56:	fbb5 f0fc 	udiv	r0, r5, ip
  412b5a:	fb0c 5510 	mls	r5, ip, r0, r5
  412b5e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  412b62:	fb00 f808 	mul.w	r8, r0, r8
  412b66:	45a0      	cmp	r8, r4
  412b68:	d907      	bls.n	412b7a <__udivmoddi4+0x26e>
  412b6a:	18e4      	adds	r4, r4, r3
  412b6c:	f100 35ff 	add.w	r5, r0, #4294967295
  412b70:	d229      	bcs.n	412bc6 <__udivmoddi4+0x2ba>
  412b72:	45a0      	cmp	r8, r4
  412b74:	d927      	bls.n	412bc6 <__udivmoddi4+0x2ba>
  412b76:	3802      	subs	r0, #2
  412b78:	441c      	add	r4, r3
  412b7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  412b7e:	eba4 0408 	sub.w	r4, r4, r8
  412b82:	fba0 8902 	umull	r8, r9, r0, r2
  412b86:	454c      	cmp	r4, r9
  412b88:	46c6      	mov	lr, r8
  412b8a:	464d      	mov	r5, r9
  412b8c:	d315      	bcc.n	412bba <__udivmoddi4+0x2ae>
  412b8e:	d012      	beq.n	412bb6 <__udivmoddi4+0x2aa>
  412b90:	b156      	cbz	r6, 412ba8 <__udivmoddi4+0x29c>
  412b92:	ebba 030e 	subs.w	r3, sl, lr
  412b96:	eb64 0405 	sbc.w	r4, r4, r5
  412b9a:	fa04 f707 	lsl.w	r7, r4, r7
  412b9e:	40cb      	lsrs	r3, r1
  412ba0:	431f      	orrs	r7, r3
  412ba2:	40cc      	lsrs	r4, r1
  412ba4:	6037      	str	r7, [r6, #0]
  412ba6:	6074      	str	r4, [r6, #4]
  412ba8:	2100      	movs	r1, #0
  412baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412bae:	4618      	mov	r0, r3
  412bb0:	e6f8      	b.n	4129a4 <__udivmoddi4+0x98>
  412bb2:	4690      	mov	r8, r2
  412bb4:	e6e0      	b.n	412978 <__udivmoddi4+0x6c>
  412bb6:	45c2      	cmp	sl, r8
  412bb8:	d2ea      	bcs.n	412b90 <__udivmoddi4+0x284>
  412bba:	ebb8 0e02 	subs.w	lr, r8, r2
  412bbe:	eb69 0503 	sbc.w	r5, r9, r3
  412bc2:	3801      	subs	r0, #1
  412bc4:	e7e4      	b.n	412b90 <__udivmoddi4+0x284>
  412bc6:	4628      	mov	r0, r5
  412bc8:	e7d7      	b.n	412b7a <__udivmoddi4+0x26e>
  412bca:	4640      	mov	r0, r8
  412bcc:	e791      	b.n	412af2 <__udivmoddi4+0x1e6>
  412bce:	4681      	mov	r9, r0
  412bd0:	e7be      	b.n	412b50 <__udivmoddi4+0x244>
  412bd2:	4601      	mov	r1, r0
  412bd4:	e778      	b.n	412ac8 <__udivmoddi4+0x1bc>
  412bd6:	3802      	subs	r0, #2
  412bd8:	443c      	add	r4, r7
  412bda:	e745      	b.n	412a68 <__udivmoddi4+0x15c>
  412bdc:	4608      	mov	r0, r1
  412bde:	e708      	b.n	4129f2 <__udivmoddi4+0xe6>
  412be0:	f1a8 0802 	sub.w	r8, r8, #2
  412be4:	443d      	add	r5, r7
  412be6:	e72b      	b.n	412a40 <__udivmoddi4+0x134>

00412be8 <__aeabi_idiv0>:
  412be8:	4770      	bx	lr
  412bea:	bf00      	nop
  412bec:	2d6e4f22 	.word	0x2d6e4f22
  412bf0:	70696843 	.word	0x70696843
  412bf4:	72695620 	.word	0x72695620
  412bf8:	6c617574 	.word	0x6c617574
  412bfc:	6d654d20 	.word	0x6d654d20
  412c00:	2279726f 	.word	0x2279726f
  412c04:	00000000 	.word	0x00000000
  412c08:	31333231 	.word	0x31333231
  412c0c:	32313332 	.word	0x32313332
  412c10:	33323133 	.word	0x33323133
  412c14:	00000000 	.word	0x00000000

00412c18 <xDefaultPartARPPacketHeader>:
  412c18:	ffffffff 0000ffff 00000000 01000608     ................
  412c28:	04060008 00000100 00000000 00000000     ................
	...
  412c40:	43484476 6f725050 73736563 666f203a     vDHCPProcess: of
  412c50:	20726566 69786c25 00000a70 43484476     fer %lxip...vDHC
  412c60:	6f725050 73736563 6964203a 766f6373     PProcess: discov
  412c70:	000a7265 43484476 6f725050 73736563     er..vDHCPProcess
  412c80:	6572203a 20796c70 69786c25 00000a70     : reply %lxip...

00412c90 <ucDHCPDiscoverOptions.10425>:
  412c90:	3d010135 00000006 37000000 06030103     5..=.......7....
  412ca0:	000000ff                                ....

00412ca4 <ucDHCPRequestOptions.10418>:
  412ca4:	3d030135 00000006 32000000 00000004     5..=.......2....
  412cb4:	00043600 ff000000 49767270 6974696e     .6......prvIniti
  412cc4:	73696c61 43484465 73203a50 74726174     aliseDHCP: start
  412cd4:	74666120 25207265 7420756c 736b6369      after %lu ticks
  412ce4:	0000000a 43484476 6f725050 73736563     ....vDHCPProcess
  412cf4:	6974203a 756f656d 6c252074 69742075     : timeout %lu ti
  412d04:	0a736b63 00000000 43484476 6f725050     cks.....vDHCPPro
  412d14:	73736563 6166203a 64656c69 206f7420     cess: failed to 
  412d24:	656e6567 65746172 72206120 6f646e61     generate a rando
  412d34:	7254206d 61736e61 6f697463 4449206e     m Transaction ID
  412d44:	0000000a 43484476 6f725050 73736563     ....vDHCPProcess
  412d54:	6967203a 676e6976 20707520 20756c25     : giving up %lu 
  412d64:	6c25203e 69742075 0a736b63 00000000     > %lu ticks.....
  412d74:	43484476 6f725050 73736563 6361203a     vDHCPProcess: ac
  412d84:	2064656b 69786c25 00000a70 6b6f6f6c     ked %lxip...look
  412d94:	0070752d 00646461 50767270 65636f72     -up.add.prvProce
  412da4:	4e447373 63614353 203a6568 203a7325     ssDNSCache: %s: 
  412db4:	27732527 25204020 7069786c 0000000a     '%s' @ %lxip....

00412dc4 <xLLMNR_MacAdress>:
  412dc4:	005e0001 0000fc00 742d5049 006b7361     ..^.....IP-task.
  412dd4:	65657246 534f5452 4950495f 3a74696e     FreeRTOS_IPInit:
  412de4:	654e7820 726f7774 6675426b 73726566      xNetworkBuffers
  412df4:	74696e49 696c6169 29286573 69616620     Initialise() fai
  412e04:	0a64656c 00000000 65657246 534f5452     led.....FreeRTOS
  412e14:	4950495f 3a74696e 74654e20 6b726f77     _IPInit: Network
  412e24:	65766520 7120746e 65756575 756f6320      event queue cou
  412e34:	6e20646c 6220746f 72632065 65746165     ld not be create
  412e44:	00000a64 49767270 73615450 7473206b     d...prvIPTask st
  412e54:	65747261 00000a64 00504455 00504354     arted...UDP.TCP.
  412e64:	504d4749 00000000 504d4349 00000000     IGMP....ICMP....
  412e74:	65477375 6172656e 72506574 636f746f     usGenerateProtoc
  412e84:	68436c6f 736b6365 255b6d75 203a5d73     olChecksum[%s]: 
  412e94:	206e656c 61766e69 3a64696c 756c2520     len invalid: %lu
  412ea4:	0000000a 65477375 6172656e 72506574     ....usGeneratePr
  412eb4:	636f746f 68436c6f 736b6365 255b6d75     otocolChecksum[%
  412ec4:	203a5d73 20637263 70617773 3025203a     s]: crc swap: %0
  412ed4:	000a5834 65477375 6172656e 72506574     4X..usGeneratePr
  412ee4:	636f746f 68436c6f 736b6365 255b6d75     otocolChecksum[%
  412ef4:	203a5d73 25204449 3a583430 6f726620     s]: ID %04X: fro
  412f04:	6c25206d 20706978 25206f74 7069786c     m %lxip to %lxip
  412f14:	64616220 63726320 3025203a 000a5834      bad crc: %04X..

00412f24 <xBroadcastMACAddress>:
  412f24:	ffffffff 0000ffff                       ........

00412f2c <xNetworkDownEvent.10427>:
	...
  412f34:	6e655378 65764564 7453746e 74637572     xSendEventStruct
  412f44:	50496f54 6b736154 4143203a 4f4e204e     ToIPTask: CAN NO
  412f54:	44412054 64252044 0000000a 636f5376     T ADD %d....vSoc
  412f64:	4274656b 3a646e69 636f5320 2074656b     ketBind: Socket 
  412f74:	65726c61 20796461 6e756f62 6f742064     already bound to
  412f84:	0a642520 00000000 65657246 534f5452      %d.....FreeRTOS
  412f94:	6e69625f 73203a64 20646e65 6e657665     _bind: send even
  412fa4:	61662074 64656c69 0000000a 65657246     t failed....Free
  412fb4:	534f5452 6f6c635f 6f736573 74656b63     RTOS_closesocket
  412fc4:	6166203a 64656c69 0000000a 00444e53     : failed....SND.
  412fd4:	00564352 20746553 255f4f53 46554273     RCV.Set SO_%sBUF
  412fe4:	7277203a 20676e6f 6b636f73 74207465     : wrong socket t
  412ff4:	0a657079 00000000 20746553 255f4f53     ype.....Set SO_%
  413004:	46554273 7562203a 72656666 726c6120     sBUF: buffer alr
  413014:	79646165 65726320 64657461 0000000a     eady created....
  413024:	20746553 575f4f53 505f4e49 3a504f52     Set SO_WIN_PROP:
  413034:	6f727720 7320676e 656b636f 79742074      wrong socket ty
  413044:	000a6570 20746553 575f4f53 505f4e49     pe..Set SO_WIN_P
  413054:	3a504f52 66756220 20726566 65726c61     ROP: buffer alre
  413064:	20796461 61657263 0a646574 00000000     ady created.....
  413074:	5043546c 52646441 74616478 61203a61     lTCPAddRxdata: a
  413084:	6c252074 25203a64 252f646c 6220756c     t %ld: %ld/%lu b
  413094:	73657479 61742820 25206c69 6820756c     ytes (tail %lu h
  4130a4:	20646165 20756c25 63617073 6c252065     ead %lu space %l
  4130b4:	72662075 20746e6f 29756c25 0000000a     u front %lu)....
  4130c4:	54767270 72435043 65746165 65727453     prvTCPCreateStre
  4130d4:	203a6d61 6c6c616d 6620636f 656c6961     am: malloc faile
  4130e4:	00000a64 54767270 72435043 65746165     d...prvTCPCreate
  4130f4:	65727453 203a6d61 53786325 61657274     Stream: %cxStrea
  413104:	7263206d 65746165 6c252064 79622075     m created %lu by
  413114:	20736574 746f7428 25206c61 0a29756c     tes (total %lu).
  413124:	00000000 00004354 00004455 636f5376     ....TC..UD..vSoc
  413134:	4274656b 3a646e69 50732520 726f7020     ketBind: %sP por
  413144:	64252074 206e6920 0a657375 00000000     t %d in use.....
  413154:	006e6572 74736f4c 6f53203a 74656b63     ren.Lost: Socket
  413164:	20752520 20776f6e 20736168 2f207525      %u now has %u /
  413174:	20752520 6c696863 0a732564 00000000      %u child%s.....
  413184:	65657246 534f5452 6f6c635f 6f736573     FreeRTOS_closeso
  413194:	74656b63 2075255b 25206f74 7069786c     cket[%u to %lxip
  4131a4:	5d75253a 7562203a 72656666 6c252073     :%u]: buffers %l
  4131b4:	6f732075 20736b63 0a756c25 00000000     u socks %lu.....
  4131c4:	53554c50 5043542d 746f6e20 696e6920     PLUS-TCP not ini
  4131d4:	6c616974 64657a69 0000000a 746f7250     tialized....Prot
  4131e4:	726f5020 50492074 6d65522d 0965746f      Port IP-Remote.
  4131f4:	3a202020 726f5020 52202074 5320542f        : Port  R/T S
  413204:	75746174 20200973 696c4120 20206576     tatus.   Alive  
  413214:	756f6d74 68432074 0a646c69 00000000     tmout Child.....
  413224:	2f642520 00006425 20504354 20643525      %d/%d..TCP %5d 
  413234:	36312d25 7069786c 6435253a 2f642520     %-16lxip:%5d %d/
  413244:	25206425 2e33312d 20733331 756c3625     %d %-13.13s %6lu
  413254:	75362520 000a7325 20504455 74726f50      %6u%s..UDP Port
  413264:	75352520 0000000a 65657246 534f5452      %5u....FreeRTOS
  413274:	74656e5f 74617473 6c25203a 6f732075     _netstat: %lu so
  413284:	74656b63 6c252073 203c2075 20756c25     ckets %lu < %lu 
  413294:	6425203c 66756220 73726566 65726620     < %d buffers fre
  4132a4:	00000a65                                e...

004132a8 <pcStateNames>:
  4132a8:	004134bc 004134c4 00413598 004134d0     .4A..4A..5A..4A.
  4132b8:	00413588 004134dc 004134ec 004134f8     .5A..4A..4A..4A.
  4132c8:	00413504 00413510 0041351c 00413528     .5A..5A..5A.(5A.
  4132d8:	00413534 696d694c 28207374 6e697375     45A.Limits (usin
  4132e8:	203a2967 20504354 206e6957 657a6973     g): TCP Win size
  4132f8:	756c2520 74615720 25207265 3c20756c      %lu Water %lu <
  413308:	6c25203d 3d3c2075 756c2520 0000000a     = %lu <= %lu....
  413318:	3a504354 6e657320 49462064 43412b4e     TCP: send FIN+AC
  413328:	6128204b 25206b63 202c756c 2f727563     K (ack %lu, cur/
  413338:	2074786e 2f756c25 29756c25 72756f20     nxt %lu/%lu) our
  413348:	4e716553 6c252072 207c2075 25207852     SeqNr %lu | Rx %
  413358:	000a756c 6e6e6f43 5b746365 69786c25     lu..Connect[%lxi
  413368:	75253a70 6e203a5d 20747865 656d6974     p:%u]: next time
  413378:	2074756f 203a7525 20756c25 000a736d     out %u: %lu ms..
  413388:	74537875 6d616572 66667542 65477265     uxStreamBufferGe
  413398:	70203a74 2520736f 6f20756c 20736666     t: pos %lu offs 
  4133a8:	20756c25 796c6e6f 756c2520 203d2120     %lu only %lu != 
  4133b8:	0a756c25 00000000 63656843 6f6c436b     %lu.....CheckClo
  4133c8:	25206573 3c20756c 6c25203d 25282075     se %lu <= %lu (%
  4133d8:	3c20756c 6c25203d 3d3c2075 756c2520     lu <= %lu <= %lu
  4133e8:	00000a29 7065656b 696c612d 203a6576     )...keep-alive: 
  4133f8:	69766967 7520676e 6c252070 3a706978     giving up %lxip:
  413408:	000a7525 7065656b 696c612d 203a6576     %u..keep-alive: 
  413418:	69786c25 75253a70 756f6320 2520746e     %lxip:%u count %
  413428:	00000a75 504f5453 00000000 00204f47     u...STOP....GO .
  413438:	203a7325 69786c25 75253a70 255b203a     %s: %lxip:%u: [%
  413448:	3c20756c 756c2520 6977205d 7a69536e     lu < %lu] winSiz
  413458:	6c252065 00000a64 70707553 73736572     e %ld...Suppress
  413468:	4e494620 726f6620 756c2520 25202b20      FIN for %lu + %
  413478:	3c20756c 756c2520 0000000a 57767270     lu < %lu....prvW
  413488:	63536e69 46656c61 6f746361 75203a72     inScaleFactor: u
  413498:	57785278 69536e69 2520657a 4d20756c     xRxWinSize %lu M
  4134a8:	25205353 4620756c 6f746361 75252072     SS %lu Factor %u
  4134b8:	0000000a 4f4c4365 00444553 50435465     ....eCLOSED.eTCP
  4134c8:	53494c5f 004e4554 4e595365 5249465f     _LISTEN.eSYN_FIR
  4134d8:	00005453 54534565 494c4241 44454853     ST..eESTABLISHED
  4134e8:	00000000 4e494665 4941575f 00315f54     ....eFIN_WAIT_1.
  4134f8:	4e494665 4941575f 00325f54 4f4c4365     eFIN_WAIT_2.eCLO
  413508:	575f4553 00544941 4f4c4365 474e4953     SE_WAIT.eCLOSING
  413518:	00000000 53414c65 43415f54 0000004b     ....eLAST_ACK...
  413528:	4d495465 41575f45 00005449 4b4e5565     eTIME_WAIT..eUNK
  413538:	4e574f4e 00000000 50435476 74617453     NOWN....vTCPStat
  413548:	61684365 3a65676e 6f6c4320 676e6973     eChange: Closing
  413558:	636f7320 0a74656b 00000000 6b636f53      socket.....Sock
  413568:	25207465 3e2d2064 786c2520 253a7069     et %d -> %lxip:%
  413578:	74532075 20657461 3e2d7325 000a7325     u State %s->%s..
  413588:	4e595365 4345525f 45564945 00000044     eSYN_RECEIVED...
  413598:	4e4f4365 5443454e 4e59535f 00000000     eCONNECT_SYN....
  4135a8:	69746361 00006576 73736170 00657669     active..passive.
  4135b8:	3a504354 206f4e20 69746361 73206576     TCP: No active s
  4135c8:	656b636f 6e6f2074 726f7020 64252074     ocket on port %d
  4135d8:	6c252820 3a706978 0a296425 00000000      (%lxip:%d).....
  4135e8:	63256325 63256325 63256325 63256325     %c%c%c%c%c%c%c%c
  4135f8:	00006325 3a504354 72655320 20726576     %c..TCP: Server 
  413608:	276e6163 61682074 656c646e 616c6620     can't handle fla
  413618:	203a7367 66207325 206d6f72 69786c25     gs: %s from %lxi
  413628:	75253a70 206f7420 74726f70 0a752520     p:%u to port %u.
  413638:	00000000 63656843 53203a6b 656b636f     ....Check: Socke
  413648:	75252074 726c6120 79646165 73616820     t %u already has
  413658:	20752520 7525202f 69686320 7325646c      %u / %u child%s
  413668:	0000000a 3a504354 73694c20 3a6e6574     ....TCP: Listen:
  413678:	77656e20 636f7320 2074656b 6c696166      new socket fail
  413688:	000a6465 6e696147 6f53203a 74656b63     ed..Gain: Socket
  413698:	20752520 20776f6e 20736168 2f207525      %u now has %u /
  4136a8:	20752520 6c696863 0a732564 00000000      %u child%s.....
  4136b8:	3a504354 73694c20 3a6e6574 77656e20     TCP: Listen: new
  4136c8:	636f7320 2074656b 646e6962 72726520      socket bind err
  4136d8:	000a726f 3a504354 54535220 63657220     or..TCP: RST rec
  4136e8:	65766965 72662064 25206d6f 7069786c     eived from %lxip
  4136f8:	2075253a 20726f66 000a7525 3a504354     :%u for %u..TCP:
  413708:	4e595320 656e7520 63657078 20646574      SYN unexpected 
  413718:	6d6f7266 786c2520 253a7069 00000a75     from %lxip:%u...
  413728:	2053534d 6e616863 25206567 3e2d2075     MSS change %u ->
  413738:	756c2520 0000000a 6e616843 6d206567      %lu....Change m
  413748:	25207373 3e3d2064 756c2520 0000000a     ss %d => %lu....
  413758:	5043546c 52646441 74616478 73203a61     lTCPAddRxdata: s
  413768:	65726f74 6c252064 202f2064 20756c25     tored %ld / %lu 
  413778:	65747962 0a3f3f73 00000000 4b434153     bytes??.....SACK
  413788:	2c64255b 3a5d6425 74706f20 206e656c     [%d,%d]: optlen 
  413798:	20756c25 646e6573 20676e69 20756c25     %lu sending %lu 
  4137a8:	6c25202d 00000a75 3a53534d 6e657320     - %lu...MSS: sen
  4137b8:	676e6964 0a642520 00000000 4e595365     ding %d.....eSYN
  4137c8:	4345525f 45564945 41203a44 65204b43     _RECEIVED: ACK e
  4137d8:	63657078 2c646574 746f6e20 4e595320     xpected, not SYN
  4137e8:	6570203a 6d207265 65737369 756f2064     : peer missed ou
  4137f8:	59532072 43412b4e 00000a4b 203a7325     r SYN+ACK...%s: 
  413808:	67616c66 30252073 65205834 63657078     flags %04X expec
  413818:	2c646574 746f6e20 34302520 00000a58     ted, not %04X...
  413828:	3a504354 20732520 3d206425 6c25203e     TCP: %s %d => %l
  413838:	3a706978 73206425 45207465 42415453     xip:%d set ESTAB
  413848:	63732820 6e696c61 75252067 00000a29      (scaling %u)...
  413858:	75666552 676e6973 4e494620 2c75255b     Refusing FIN[%u,
  413868:	3a5d7525 43785220 6c706d6f 756c2520     %u]: RxCompl %lu
  413878:	20787420 656e6f64 646c2520 0000000a      tx done %ld....
  413888:	75666552 676e6973 4e494620 7852203a     Refusing FIN: Rx
  413898:	746f6e20 6d6f6320 74656c70 6c252065      not complete %l
  4138a8:	63282064 25207275 6820756c 20686769     d (cur %lu high 
  4138b8:	29756c25 0000000a 3a504354 4e494620     %lu)....TCP: FIN
  4138c8:	63657220 65766965 6d202c64 6c437961      received, mayCl
  4138d8:	2065736f 6c25203d 52282064 6c252078     ose = %ld (Rx %l
  4138e8:	654c2075 6c25206e 54202c64 6c252078     u Len %ld, Tx %l
  4138f8:	000a2975 646e6553 2d75255b 5d75253e     u)..Send[%u->%u]
  413908:	6c656420 4b434120 756c2520 51455320      del ACK %lu SEQ
  413918:	756c2520 656c2820 6c25206e 74202975      %lu (len %lu) t
  413928:	74756f6d 20752520 6c252064 00000a75     mout %u d %lu...
  413938:	646e6553 2d75255b 5d75253e 6d6d6920     Send[%u->%u] imm
  413948:	4b434120 756c2520 51455320 756c2520      ACK %lu SEQ %lu
  413958:	656c2820 6c25206e 000a2975 50435478      (len %lu)..xTCP
  413968:	63656843 77654e6b 65696c43 305b746e     CheckNewClient[0
  413978:	63203a5d 6e65696c 6e6f2074 726f7020     ]: client on por
  413988:	75252074 0000000a 646e6553 2d75255b     t %u....Send[%u-
  413998:	5d75253e 6c656420 4b434120 756c2520     >%u] del ACK %lu
  4139a8:	51455320 756c2520 656c2820 7525206e      SEQ %lu (len %u
  4139b8:	00000a29 6e6e6f43 3a746365 76696720     )...Connect: giv
  4139c8:	20676e69 25207075 7069786c 0a75253a     ing up %lxip:%u.
  4139d8:	00000000 20505241 20726f66 69786c25     ....ARP for %lxi
  4139e8:	75282070 676e6973 786c2520 3a297069     p (using %lxip):
  4139f8:	3d637220 25206425 3a583230 58323025      rc=%d %02X:%02X
  413a08:	3230253a 30252058 253a5832 3a583230     :%02X %02X:%02X:
  413a18:	58323025 0000000a 53767270 656b636f     %02X....prvSocke
  413a28:	74655374 3a53534d 756c2520 74796220     tSetMSS: %lu byt
  413a38:	66207365 2520726f 7069786c 0a75253a     es for %lxip:%u.
  413a48:	00000000 63616e49 65766974 636f7320     ....Inactive soc
  413a58:	2074656b 736f6c63 203a6465 74726f70     ket closed: port
  413a68:	20752520 206d6572 69786c25 75253a70      %u rem %lxip:%u
  413a78:	61747320 20737574 000a7325 5043546c      status %s..lTCP
  413a88:	646e6957 7852776f 63656843 52203a6b     WindowRxCheck: R
  413a98:	73756665 6c252065 79622075 2c736574     efuse %lu bytes,
  413aa8:	65756420 206f7420 6b63616c 20666f20      due to lack of 
  413ab8:	63617073 25282065 0a29756c 00000000     space (%lu).....
  413ac8:	50435478 646e6957 7852776f 666e6f43     xTCPWindowRxConf
  413ad8:	5b6d7269 3a5d7525 61657320 20686372     irm[%u]: search 
  413ae8:	20756c25 6c252b28 6c253d64 66202975     %lu (+%ld=%lu) f
  413af8:	646e756f 756c2520 252b2820 253d646c     ound %lu (+%ld=%
  413b08:	0a29756c 00000000 5043546c 646e6957     lu).....lTCPWind
  413b18:	7852776f 63656843 64255b6b 5d64252c     owRxCheck[%d,%d]
  413b28:	6572203a 6e617274 756c2520 6f462820     : retran %lu (Fo
  413b38:	20646e75 20756c25 65747962 74612073     und %lu bytes at
  413b48:	756c2520 746e6320 646c2520 00000a29      %lu cnt %ld)...
  413b58:	5043546c 646e6957 7852776f 63656843     lTCPWindowRxChec
  413b68:	52203a6b 73756665 6c252065 6c252b75     k: Refuse %lu+%l
  413b78:	79622075 2c736574 65756420 206f7420     u bytes, due to 
  413b88:	6b63616c 20666f20 63617073 25282065     lack of space (%
  413b98:	0a29756c 00000000 5043546c 646e6957     lu).....lTCPWind
  413ba8:	7852776f 63656843 64255b6b 5d64252c     owRxCheck[%d,%d]
  413bb8:	6573203a 20726e71 20756c25 20707865     : seqnr %lu exp 
  413bc8:	20756c25 73696428 6c252074 53202964     %lu (dist %ld) S
  413bd8:	204b4341 25206f74 000a756c 5043546c     ACK to %lu..lTCP
  413be8:	646e6957 7852776f 63656843 75255b6b     WindowRxCheck[%u
  413bf8:	5d75252c 6573203a 20726e71 20756c25     ,%u]: seqnr %lu 
  413c08:	746e6328 756c2520 00000a29 5043546c     (cnt %lu)...lTCP
  413c18:	646e6957 7854776f 3a646441 64644120     WindowTxAdd: Add
  413c28:	6c342520 79622075 20736574 20726f66      %4lu bytes for 
  413c38:	4e716573 6c252072 656c2075 3425206e     seqNr %lu len %4
  413c48:	2820756c 2074786e 29756c25 736f7020     lu (nxt %lu) pos
  413c58:	756c2520 0000000a 5043546c 646e6957      %lu....lTCPWind
  413c68:	7854776f 3a646441 77654e20 6c342520     owTxAdd: New %4l
  413c78:	79622064 20736574 20726f66 4e716573     d bytes for seqN
  413c88:	6c252072 656c2075 3425206e 2820756c     r %lu len %4lu (
  413c98:	2074786e 29756c25 736f7020 756c2520     nxt %lu) pos %lu
  413ca8:	0000000a 5043546c 646e6957 7854776f     ....lTCPWindowTx
  413cb8:	3a646441 726f5320 61207972 62206c6c     Add: Sorry all b
  413cc8:	65666675 66207372 206c6c75 6e616328     uffers full (can
  413cd8:	206c6563 20646c25 65747962 000a2973     cel %ld bytes)..
  413ce8:	54767270 69575043 776f646e 68437854     prvTCPWindowTxCh
  413cf8:	416b6365 255b6b63 75252e75 25203a5d     eckAck[%u.%u]: %
  413d08:	2d20756c 756c2520 72615020 6c616974     lu - %lu Partial
  413d18:	71657320 636e6575 756e2065 7265626d      sequence number
  413d28:	756c2520 25202d20 000a756c 54767270      %lu - %lu..prvT
  413d38:	69575043 776f646e 68437854 416b6365     CPWindowTxCheckA
  413d48:	203a6b63 20756c25 6c25202d 65522075     ck: %lu - %lu Re
  413d58:	20796461 75716573 65636e65 6d756e20     ady sequence num
  413d68:	20726562 0a756c25 00000000 43546c75     ber %lu.....ulTC
  413d78:	6e695750 54776f64 74654778 2c75255b     PWindowTxGet[%u,
  413d88:	3a5d7525 69615720 65755174 25206575     %u]: WaitQueue %
  413d98:	6220646c 73657479 726f6620 71657320     ld bytes for seq
  413da8:	636e6575 756e2065 7265626d 756c2520     uence number %lu
  413db8:	6c252820 000a2958 43546c75 6e695750      (%lX)..ulTCPWin
  413dc8:	54776f64 74654778 2c75255b 3a5d7525     dowTxGet[%u,%u]:
  413dd8:	696d5820 65755174 25206575 6220646c      XmitQueue %ld b
  413de8:	73657479 726f6620 71657320 636e6575     ytes for sequenc
  413df8:	756e2065 7265626d 756c2520 73772820     e number %lu (ws
  413e08:	756c2520 00000a29 43546c75 6e695750      %lu)...ulTCPWin
  413e18:	54776f64 74654778 2c75255b 3a5d7525     dowTxGet[%u,%u]:
  413e28:	69725020 6575516f 25206575 6220646c      PrioQueue %ld b
  413e38:	73657479 726f6620 71657320 636e6575     ytes for sequenc
  413e48:	756e2065 7265626d 756c2520 73772820     e number %lu (ws
  413e58:	756c2520 00000a29 43546c75 6e695750      %lu)...ulTCPWin
  413e68:	54776f64 74654778 2075255b 6425202d     dowTxGet[%u - %d
  413e78:	43203a5d 676e6168 78542065 6e697720     ]: Change Tx win
  413e88:	3a776f64 756c2520 203e2d20 000a7525     dow: %lu -> %u..
  413e98:	54767270 69575043 776f646e 74736146     prvTCPWindowFast
  413ea8:	72746552 6d736e61 203a7469 75716552     Retransmit: Requ
  413eb8:	20657565 75716573 65636e65 6d756e20     eue sequence num
  413ec8:	20726562 20756c25 6c25203c 00000a75     ber %lu < %lu...
  413ed8:	43546c75 6e695750 54776f64 63615378     ulTCPWindowTxSac
  413ee8:	75255b6b 5d75252c 7266203a 25206d6f     k[%u,%u]: from %
  413ef8:	7420756c 6c25206f 61282075 3d206b63     lu to %lu (ack =
  413f08:	756c2520 00000a29 43767270 74616572      %lu)...prvCreat
  413f18:	63655365 73726f74 616d203a 636f6c6c     eSectors: malloc
  413f28:	756c2520 69616620 0a64656c 00000000      %lu failed.....
  413f38:	50435476 646e6957 7243776f 65746165     vTCPWindowCreate
  413f48:	6f66203a 69572072 6e654c6e 52203d20     : for WinLen = R
  413f58:	78542f78 6c25203a 6c252f75 00000a75     x/Tx: %lu/%lu...
  413f68:	50435478 646e6957 6325776f 77654e78     xTCPWindow%cxNew
  413f78:	7245203a 3a726f72 6c6c6120 67657320     : Error: all seg
  413f88:	746e656d 636f2073 69707563 000a6465     ments occupied..
  413f98:	50435478 646e6957 7852776f 74706d45     xTCPWindowRxEmpt
  413fa8:	63203a79 25207275 6820756c 65686769     y: cur %lu highe
  413fb8:	25207473 2820756c 74706d65 000a2979     st %lu (empty)..

00413fc8 <xBufferAllocFixedSize>:
  413fc8:	00000000 45767270 5243414d 6c6f5078     ....prvEMACRxPol
  413fd8:	43203a6c 6e206e61 7120746f 65756575     l: Can not queue
  413fe8:	74657220 206e7275 6b636170 0a217465      return packet!.
  413ff8:	00000000 45767270 4843414d 6c646e61     ....prvEMACHandl
  414008:	61547265 203a6b73 20594850 6e20534c     erTask: PHY LS n
  414018:	2520776f 00000a64 7774654e 206b726f     ow %d...Network 
  414028:	66667562 3a737265 756c2520 776f6c20     buffers: %lu low
  414038:	20747365 0a756c25 00000000 414d4778     est %lu.....xGMA
  414048:	69615743 3a534c74 646c2520 48502820     CWaitLS: %ld (PH
  414058:	64252059 72662029 25207165 4d20756c     Y %d) freq %lu M
  414068:	00000a7a 43414d45 00000000 454c4449     z...EMAC....IDLE
  414078:	00000000 00000a0a 202a2a2a 41415243     ........*** CRAA
  414088:	202d204d 53544148 74614420 63412061     M - HATS Data Ac
  414098:	73697571 6f697469 6f4d206e 656c7564     quisition Module
  4140a8:	20202020 0a2a2a2a 00000000 202a2a2a         ***.....*** 
  4140b8:	203a5746 302d3732 69542d31 6d316b63     FW: 27-01-Tick1m
  4140c8:	202d2073 6a2f3231 2f656e75 39313032     s - 12/june/2019
  4140d8:	30202d20 20203430 0a2a2a2a 0000000a      - 004  ***.....
  4140e8:	41544144 41525420 4546534e 00000052     DATA TRANSFER...

004140f8 <ucDNSServerAddress>:
  4140f8:	dede43d0                                .C..

004140fc <ucGatewayAddress>:
  4140fc:	0101a8c0                                ....

00414100 <ucIPAddress>:
  414100:	c901a8c0                                ....

00414104 <ucMACAddress>:
  414104:	33221100 00005544                       .."3DU..

0041410c <ucNetMask>:
  41410c:	00ffffff 252e7525 75252e75 0075252e     ....%u.%u.%u.%u.
  41411c:	0a0d0a0d 41205049 65726464 203a7373     ....IP Address: 
  41412c:	0a0d7325 00000000 6e627553 4d207465     %s......Subnet M
  41413c:	3a6b7361 0d732520 0000000a 65746147     ask: %s.....Gate
  41414c:	20796177 72646441 3a737365 0d732520     way Address: %s.
  41415c:	0000000a 20534e44 76726553 41207265     ....DNS Server A
  41416c:	65726464 203a7373 0a0d7325 0a0d0a0d     ddress: %s......
  41417c:	00000000                                ....

00414180 <_global_impure_ptr>:
  414180:	20000100 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  414190:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  4141a0:	46454443 00000000 33323130 37363534     CDEF....01234567
  4141b0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4141c0:	0000296c 00000030                       l)..0...

004141c8 <blanks.7223>:
  4141c8:	20202020 20202020 20202020 20202020                     

004141d8 <zeroes.7224>:
  4141d8:	30303030 30303030 30303030 30303030     0000000000000000

004141e8 <blanks.7217>:
  4141e8:	20202020 20202020 20202020 20202020                     

004141f8 <zeroes.7218>:
  4141f8:	30303030 30303030 30303030 30303030     0000000000000000
  414208:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  414218:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00414228 <__mprec_bigtens>:
  414228:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  414238:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  414248:	7f73bf3c 75154fdd                       <.s..O.u

00414250 <__mprec_tens>:
  414250:	00000000 3ff00000 00000000 40240000     .......?......$@
  414260:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  414270:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  414280:	00000000 412e8480 00000000 416312d0     .......A......cA
  414290:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4142a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4142b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4142c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4142d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4142e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4142f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  414300:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  414310:	79d99db4 44ea7843                       ...yCx.D

00414318 <p05.6055>:
  414318:	00000005 00000019 0000007d              ........}...

00414324 <_ctype_>:
  414324:	20202000 20202020 28282020 20282828     .         ((((( 
  414334:	20202020 20202020 20202020 20202020                     
  414344:	10108820 10101010 10101010 10101010      ...............
  414354:	04040410 04040404 10040404 10101010     ................
  414364:	41411010 41414141 01010101 01010101     ..AAAAAA........
  414374:	01010101 01010101 01010101 10101010     ................
  414384:	42421010 42424242 02020202 02020202     ..BBBBBB........
  414394:	02020202 02020202 02020202 10101010     ................
  4143a4:	00000020 00000000 00000000 00000000      ...............
	...

00414428 <_init>:
  414428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41442a:	bf00      	nop
  41442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41442e:	bc08      	pop	{r3}
  414430:	469e      	mov	lr, r3
  414432:	4770      	bx	lr

00414434 <__init_array_start>:
  414434:	0040f055 	.word	0x0040f055

00414438 <__frame_dummy_init_array_entry>:
  414438:	0040011d                                ..@.

0041443c <_fini>:
  41443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41443e:	bf00      	nop
  414440:	bcf8      	pop	{r3, r4, r5, r6, r7}
  414442:	bc08      	pop	{r3}
  414444:	469e      	mov	lr, r3
  414446:	4770      	bx	lr

00414448 <__fini_array_start>:
  414448:	004000f9 	.word	0x004000f9
